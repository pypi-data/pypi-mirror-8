# Configuration file for raspi-sump
# All configurations should be done in this file and not
# the main raspisump.py program
# This file should be located in the /home/pi/raspi-sump directory

[gpio_pins]
# Trig pin sends the signal.  Value is the number of the GPIO 
# pin on the RaspberryPi
trig_pin = 17

# Echo pin receives the signal.  Value is the number of the GPIO 
# pin on the RaspberryPi
echo_pin = 27


[pit]
# critical_distance is the water level in the sump pit (in centimeters) 
# that will trigger an email sms alert.  
critical_distance = 35 

# The pit_depth is the distance (in centimeters) between the sensor and the
# bottom of the sump pit.
pit_depth = 72


# Raspisump.py should be run with a cron job.  However cron is limited to
# 1 minute as its minimum interval. If you need to monitor the sump level
# more frequently you can set reading_interval to the desired time and
# replace the raspisump.py file with raspisump_alternate.py.  Don't forget
# to actually rename raspisump_alternate.py to raspisump.py.
# The interval in seconds at which raspi-sump will take water readings
# reading_interval = 30


[email]
# SMTP Server requires authentication (0=No, 1=Yes)
# If using localhost or possibly your ISP email this value
# will most likely be 0.  Check your ISP's configuration docs.
# For Gmail set this to 1 and fill out the corresponding 
# username and password values in this file.
smtp_authentication = 0

# SMTP Server uses TLS (0=No, 1=Yes)
# If using localhost or possibly your ISP email this value
# will most likely be 0.  Check your ISP's configuratin docs.
# For Gmail set this to 1.
smtp_tls = 0

# If server requires authentication enter username and password.
# For Gmail, activate these values with your gmail username and password.
# username = 
# password = 

# SMTP Server and Port
# example --  smtp_server = smtp.gmail.com:587
# if using a SMTP server on the Pi use localhost:25
smtp_server = localhost:25

# Notifications will be sent to the following address
# example -- email_to = cellnumber@wireless_carrier (for sms email alerts)
# Can also use a regular email address
email_to = 

# Notification will be coming from the following address
email_from = 
