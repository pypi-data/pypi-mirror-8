# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: distopt/expression.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='distopt/expression.proto',
  package='',
  serialized_pb=_b('\n\x18\x64istopt/expression.proto\">\n\x0cSparseMatrix\x12\x0e\n\x02pr\x18\x01 \x03(\x01\x42\x02\x10\x01\x12\x0e\n\x02jc\x18\x02 \x03(\x03\x42\x02\x10\x01\x12\x0e\n\x02ir\x18\x03 \x03(\x03\x42\x02\x10\x01\" \n\x0b\x44\x65nseMatrix\x12\x11\n\x05value\x18\x01 \x03(\x01\x42\x02\x10\x01\"d\n\x08\x43onstant\x12$\n\rsparse_matrix\x18\x01 \x01(\x0b\x32\r.SparseMatrix\x12\"\n\x0c\x64\x65nse_matrix\x18\x02 \x01(\x0b\x32\x0c.DenseMatrix\x12\x0e\n\x06scalar\x18\x03 \x01(\x01\"\x1f\n\x08Variable\x12\x13\n\x0bvariable_id\x18\x01 \x01(\t\"\x13\n\x04Size\x12\x0b\n\x03\x64im\x18\x01 \x03(\x05\"\xaf\x02\n\nExpression\x12)\n\x0f\x65xpression_type\x18\x01 \x01(\x0e\x32\x10.Expression.Type\x12\x13\n\x04size\x18\x02 \x01(\x0b\x32\x05.Size\x12\x18\n\x03\x61rg\x18\x03 \x03(\x0b\x32\x0b.Expression\x12\x1b\n\x08\x63onstant\x18\x04 \x01(\x0b\x32\t.Constant\x12\x1b\n\x08variable\x18\x05 \x01(\x0b\x32\t.Variable\"\x8c\x01\n\x04Type\x12\x0c\n\x08VARIABLE\x10\x00\x12\x0c\n\x08\x43ONSTANT\x10\x01\x12\x07\n\x03\x41\x44\x44\x10\x02\x12\x0c\n\x08MULTIPLY\x10\x03\x12\x07\n\x03SUM\x10\x04\x12\n\n\x06NEGATE\x10\x05\x12\n\n\x06NORM_1\x10\x06\x12\n\n\x06NORM_2\x10\x07\x12\x07\n\x03\x41\x42S\x10\x08\x12\n\n\x06SQUARE\x10\t\x12\x0f\n\x0bSQUARE_ROOT\x10\n*X\n\x04\x43one\x12\x08\n\x04ZERO\x10\x00\x12\x10\n\x0cNON_NEGATIVE\x10\x01\x12\x10\n\x0cSECOND_ORDER\x10\x02\x12\x11\n\rSEMI_DEFINITE\x10\x03\x12\x0f\n\x0b\x45XPONENTIAL\x10\x04')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

_CONE = _descriptor.EnumDescriptor(
  name='Cone',
  full_name='Cone',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='ZERO', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NON_NEGATIVE', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SECOND_ORDER', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SEMI_DEFINITE', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='EXPONENTIAL', index=4, number=4,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=588,
  serialized_end=676,
)
_sym_db.RegisterEnumDescriptor(_CONE)

Cone = enum_type_wrapper.EnumTypeWrapper(_CONE)
ZERO = 0
NON_NEGATIVE = 1
SECOND_ORDER = 2
SEMI_DEFINITE = 3
EXPONENTIAL = 4


_EXPRESSION_TYPE = _descriptor.EnumDescriptor(
  name='Type',
  full_name='Expression.Type',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='VARIABLE', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='CONSTANT', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ADD', index=2, number=2,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='MULTIPLY', index=3, number=3,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SUM', index=4, number=4,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NEGATE', index=5, number=5,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NORM_1', index=6, number=6,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='NORM_2', index=7, number=7,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ABS', index=8, number=8,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SQUARE', index=9, number=9,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='SQUARE_ROOT', index=10, number=10,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=446,
  serialized_end=586,
)
_sym_db.RegisterEnumDescriptor(_EXPRESSION_TYPE)


_SPARSEMATRIX = _descriptor.Descriptor(
  name='SparseMatrix',
  full_name='SparseMatrix',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='pr', full_name='SparseMatrix.pr', index=0,
      number=1, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
    _descriptor.FieldDescriptor(
      name='jc', full_name='SparseMatrix.jc', index=1,
      number=2, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
    _descriptor.FieldDescriptor(
      name='ir', full_name='SparseMatrix.ir', index=2,
      number=3, type=3, cpp_type=2, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=28,
  serialized_end=90,
)


_DENSEMATRIX = _descriptor.Descriptor(
  name='DenseMatrix',
  full_name='DenseMatrix',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='value', full_name='DenseMatrix.value', index=0,
      number=1, type=1, cpp_type=5, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=92,
  serialized_end=124,
)


_CONSTANT = _descriptor.Descriptor(
  name='Constant',
  full_name='Constant',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='sparse_matrix', full_name='Constant.sparse_matrix', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='dense_matrix', full_name='Constant.dense_matrix', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='scalar', full_name='Constant.scalar', index=2,
      number=3, type=1, cpp_type=5, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=126,
  serialized_end=226,
)


_VARIABLE = _descriptor.Descriptor(
  name='Variable',
  full_name='Variable',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='variable_id', full_name='Variable.variable_id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=228,
  serialized_end=259,
)


_SIZE = _descriptor.Descriptor(
  name='Size',
  full_name='Size',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='dim', full_name='Size.dim', index=0,
      number=1, type=5, cpp_type=1, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=261,
  serialized_end=280,
)


_EXPRESSION = _descriptor.Descriptor(
  name='Expression',
  full_name='Expression',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='expression_type', full_name='Expression.expression_type', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='size', full_name='Expression.size', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='arg', full_name='Expression.arg', index=2,
      number=3, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='constant', full_name='Expression.constant', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='variable', full_name='Expression.variable', index=4,
      number=5, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
    _EXPRESSION_TYPE,
  ],
  options=None,
  is_extendable=False,
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=283,
  serialized_end=586,
)

_CONSTANT.fields_by_name['sparse_matrix'].message_type = _SPARSEMATRIX
_CONSTANT.fields_by_name['dense_matrix'].message_type = _DENSEMATRIX
_EXPRESSION.fields_by_name['expression_type'].enum_type = _EXPRESSION_TYPE
_EXPRESSION.fields_by_name['size'].message_type = _SIZE
_EXPRESSION.fields_by_name['arg'].message_type = _EXPRESSION
_EXPRESSION.fields_by_name['constant'].message_type = _CONSTANT
_EXPRESSION.fields_by_name['variable'].message_type = _VARIABLE
_EXPRESSION_TYPE.containing_type = _EXPRESSION
DESCRIPTOR.message_types_by_name['SparseMatrix'] = _SPARSEMATRIX
DESCRIPTOR.message_types_by_name['DenseMatrix'] = _DENSEMATRIX
DESCRIPTOR.message_types_by_name['Constant'] = _CONSTANT
DESCRIPTOR.message_types_by_name['Variable'] = _VARIABLE
DESCRIPTOR.message_types_by_name['Size'] = _SIZE
DESCRIPTOR.message_types_by_name['Expression'] = _EXPRESSION
DESCRIPTOR.enum_types_by_name['Cone'] = _CONE

SparseMatrix = _reflection.GeneratedProtocolMessageType('SparseMatrix', (_message.Message,), dict(
  DESCRIPTOR = _SPARSEMATRIX,
  __module__ = 'distopt.expression_pb2'
  # @@protoc_insertion_point(class_scope:SparseMatrix)
  ))
_sym_db.RegisterMessage(SparseMatrix)

DenseMatrix = _reflection.GeneratedProtocolMessageType('DenseMatrix', (_message.Message,), dict(
  DESCRIPTOR = _DENSEMATRIX,
  __module__ = 'distopt.expression_pb2'
  # @@protoc_insertion_point(class_scope:DenseMatrix)
  ))
_sym_db.RegisterMessage(DenseMatrix)

Constant = _reflection.GeneratedProtocolMessageType('Constant', (_message.Message,), dict(
  DESCRIPTOR = _CONSTANT,
  __module__ = 'distopt.expression_pb2'
  # @@protoc_insertion_point(class_scope:Constant)
  ))
_sym_db.RegisterMessage(Constant)

Variable = _reflection.GeneratedProtocolMessageType('Variable', (_message.Message,), dict(
  DESCRIPTOR = _VARIABLE,
  __module__ = 'distopt.expression_pb2'
  # @@protoc_insertion_point(class_scope:Variable)
  ))
_sym_db.RegisterMessage(Variable)

Size = _reflection.GeneratedProtocolMessageType('Size', (_message.Message,), dict(
  DESCRIPTOR = _SIZE,
  __module__ = 'distopt.expression_pb2'
  # @@protoc_insertion_point(class_scope:Size)
  ))
_sym_db.RegisterMessage(Size)

Expression = _reflection.GeneratedProtocolMessageType('Expression', (_message.Message,), dict(
  DESCRIPTOR = _EXPRESSION,
  __module__ = 'distopt.expression_pb2'
  # @@protoc_insertion_point(class_scope:Expression)
  ))
_sym_db.RegisterMessage(Expression)


_SPARSEMATRIX.fields_by_name['pr'].has_options = True
_SPARSEMATRIX.fields_by_name['pr']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
_SPARSEMATRIX.fields_by_name['jc'].has_options = True
_SPARSEMATRIX.fields_by_name['jc']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
_SPARSEMATRIX.fields_by_name['ir'].has_options = True
_SPARSEMATRIX.fields_by_name['ir']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
_DENSEMATRIX.fields_by_name['value'].has_options = True
_DENSEMATRIX.fields_by_name['value']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\020\001'))
# @@protoc_insertion_point(module_scope)
