""" Data objects in group "Coils"
"""

from collections import OrderedDict
import logging
from pyidf.helper import DataObject

logger = logging.getLogger("pyidf")
logger.addHandler(logging.NullHandler())



class CoilCoolingWater(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:Water`
        Chilled water cooling coil, NTU-effectiveness model, with inputs for design entering
        and leaving conditionss.
    """
    schema = {'min-fields': 15,
              'name': u'Coil:Cooling:Water',
              'pyname': u'CoilCoolingWater',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'design water flow rate',
                                      {'name': u'Design Water Flow Rate',
                                       'pyname': u'design_water_flow_rate',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm3/s'}),
                                     (u'design air flow rate',
                                      {'name': u'Design Air Flow Rate',
                                       'pyname': u'design_air_flow_rate',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm3/s'}),
                                     (u'design inlet water temperature',
                                      {'name': u'Design Inlet Water Temperature',
                                       'pyname': u'design_inlet_water_temperature',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'C'}),
                                     (u'design inlet air temperature',
                                      {'name': u'Design Inlet Air Temperature',
                                       'pyname': u'design_inlet_air_temperature',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'C'}),
                                     (u'design outlet air temperature',
                                      {'name': u'Design Outlet Air Temperature',
                                       'pyname': u'design_outlet_air_temperature',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'C'}),
                                     (u'design inlet air humidity ratio',
                                      {'name': u'Design Inlet Air Humidity Ratio',
                                       'pyname': u'design_inlet_air_humidity_ratio',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'kgWater/kgDryAir'}),
                                     (u'design outlet air humidity ratio',
                                      {'name': u'Design Outlet Air Humidity Ratio',
                                       'pyname': u'design_outlet_air_humidity_ratio',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'kgWater/kgDryAir'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'type of analysis',
                                      {'name': u'Type of Analysis',
                                       'pyname': u'type_of_analysis',
                                       'default': u'SimpleAnalysis',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'SimpleAnalysis',
                                                           u'DetailedAnalysis'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heat exchanger configuration',
                                      {'name': u'Heat Exchanger Configuration',
                                       'pyname': u'heat_exchanger_configuration',
                                       'default': u'CounterFlow',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'CrossFlow',
                                                           u'CounterFlow'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def design_water_flow_rate(self):
        """Get design_water_flow_rate.

        Returns:
            float: the value of `design_water_flow_rate` or None if not set

        """
        return self["Design Water Flow Rate"]

    @design_water_flow_rate.setter
    def design_water_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Design Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Water Flow Rate"] = value

    @property
    def design_air_flow_rate(self):
        """Get design_air_flow_rate.

        Returns:
            float: the value of `design_air_flow_rate` or None if not set

        """
        return self["Design Air Flow Rate"]

    @design_air_flow_rate.setter
    def design_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Design Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Air Flow Rate`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Air Flow Rate"] = value

    @property
    def design_inlet_water_temperature(self):
        """Get design_inlet_water_temperature.

        Returns:
            float: the value of `design_inlet_water_temperature` or None if not set

        """
        return self["Design Inlet Water Temperature"]

    @design_inlet_water_temperature.setter
    def design_inlet_water_temperature(self, value="autosize"):
        """Corresponds to IDD field `Design Inlet Water Temperature`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Inlet Water Temperature`
                Units: C
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Inlet Water Temperature"] = value

    @property
    def design_inlet_air_temperature(self):
        """Get design_inlet_air_temperature.

        Returns:
            float: the value of `design_inlet_air_temperature` or None if not set

        """
        return self["Design Inlet Air Temperature"]

    @design_inlet_air_temperature.setter
    def design_inlet_air_temperature(self, value="autosize"):
        """Corresponds to IDD field `Design Inlet Air Temperature`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Inlet Air Temperature`
                Units: C
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Inlet Air Temperature"] = value

    @property
    def design_outlet_air_temperature(self):
        """Get design_outlet_air_temperature.

        Returns:
            float: the value of `design_outlet_air_temperature` or None if not set

        """
        return self["Design Outlet Air Temperature"]

    @design_outlet_air_temperature.setter
    def design_outlet_air_temperature(self, value="autosize"):
        """Corresponds to IDD field `Design Outlet Air Temperature`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Outlet Air Temperature`
                Units: C
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Outlet Air Temperature"] = value

    @property
    def design_inlet_air_humidity_ratio(self):
        """Get design_inlet_air_humidity_ratio.

        Returns:
            float: the value of `design_inlet_air_humidity_ratio` or None if not set

        """
        return self["Design Inlet Air Humidity Ratio"]

    @design_inlet_air_humidity_ratio.setter
    def design_inlet_air_humidity_ratio(self, value="autosize"):
        """Corresponds to IDD field `Design Inlet Air Humidity Ratio`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Inlet Air Humidity Ratio`
                Units: kgWater/kgDryAir
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Inlet Air Humidity Ratio"] = value

    @property
    def design_outlet_air_humidity_ratio(self):
        """Get design_outlet_air_humidity_ratio.

        Returns:
            float: the value of `design_outlet_air_humidity_ratio` or None if not set

        """
        return self["Design Outlet Air Humidity Ratio"]

    @design_outlet_air_humidity_ratio.setter
    def design_outlet_air_humidity_ratio(self, value="autosize"):
        """Corresponds to IDD field `Design Outlet Air Humidity Ratio`

        Args:
            value (float or "Autosize"): value for IDD Field `Design Outlet Air Humidity Ratio`
                Units: kgWater/kgDryAir
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Outlet Air Humidity Ratio"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def type_of_analysis(self):
        """Get type_of_analysis.

        Returns:
            str: the value of `type_of_analysis` or None if not set

        """
        return self["Type of Analysis"]

    @type_of_analysis.setter
    def type_of_analysis(self, value="SimpleAnalysis"):
        """Corresponds to IDD field `Type of Analysis`

        Args:
            value (str): value for IDD Field `Type of Analysis`
                Default value: SimpleAnalysis
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Type of Analysis"] = value

    @property
    def heat_exchanger_configuration(self):
        """Get heat_exchanger_configuration.

        Returns:
            str: the value of `heat_exchanger_configuration` or None if not set

        """
        return self["Heat Exchanger Configuration"]

    @heat_exchanger_configuration.setter
    def heat_exchanger_configuration(self, value="CounterFlow"):
        """Corresponds to IDD field `Heat Exchanger Configuration`

        Args:
            value (str): value for IDD Field `Heat Exchanger Configuration`
                Default value: CounterFlow
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heat Exchanger Configuration"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value




class CoilCoolingWaterDetailedGeometry(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:Water:DetailedGeometry`
        Chilled water cooling coil, detailed flat fin coil model for continuous plate fins,
        with inputs for detailed coil geometry specificatons.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Cooling:Water:DetailedGeometry',
              'pyname': u'CoilCoolingWaterDetailedGeometry',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'maximum water flow rate',
                                      {'name': u'Maximum Water Flow Rate',
                                       'pyname': u'maximum_water_flow_rate',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm3/s'}),
                                     (u'tube outside surface area',
                                      {'name': u'Tube Outside Surface Area',
                                       'pyname': u'tube_outside_surface_area',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm2'}),
                                     (u'total tube inside area',
                                      {'name': u'Total Tube Inside Area',
                                       'pyname': u'total_tube_inside_area',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm2'}),
                                     (u'fin surface area',
                                      {'name': u'Fin Surface Area',
                                       'pyname': u'fin_surface_area',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm2'}),
                                     (u'minimum airflow area',
                                      {'name': u'Minimum Airflow Area',
                                       'pyname': u'minimum_airflow_area',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm2'}),
                                     (u'coil depth',
                                      {'name': u'Coil Depth',
                                       'pyname': u'coil_depth',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm'}),
                                     (u'fin diameter',
                                      {'name': u'Fin Diameter',
                                       'pyname': u'fin_diameter',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm'}),
                                     (u'fin thickness',
                                      {'name': u'Fin Thickness',
                                       'pyname': u'fin_thickness',
                                       'default': 0.0015,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm'}),
                                     (u'tube inside diameter',
                                      {'name': u'Tube Inside Diameter',
                                       'pyname': u'tube_inside_diameter',
                                       'default': 0.01445,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm'}),
                                     (u'tube outside diameter',
                                      {'name': u'Tube Outside Diameter',
                                       'pyname': u'tube_outside_diameter',
                                       'default': 0.0159,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm'}),
                                     (u'tube thermal conductivity',
                                      {'name': u'Tube Thermal Conductivity',
                                       'pyname': u'tube_thermal_conductivity',
                                       'default': 386.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 1.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/m-K'}),
                                     (u'fin thermal conductivity',
                                      {'name': u'Fin Thermal Conductivity',
                                       'pyname': u'fin_thermal_conductivity',
                                       'default': 204.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 1.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/m-K'}),
                                     (u'fin spacing',
                                      {'name': u'Fin Spacing',
                                       'pyname': u'fin_spacing',
                                       'default': 0.0018,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm'}),
                                     (u'tube depth spacing',
                                      {'name': u'Tube Depth Spacing',
                                       'pyname': u'tube_depth_spacing',
                                       'default': 0.026,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm'}),
                                     (u'number of tube rows',
                                      {'name': u'Number of Tube Rows',
                                       'pyname': u'number_of_tube_rows',
                                       'default': 4.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real'}),
                                     (u'number of tubes per row',
                                      {'name': u'Number of Tubes per Row',
                                       'pyname': u'number_of_tubes_per_row',
                                       'default': 'autosize',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate.

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set

        """
        return self["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Maximum Water Flow Rate"] = value

    @property
    def tube_outside_surface_area(self):
        """Get tube_outside_surface_area.

        Returns:
            float: the value of `tube_outside_surface_area` or None if not set

        """
        return self["Tube Outside Surface Area"]

    @tube_outside_surface_area.setter
    def tube_outside_surface_area(self, value="autosize"):
        """Corresponds to IDD field `Tube Outside Surface Area` Tube Primary
        Surface Area.

        Args:
            value (float or "Autosize"): value for IDD Field `Tube Outside Surface Area`
                Units: m2
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Tube Outside Surface Area"] = value

    @property
    def total_tube_inside_area(self):
        """Get total_tube_inside_area.

        Returns:
            float: the value of `total_tube_inside_area` or None if not set

        """
        return self["Total Tube Inside Area"]

    @total_tube_inside_area.setter
    def total_tube_inside_area(self, value="autosize"):
        """Corresponds to IDD field `Total Tube Inside Area` Total tube inside
        surface area.

        Args:
            value (float or "Autosize"): value for IDD Field `Total Tube Inside Area`
                Units: m2
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Total Tube Inside Area"] = value

    @property
    def fin_surface_area(self):
        """Get fin_surface_area.

        Returns:
            float: the value of `fin_surface_area` or None if not set

        """
        return self["Fin Surface Area"]

    @fin_surface_area.setter
    def fin_surface_area(self, value="autosize"):
        """Corresponds to IDD field `Fin Surface Area`

        Args:
            value (float or "Autosize"): value for IDD Field `Fin Surface Area`
                Units: m2
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fin Surface Area"] = value

    @property
    def minimum_airflow_area(self):
        """Get minimum_airflow_area.

        Returns:
            float: the value of `minimum_airflow_area` or None if not set

        """
        return self["Minimum Airflow Area"]

    @minimum_airflow_area.setter
    def minimum_airflow_area(self, value="autosize"):
        """Corresponds to IDD field `Minimum Airflow Area`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Airflow Area`
                Units: m2
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Minimum Airflow Area"] = value

    @property
    def coil_depth(self):
        """Get coil_depth.

        Returns:
            float: the value of `coil_depth` or None if not set

        """
        return self["Coil Depth"]

    @coil_depth.setter
    def coil_depth(self, value="autosize"):
        """Corresponds to IDD field `Coil Depth`

        Args:
            value (float or "Autosize"): value for IDD Field `Coil Depth`
                Units: m
                IP-Units: in
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Coil Depth"] = value

    @property
    def fin_diameter(self):
        """Get fin_diameter.

        Returns:
            float: the value of `fin_diameter` or None if not set

        """
        return self["Fin Diameter"]

    @fin_diameter.setter
    def fin_diameter(self, value="autosize"):
        """Corresponds to IDD field `Fin Diameter` Fin diameter or the coil
        height.

        Args:
            value (float or "Autosize"): value for IDD Field `Fin Diameter`
                Units: m
                IP-Units: in
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fin Diameter"] = value

    @property
    def fin_thickness(self):
        """Get fin_thickness.

        Returns:
            float: the value of `fin_thickness` or None if not set

        """
        return self["Fin Thickness"]

    @fin_thickness.setter
    def fin_thickness(self, value=0.0015):
        """Corresponds to IDD field `Fin Thickness`

        Args:
            value (float): value for IDD Field `Fin Thickness`
                Units: m
                IP-Units: in
                Default value: 0.0015
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fin Thickness"] = value

    @property
    def tube_inside_diameter(self):
        """Get tube_inside_diameter.

        Returns:
            float: the value of `tube_inside_diameter` or None if not set

        """
        return self["Tube Inside Diameter"]

    @tube_inside_diameter.setter
    def tube_inside_diameter(self, value=0.01445):
        """Corresponds to IDD field `Tube Inside Diameter` Inner diameter of
        tubes.

        Args:
            value (float): value for IDD Field `Tube Inside Diameter`
                Units: m
                IP-Units: in
                Default value: 0.01445
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Tube Inside Diameter"] = value

    @property
    def tube_outside_diameter(self):
        """Get tube_outside_diameter.

        Returns:
            float: the value of `tube_outside_diameter` or None if not set

        """
        return self["Tube Outside Diameter"]

    @tube_outside_diameter.setter
    def tube_outside_diameter(self, value=0.0159):
        """Corresponds to IDD field `Tube Outside Diameter` Outer diameter of
        tubes.

        Args:
            value (float): value for IDD Field `Tube Outside Diameter`
                Units: m
                IP-Units: in
                Default value: 0.0159
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Tube Outside Diameter"] = value

    @property
    def tube_thermal_conductivity(self):
        """Get tube_thermal_conductivity.

        Returns:
            float: the value of `tube_thermal_conductivity` or None if not set

        """
        return self["Tube Thermal Conductivity"]

    @tube_thermal_conductivity.setter
    def tube_thermal_conductivity(self, value=386.0):
        """Corresponds to IDD field `Tube Thermal Conductivity`

        Args:
            value (float): value for IDD Field `Tube Thermal Conductivity`
                Units: W/m-K
                Default value: 386.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Tube Thermal Conductivity"] = value

    @property
    def fin_thermal_conductivity(self):
        """Get fin_thermal_conductivity.

        Returns:
            float: the value of `fin_thermal_conductivity` or None if not set

        """
        return self["Fin Thermal Conductivity"]

    @fin_thermal_conductivity.setter
    def fin_thermal_conductivity(self, value=204.0):
        """Corresponds to IDD field `Fin Thermal Conductivity`

        Args:
            value (float): value for IDD Field `Fin Thermal Conductivity`
                Units: W/m-K
                Default value: 204.0
                value >= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fin Thermal Conductivity"] = value

    @property
    def fin_spacing(self):
        """Get fin_spacing.

        Returns:
            float: the value of `fin_spacing` or None if not set

        """
        return self["Fin Spacing"]

    @fin_spacing.setter
    def fin_spacing(self, value=0.0018):
        """Corresponds to IDD field `Fin Spacing` Fin spacing or distance.

        Args:
            value (float): value for IDD Field `Fin Spacing`
                Units: m
                IP-Units: in
                Default value: 0.0018
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fin Spacing"] = value

    @property
    def tube_depth_spacing(self):
        """Get tube_depth_spacing.

        Returns:
            float: the value of `tube_depth_spacing` or None if not set

        """
        return self["Tube Depth Spacing"]

    @tube_depth_spacing.setter
    def tube_depth_spacing(self, value=0.026):
        """Corresponds to IDD field `Tube Depth Spacing`

        Args:
            value (float): value for IDD Field `Tube Depth Spacing`
                Units: m
                IP-Units: in
                Default value: 0.026
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Tube Depth Spacing"] = value

    @property
    def number_of_tube_rows(self):
        """Get number_of_tube_rows.

        Returns:
            float: the value of `number_of_tube_rows` or None if not set

        """
        return self["Number of Tube Rows"]

    @number_of_tube_rows.setter
    def number_of_tube_rows(self, value=4.0):
        """Corresponds to IDD field `Number of Tube Rows`

        Args:
            value (float): value for IDD Field `Number of Tube Rows`
                Default value: 4.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Tube Rows"] = value

    @property
    def number_of_tubes_per_row(self):
        """Get number_of_tubes_per_row.

        Returns:
            float: the value of `number_of_tubes_per_row` or None if not set

        """
        return self["Number of Tubes per Row"]

    @number_of_tubes_per_row.setter
    def number_of_tubes_per_row(self, value="autosize"):
        """Corresponds to IDD field `Number of Tubes per Row`

        Args:
            value (float or "Autosize"): value for IDD Field `Number of Tubes per Row`
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Tubes per Row"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value




class CoilCoolingDxSingleSpeed(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:DX:SingleSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), single-speed. Optional inputs for moisture evaporation from wet
        coil when compressor cycles off with continuous fan operation.
    """
    schema = {'min-fields': 14,
              'name': u'Coil:Cooling:DX:SingleSpeed',
              'pyname': u'CoilCoolingDxSingleSpeed',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'gross rated total cooling capacity',
                                      {'name': u'Gross Rated Total Cooling Capacity',
                                       'pyname': u'gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'gross rated sensible heat ratio',
                                      {'name': u'Gross Rated Sensible Heat Ratio',
                                       'pyname': u'gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'gross rated cooling cop',
                                      {'name': u'Gross Rated Cooling COP',
                                       'pyname': u'gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'rated air flow rate',
                                      {'name': u'Rated Air Flow Rate',
                                       'pyname': u'rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated evaporator fan power per volume flow rate',
                                      {'name': u'Rated Evaporator Fan Power Per Volume Flow Rate',
                                       'pyname': u'rated_evaporator_fan_power_per_volume_flow_rate',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'total cooling capacity function of temperature curve name',
                                      {'name': u'Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'total cooling capacity function of flow fraction curve name',
                                      {'name': u'Total Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'total_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of temperature curve name',
                                      {'name': u'Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of flow fraction curve name',
                                      {'name': u'Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'part load fraction correlation curve name',
                                      {'name': u'Part Load Fraction Correlation Curve Name',
                                       'pyname': u'part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'nominal time for condensate removal to begin',
                                      {'name': u'Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity',
                                       'pyname': u'ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'maximum cycling rate',
                                      {'name': u'Maximum Cycling Rate',
                                       'pyname': u'maximum_cycling_rate',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'cycles/hr'}),
                                     (u'latent capacity time constant',
                                      {'name': u'Latent Capacity Time Constant',
                                       'pyname': u'latent_capacity_time_constant',
                                       'default': 0.0,
                                       'maximum': 500.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'condenser air inlet node name',
                                      {'name': u'Condenser Air Inlet Node Name',
                                       'pyname': u'condenser_air_inlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser type',
                                      {'name': u'Condenser Type',
                                       'pyname': u'condenser_type',
                                       'default': u'AirCooled',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'AirCooled',
                                                           u'EvaporativelyCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'evaporative condenser effectiveness',
                                      {'name': u'Evaporative Condenser Effectiveness',
                                       'pyname': u'evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'evaporative condenser air flow rate',
                                      {'name': u'Evaporative Condenser Air Flow Rate',
                                       'pyname': u'evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'evaporative condenser pump rated power consumption',
                                      {'name': u'Evaporative Condenser Pump Rated Power Consumption',
                                       'pyname': u'evaporative_condenser_pump_rated_power_consumption',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum outdoor dry-bulb temperature for crankcase heater operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'supply water storage tank name',
                                      {'name': u'Supply Water Storage Tank Name',
                                       'pyname': u'supply_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'basin heater capacity',
                                      {'name': u'Basin Heater Capacity',
                                       'pyname': u'basin_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'basin heater setpoint temperature',
                                      {'name': u'Basin Heater Setpoint Temperature',
                                       'pyname': u'basin_heater_setpoint_temperature',
                                       'default': 2.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 2.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'basin heater operating schedule name',
                                      {'name': u'Basin Heater Operating Schedule Name',
                                       'pyname': u'basin_heater_operating_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'sensible heat ratio function of temperature curve name',
                                      {'name': u'Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_heat_ratio(self):
        """Get gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Gross Rated Sensible Heat Ratio"]

    @gross_rated_sensible_heat_ratio.setter
    def gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Gross Rated Sensible Heat Ratio` Rated
        sensible heat ratio (gross sensible capacity/gross total capacity)
        sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Sensible Heat Ratio"] = value

    @property
    def gross_rated_cooling_cop(self):
        """Get gross_rated_cooling_cop.

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set

        """
        return self["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Gross Rated Cooling COP` Gross cooling
        capacity divided by power input to the compressor and outdoor fan, does
        not include supply fan heat or supply fan electrical energy input.

        Args:
            value (float): value for IDD Field `Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Cooling COP"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate.

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set

        """
        return self["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, Rated SHR and Rated COP
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate.

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate` or None if not set

        """
        return self["Rated Evaporator Fan Power Per Volume Flow Rate"]

    @rated_evaporator_fan_power_per_volume_flow_rate.setter
    def rated_evaporator_fan_power_per_volume_flow_rate(self, value=773.3):
        """Corresponds to IDD field `Rated Evaporator Fan Power Per Volume Flow
        Rate` Enter the evaporator fan power per air volume flow rate at the
        rated test conditions. The test conditions vary external static
        pressure based on total cooling capacity. This value is only used to
        calculate Seasonal Energy Efficiency Ratio (SEER), Energy Efficiency
        Ratio (EER), Integrated Energy Efficiency Ratio (IEER), and the
        Standard Rating (Net) Cooling Capacity which will be outputs in the
        EnergyPlus eio file.  This value is not used for modeling the
        evaporator fan during simulations.

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Evaporator Fan Power Per Volume Flow Rate"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Total Cooling Capacity Function of Temperature Curve Name"]

    @total_cooling_capacity_function_of_temperature_curve_name.setter
    def total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get total_cooling_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def total_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load flow

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be sued
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load flow

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Part Load Fraction Correlation Curve Name"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Nominal Time for Condensate Removal to
        Begin` The nominal time for condensate to begin leaving the coil's
        condensate drain line at the coil's rated air flow rate and temperature
        conditions. Nominal time is equal to the ratio of the energy of the
        coil's maximum condensate holding capacity (J) to the coil's steady
        state latent capacity (W). Suggested value is 1000; zero value means
        latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_late
        nt_capacity.

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate.

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set

        """
        return self["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=None):
        """  Corresponds to IDD field `Maximum Cycling Rate`
        The maximum on-off cycling Rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Maximum Cycling Rate`
                Units: cycles/hr
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Maximum Cycling Rate"] = value

    @property
    def latent_capacity_time_constant(self):
        """Get latent_capacity_time_constant.

        Returns:
            float: the value of `latent_capacity_time_constant` or None if not set

        """
        return self["Latent Capacity Time Constant"]

    @latent_capacity_time_constant.setter
    def latent_capacity_time_constant(self, value=None):
        """Corresponds to IDD field `Latent Capacity Time Constant` Time
        constant for the cooling coil's latent capacity to reach steady state
        after startup. Suggested value is 45; zero value means latent
        degradation model is disabled.

        Args:
            value (float): value for IDD Field `Latent Capacity Time Constant`
                Units: s
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Latent Capacity Time Constant"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name.

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set

        """
        return self["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type.

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """Corresponds to IDD field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Type"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness.

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set

        """
        return self["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Evaporative Condenser Effectiveness`

        Args:
            value (float): value for IDD Field `Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_air_flow_rate(self):
        """Get evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["Evaporative Condenser Air Flow Rate"]

    @evaporative_condenser_air_flow_rate.setter
    def evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Evaporative Condenser Air Flow Rate` Used
        to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Air Flow Rate"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption.

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set

        """
        return self["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=None):
        """Corresponds to IDD field `Evaporative Condenser Pump Rated Power
        Consumption` Rated power consumed by the evaporative condenser's water
        pump.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """Corresponds to IDD field `Crankcase Heater Capacity`

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self):
        """Get
        maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name.

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set

        """
        return self["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Supply Water Storage Tank Name`

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity.

        Returns:
            float: the value of `basin_heater_capacity` or None if not set

        """
        return self["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=None):
        """  Corresponds to IDD field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature.

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set

        """
        return self["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name.

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set

        """
        return self["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Operating Schedule Name"] = value

    @property
    def sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get sensible_heat_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self["Sensible Heat Ratio Function of Temperature Curve Name"]

    @sensible_heat_ratio_function_of_temperature_curve_name.setter
    def sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get sensible_heat_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value




class CoilCoolingDxTwoSpeed(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:DX:TwoSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), two-speed (or variable-speed). Requires two sets of performance
        data and will interpolate between speeds. Modelled as a single coil (multi-speed
        compressor or multiple compressors with row split or intertwined coil).
    """
    schema = {'min-fields': 19,
              'name': u'Coil:Cooling:DX:TwoSpeed',
              'pyname': u'CoilCoolingDxTwoSpeed',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'high speed gross rated total cooling capacity',
                                      {'name': u'High Speed Gross Rated Total Cooling Capacity',
                                       'pyname': u'high_speed_gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'high speed rated sensible heat ratio',
                                      {'name': u'High Speed Rated Sensible Heat Ratio',
                                       'pyname': u'high_speed_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'high speed gross rated cooling cop',
                                      {'name': u'High Speed Gross Rated Cooling COP',
                                       'pyname': u'high_speed_gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'high speed rated air flow rate',
                                      {'name': u'High Speed Rated Air Flow Rate',
                                       'pyname': u'high_speed_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'unit internal static air pressure',
                                      {'name': u'Unit Internal Static Air Pressure',
                                       'pyname': u'unit_internal_static_air_pressure',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'Pa'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'total cooling capacity function of temperature curve name',
                                      {'name': u'Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'total cooling capacity function of flow fraction curve name',
                                      {'name': u'Total Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'total_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of temperature curve name',
                                      {'name': u'Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of flow fraction curve name',
                                      {'name': u'Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'part load fraction correlation curve name',
                                      {'name': u'Part Load Fraction Correlation Curve Name',
                                       'pyname': u'part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'low speed gross rated total cooling capacity',
                                      {'name': u'Low Speed Gross Rated Total Cooling Capacity',
                                       'pyname': u'low_speed_gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'low speed gross rated sensible heat ratio',
                                      {'name': u'Low Speed Gross Rated Sensible Heat Ratio',
                                       'pyname': u'low_speed_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'low speed gross rated cooling cop',
                                      {'name': u'Low Speed Gross Rated Cooling COP',
                                       'pyname': u'low_speed_gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'low speed rated air flow rate',
                                      {'name': u'Low Speed Rated Air Flow Rate',
                                       'pyname': u'low_speed_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'low speed total cooling capacity function of temperature curve name',
                                      {'name': u'Low Speed Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'low_speed_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'low speed energy input ratio function of temperature curve name',
                                      {'name': u'Low Speed Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'low_speed_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condenser air inlet node name',
                                      {'name': u'Condenser Air Inlet Node Name',
                                       'pyname': u'condenser_air_inlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser type',
                                      {'name': u'Condenser Type',
                                       'pyname': u'condenser_type',
                                       'default': u'AirCooled',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'AirCooled',
                                                           u'EvaporativelyCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'high speed evaporative condenser effectiveness',
                                      {'name': u'High Speed Evaporative Condenser Effectiveness',
                                       'pyname': u'high_speed_evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'high speed evaporative condenser air flow rate',
                                      {'name': u'High Speed Evaporative Condenser Air Flow Rate',
                                       'pyname': u'high_speed_evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'high speed evaporative condenser pump rated power consumption',
                                      {'name': u'High Speed Evaporative Condenser Pump Rated Power Consumption',
                                       'pyname': u'high_speed_evaporative_condenser_pump_rated_power_consumption',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'low speed evaporative condenser effectiveness',
                                      {'name': u'Low Speed Evaporative Condenser Effectiveness',
                                       'pyname': u'low_speed_evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'low speed evaporative condenser air flow rate',
                                      {'name': u'Low Speed Evaporative Condenser Air Flow Rate',
                                       'pyname': u'low_speed_evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'low speed evaporative condenser pump rated power consumption',
                                      {'name': u'Low Speed Evaporative Condenser Pump Rated Power Consumption',
                                       'pyname': u'low_speed_evaporative_condenser_pump_rated_power_consumption',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'supply water storage tank name',
                                      {'name': u'Supply Water Storage Tank Name',
                                       'pyname': u'supply_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'basin heater capacity',
                                      {'name': u'Basin Heater Capacity',
                                       'pyname': u'basin_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'basin heater setpoint temperature',
                                      {'name': u'Basin Heater Setpoint Temperature',
                                       'pyname': u'basin_heater_setpoint_temperature',
                                       'default': 2.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 2.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'basin heater operating schedule name',
                                      {'name': u'Basin Heater Operating Schedule Name',
                                       'pyname': u'basin_heater_operating_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'sensible heat ratio function of temperature curve name',
                                      {'name': u'Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'low speed sensible heat ratio function of temperature curve name',
                                      {'name': u'Low Speed Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'low_speed_sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'low speed sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def high_speed_gross_rated_total_cooling_capacity(self):
        """Get high_speed_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `high_speed_gross_rated_total_cooling_capacity` or None if not set

        """
        return self["High Speed Gross Rated Total Cooling Capacity"]

    @high_speed_gross_rated_total_cooling_capacity.setter
    def high_speed_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `High Speed Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `High Speed Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["High Speed Gross Rated Total Cooling Capacity"] = value

    @property
    def high_speed_rated_sensible_heat_ratio(self):
        """Get high_speed_rated_sensible_heat_ratio.

        Returns:
            float: the value of `high_speed_rated_sensible_heat_ratio` or None if not set

        """
        return self["High Speed Rated Sensible Heat Ratio"]

    @high_speed_rated_sensible_heat_ratio.setter
    def high_speed_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `High Speed Rated Sensible Heat Ratio`
        Rated sensible heat ratio (gross sensible capacity/gross total
        capacity) sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `High Speed Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["High Speed Rated Sensible Heat Ratio"] = value

    @property
    def high_speed_gross_rated_cooling_cop(self):
        """Get high_speed_gross_rated_cooling_cop.

        Returns:
            float: the value of `high_speed_gross_rated_cooling_cop` or None if not set

        """
        return self["High Speed Gross Rated Cooling COP"]

    @high_speed_gross_rated_cooling_cop.setter
    def high_speed_gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `High Speed Gross Rated Cooling COP` Gross
        cooling capacity divided by power input to the compressor and outdoor
        fan, does not include supply fan heat or supply fan electrical energy
        input.

        Args:
            value (float): value for IDD Field `High Speed Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["High Speed Gross Rated Cooling COP"] = value

    @property
    def high_speed_rated_air_flow_rate(self):
        """Get high_speed_rated_air_flow_rate.

        Returns:
            float: the value of `high_speed_rated_air_flow_rate` or None if not set

        """
        return self["High Speed Rated Air Flow Rate"]

    @high_speed_rated_air_flow_rate.setter
    def high_speed_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `High Speed Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, Rated SHR
        and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt
        of rated total cooling capacity.

        Args:
            value (float or "Autosize"): value for IDD Field `High Speed Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["High Speed Rated Air Flow Rate"] = value

    @property
    def unit_internal_static_air_pressure(self):
        """Get unit_internal_static_air_pressure.

        Returns:
            float: the value of `unit_internal_static_air_pressure` or None if not set

        """
        return self["Unit Internal Static Air Pressure"]

    @unit_internal_static_air_pressure.setter
    def unit_internal_static_air_pressure(self, value=None):
        """Corresponds to IDD field `Unit Internal Static Air Pressure` Enter
        pressure drop for the unit containing the coil. This value is only used
        to calculate Energy Efficiency Ratio (EER), Integrated Energy
        Efficiency Ratio (IEER), and the Standard Rating (Net) Cooling
        Capacity. This value is not used for modeling the evaporator fan during
        simulations.

        Args:
            value (float): value for IDD Field `Unit Internal Static Air Pressure`
                Units: Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Unit Internal Static Air Pressure"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Total Cooling Capacity Function of Temperature Curve Name"]

    @total_cooling_capacity_function_of_temperature_curve_name.setter
    def total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get total_cooling_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def total_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Part Load Fraction Correlation Curve Name"] = value

    @property
    def low_speed_gross_rated_total_cooling_capacity(self):
        """Get low_speed_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `low_speed_gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Low Speed Gross Rated Total Cooling Capacity"]

    @low_speed_gross_rated_total_cooling_capacity.setter
    def low_speed_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `Low Speed Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Low Speed Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Low Speed Gross Rated Total Cooling Capacity"] = value

    @property
    def low_speed_gross_rated_sensible_heat_ratio(self):
        """Get low_speed_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `low_speed_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Low Speed Gross Rated Sensible Heat Ratio"]

    @low_speed_gross_rated_sensible_heat_ratio.setter
    def low_speed_gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Low Speed Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total
        capacity) sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Low Speed Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Low Speed Gross Rated Sensible Heat Ratio"] = value

    @property
    def low_speed_gross_rated_cooling_cop(self):
        """Get low_speed_gross_rated_cooling_cop.

        Returns:
            float: the value of `low_speed_gross_rated_cooling_cop` or None if not set

        """
        return self["Low Speed Gross Rated Cooling COP"]

    @low_speed_gross_rated_cooling_cop.setter
    def low_speed_gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Low Speed Gross Rated Cooling COP` Gross
        cooling capacity divided by power input to the compressor and outdoor
        fan, does not include supply fan heat or supply fan electrical energy
        input.

        Args:
            value (float): value for IDD Field `Low Speed Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Low Speed Gross Rated Cooling COP"] = value

    @property
    def low_speed_rated_air_flow_rate(self):
        """Get low_speed_rated_air_flow_rate.

        Returns:
            float: the value of `low_speed_rated_air_flow_rate` or None if not set

        """
        return self["Low Speed Rated Air Flow Rate"]

    @low_speed_rated_air_flow_rate.setter
    def low_speed_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Low Speed Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, Rated SHR
        and Rated COP. Should be between 0.00004027 m3/s and .00006041 m3/s per watt
        of rated total cooling capacity.

        Args:
            value (float or "Autosize"): value for IDD Field `Low Speed Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Low Speed Rated Air Flow Rate"] = value

    @property
    def low_speed_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        low_speed_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `low_speed_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Low Speed Total Cooling Capacity Function of Temperature Curve Name"]

    @low_speed_total_cooling_capacity_function_of_temperature_curve_name.setter
    def low_speed_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Low Speed Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Low Speed Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Low Speed Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def low_speed_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get low_speed_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `low_speed_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Low Speed Energy Input Ratio Function of Temperature Curve Name"]

    @low_speed_energy_input_ratio_function_of_temperature_curve_name.setter
    def low_speed_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Low Speed Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Low Speed Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Low Speed Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name.

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set

        """
        return self["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type.

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """Corresponds to IDD field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Type"] = value

    @property
    def high_speed_evaporative_condenser_effectiveness(self):
        """Get high_speed_evaporative_condenser_effectiveness.

        Returns:
            float: the value of `high_speed_evaporative_condenser_effectiveness` or None if not set

        """
        return self["High Speed Evaporative Condenser Effectiveness"]

    @high_speed_evaporative_condenser_effectiveness.setter
    def high_speed_evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `High Speed Evaporative Condenser
        Effectiveness`

        Args:
            value (float): value for IDD Field `High Speed Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["High Speed Evaporative Condenser Effectiveness"] = value

    @property
    def high_speed_evaporative_condenser_air_flow_rate(self):
        """Get high_speed_evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `high_speed_evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["High Speed Evaporative Condenser Air Flow Rate"]

    @high_speed_evaporative_condenser_air_flow_rate.setter
    def high_speed_evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `High Speed Evaporative Condenser Air Flow
        Rate` Used to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `High Speed Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["High Speed Evaporative Condenser Air Flow Rate"] = value

    @property
    def high_speed_evaporative_condenser_pump_rated_power_consumption(self):
        """Get high_speed_evaporative_condenser_pump_rated_power_consumption.

        Returns:
            float: the value of `high_speed_evaporative_condenser_pump_rated_power_consumption` or None if not set

        """
        return self[
            "High Speed Evaporative Condenser Pump Rated Power Consumption"]

    @high_speed_evaporative_condenser_pump_rated_power_consumption.setter
    def high_speed_evaporative_condenser_pump_rated_power_consumption(
            self,
            value=None):
        """Corresponds to IDD field `High Speed Evaporative Condenser Pump
        Rated Power Consumption` Rated power consumed by the evaporative
        condenser's water pump at high speed.

        Args:
            value (float or "Autosize"): value for IDD Field `High Speed Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "High Speed Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def low_speed_evaporative_condenser_effectiveness(self):
        """Get low_speed_evaporative_condenser_effectiveness.

        Returns:
            float: the value of `low_speed_evaporative_condenser_effectiveness` or None if not set

        """
        return self["Low Speed Evaporative Condenser Effectiveness"]

    @low_speed_evaporative_condenser_effectiveness.setter
    def low_speed_evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Low Speed Evaporative Condenser
        Effectiveness`

        Args:
            value (float): value for IDD Field `Low Speed Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Low Speed Evaporative Condenser Effectiveness"] = value

    @property
    def low_speed_evaporative_condenser_air_flow_rate(self):
        """Get low_speed_evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `low_speed_evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["Low Speed Evaporative Condenser Air Flow Rate"]

    @low_speed_evaporative_condenser_air_flow_rate.setter
    def low_speed_evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Low Speed Evaporative Condenser Air Flow
        Rate` Used to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `Low Speed Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Low Speed Evaporative Condenser Air Flow Rate"] = value

    @property
    def low_speed_evaporative_condenser_pump_rated_power_consumption(self):
        """Get low_speed_evaporative_condenser_pump_rated_power_consumption.

        Returns:
            float: the value of `low_speed_evaporative_condenser_pump_rated_power_consumption` or None if not set

        """
        return self[
            "Low Speed Evaporative Condenser Pump Rated Power Consumption"]

    @low_speed_evaporative_condenser_pump_rated_power_consumption.setter
    def low_speed_evaporative_condenser_pump_rated_power_consumption(
            self,
            value=None):
        """Corresponds to IDD field `Low Speed Evaporative Condenser Pump Rated
        Power Consumption` Rated power consumed by the evaporative condenser's
        water pump at low speed.

        Args:
            value (float or "Autosize"): value for IDD Field `Low Speed Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Low Speed Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name.

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set

        """
        return self["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Supply Water Storage Tank Name`

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity.

        Returns:
            float: the value of `basin_heater_capacity` or None if not set

        """
        return self["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=None):
        """  Corresponds to IDD field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature.

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set

        """
        return self["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name.

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set

        """
        return self["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Operating Schedule Name"] = value

    @property
    def sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get sensible_heat_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self["Sensible Heat Ratio Function of Temperature Curve Name"]

    @sensible_heat_ratio_function_of_temperature_curve_name.setter
    def sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get sensible_heat_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def low_speed_sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get
        low_speed_sensible_heat_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `low_speed_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Low Speed Sensible Heat Ratio Function of Temperature Curve Name"]

    @low_speed_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def low_speed_sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Low Speed Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.

        Args:
            value (str): value for IDD Field `Low Speed Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Low Speed Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get
        low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def low_speed_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Low Speed Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value




class CoilCoolingDxMultiSpeed(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:DX:MultiSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric or
        engine-driven compressor and condenser fan), multi-speed (or variable-speed).
        Optional moisture evaporation from wet coil when compressor cycles off with continuous
        fan operation. Requires two to four sets of performance data and will interpolate
        between speeds. Modeled as a single coil (multi-speed compressor or multiple
        compressors with row split or intertwined coil).
    """
    schema = {'min-fields': 55,
              'name': u'Coil:Cooling:DX:MultiSpeed',
              'pyname': u'CoilCoolingDxMultiSpeed',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser air inlet node name',
                                      {'name': u'Condenser Air Inlet Node Name',
                                       'pyname': u'condenser_air_inlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser type',
                                      {'name': u'Condenser Type',
                                       'pyname': u'condenser_type',
                                       'default': u'AirCooled',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'AirCooled',
                                                           u'EvaporativelyCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'supply water storage tank name',
                                      {'name': u'Supply Water Storage Tank Name',
                                       'pyname': u'supply_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'apply part load fraction to speeds greater than 1',
                                      {'name': u'Apply Part Load Fraction to Speeds Greater than 1',
                                       'pyname': u'apply_part_load_fraction_to_speeds_greater_than_1',
                                       'default': u'No',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'apply latent degradation to speeds greater than 1',
                                      {'name': u'Apply Latent Degradation to Speeds Greater than 1',
                                       'pyname': u'apply_latent_degradation_to_speeds_greater_than_1',
                                       'default': u'No',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum outdoor dry-bulb temperature for crankcase heater operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'basin heater capacity',
                                      {'name': u'Basin Heater Capacity',
                                       'pyname': u'basin_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'basin heater setpoint temperature',
                                      {'name': u'Basin Heater Setpoint Temperature',
                                       'pyname': u'basin_heater_setpoint_temperature',
                                       'default': 2.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 2.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'basin heater operating schedule name',
                                      {'name': u'Basin Heater Operating Schedule Name',
                                       'pyname': u'basin_heater_operating_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'fuel type',
                                      {'name': u'Fuel Type',
                                       'pyname': u'fuel_type',
                                       'default': u'NaturalGas',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Electricity',
                                                           u'NaturalGas',
                                                           u'PropaneGas',
                                                           u'Diesel',
                                                           u'Gasoline',
                                                           u'FuelOil#1',
                                                           u'FuelOil#2',
                                                           u'OtherFuel1',
                                                           u'OtherFuel2'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'number of speeds',
                                      {'name': u'Number of Speeds',
                                       'pyname': u'number_of_speeds',
                                       'maximum': 4,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 2,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'speed 1 gross rated total cooling capacity',
                                      {'name': u'Speed 1 Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_1_gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 1 gross rated sensible heat ratio',
                                      {'name': u'Speed 1 Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_1_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'speed 1 gross rated cooling cop',
                                      {'name': u'Speed 1 Gross Rated Cooling COP',
                                       'pyname': u'speed_1_gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 1 rated air flow rate',
                                      {'name': u'Speed 1 Rated Air Flow Rate',
                                       'pyname': u'speed_1_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated evaporator fan power per volume flow rate',
                                      {'name': u'Rated Evaporator Fan Power Per Volume Flow Rate',
                                       'pyname': u'rated_evaporator_fan_power_per_volume_flow_rate',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 1 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 1 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_1_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 total cooling capacity function of flow fraction curve name',
                                      {'name': u'Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 part load fraction correlation curve name',
                                      {'name': u'Speed 1 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_1_part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 nominal time for condensate removal to begin',
                                      {'name': u'Speed 1 Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'speed_1_nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 1 ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity',
                                       'pyname': u'speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 maximum cycling rate',
                                      {'name': u'Speed 1 Maximum Cycling Rate',
                                       'pyname': u'speed_1_maximum_cycling_rate',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'cycles/hr'}),
                                     (u'speed 1 latent capacity time constant',
                                      {'name': u'Speed 1 Latent Capacity Time Constant',
                                       'pyname': u'speed_1_latent_capacity_time_constant',
                                       'default': 0.0,
                                       'maximum': 500.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 1 rated waste heat fraction of power input',
                                      {'name': u'Speed 1 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_1_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 waste heat function of temperature curve name',
                                      {'name': u'Speed 1 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_1_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 evaporative condenser effectiveness',
                                      {'name': u'Speed 1 Evaporative Condenser Effectiveness',
                                       'pyname': u'speed_1_evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 evaporative condenser air flow rate',
                                      {'name': u'Speed 1 Evaporative Condenser Air Flow Rate',
                                       'pyname': u'speed_1_evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 rated evaporative condenser pump power consumption',
                                      {'name': u'Speed 1 Rated Evaporative Condenser Pump Power Consumption',
                                       'pyname': u'speed_1_rated_evaporative_condenser_pump_power_consumption',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 2 gross rated total cooling capacity',
                                      {'name': u'Speed 2 Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_2_gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 2 gross rated sensible heat ratio',
                                      {'name': u'Speed 2 Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_2_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'speed 2 gross rated cooling cop',
                                      {'name': u'Speed 2 Gross Rated Cooling COP',
                                       'pyname': u'speed_2_gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 2 rated air flow rate',
                                      {'name': u'Speed 2 Rated Air Flow Rate',
                                       'pyname': u'speed_2_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     ('rated evaporator fan power per volume flow rate v3',
                                      {'name': 'Rated Evaporator Fan Power Per Volume Flow Rate v3',
                                       'pyname': 'rated_evaporator_fan_power_per_volume_flow_rate_v3',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 2 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 2 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_2_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 total cooling capacity function of flow fraction curve name',
                                      {'name': u'Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 part load fraction correlation curve name',
                                      {'name': u'Speed 2 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_2_part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 nominal time for condensate removal to begin',
                                      {'name': u'Speed 2 Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'speed_2_nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 2 ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity',
                                       'pyname': u'speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 maximum cycling rate',
                                      {'name': u'Speed 2 Maximum Cycling Rate',
                                       'pyname': u'speed_2_maximum_cycling_rate',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'cycles/hr'}),
                                     (u'speed 2 latent capacity time constant',
                                      {'name': u'Speed 2 Latent Capacity Time Constant',
                                       'pyname': u'speed_2_latent_capacity_time_constant',
                                       'default': 0.0,
                                       'maximum': 500.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 2 rated waste heat fraction of power input',
                                      {'name': u'Speed 2 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_2_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 waste heat function of temperature curve name',
                                      {'name': u'Speed 2 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_2_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 evaporative condenser effectiveness',
                                      {'name': u'Speed 2 Evaporative Condenser Effectiveness',
                                       'pyname': u'speed_2_evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 evaporative condenser air flow rate',
                                      {'name': u'Speed 2 Evaporative Condenser Air Flow Rate',
                                       'pyname': u'speed_2_evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 rated evaporative condenser pump power consumption',
                                      {'name': u'Speed 2 Rated Evaporative Condenser Pump Power Consumption',
                                       'pyname': u'speed_2_rated_evaporative_condenser_pump_power_consumption',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 3 gross rated total cooling capacity',
                                      {'name': u'Speed 3 Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_3_gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 3 gross rated sensible heat ratio',
                                      {'name': u'Speed 3 Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_3_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'speed 3 gross rated cooling cop',
                                      {'name': u'Speed 3 Gross Rated Cooling COP',
                                       'pyname': u'speed_3_gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 3 rated air flow rate',
                                      {'name': u'Speed 3 Rated Air Flow Rate',
                                       'pyname': u'speed_3_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     ('rated evaporator fan power per volume flow rate v4',
                                      {'name': 'Rated Evaporator Fan Power Per Volume Flow Rate v4',
                                       'pyname': 'rated_evaporator_fan_power_per_volume_flow_rate_v4',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 3 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 3 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_3_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 total cooling capacity function of flow fraction curve name',
                                      {'name': u'Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 part load fraction correlation curve name',
                                      {'name': u'Speed 3 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_3_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 nominal time for condensate removal to begin',
                                      {'name': u'Speed 3 Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'speed_3_nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 3 ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity',
                                       'pyname': u'speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 maximum cycling rate',
                                      {'name': u'Speed 3 Maximum Cycling Rate',
                                       'pyname': u'speed_3_maximum_cycling_rate',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'cycles/hr'}),
                                     (u'speed 3 latent capacity time constant',
                                      {'name': u'Speed 3 Latent Capacity Time Constant',
                                       'pyname': u'speed_3_latent_capacity_time_constant',
                                       'default': 0.0,
                                       'maximum': 500.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 3 rated waste heat fraction of power input',
                                      {'name': u'Speed 3 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_3_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 waste heat function of temperature curve name',
                                      {'name': u'Speed 3 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_3_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 evaporative condenser effectiveness',
                                      {'name': u'Speed 3 Evaporative Condenser Effectiveness',
                                       'pyname': u'speed_3_evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 evaporative condenser air flow rate',
                                      {'name': u'Speed 3 Evaporative Condenser Air Flow Rate',
                                       'pyname': u'speed_3_evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 rated evaporative condenser pump power consumption',
                                      {'name': u'Speed 3 Rated Evaporative Condenser Pump Power Consumption',
                                       'pyname': u'speed_3_rated_evaporative_condenser_pump_power_consumption',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 4 gross rated total cooling capacity',
                                      {'name': u'Speed 4 Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_4_gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 4 gross rated sensible heat ratio',
                                      {'name': u'Speed 4 Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_4_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'speed 4 gross rated cooling cop',
                                      {'name': u'Speed 4 Gross Rated Cooling COP',
                                       'pyname': u'speed_4_gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 4 rated air flow rate',
                                      {'name': u'Speed 4 Rated Air Flow Rate',
                                       'pyname': u'speed_4_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     ('rated evaporator fan power per volume flow rate v5',
                                      {'name': 'Rated Evaporator Fan Power Per Volume Flow Rate v5',
                                       'pyname': 'rated_evaporator_fan_power_per_volume_flow_rate_v5',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 4 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 4 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_4_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 total cooling capacity function of flow fraction curve name',
                                      {'name': u'Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 part load fraction correlation curve name',
                                      {'name': u'Speed 4 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_4_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 nominal time for condensate removal to begin',
                                      {'name': u'Speed 4 Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'speed_4_nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 4 ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity',
                                       'pyname': u'speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 maximum cycling rate',
                                      {'name': u'Speed 4 Maximum Cycling Rate',
                                       'pyname': u'speed_4_maximum_cycling_rate',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'cycles/hr'}),
                                     (u'speed 4 latent capacity time constant',
                                      {'name': u'Speed 4 Latent Capacity Time Constant',
                                       'pyname': u'speed_4_latent_capacity_time_constant',
                                       'default': 0.0,
                                       'maximum': 500.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'speed 4 rated waste heat fraction of power input',
                                      {'name': u'Speed 4 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_4_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 waste heat function of temperature curve name',
                                      {'name': u'Speed 4 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_4_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 evaporative condenser effectiveness',
                                      {'name': u'Speed 4 Evaporative Condenser Effectiveness',
                                       'pyname': u'speed_4_evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 evaporative condenser air flow rate',
                                      {'name': u'Speed 4 Evaporative Condenser Air Flow Rate',
                                       'pyname': u'speed_4_evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 rated evaporative condenser pump power consumption',
                                      {'name': u'Speed 4 Rated Evaporative Condenser Pump Power Consumption',
                                       'pyname': u'speed_4_rated_evaporative_condenser_pump_power_consumption',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name.

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set

        """
        return self["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type.

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """Corresponds to IDD field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Type"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name.

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set

        """
        return self["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Supply Water Storage Tank Name`

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value

    @property
    def apply_part_load_fraction_to_speeds_greater_than_1(self):
        """Get apply_part_load_fraction_to_speeds_greater_than_1.

        Returns:
            str: the value of `apply_part_load_fraction_to_speeds_greater_than_1` or None if not set

        """
        return self["Apply Part Load Fraction to Speeds Greater than 1"]

    @apply_part_load_fraction_to_speeds_greater_than_1.setter
    def apply_part_load_fraction_to_speeds_greater_than_1(self, value="No"):
        """Corresponds to IDD field `Apply Part Load Fraction to Speeds Greater
        than 1`

        Args:
            value (str): value for IDD Field `Apply Part Load Fraction to Speeds Greater than 1`
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Apply Part Load Fraction to Speeds Greater than 1"] = value

    @property
    def apply_latent_degradation_to_speeds_greater_than_1(self):
        """Get apply_latent_degradation_to_speeds_greater_than_1.

        Returns:
            str: the value of `apply_latent_degradation_to_speeds_greater_than_1` or None if not set

        """
        return self["Apply Latent Degradation to Speeds Greater than 1"]

    @apply_latent_degradation_to_speeds_greater_than_1.setter
    def apply_latent_degradation_to_speeds_greater_than_1(self, value="No"):
        """Corresponds to IDD field `Apply Latent Degradation to Speeds Greater
        than 1`

        Args:
            value (str): value for IDD Field `Apply Latent Degradation to Speeds Greater than 1`
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Apply Latent Degradation to Speeds Greater than 1"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """Corresponds to IDD field `Crankcase Heater Capacity`

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self):
        """Get
        maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity.

        Returns:
            float: the value of `basin_heater_capacity` or None if not set

        """
        return self["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=None):
        """  Corresponds to IDD field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature.

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set

        """
        return self["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name.

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set

        """
        return self["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Operating Schedule Name"] = value

    @property
    def fuel_type(self):
        """Get fuel_type.

        Returns:
            str: the value of `fuel_type` or None if not set

        """
        return self["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """Corresponds to IDD field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fuel Type"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds.

        Returns:
            int: the value of `number_of_speeds` or None if not set

        """
        return self["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=None):
        """Corresponds to IDD field `Number of Speeds` Enter the number of the
        following sets of data for coil capacity, SHR, COP, flow rate, and
        associated curves.

        Args:
            value (int): value for IDD Field `Number of Speeds`
                value >= 2
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Speeds"] = value

    @property
    def speed_1_gross_rated_total_cooling_capacity(self):
        """Get speed_1_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_1_gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Speed 1 Gross Rated Total Cooling Capacity"]

    @speed_1_gross_rated_total_cooling_capacity.setter
    def speed_1_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 1 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        Speed 1 is defined as low speed

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 1 Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_1_gross_rated_sensible_heat_ratio(self):
        """Get speed_1_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_1_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 1 Gross Rated Sensible Heat Ratio"]

    @speed_1_gross_rated_sensible_heat_ratio.setter
    def speed_1_gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Speed 1 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total
        capacity) Sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 1 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_1_gross_rated_cooling_cop(self):
        """Get speed_1_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_1_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 1 Gross Rated Cooling COP"]

    @speed_1_gross_rated_cooling_cop.setter
    def speed_1_gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Speed 1 Gross Rated Cooling COP` Gross
        cooling capacity divided by power input to the compressor and outdoor
        fan, does not include supply fan heat or supply fan electrical energy
        input.

        Args:
            value (float): value for IDD Field `Speed 1 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Gross Rated Cooling COP"] = value

    @property
    def speed_1_rated_air_flow_rate(self):
        """Get speed_1_rated_air_flow_rate.

        Returns:
            float: the value of `speed_1_rated_air_flow_rate` or None if not set

        """
        return self["Speed 1 Rated Air Flow Rate"]

    @speed_1_rated_air_flow_rate.setter
    def speed_1_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 1 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 1 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate.

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate` or None if not set

        """
        return self["Rated Evaporator Fan Power Per Volume Flow Rate"]

    @rated_evaporator_fan_power_per_volume_flow_rate.setter
    def rated_evaporator_fan_power_per_volume_flow_rate(self, value=773.3):
        """Corresponds to IDD field `Rated Evaporator Fan Power Per Volume Flow
        Rate` Enter the evaporator fan power per air volume flow rate at the
        rated test conditions. The test conditions vary external static
        pressure based on total cooling capacity. This value is only used to
        calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard
        Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus
        eio file. This value is not used for modeling the evaporator fan during
        simulations.

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Evaporator Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_1_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_1_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get
        speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load Flow

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_part_load_fraction_correlation_curve_name(self):
        """Get speed_1_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_1_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 1 Part Load Fraction Correlation Curve Name"]

    @speed_1_part_load_fraction_correlation_curve_name.setter
    def speed_1_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 1 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Speed 1 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_1_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_1_nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `speed_1_nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Speed 1 Nominal Time for Condensate Removal to Begin"]

    @speed_1_nominal_time_for_condensate_removal_to_begin.setter
    def speed_1_nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Speed 1 Nominal Time for Condensate
        Removal to Begin` The nominal time for condensate to begin leaving the
        coil's condensate drain line at the coil's rated air flow rate and
        temperature conditions. Nominal time is equal to the ratio of the
        energy of the coil's maximum condensate holding capacity (J) to the
        coil's steady state latent capacity (W). Suggested value is 1000; zero
        value means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 1 Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_st
        ate_latent_capacity.

        Returns:
            float: the value of `speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_1_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation Rate from the Cooling Coil (when
        the compressor first turns off) and the Coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def speed_1_maximum_cycling_rate(self):
        """Get speed_1_maximum_cycling_rate.

        Returns:
            float: the value of `speed_1_maximum_cycling_rate` or None if not set

        """
        return self["Speed 1 Maximum Cycling Rate"]

    @speed_1_maximum_cycling_rate.setter
    def speed_1_maximum_cycling_rate(self, value=None):
        """  Corresponds to IDD field `Speed 1 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.

        Args:
            value (float): value for IDD Field `Speed 1 Maximum Cycling Rate`
                Units: cycles/hr
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Maximum Cycling Rate"] = value

    @property
    def speed_1_latent_capacity_time_constant(self):
        """Get speed_1_latent_capacity_time_constant.

        Returns:
            float: the value of `speed_1_latent_capacity_time_constant` or None if not set

        """
        return self["Speed 1 Latent Capacity Time Constant"]

    @speed_1_latent_capacity_time_constant.setter
    def speed_1_latent_capacity_time_constant(self, value=None):
        """Corresponds to IDD field `Speed 1 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady
        state after startup. Suggested value is 45; zero value means latent
        degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 1 Latent Capacity Time Constant`
                Units: s
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Latent Capacity Time Constant"] = value

    @property
    def speed_1_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_1_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_1_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 1 Rated Waste Heat Fraction of Power Input"]

    @speed_1_rated_waste_heat_fraction_of_power_input.setter
    def speed_1_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 1 Rated Waste Heat Fraction of Power
        Input` Recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 1 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_1_evaporative_condenser_effectiveness(self):
        """Get speed_1_evaporative_condenser_effectiveness.

        Returns:
            float: the value of `speed_1_evaporative_condenser_effectiveness` or None if not set

        """
        return self["Speed 1 Evaporative Condenser Effectiveness"]

    @speed_1_evaporative_condenser_effectiveness.setter
    def speed_1_evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Speed 1 Evaporative Condenser
        Effectiveness`

        Args:
            value (float): value for IDD Field `Speed 1 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_1_evaporative_condenser_air_flow_rate(self):
        """Get speed_1_evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_1_evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 1 Evaporative Condenser Air Flow Rate"]

    @speed_1_evaporative_condenser_air_flow_rate.setter
    def speed_1_evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 1 Evaporative Condenser Air Flow
        Rate` Used to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 1 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_1_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_1_rated_evaporative_condenser_pump_power_consumption.

        Returns:
            float: the value of `speed_1_rated_evaporative_condenser_pump_power_consumption` or None if not set

        """
        return self[
            "Speed 1 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_1_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_1_rated_evaporative_condenser_pump_power_consumption(
            self,
            value=None):
        """Corresponds to IDD field `Speed 1 Rated Evaporative Condenser Pump
        Power Consumption` Rated power consumed by the evaporative condenser's
        water pump at high speed.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 1 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 1 Rated Evaporative Condenser Pump Power Consumption"] = value

    @property
    def speed_2_gross_rated_total_cooling_capacity(self):
        """Get speed_2_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_2_gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Speed 2 Gross Rated Total Cooling Capacity"]

    @speed_2_gross_rated_total_cooling_capacity.setter
    def speed_2_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 2 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 2 Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_2_gross_rated_sensible_heat_ratio(self):
        """Get speed_2_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_2_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 2 Gross Rated Sensible Heat Ratio"]

    @speed_2_gross_rated_sensible_heat_ratio.setter
    def speed_2_gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Speed 2 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total
        capacity) Sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 2 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_2_gross_rated_cooling_cop(self):
        """Get speed_2_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_2_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 2 Gross Rated Cooling COP"]

    @speed_2_gross_rated_cooling_cop.setter
    def speed_2_gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Speed 2 Gross Rated Cooling COP` Gross
        cooling capacity divided by power input to the compressor and outdoor
        fan, does not include supply fan heat or supply fan electrical energy
        input.

        Args:
            value (float): value for IDD Field `Speed 2 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Gross Rated Cooling COP"] = value

    @property
    def speed_2_rated_air_flow_rate(self):
        """Get speed_2_rated_air_flow_rate.

        Returns:
            float: the value of `speed_2_rated_air_flow_rate` or None if not set

        """
        return self["Speed 2 Rated Air Flow Rate"]

    @speed_2_rated_air_flow_rate.setter
    def speed_2_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 2 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity for Speed 2.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 2 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate_v3(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate_v3.

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate_v3` or None if not set

        """
        return self["Rated Evaporator Fan Power Per Volume Flow Rate v3"]

    @rated_evaporator_fan_power_per_volume_flow_rate_v3.setter
    def rated_evaporator_fan_power_per_volume_flow_rate_v3(self, value=773.3):
        """Corresponds to IDD field `Rated Evaporator Fan Power Per Volume Flow
        Rate v3` Enter the evaporator fan power per air volume flow rate at the
        rated test conditions. The test conditions vary external static
        pressure based on total cooling capacity. This value is only used to
        calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard
        Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus
        eio file. This value is not used for modeling the evaporator fan during
        simulations.

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v3`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Evaporator Fan Power Per Volume Flow Rate v3"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_2_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_2_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get
        speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load Flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_part_load_fraction_correlation_curve_name(self):
        """Get speed_2_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_2_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 2 Part Load Fraction Correlation Curve Name"]

    @speed_2_part_load_fraction_correlation_curve_name.setter
    def speed_2_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 2 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (Cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Speed 2 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_2_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_2_nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `speed_2_nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Speed 2 Nominal Time for Condensate Removal to Begin"]

    @speed_2_nominal_time_for_condensate_removal_to_begin.setter
    def speed_2_nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Speed 2 Nominal Time for Condensate
        Removal to Begin` The nominal time for condensate to begin leaving the
        coil's condensate drain line at the coil's rated air flow rate and
        temperature conditions. Nominal time is equal to the ratio of the
        energy of the coil's maximum condensate holding capacity (J) to the
        coil's steady state latent capacity (W). Suggested value is 1000; zero
        value means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 2 Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_st
        ate_latent_capacity.

        Returns:
            float: the value of `speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"]

    @speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_2_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = value

    @property
    def speed_2_maximum_cycling_rate(self):
        """Get speed_2_maximum_cycling_rate.

        Returns:
            float: the value of `speed_2_maximum_cycling_rate` or None if not set

        """
        return self["Speed 2 Maximum Cycling Rate"]

    @speed_2_maximum_cycling_rate.setter
    def speed_2_maximum_cycling_rate(self, value=None):
        """  Corresponds to IDD field `Speed 2 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.

        Args:
            value (float): value for IDD Field `Speed 2 Maximum Cycling Rate`
                Units: cycles/hr
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Maximum Cycling Rate"] = value

    @property
    def speed_2_latent_capacity_time_constant(self):
        """Get speed_2_latent_capacity_time_constant.

        Returns:
            float: the value of `speed_2_latent_capacity_time_constant` or None if not set

        """
        return self["Speed 2 Latent Capacity Time Constant"]

    @speed_2_latent_capacity_time_constant.setter
    def speed_2_latent_capacity_time_constant(self, value=None):
        """Corresponds to IDD field `Speed 2 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady
        state after startup. Suggested value is 45; zero value means latent
        degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 2 Latent Capacity Time Constant`
                Units: s
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Latent Capacity Time Constant"] = value

    @property
    def speed_2_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_2_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_2_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 2 Rated Waste Heat Fraction of Power Input"]

    @speed_2_rated_waste_heat_fraction_of_power_input.setter
    def speed_2_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 2 Rated Waste Heat Fraction of Power
        Input` Recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 2 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_evaporative_condenser_effectiveness(self):
        """Get speed_2_evaporative_condenser_effectiveness.

        Returns:
            float: the value of `speed_2_evaporative_condenser_effectiveness` or None if not set

        """
        return self["Speed 2 Evaporative Condenser Effectiveness"]

    @speed_2_evaporative_condenser_effectiveness.setter
    def speed_2_evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Speed 2 Evaporative Condenser
        Effectiveness`

        Args:
            value (float): value for IDD Field `Speed 2 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_2_evaporative_condenser_air_flow_rate(self):
        """Get speed_2_evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_2_evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 2 Evaporative Condenser Air Flow Rate"]

    @speed_2_evaporative_condenser_air_flow_rate.setter
    def speed_2_evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Evaporative Condenser Air Flow
        Rate` Used to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 2 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_2_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_2_rated_evaporative_condenser_pump_power_consumption.

        Returns:
            float: the value of `speed_2_rated_evaporative_condenser_pump_power_consumption` or None if not set

        """
        return self[
            "Speed 2 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_2_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_2_rated_evaporative_condenser_pump_power_consumption(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Rated Evaporative Condenser Pump
        Power Consumption` Rated power consumed by the evaporative condenser's
        water pump at low speed.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 2 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 2 Rated Evaporative Condenser Pump Power Consumption"] = value

    @property
    def speed_3_gross_rated_total_cooling_capacity(self):
        """Get speed_3_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_3_gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Speed 3 Gross Rated Total Cooling Capacity"]

    @speed_3_gross_rated_total_cooling_capacity.setter
    def speed_3_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 3 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 3 Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_3_gross_rated_sensible_heat_ratio(self):
        """Get speed_3_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_3_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 3 Gross Rated Sensible Heat Ratio"]

    @speed_3_gross_rated_sensible_heat_ratio.setter
    def speed_3_gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Speed 3 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total
        capacity) Sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 3 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_3_gross_rated_cooling_cop(self):
        """Get speed_3_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_3_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 3 Gross Rated Cooling COP"]

    @speed_3_gross_rated_cooling_cop.setter
    def speed_3_gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Speed 3 Gross Rated Cooling COP` Gross
        cooling capacity divided by power input to the compressor and outdoor
        fan, does not include supply fan heat or supply fan electrical energy
        input.

        Args:
            value (float): value for IDD Field `Speed 3 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Gross Rated Cooling COP"] = value

    @property
    def speed_3_rated_air_flow_rate(self):
        """Get speed_3_rated_air_flow_rate.

        Returns:
            float: the value of `speed_3_rated_air_flow_rate` or None if not set

        """
        return self["Speed 3 Rated Air Flow Rate"]

    @speed_3_rated_air_flow_rate.setter
    def speed_3_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 3 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity for Speed 3.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 3 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate_v4(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate_v4.

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate_v4` or None if not set

        """
        return self["Rated Evaporator Fan Power Per Volume Flow Rate v4"]

    @rated_evaporator_fan_power_per_volume_flow_rate_v4.setter
    def rated_evaporator_fan_power_per_volume_flow_rate_v4(self, value=773.3):
        """Corresponds to IDD field `Rated Evaporator Fan Power Per Volume Flow
        Rate v4` Enter the evaporator fan power per air volume flow rate at the
        rated test conditions. The test conditions vary external static
        pressure based on total cooling capacity. This value is only used to
        calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard
        Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus
        eio file. This value is not used for modeling the evaporator fan during
        simulations.

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v4`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Evaporator Fan Power Per Volume Flow Rate v4"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_3_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_3_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get
        speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariable object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_part_load_fraction_correlation_curve_name(self):
        """Get speed_3_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_3_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 3 Part Load Fraction Correlation Curve Name"]

    @speed_3_part_load_fraction_correlation_curve_name.setter
    def speed_3_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 3 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (Cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Speed 3 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_3_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_3_nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `speed_3_nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Speed 3 Nominal Time for Condensate Removal to Begin"]

    @speed_3_nominal_time_for_condensate_removal_to_begin.setter
    def speed_3_nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Speed 3 Nominal Time for Condensate
        Removal to Begin` The nominal time for condensate to begin leaving the
        coil's condensate drain line at the coil's rated air flow rate and
        temperature conditions. Nominal time is equal to the ratio of the
        energy of the coil's maximum condensate holding capacity (J) to the
        coil's steady state latent capacity (W). Suggested value is 1000; zero
        value means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 3 Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_st
        ate_latent_capacity.

        Returns:
            float: the value of `speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"]

    @speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_3_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = value

    @property
    def speed_3_maximum_cycling_rate(self):
        """Get speed_3_maximum_cycling_rate.

        Returns:
            float: the value of `speed_3_maximum_cycling_rate` or None if not set

        """
        return self["Speed 3 Maximum Cycling Rate"]

    @speed_3_maximum_cycling_rate.setter
    def speed_3_maximum_cycling_rate(self, value=None):
        """  Corresponds to IDD field `Speed 3 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.

        Args:
            value (float): value for IDD Field `Speed 3 Maximum Cycling Rate`
                Units: cycles/hr
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Maximum Cycling Rate"] = value

    @property
    def speed_3_latent_capacity_time_constant(self):
        """Get speed_3_latent_capacity_time_constant.

        Returns:
            float: the value of `speed_3_latent_capacity_time_constant` or None if not set

        """
        return self["Speed 3 Latent Capacity Time Constant"]

    @speed_3_latent_capacity_time_constant.setter
    def speed_3_latent_capacity_time_constant(self, value=None):
        """Corresponds to IDD field `Speed 3 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady
        state after startup. Suggested value is 45; zero value means latent
        degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 3 Latent Capacity Time Constant`
                Units: s
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Latent Capacity Time Constant"] = value

    @property
    def speed_3_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_3_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_3_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 3 Rated Waste Heat Fraction of Power Input"]

    @speed_3_rated_waste_heat_fraction_of_power_input.setter
    def speed_3_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 3 Rated Waste Heat Fraction of Power
        Input` Recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 3 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_evaporative_condenser_effectiveness(self):
        """Get speed_3_evaporative_condenser_effectiveness.

        Returns:
            float: the value of `speed_3_evaporative_condenser_effectiveness` or None if not set

        """
        return self["Speed 3 Evaporative Condenser Effectiveness"]

    @speed_3_evaporative_condenser_effectiveness.setter
    def speed_3_evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Speed 3 Evaporative Condenser
        Effectiveness`

        Args:
            value (float): value for IDD Field `Speed 3 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_3_evaporative_condenser_air_flow_rate(self):
        """Get speed_3_evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_3_evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 3 Evaporative Condenser Air Flow Rate"]

    @speed_3_evaporative_condenser_air_flow_rate.setter
    def speed_3_evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Evaporative Condenser Air Flow
        Rate` Used to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 3 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_3_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_3_rated_evaporative_condenser_pump_power_consumption.

        Returns:
            float: the value of `speed_3_rated_evaporative_condenser_pump_power_consumption` or None if not set

        """
        return self[
            "Speed 3 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_3_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_3_rated_evaporative_condenser_pump_power_consumption(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Rated Evaporative Condenser Pump
        Power Consumption` Rated power consumed by the evaporative condenser's
        water pump at Low speed.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 3 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 3 Rated Evaporative Condenser Pump Power Consumption"] = value

    @property
    def speed_4_gross_rated_total_cooling_capacity(self):
        """Get speed_4_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_4_gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Speed 4 Gross Rated Total Cooling Capacity"]

    @speed_4_gross_rated_total_cooling_capacity.setter
    def speed_4_gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 4 Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Gross capacity excluding supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 4 Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_4_gross_rated_sensible_heat_ratio(self):
        """Get speed_4_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_4_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 4 Gross Rated Sensible Heat Ratio"]

    @speed_4_gross_rated_sensible_heat_ratio.setter
    def speed_4_gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Speed 4 Gross Rated Sensible Heat Ratio`
        Gross Rated Sensible Heat Ratio (gross sensible capacity/gross total
        capacity) Sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 4 Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_4_gross_rated_cooling_cop(self):
        """Get speed_4_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_4_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 4 Gross Rated Cooling COP"]

    @speed_4_gross_rated_cooling_cop.setter
    def speed_4_gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Speed 4 Gross Rated Cooling COP` Gross
        cooling capacity divided by power input to the compressor and outdoor
        fan, does not include supply fan heat or supply fan electrical energy
        input.

        Args:
            value (float): value for IDD Field `Speed 4 Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Gross Rated Cooling COP"] = value

    @property
    def speed_4_rated_air_flow_rate(self):
        """Get speed_4_rated_air_flow_rate.

        Returns:
            float: the value of `speed_4_rated_air_flow_rate` or None if not set

        """
        return self["Speed 4 Rated Air Flow Rate"]

    @speed_4_rated_air_flow_rate.setter
    def speed_4_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 4 Rated Air Flow Rate`
        Flow rate corresponding to rated total cooling capacity, rated SHR and rated
        COP should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        cooling capacity for Speed 4

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 4 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Rated Air Flow Rate"] = value

    @property
    def rated_evaporator_fan_power_per_volume_flow_rate_v5(self):
        """Get rated_evaporator_fan_power_per_volume_flow_rate_v5.

        Returns:
            float: the value of `rated_evaporator_fan_power_per_volume_flow_rate_v5` or None if not set

        """
        return self["Rated Evaporator Fan Power Per Volume Flow Rate v5"]

    @rated_evaporator_fan_power_per_volume_flow_rate_v5.setter
    def rated_evaporator_fan_power_per_volume_flow_rate_v5(self, value=773.3):
        """Corresponds to IDD field `Rated Evaporator Fan Power Per Volume Flow
        Rate v5` Enter the evaporator fan power per air volume flow rate at the
        rated test conditions. The test conditions vary external static
        pressure based on total cooling capacity. This value is only used to
        calculate Seasonal Energy Efficiency Ratio (SEER), and the Standard
        Rating (Net) Cooling Capacity which will be outputs in the EnergyPlus
        eio file. This value is not used for modeling the evaporator fan during
        simulations.

        Args:
            value (float): value for IDD Field `Rated Evaporator Fan Power Per Volume Flow Rate v5`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Evaporator Fan Power Per Volume Flow Rate v5"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_4_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_4_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get
        speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_part_load_fraction_correlation_curve_name(self):
        """Get speed_4_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_4_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 4 Part Load Fraction Correlation Curve Name"]

    @speed_4_part_load_fraction_correlation_curve_name.setter
    def speed_4_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 4 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Speed 4 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_4_nominal_time_for_condensate_removal_to_begin(self):
        """Get speed_4_nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `speed_4_nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Speed 4 Nominal Time for Condensate Removal to Begin"]

    @speed_4_nominal_time_for_condensate_removal_to_begin.setter
    def speed_4_nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Speed 4 Nominal Time for Condensate
        Removal to Begin` The nominal time for condensate to begin leaving the
        coil's condensate drain line at the coil's rated air flow rate and
        temperature conditions. Nominal time is equal to the ratio of the
        energy of the coil's maximum condensate holding capacity (J) to the
        coil's steady state latent capacity (W). Suggested value is 1000; zero
        value means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 4 Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Nominal Time for Condensate Removal to Begin"] = value

    @property
    def speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_st
        ate_latent_capacity.

        Returns:
            float: the value of `speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"]

    @speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def speed_4_ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Ratio of Initial Moisture Evaporation Rate and steady state Latent Capacity"] = value

    @property
    def speed_4_maximum_cycling_rate(self):
        """Get speed_4_maximum_cycling_rate.

        Returns:
            float: the value of `speed_4_maximum_cycling_rate` or None if not set

        """
        return self["Speed 4 Maximum Cycling Rate"]

    @speed_4_maximum_cycling_rate.setter
    def speed_4_maximum_cycling_rate(self, value=None):
        """  Corresponds to IDD field `Speed 4 Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation
        model is disabled.

        Args:
            value (float): value for IDD Field `Speed 4 Maximum Cycling Rate`
                Units: cycles/hr
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Maximum Cycling Rate"] = value

    @property
    def speed_4_latent_capacity_time_constant(self):
        """Get speed_4_latent_capacity_time_constant.

        Returns:
            float: the value of `speed_4_latent_capacity_time_constant` or None if not set

        """
        return self["Speed 4 Latent Capacity Time Constant"]

    @speed_4_latent_capacity_time_constant.setter
    def speed_4_latent_capacity_time_constant(self, value=None):
        """Corresponds to IDD field `Speed 4 Latent Capacity Time Constant`
        Time constant for the cooling coil's latent capacity to reach steady
        state after startup. Suggested value is 45; zero value means latent
        degradation model is disabled.

        Args:
            value (float): value for IDD Field `Speed 4 Latent Capacity Time Constant`
                Units: s
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Latent Capacity Time Constant"] = value

    @property
    def speed_4_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_4_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_4_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 4 Rated Waste Heat Fraction of Power Input"]

    @speed_4_rated_waste_heat_fraction_of_power_input.setter
    def speed_4_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 4 Rated Waste Heat Fraction of Power
        Input` Recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 4 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_evaporative_condenser_effectiveness(self):
        """Get speed_4_evaporative_condenser_effectiveness.

        Returns:
            float: the value of `speed_4_evaporative_condenser_effectiveness` or None if not set

        """
        return self["Speed 4 Evaporative Condenser Effectiveness"]

    @speed_4_evaporative_condenser_effectiveness.setter
    def speed_4_evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Speed 4 Evaporative Condenser
        Effectiveness`

        Args:
            value (float): value for IDD Field `Speed 4 Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Evaporative Condenser Effectiveness"] = value

    @property
    def speed_4_evaporative_condenser_air_flow_rate(self):
        """Get speed_4_evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_4_evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 4 Evaporative Condenser Air Flow Rate"]

    @speed_4_evaporative_condenser_air_flow_rate.setter
    def speed_4_evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Evaporative Condenser Air Flow
        Rate` Used to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 4 Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Evaporative Condenser Air Flow Rate"] = value

    @property
    def speed_4_rated_evaporative_condenser_pump_power_consumption(self):
        """Get speed_4_rated_evaporative_condenser_pump_power_consumption.

        Returns:
            float: the value of `speed_4_rated_evaporative_condenser_pump_power_consumption` or None if not set

        """
        return self[
            "Speed 4 Rated Evaporative Condenser Pump Power Consumption"]

    @speed_4_rated_evaporative_condenser_pump_power_consumption.setter
    def speed_4_rated_evaporative_condenser_pump_power_consumption(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Rated Evaporative Condenser Pump
        Power Consumption` Rated power consumed by the evaporative condenser's
        water pump at Speed 4.

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 4 Rated Evaporative Condenser Pump Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 4 Rated Evaporative Condenser Pump Power Consumption"] = value




class CoilCoolingDxVariableSpeed(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:DX:VariableSpeed`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), variable-speed. Optional inputs for moisture evaporation from
        wet coil when compressor cycles off with continuous fan operation. Requires two to
        ten sets of performance data and will interpolate between speeds. Modeled as a
        single coil with variable-speed compressor.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Cooling:DX:VariableSpeed',
              'pyname': u'CoilCoolingDxVariableSpeed',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'indoor air inlet node name',
                                      {'name': u'Indoor Air Inlet Node Name',
                                       'pyname': u'indoor_air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'indoor air outlet node name',
                                      {'name': u'Indoor Air Outlet Node Name',
                                       'pyname': u'indoor_air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'number of speeds',
                                      {'name': u'Number of Speeds',
                                       'pyname': u'number_of_speeds',
                                       'default': 2,
                                       'maximum': 10,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'nominal speed level',
                                      {'name': u'Nominal Speed Level',
                                       'pyname': u'nominal_speed_level',
                                       'default': 2,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'gross rated total cooling capacity at selected nominal speed level',
                                      {'name': u'Gross Rated Total Cooling Capacity At Selected Nominal Speed Level',
                                       'pyname': u'gross_rated_total_cooling_capacity_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'rated air flow rate at selected nominal speed level',
                                      {'name': u'Rated Air Flow Rate At Selected Nominal Speed Level',
                                       'pyname': u'rated_air_flow_rate_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'nominal time for condensate to begin leaving the coil',
                                      {'name': u'Nominal Time for Condensate to Begin Leaving the Coil',
                                       'pyname': u'nominal_time_for_condensate_to_begin_leaving_the_coil',
                                       'default': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'initial moisture evaporation rate divided by steady-state ac latent capacity',
                                      {'name': u'Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity',
                                       'pyname': u'initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity',
                                       'default': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'energy part load fraction curve name',
                                      {'name': u'Energy Part Load Fraction Curve Name',
                                       'pyname': u'energy_part_load_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condenser air inlet node name',
                                      {'name': u'Condenser Air Inlet Node Name',
                                       'pyname': u'condenser_air_inlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser type',
                                      {'name': u'Condenser Type',
                                       'pyname': u'condenser_type',
                                       'default': u'AirCooled',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'AirCooled',
                                                           u'EvaporativelyCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'evaporative condenser pump rated power consumption',
                                      {'name': u'Evaporative Condenser Pump Rated Power Consumption',
                                       'pyname': u'evaporative_condenser_pump_rated_power_consumption',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum outdoor dry-bulb temperature for crankcase heater operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'supply water storage tank name',
                                      {'name': u'Supply Water Storage Tank Name',
                                       'pyname': u'supply_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'basin heater capacity',
                                      {'name': u'Basin Heater Capacity',
                                       'pyname': u'basin_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'basin heater setpoint temperature',
                                      {'name': u'Basin Heater Setpoint Temperature',
                                       'pyname': u'basin_heater_setpoint_temperature',
                                       'default': 2.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 2.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'basin heater operating schedule name',
                                      {'name': u'Basin Heater Operating Schedule Name',
                                       'pyname': u'basin_heater_operating_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_1_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 1 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_1_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 reference unit gross rated cooling cop',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_1_reference_unit_gross_rated_cooling_cop',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 reference unit rated air flow rate',
                                      {'name': u'Speed 1 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_1_reference_unit_rated_air_flow_rate',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 reference unit rated condenser air flow rate',
                                      {'name': u'Speed 1 Reference Unit Rated Condenser Air Flow Rate',
                                       'pyname': u'speed_1_reference_unit_rated_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 1 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_1_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_2_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 2 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_2_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 reference unit gross rated cooling cop',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_2_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 reference unit rated air flow rate',
                                      {'name': u'Speed 2 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_2_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 reference unit rated condenser air flow rate',
                                      {'name': u'Speed 2 Reference Unit Rated Condenser Air Flow Rate',
                                       'pyname': u'speed_2_reference_unit_rated_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 2 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_2_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_3_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 3 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_3_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 reference unit gross rated cooling cop',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_3_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 reference unit rated air flow rate',
                                      {'name': u'Speed 3 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_3_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 reference unit rated condenser air flow rate',
                                      {'name': u'Speed 3 Reference Unit Rated Condenser Air Flow Rate',
                                       'pyname': u'speed_3_reference_unit_rated_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 3 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_3_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_4_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 4 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_4_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 reference unit gross rated cooling cop',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_4_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 reference unit rated air flow rate',
                                      {'name': u'Speed 4 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_4_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 reference unit rated condenser air flow rate',
                                      {'name': u'Speed 4 Reference Unit Rated Condenser Air Flow Rate',
                                       'pyname': u'speed_4_reference_unit_rated_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 4 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_4_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_5_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 5 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_5_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 reference unit gross rated cooling cop',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_5_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 reference unit rated air flow rate',
                                      {'name': u'Speed 5 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_5_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 5 reference unit rated condenser air flow rate',
                                      {'name': u'Speed 5 Reference Unit Rated Condenser Air Flow Rate',
                                       'pyname': u'speed_5_reference_unit_rated_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 5 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 5 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_5_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_6_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 6 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_6_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 reference unit gross rated cooling cop',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_6_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 reference unit rated air flow rate',
                                      {'name': u'Speed 6 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_6_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 6 reference unit condenser air flow rate',
                                      {'name': u'Speed 6 Reference Unit Condenser Air Flow Rate',
                                       'pyname': u'speed_6_reference_unit_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 6 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 6 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_6_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_7_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 7 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_7_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 reference unit gross rated cooling cop',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_7_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 reference unit rated air flow rate',
                                      {'name': u'Speed 7 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_7_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 7 reference unit condenser flow rate',
                                      {'name': u'Speed 7 Reference Unit Condenser Flow Rate',
                                       'pyname': u'speed_7_reference_unit_condenser_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 7 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 7 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_7_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_8_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 8 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_8_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 reference unit gross rated cooling cop',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_8_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 reference unit rated air flow rate',
                                      {'name': u'Speed 8 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_8_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 8 reference unit condenser air flow rate',
                                      {'name': u'Speed 8 Reference Unit Condenser Air Flow Rate',
                                       'pyname': u'speed_8_reference_unit_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 8 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 8 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_8_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_9_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 9 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_9_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 reference unit gross rated cooling cop',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_9_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 reference unit rated air flow rate',
                                      {'name': u'Speed 9 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_9_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 9 reference unit condenser air flow rate',
                                      {'name': u'Speed 9 Reference Unit Condenser Air Flow Rate',
                                       'pyname': u'speed_9_reference_unit_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 9 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 9 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_9_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_10_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 10 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_10_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 reference unit gross rated cooling cop',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_10_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 reference unit rated air flow rate',
                                      {'name': u'Speed 10 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_10_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 10 reference unit condenser air flow rate',
                                      {'name': u'Speed 10 Reference Unit Condenser Air Flow Rate',
                                       'pyname': u'speed_10_reference_unit_condenser_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 10 reference unit rated pad effectiveness of evap precooling',
                                      {'name': u'Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling',
                                       'pyname': u'speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 10 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_10_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name.

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set

        """
        return self["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name.

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set

        """
        return self["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds.

        Returns:
            int: the value of `number_of_speeds` or None if not set

        """
        return self["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2):
        """Corresponds to IDD field `Number of Speeds`

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level.

        Returns:
            int: the value of `nominal_speed_level` or None if not set

        """
        return self["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2):
        """Corresponds to IDD field `Nominal Speed Level` must be lower than or
        equal to the highest speed number.

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Speed Level"] = value

    @property
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(
            self):
        """Get
        gross_rated_total_cooling_capacity_at_selected_nominal_speed_level.

        Returns:
            float: the value of `gross_rated_total_cooling_capacity_at_selected_nominal_speed_level` or None if not set

        """
        return self[
            "Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"]

    @gross_rated_total_cooling_capacity_at_selected_nominal_speed_level.setter
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Gross Rated Total Cooling Capacity At
        Selected Nominal Speed Level` Total cooling capacity not accounting for
        the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Total Cooling Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Air Flow Rate At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def nominal_time_for_condensate_to_begin_leaving_the_coil(self):
        """Get nominal_time_for_condensate_to_begin_leaving_the_coil.

        Returns:
            float: the value of `nominal_time_for_condensate_to_begin_leaving_the_coil` or None if not set

        """
        return self["Nominal Time for Condensate to Begin Leaving the Coil"]

    @nominal_time_for_condensate_to_begin_leaving_the_coil.setter
    def nominal_time_for_condensate_to_begin_leaving_the_coil(
            self,
            value=None):
        """Corresponds to IDD field `Nominal Time for Condensate to Begin
        Leaving the Coil`

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate to Begin Leaving the Coil`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Time for Condensate to Begin Leaving the Coil"] = value

    @property
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(
            self):
        """Get initial_moisture_evaporation_rate_divided_by_steadystate_ac_late
        nt_capacity.

        Returns:
            float: the value of `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity` or None if not set

        """
        return self[
            "Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"]

    @initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity.setter
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`

        Args:
            value (float): value for IDD Field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name.

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set

        """
        return self["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Part Load Fraction Curve Name"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name.

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set

        """
        return self["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type.

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """Corresponds to IDD field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Type"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption.

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set

        """
        return self["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=None):
        """Corresponds to IDD field `Evaporative Condenser Pump Rated Power
        Consumption` Rated power consumed by the evaporative condenser's water
        pump.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """Corresponds to IDD field `Crankcase Heater Capacity`

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self):
        """Get
        maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name.

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set

        """
        return self["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Supply Water Storage Tank Name`

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity.

        Returns:
            float: the value of `basin_heater_capacity` or None if not set

        """
        return self["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=None):
        """  Corresponds to IDD field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature.

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set

        """
        return self["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name.

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set

        """
        return self["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Operating Schedule Name"] = value

    @property
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_1_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 1 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_1_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 1 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_1_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_1_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_1_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_1_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Cooling COP"]

    @speed_1_reference_unit_gross_rated_cooling_cop.setter
    def speed_1_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 1 Reference Unit Rated Air Flow Rate"]

    @speed_1_reference_unit_rated_air_flow_rate.setter
    def speed_1_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_1_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_1_reference_unit_rated_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 1 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_1_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_1_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 1 Reference Unit Rated Condenser Air Flow Rate`
        This field is only used for Condenser Type = EvaporativelyCooled

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_1_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling`
        This field is only used for Condenser Type = EvaporativelyCooled

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_1_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_1_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_1_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_2_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 2 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_2_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 2 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_2_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_2_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_2_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_2_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Cooling COP"]

    @speed_2_reference_unit_gross_rated_cooling_cop.setter
    def speed_2_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_2_reference_unit_rated_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 2 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_2_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_2_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Condenser Air
        Flow Rate`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_2_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Pad
        Effectiveness of Evap Precooling`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 2 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_2_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_2_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_2_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_3_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 3 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_3_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 3 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_3_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_3_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_3_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_3_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Cooling COP"]

    @speed_3_reference_unit_gross_rated_cooling_cop.setter
    def speed_3_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_3_reference_unit_rated_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 3 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_3_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_3_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Condenser Air
        Flow Rate`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_3_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Pad
        Effectiveness of Evap Precooling`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 3 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_3_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_3_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_3_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_4_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 4 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_4_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 4 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_4_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_4_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_4_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_4_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Cooling COP"]

    @speed_4_reference_unit_gross_rated_cooling_cop.setter
    def speed_4_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_4_reference_unit_rated_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 4 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_4_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_4_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Condenser Air
        Flow Rate`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_4_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Pad
        Effectiveness of Evap Precooling`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 4 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_4_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_4_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_4_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_5_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 5 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_5_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 5 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_5_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_5_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_5_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_5_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Cooling COP"]

    @speed_5_reference_unit_gross_rated_cooling_cop.setter
    def speed_5_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_condenser_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_5_reference_unit_rated_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 5 Reference Unit Rated Condenser Air Flow Rate"]

    @speed_5_reference_unit_rated_condenser_air_flow_rate.setter
    def speed_5_reference_unit_rated_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Condenser Air
        Flow Rate`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Rated Condenser Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_5_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Pad
        Effectiveness of Evap Precooling`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 5 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_5_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_5_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_5_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_6_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 6 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_6_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 6 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_6_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_6_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_6_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_6_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Cooling COP"]

    @speed_6_reference_unit_gross_rated_cooling_cop.setter
    def speed_6_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_condenser_air_flow_rate(self):
        """Get speed_6_reference_unit_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_6_reference_unit_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 6 Reference Unit Condenser Air Flow Rate"]

    @speed_6_reference_unit_condenser_air_flow_rate.setter
    def speed_6_reference_unit_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Condenser Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_6_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Rated Pad
        Effectiveness of Evap Precooling`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 6 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_6_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_6_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_6_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_7_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 7 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_7_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 7 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_7_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_7_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_7_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_7_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Cooling COP"]

    @speed_7_reference_unit_gross_rated_cooling_cop.setter
    def speed_7_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_reference_unit_condenser_flow_rate(self):
        """Get speed_7_reference_unit_condenser_flow_rate.

        Returns:
            float: the value of `speed_7_reference_unit_condenser_flow_rate` or None if not set

        """
        return self["Speed 7 Reference Unit Condenser Flow Rate"]

    @speed_7_reference_unit_condenser_flow_rate.setter
    def speed_7_reference_unit_condenser_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Condenser Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Condenser Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Condenser Flow Rate"] = value

    @property
    def speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_7_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Rated Pad
        Effectiveness of Evap Precooling`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 7 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_7_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_7_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_7_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_8_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 8 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_8_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 8 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_8_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_8_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_8_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_8_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Cooling COP"]

    @speed_8_reference_unit_gross_rated_cooling_cop.setter
    def speed_8_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_condenser_air_flow_rate(self):
        """Get speed_8_reference_unit_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_8_reference_unit_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 8 Reference Unit Condenser Air Flow Rate"]

    @speed_8_reference_unit_condenser_air_flow_rate.setter
    def speed_8_reference_unit_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Condenser Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_8_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Rated Pad
        Effectiveness of Evap Precooling`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 8 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_8_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_8_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_8_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_9_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 9 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_9_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 9 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_9_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_9_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_9_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_9_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Cooling COP"]

    @speed_9_reference_unit_gross_rated_cooling_cop.setter
    def speed_9_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_condenser_air_flow_rate(self):
        """Get speed_9_reference_unit_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_9_reference_unit_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 9 Reference Unit Condenser Air Flow Rate"]

    @speed_9_reference_unit_condenser_air_flow_rate.setter
    def speed_9_reference_unit_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Condenser Air Flow
        Rate` optional.

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_9_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Rated Pad
        Effectiveness of Evap Precooling` optional.

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 9 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_9_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_9_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_9_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_10_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 10 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_10_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 10 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_10_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_10_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_10_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_10_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Cooling COP"]

    @speed_10_reference_unit_gross_rated_cooling_cop.setter
    def speed_10_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Cooling COP`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_condenser_air_flow_rate(self):
        """Get speed_10_reference_unit_condenser_air_flow_rate.

        Returns:
            float: the value of `speed_10_reference_unit_condenser_air_flow_rate` or None if not set

        """
        return self["Speed 10 Reference Unit Condenser Air Flow Rate"]

    @speed_10_reference_unit_condenser_air_flow_rate.setter
    def speed_10_reference_unit_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Condenser Air Flow
        Rate` optional.

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Condenser Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self):
        """Get
        speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling.

        Returns:
            float: the value of `speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling` or None if not set

        """
        return self[
            "Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling"]

    @speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling.setter
    def speed_10_reference_unit_rated_pad_effectiveness_of_evap_precooling(
            self,
            value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Rated Pad
        Effectiveness of Evap Precooling` optional.

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 10 Reference Unit Rated Pad Effectiveness of Evap Precooling"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_10_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_10_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_10_total_cooling_capacity_function_of_air_flow_fraction_cu
        rve_name.

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*odb + e*odb**2 + f*wb*odb
        wb = entering wet-bulb temperature (C)
        odb = air entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_
        name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value




class CoilCoolingDxTwoStageWithHumidityControlMode(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:DX:TwoStageWithHumidityControlMode`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), two-stage with humidity control mode (e.g. sub-cool or hot gas
        reheat). Optional inputs for moisture evaporation from wet coil when compressor
        cycles off with continuous fan operation. Requires two to four sets of performance
        data, see CoilPerformance:DX:Cooling. Stages are modeled as a face-split coil.
    """
    schema = {'min-fields': 10,
              'name': u'Coil:Cooling:DX:TwoStageWithHumidityControlMode',
              'pyname': u'CoilCoolingDxTwoStageWithHumidityControlMode',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum outdoor dry-bulb temperature for crankcase heater operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'number of capacity stages',
                                      {'name': u'Number of Capacity Stages',
                                       'pyname': u'number_of_capacity_stages',
                                       'default': 1,
                                       'maximum': 2,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'number of enhanced dehumidification modes',
                                      {'name': u'Number of Enhanced Dehumidification Modes',
                                       'pyname': u'number_of_enhanced_dehumidification_modes',
                                       'default': 0,
                                       'maximum': 1,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'normal mode stage 1 coil performance object type',
                                      {'name': u'Normal Mode Stage 1 Coil Performance Object Type',
                                       'pyname': u'normal_mode_stage_1_coil_performance_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'CoilPerformance:DX:Cooling'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'normal mode stage 1 coil performance name',
                                      {'name': u'Normal Mode Stage 1 Coil Performance Name',
                                       'pyname': u'normal_mode_stage_1_coil_performance_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'normal mode stage 1+2 coil performance object type',
                                      {'name': u'Normal Mode Stage 1+2 Coil Performance Object Type',
                                       'pyname': u'normal_mode_stage_12_coil_performance_object_type',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'CoilPerformance:DX:Cooling'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'normal mode stage 1+2 coil performance name',
                                      {'name': u'Normal Mode Stage 1+2 Coil Performance Name',
                                       'pyname': u'normal_mode_stage_12_coil_performance_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'dehumidification mode 1 stage 1 coil performance object type',
                                      {'name': u'Dehumidification Mode 1 Stage 1 Coil Performance Object Type',
                                       'pyname': u'dehumidification_mode_1_stage_1_coil_performance_object_type',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'CoilPerformance:DX:Cooling'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'dehumidification mode 1 stage 1 coil performance name',
                                      {'name': u'Dehumidification Mode 1 Stage 1 Coil Performance Name',
                                       'pyname': u'dehumidification_mode_1_stage_1_coil_performance_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'dehumidification mode 1 stage 1+2 coil performance object type',
                                      {'name': u'Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type',
                                       'pyname': u'dehumidification_mode_1_stage_12_coil_performance_object_type',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'CoilPerformance:DX:Cooling'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'dehumidification mode 1 stage 1+2 coil performance name',
                                      {'name': u'Dehumidification Mode 1 Stage 1+2 Coil Performance Name',
                                       'pyname': u'dehumidification_mode_1_stage_12_coil_performance_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'supply water storage tank name',
                                      {'name': u'Supply Water Storage Tank Name',
                                       'pyname': u'supply_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'basin heater capacity',
                                      {'name': u'Basin Heater Capacity',
                                       'pyname': u'basin_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'basin heater setpoint temperature',
                                      {'name': u'Basin Heater Setpoint Temperature',
                                       'pyname': u'basin_heater_setpoint_temperature',
                                       'default': 2.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 2.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'basin heater operating schedule name',
                                      {'name': u'Basin Heater Operating Schedule Name',
                                       'pyname': u'basin_heater_operating_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """Corresponds to IDD field `Crankcase Heater Capacity`

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self):
        """Get
        maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def number_of_capacity_stages(self):
        """Get number_of_capacity_stages.

        Returns:
            int: the value of `number_of_capacity_stages` or None if not set

        """
        return self["Number of Capacity Stages"]

    @number_of_capacity_stages.setter
    def number_of_capacity_stages(self, value=1):
        """Corresponds to IDD field `Number of Capacity Stages`

        Args:
            value (int): value for IDD Field `Number of Capacity Stages`
                Default value: 1
                value >= 1
                value <= 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Capacity Stages"] = value

    @property
    def number_of_enhanced_dehumidification_modes(self):
        """Get number_of_enhanced_dehumidification_modes.

        Returns:
            int: the value of `number_of_enhanced_dehumidification_modes` or None if not set

        """
        return self["Number of Enhanced Dehumidification Modes"]

    @number_of_enhanced_dehumidification_modes.setter
    def number_of_enhanced_dehumidification_modes(self, value=None):
        """Corresponds to IDD field `Number of Enhanced Dehumidification Modes`

        Args:
            value (int): value for IDD Field `Number of Enhanced Dehumidification Modes`
                value <= 1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Enhanced Dehumidification Modes"] = value

    @property
    def normal_mode_stage_1_coil_performance_object_type(self):
        """Get normal_mode_stage_1_coil_performance_object_type.

        Returns:
            str: the value of `normal_mode_stage_1_coil_performance_object_type` or None if not set

        """
        return self["Normal Mode Stage 1 Coil Performance Object Type"]

    @normal_mode_stage_1_coil_performance_object_type.setter
    def normal_mode_stage_1_coil_performance_object_type(self, value=None):
        """Corresponds to IDD field `Normal Mode Stage 1 Coil Performance
        Object Type`

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1 Coil Performance Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Normal Mode Stage 1 Coil Performance Object Type"] = value

    @property
    def normal_mode_stage_1_coil_performance_name(self):
        """Get normal_mode_stage_1_coil_performance_name.

        Returns:
            str: the value of `normal_mode_stage_1_coil_performance_name` or None if not set

        """
        return self["Normal Mode Stage 1 Coil Performance Name"]

    @normal_mode_stage_1_coil_performance_name.setter
    def normal_mode_stage_1_coil_performance_name(self, value=None):
        """Corresponds to IDD field `Normal Mode Stage 1 Coil Performance Name`

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Normal Mode Stage 1 Coil Performance Name"] = value

    @property
    def normal_mode_stage_12_coil_performance_object_type(self):
        """Get normal_mode_stage_12_coil_performance_object_type.

        Returns:
            str: the value of `normal_mode_stage_12_coil_performance_object_type` or None if not set

        """
        return self["Normal Mode Stage 1+2 Coil Performance Object Type"]

    @normal_mode_stage_12_coil_performance_object_type.setter
    def normal_mode_stage_12_coil_performance_object_type(self, value=None):
        """Corresponds to IDD field `Normal Mode Stage 1+2 Coil Performance
        Object Type`

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1+2 Coil Performance Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Normal Mode Stage 1+2 Coil Performance Object Type"] = value

    @property
    def normal_mode_stage_12_coil_performance_name(self):
        """Get normal_mode_stage_12_coil_performance_name.

        Returns:
            str: the value of `normal_mode_stage_12_coil_performance_name` or None if not set

        """
        return self["Normal Mode Stage 1+2 Coil Performance Name"]

    @normal_mode_stage_12_coil_performance_name.setter
    def normal_mode_stage_12_coil_performance_name(self, value=None):
        """Corresponds to IDD field `Normal Mode Stage 1+2 Coil Performance
        Name`

        Args:
            value (str): value for IDD Field `Normal Mode Stage 1+2 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Normal Mode Stage 1+2 Coil Performance Name"] = value

    @property
    def dehumidification_mode_1_stage_1_coil_performance_object_type(self):
        """Get dehumidification_mode_1_stage_1_coil_performance_object_type.

        Returns:
            str: the value of `dehumidification_mode_1_stage_1_coil_performance_object_type` or None if not set

        """
        return self[
            "Dehumidification Mode 1 Stage 1 Coil Performance Object Type"]

    @dehumidification_mode_1_stage_1_coil_performance_object_type.setter
    def dehumidification_mode_1_stage_1_coil_performance_object_type(
            self,
            value=None):
        """Corresponds to IDD field `Dehumidification Mode 1 Stage 1 Coil
        Performance Object Type`

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1 Coil Performance Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Dehumidification Mode 1 Stage 1 Coil Performance Object Type"] = value

    @property
    def dehumidification_mode_1_stage_1_coil_performance_name(self):
        """Get dehumidification_mode_1_stage_1_coil_performance_name.

        Returns:
            str: the value of `dehumidification_mode_1_stage_1_coil_performance_name` or None if not set

        """
        return self["Dehumidification Mode 1 Stage 1 Coil Performance Name"]

    @dehumidification_mode_1_stage_1_coil_performance_name.setter
    def dehumidification_mode_1_stage_1_coil_performance_name(
            self,
            value=None):
        """Corresponds to IDD field `Dehumidification Mode 1 Stage 1 Coil
        Performance Name`

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Dehumidification Mode 1 Stage 1 Coil Performance Name"] = value

    @property
    def dehumidification_mode_1_stage_12_coil_performance_object_type(self):
        """Get dehumidification_mode_1_stage_12_coil_performance_object_type.

        Returns:
            str: the value of `dehumidification_mode_1_stage_12_coil_performance_object_type` or None if not set

        """
        return self[
            "Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type"]

    @dehumidification_mode_1_stage_12_coil_performance_object_type.setter
    def dehumidification_mode_1_stage_12_coil_performance_object_type(
            self,
            value=None):
        """Corresponds to IDD field `Dehumidification Mode 1 Stage 1+2 Coil
        Performance Object Type`

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Dehumidification Mode 1 Stage 1+2 Coil Performance Object Type"] = value

    @property
    def dehumidification_mode_1_stage_12_coil_performance_name(self):
        """Get dehumidification_mode_1_stage_12_coil_performance_name.

        Returns:
            str: the value of `dehumidification_mode_1_stage_12_coil_performance_name` or None if not set

        """
        return self["Dehumidification Mode 1 Stage 1+2 Coil Performance Name"]

    @dehumidification_mode_1_stage_12_coil_performance_name.setter
    def dehumidification_mode_1_stage_12_coil_performance_name(
            self,
            value=None):
        """Corresponds to IDD field `Dehumidification Mode 1 Stage 1+2 Coil
        Performance Name`

        Args:
            value (str): value for IDD Field `Dehumidification Mode 1 Stage 1+2 Coil Performance Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Dehumidification Mode 1 Stage 1+2 Coil Performance Name"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name.

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set

        """
        return self["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Supply Water Storage Tank Name`

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity.

        Returns:
            float: the value of `basin_heater_capacity` or None if not set

        """
        return self["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=None):
        """  Corresponds to IDD field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature.

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set

        """
        return self["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """Get basin_heater_operating_schedule_name.

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set

        """
        return self["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """  Corresponds to IDD field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Operating Schedule Name"] = value




class CoilPerformanceDxCooling(DataObject):

    """ Corresponds to IDD object `CoilPerformance:DX:Cooling`
        Used to specify DX cooling coil performance for one mode of operation for a
        Coil:Cooling:DX:TwoStageWithHumidityControlMode object which may reference one to four
        CoilPerformance:DX:Cooling objects depending on the specified number of stages and
        dehumidification modes. In nearly all cases, the Rated Air Flow Rate will be the same
        for all performance objects associated with a given coil. If bypass is specified,
        the Rated Air Flow Rate includes both the bypassed flow and the flow through the
        active part of the coil.
    """
    schema = {'min-fields': 11,
              'name': u'CoilPerformance:DX:Cooling',
              'pyname': u'CoilPerformanceDxCooling',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'gross rated total cooling capacity',
                                      {'name': u'Gross Rated Total Cooling Capacity',
                                       'pyname': u'gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'gross rated sensible heat ratio',
                                      {'name': u'Gross Rated Sensible Heat Ratio',
                                       'pyname': u'gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'gross rated cooling cop',
                                      {'name': u'Gross Rated Cooling COP',
                                       'pyname': u'gross_rated_cooling_cop',
                                       'default': 3.0,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'rated air flow rate',
                                      {'name': u'Rated Air Flow Rate',
                                       'pyname': u'rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'fraction of air flow bypassed around coil',
                                      {'name': u'Fraction of Air Flow Bypassed Around Coil',
                                       'pyname': u'fraction_of_air_flow_bypassed_around_coil',
                                       'default': 0.0,
                                       'maximum<': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'total cooling capacity function of temperature curve name',
                                      {'name': u'Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'total cooling capacity function of flow fraction curve name',
                                      {'name': u'Total Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'total_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of temperature curve name',
                                      {'name': u'Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of flow fraction curve name',
                                      {'name': u'Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'part load fraction correlation curve name',
                                      {'name': u'Part Load Fraction Correlation Curve Name',
                                       'pyname': u'part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'nominal time for condensate removal to begin',
                                      {'name': u'Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity',
                                       'pyname': u'ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'maximum cycling rate',
                                      {'name': u'Maximum Cycling Rate',
                                       'pyname': u'maximum_cycling_rate',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'cycles/hr'}),
                                     (u'latent capacity time constant',
                                      {'name': u'Latent Capacity Time Constant',
                                       'pyname': u'latent_capacity_time_constant',
                                       'default': 0.0,
                                       'maximum': 500.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'condenser air inlet node name',
                                      {'name': u'Condenser Air Inlet Node Name',
                                       'pyname': u'condenser_air_inlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser type',
                                      {'name': u'Condenser Type',
                                       'pyname': u'condenser_type',
                                       'default': u'AirCooled',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'AirCooled',
                                                           u'EvaporativelyCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'evaporative condenser effectiveness',
                                      {'name': u'Evaporative Condenser Effectiveness',
                                       'pyname': u'evaporative_condenser_effectiveness',
                                       'default': 0.9,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'evaporative condenser air flow rate',
                                      {'name': u'Evaporative Condenser Air Flow Rate',
                                       'pyname': u'evaporative_condenser_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'evaporative condenser pump rated power consumption',
                                      {'name': u'Evaporative Condenser Pump Rated Power Consumption',
                                       'pyname': u'evaporative_condenser_pump_rated_power_consumption',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'sensible heat ratio function of temperature curve name',
                                      {'name': u'Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """  Corresponds to IDD field `Gross Rated Total Cooling Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_heat_ratio(self):
        """Get gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Gross Rated Sensible Heat Ratio"]

    @gross_rated_sensible_heat_ratio.setter
    def gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Gross Rated Sensible Heat Ratio` Rated
        sensible heat ratio (gross sensible capacity/gross total capacity)
        sensible and total capacities do not include supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Sensible Heat Ratio`
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Sensible Heat Ratio"] = value

    @property
    def gross_rated_cooling_cop(self):
        """Get gross_rated_cooling_cop.

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set

        """
        return self["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Gross Rated Cooling COP` Gross cooling
        capacity divided by power input to the compressor and outdoor fan, does
        not include supply fan heat or supply fan electrical energy input.

        Args:
            value (float): value for IDD Field `Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Cooling COP"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate.

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set

        """
        return self["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Rated Air Flow Rate` Flow rate
        corresponding to Rated total Cooling capacity, Rated SHR and Rated COP.

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Air Flow Rate"] = value

    @property
    def fraction_of_air_flow_bypassed_around_coil(self):
        """Get fraction_of_air_flow_bypassed_around_coil.

        Returns:
            float: the value of `fraction_of_air_flow_bypassed_around_coil` or None if not set

        """
        return self["Fraction of Air Flow Bypassed Around Coil"]

    @fraction_of_air_flow_bypassed_around_coil.setter
    def fraction_of_air_flow_bypassed_around_coil(self, value=None):
        """  Corresponds to IDD field `Fraction of Air Flow Bypassed Around Coil`
        Fraction of Rated Air Flow Rate which bypasses the cooling coil
        in this performance mode.  The remaining portion of the flow
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity.
        This is used to model face-split coils on multi-stage units or bypass dampers.
        If total flow rate varies during simulation, the same fraction is bypassed.

        Args:
            value (float): value for IDD Field `Fraction of Air Flow Bypassed Around Coil`
                value < 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Fraction of Air Flow Bypassed Around Coil"] = value

    @property
    def total_cooling_capacity_function_of_temperature_curve_name(self):
        """Get total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Total Cooling Capacity Function of Temperature Curve Name"]

    @total_cooling_capacity_function_of_temperature_curve_name.setter
    def total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def total_cooling_capacity_function_of_flow_fraction_curve_name(self):
        """Get total_cooling_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `total_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Total Cooling Capacity Function of Flow Fraction Curve Name"]

    @total_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def total_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Total Cooling Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Total Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Total Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*edb + e*edb**2 + f*wb*edb
        wb = entering wet-bulb temperature (C)
        edb = dry-bulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Part Load Fraction Correlation Curve Name"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Nominal Time for Condensate Removal to
        Begin` The nominal time for condensate to begin leaving the coil's
        condensate drain line at the coil's rated air flow rate and temperature
        conditions. Nominal time is equal to the ratio of the energy of the
        coil's maximum condensate holding capacity (J) to the coil's steady
        state latent capacity (W). Suggested value is 1000; zero value means
        latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_late
        nt_capacity.

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def maximum_cycling_rate(self):
        """Get maximum_cycling_rate.

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set

        """
        return self["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=None):
        """  Corresponds to IDD field `Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor, which occurs at 50% run time
        fraction. Suggested value is 3; zero value means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Maximum Cycling Rate`
                Units: cycles/hr
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Maximum Cycling Rate"] = value

    @property
    def latent_capacity_time_constant(self):
        """Get latent_capacity_time_constant.

        Returns:
            float: the value of `latent_capacity_time_constant` or None if not set

        """
        return self["Latent Capacity Time Constant"]

    @latent_capacity_time_constant.setter
    def latent_capacity_time_constant(self, value=None):
        """Corresponds to IDD field `Latent Capacity Time Constant` Time
        constant for the cooling coil's latent capacity to reach steady state
        after startup. Suggested value is 45; zero value means latent
        degradation model is disabled.

        Args:
            value (float): value for IDD Field `Latent Capacity Time Constant`
                Units: s
                value <= 500.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Latent Capacity Time Constant"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name.

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set

        """
        return self["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_type(self):
        """Get condenser_type.

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """Corresponds to IDD field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Type"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness.

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set

        """
        return self["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Evaporative Condenser Effectiveness`

        Args:
            value (float): value for IDD Field `Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_air_flow_rate(self):
        """Get evaporative_condenser_air_flow_rate.

        Returns:
            float: the value of `evaporative_condenser_air_flow_rate` or None if not set

        """
        return self["Evaporative Condenser Air Flow Rate"]

    @evaporative_condenser_air_flow_rate.setter
    def evaporative_condenser_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Evaporative Condenser Air Flow Rate` Used
        to calculate evaporative condenser water use.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Air Flow Rate"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption.

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set

        """
        return self["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=None):
        """Corresponds to IDD field `Evaporative Condenser Pump Rated Power
        Consumption` Rated power consumed by the evaporative condenser's water
        pump.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def sensible_heat_ratio_function_of_temperature_curve_name(self):
        """Get sensible_heat_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self["Sensible Heat Ratio Function of Temperature Curve Name"]

    @sensible_heat_ratio_function_of_temperature_curve_name.setter
    def sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Sensible Heat Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*db + e*db**2 + f*wb*db
        wb = entering wet-bulb temperature seen by the DX cooling coil (C)
        db = entering dry-bulb temperature seen by the DX cooling coil (C)
        entering temperature can be outside air or pretreated air.

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(self):
        """Get sensible_heat_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value




class CoilCoolingDxVariableRefrigerantFlow(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:DX:VariableRefrigerantFlow`
        Variable refrigerant flow (VRF) direct expansion (DX) cooling coil. Used with
        ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing unit is modeled separately,
        see AirConditioner:VariableRefrigerantFlow.
    """
    schema = {'min-fields': 9,
              'name': u'Coil:Cooling:DX:VariableRefrigerantFlow',
              'pyname': u'CoilCoolingDxVariableRefrigerantFlow',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'gross rated total cooling capacity',
                                      {'name': u'Gross Rated Total Cooling Capacity',
                                       'pyname': u'gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'gross rated sensible heat ratio',
                                      {'name': u'Gross Rated Sensible Heat Ratio',
                                       'pyname': u'gross_rated_sensible_heat_ratio',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'rated air flow rate',
                                      {'name': u'Rated Air Flow Rate',
                                       'pyname': u'rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'cooling capacity ratio modifier function of temperature curve name',
                                      {'name': u'Cooling Capacity Ratio Modifier Function of Temperature Curve Name',
                                       'pyname': u'cooling_capacity_ratio_modifier_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling capacity modifier curve function of flow fraction name',
                                      {'name': u'Cooling Capacity Modifier Curve Function of Flow Fraction Name',
                                       'pyname': u'cooling_capacity_modifier_curve_function_of_flow_fraction_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'coil air inlet node',
                                      {'name': u'Coil Air Inlet Node',
                                       'pyname': u'coil_air_inlet_node',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'coil air outlet node',
                                      {'name': u'Coil Air Outlet Node',
                                       'pyname': u'coil_air_outlet_node',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'name of water storage tank for condensate collection',
                                      {'name': u'Name of Water Storage Tank for Condensate Collection',
                                       'pyname': u'name_of_water_storage_tank_for_condensate_collection',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """Corresponds to IDD field `Gross Rated Total Cooling Capacity` Total
        cooling capacity not accounting for the effect of supply air fan heat
        Cooling capacity excluding supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_heat_ratio(self):
        """Get gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Gross Rated Sensible Heat Ratio"]

    @gross_rated_sensible_heat_ratio.setter
    def gross_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Gross Rated Sensible Heat Ratio` Sensible
        heat ratio excluding supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Sensible Heat Ratio`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Sensible Heat Ratio"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate.

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set

        """
        return self["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Rated Air Flow Rate`
        Volume flow rate corresponding to rated total cooling capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total cooling capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Air Flow Rate"] = value

    @property
    def cooling_capacity_ratio_modifier_function_of_temperature_curve_name(
            self):
        """Get
        cooling_capacity_ratio_modifier_function_of_temperature_curve_name.

        Returns:
            str: the value of `cooling_capacity_ratio_modifier_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling Capacity Ratio Modifier Function of Temperature Curve Name"]

    @cooling_capacity_ratio_modifier_function_of_temperature_curve_name.setter
    def cooling_capacity_ratio_modifier_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Capacity Ratio Modifier Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used

        Args:
            value (str): value for IDD Field `Cooling Capacity Ratio Modifier Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Capacity Ratio Modifier Function of Temperature Curve Name"] = value

    @property
    def cooling_capacity_modifier_curve_function_of_flow_fraction_name(self):
        """Get cooling_capacity_modifier_curve_function_of_flow_fraction_name.

        Returns:
            str: the value of `cooling_capacity_modifier_curve_function_of_flow_fraction_name` or None if not set

        """
        return self[
            "Cooling Capacity Modifier Curve Function of Flow Fraction Name"]

    @cooling_capacity_modifier_curve_function_of_flow_fraction_name.setter
    def cooling_capacity_modifier_curve_function_of_flow_fraction_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Capacity Modifier Curve Function of Flow Fraction Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Cooling Capacity Modifier Curve Function of Flow Fraction Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Capacity Modifier Curve Function of Flow Fraction Name"] = value

    @property
    def coil_air_inlet_node(self):
        """Get coil_air_inlet_node.

        Returns:
            str: the value of `coil_air_inlet_node` or None if not set

        """
        return self["Coil Air Inlet Node"]

    @coil_air_inlet_node.setter
    def coil_air_inlet_node(self, value=None):
        """Corresponds to IDD field `Coil Air Inlet Node`

        Args:
            value (str): value for IDD Field `Coil Air Inlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Coil Air Inlet Node"] = value

    @property
    def coil_air_outlet_node(self):
        """Get coil_air_outlet_node.

        Returns:
            str: the value of `coil_air_outlet_node` or None if not set

        """
        return self["Coil Air Outlet Node"]

    @coil_air_outlet_node.setter
    def coil_air_outlet_node(self, value=None):
        """Corresponds to IDD field `Coil Air Outlet Node`

        Args:
            value (str): value for IDD Field `Coil Air Outlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Coil Air Outlet Node"] = value

    @property
    def name_of_water_storage_tank_for_condensate_collection(self):
        """Get name_of_water_storage_tank_for_condensate_collection.

        Returns:
            str: the value of `name_of_water_storage_tank_for_condensate_collection` or None if not set

        """
        return self["Name of Water Storage Tank for Condensate Collection"]

    @name_of_water_storage_tank_for_condensate_collection.setter
    def name_of_water_storage_tank_for_condensate_collection(self, value=None):
        """Corresponds to IDD field `Name of Water Storage Tank for Condensate
        Collection`

        Args:
            value (str): value for IDD Field `Name of Water Storage Tank for Condensate Collection`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name of Water Storage Tank for Condensate Collection"] = value




class CoilHeatingDxVariableRefrigerantFlow(DataObject):

    """ Corresponds to IDD object `Coil:Heating:DX:VariableRefrigerantFlow`
        Variable refrigerant flow (VRF) direct expansion (DX) heating coil (air-to-air heat
        pump). Used with ZoneHVAC:TerminalUnit:VariableRefrigerantFlow. Condensing unit is
        modeled separately, see AirConditioner:VariableRefrigerantFlow.
    """
    schema = {'min-fields': 5,
              'name': u'Coil:Heating:DX:VariableRefrigerantFlow',
              'pyname': u'CoilHeatingDxVariableRefrigerantFlow',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule',
                                      {'name': u'Availability Schedule',
                                       'pyname': u'availability_schedule',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'gross rated heating capacity',
                                      {'name': u'Gross Rated Heating Capacity',
                                       'pyname': u'gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'rated air flow rate',
                                      {'name': u'Rated Air Flow Rate',
                                       'pyname': u'rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'coil air inlet node',
                                      {'name': u'Coil Air Inlet Node',
                                       'pyname': u'coil_air_inlet_node',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'coil air outlet node',
                                      {'name': u'Coil Air Outlet Node',
                                       'pyname': u'coil_air_outlet_node',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'heating capacity ratio modifier function of temperature curve name',
                                      {'name': u'Heating Capacity Ratio Modifier Function of Temperature Curve Name',
                                       'pyname': u'heating_capacity_ratio_modifier_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating capacity modifier function of flow fraction curve name',
                                      {'name': u'Heating Capacity Modifier Function of Flow Fraction Curve Name',
                                       'pyname': u'heating_capacity_modifier_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule(self):
        """Get availability_schedule.

        Returns:
            str: the value of `availability_schedule` or None if not set

        """
        return self["Availability Schedule"]

    @availability_schedule.setter
    def availability_schedule(self, value=None):
        """Corresponds to IDD field `Availability Schedule` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity.

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set

        """
        return self["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD field `Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outside dry-bulb temp 8.33 C, outside wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering wetbulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Gross Rated Heating Capacity"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate.

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set

        """
        return self["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Rated Air Flow Rate`
        volume flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Air Flow Rate"] = value

    @property
    def coil_air_inlet_node(self):
        """Get coil_air_inlet_node.

        Returns:
            str: the value of `coil_air_inlet_node` or None if not set

        """
        return self["Coil Air Inlet Node"]

    @coil_air_inlet_node.setter
    def coil_air_inlet_node(self, value=None):
        """Corresponds to IDD field `Coil Air Inlet Node`

        Args:
            value (str): value for IDD Field `Coil Air Inlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Coil Air Inlet Node"] = value

    @property
    def coil_air_outlet_node(self):
        """Get coil_air_outlet_node.

        Returns:
            str: the value of `coil_air_outlet_node` or None if not set

        """
        return self["Coil Air Outlet Node"]

    @coil_air_outlet_node.setter
    def coil_air_outlet_node(self, value=None):
        """Corresponds to IDD field `Coil Air Outlet Node`

        Args:
            value (str): value for IDD Field `Coil Air Outlet Node`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Coil Air Outlet Node"] = value

    @property
    def heating_capacity_ratio_modifier_function_of_temperature_curve_name(
            self):
        """Get
        heating_capacity_ratio_modifier_function_of_temperature_curve_name.

        Returns:
            str: the value of `heating_capacity_ratio_modifier_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Heating Capacity Ratio Modifier Function of Temperature Curve Name"]

    @heating_capacity_ratio_modifier_function_of_temperature_curve_name.setter
    def heating_capacity_ratio_modifier_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Heating Capacity Ratio Modifier Function of Temperature Curve Name`
        Table:OneIndependentVariable object can also be used
        Table:TwoIndependentVariables object can also be used

        Args:
            value (str): value for IDD Field `Heating Capacity Ratio Modifier Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Heating Capacity Ratio Modifier Function of Temperature Curve Name"] = value

    @property
    def heating_capacity_modifier_function_of_flow_fraction_curve_name(self):
        """Get heating_capacity_modifier_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `heating_capacity_modifier_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Heating Capacity Modifier Function of Flow Fraction Curve Name"]

    @heating_capacity_modifier_function_of_flow_fraction_curve_name.setter
    def heating_capacity_modifier_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Heating Capacity Modifier Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Heating Capacity Modifier Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Heating Capacity Modifier Function of Flow Fraction Curve Name"] = value




class CoilHeatingWater(DataObject):

    """ Corresponds to IDD object `Coil:Heating:Water`
        Hot water heating coil, NTU-effectiveness model, assumes a cross-flow heat exchanger.
        Two options for capacity inputs: UA and water flow rate or capacity and design
        temperatures.
    """
    schema = {'min-fields': 15,
              'name': u'Coil:Heating:Water',
              'pyname': u'CoilHeatingWater',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'u-factor times area value',
                                      {'name': u'U-Factor Times Area Value',
                                       'pyname': u'ufactor_times_area_value',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W/K'}),
                                     (u'maximum water flow rate',
                                      {'name': u'Maximum Water Flow Rate',
                                       'pyname': u'maximum_water_flow_rate',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm3/s'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'performance input method',
                                      {'name': u'Performance Input Method',
                                       'pyname': u'performance_input_method',
                                       'default': u'UFactorTimesAreaAndDesignWaterFlowRate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'UFactorTimesAreaAndDesignWaterFlowRate',
                                                           u'NominalCapacity'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'rated capacity',
                                      {'name': u'Rated Capacity',
                                       'pyname': u'rated_capacity',
                                       'default': 'autosize',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'rated inlet water temperature',
                                      {'name': u'Rated Inlet Water Temperature',
                                       'pyname': u'rated_inlet_water_temperature',
                                       'default': 82.2,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated inlet air temperature',
                                      {'name': u'Rated Inlet Air Temperature',
                                       'pyname': u'rated_inlet_air_temperature',
                                       'default': 16.6,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated outlet water temperature',
                                      {'name': u'Rated Outlet Water Temperature',
                                       'pyname': u'rated_outlet_water_temperature',
                                       'default': 71.1,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated outlet air temperature',
                                      {'name': u'Rated Outlet Air Temperature',
                                       'pyname': u'rated_outlet_air_temperature',
                                       'default': 32.2,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated ratio for air and water convection',
                                      {'name': u'Rated Ratio for Air and Water Convection',
                                       'pyname': u'rated_ratio_for_air_and_water_convection',
                                       'default': 0.5,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def ufactor_times_area_value(self):
        """Get ufactor_times_area_value.

        Returns:
            float: the value of `ufactor_times_area_value` or None if not set

        """
        return self["U-Factor Times Area Value"]

    @ufactor_times_area_value.setter
    def ufactor_times_area_value(self, value="autosize"):
        """  Corresponds to IDD field `U-Factor Times Area Value`
        UA value under rating conditions

        Args:
            value (float or "Autosize"): value for IDD Field `U-Factor Times Area Value`
                Units: W/K
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["U-Factor Times Area Value"] = value

    @property
    def maximum_water_flow_rate(self):
        """Get maximum_water_flow_rate.

        Returns:
            float: the value of `maximum_water_flow_rate` or None if not set

        """
        return self["Maximum Water Flow Rate"]

    @maximum_water_flow_rate.setter
    def maximum_water_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Water Flow Rate`
                Units: m3/s
                IP-Units: gal/min
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Maximum Water Flow Rate"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def performance_input_method(self):
        """Get performance_input_method.

        Returns:
            str: the value of `performance_input_method` or None if not set

        """
        return self["Performance Input Method"]

    @performance_input_method.setter
    def performance_input_method(
            self,
            value="UFactorTimesAreaAndDesignWaterFlowRate"):
        """Corresponds to IDD field `Performance Input Method`

        Args:
            value (str): value for IDD Field `Performance Input Method`
                Default value: UFactorTimesAreaAndDesignWaterFlowRate
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Performance Input Method"] = value

    @property
    def rated_capacity(self):
        """Get rated_capacity.

        Returns:
            float: the value of `rated_capacity` or None if not set

        """
        return self["Rated Capacity"]

    @rated_capacity.setter
    def rated_capacity(self, value="autosize"):
        """Corresponds to IDD field `Rated Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Capacity`
                Units: W
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Capacity"] = value

    @property
    def rated_inlet_water_temperature(self):
        """Get rated_inlet_water_temperature.

        Returns:
            float: the value of `rated_inlet_water_temperature` or None if not set

        """
        return self["Rated Inlet Water Temperature"]

    @rated_inlet_water_temperature.setter
    def rated_inlet_water_temperature(self, value=82.2):
        """Corresponds to IDD field `Rated Inlet Water Temperature`

        Args:
            value (float): value for IDD Field `Rated Inlet Water Temperature`
                Units: C
                Default value: 82.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Inlet Water Temperature"] = value

    @property
    def rated_inlet_air_temperature(self):
        """Get rated_inlet_air_temperature.

        Returns:
            float: the value of `rated_inlet_air_temperature` or None if not set

        """
        return self["Rated Inlet Air Temperature"]

    @rated_inlet_air_temperature.setter
    def rated_inlet_air_temperature(self, value=16.6):
        """Corresponds to IDD field `Rated Inlet Air Temperature`

        Args:
            value (float): value for IDD Field `Rated Inlet Air Temperature`
                Units: C
                Default value: 16.6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Inlet Air Temperature"] = value

    @property
    def rated_outlet_water_temperature(self):
        """Get rated_outlet_water_temperature.

        Returns:
            float: the value of `rated_outlet_water_temperature` or None if not set

        """
        return self["Rated Outlet Water Temperature"]

    @rated_outlet_water_temperature.setter
    def rated_outlet_water_temperature(self, value=71.1):
        """Corresponds to IDD field `Rated Outlet Water Temperature`

        Args:
            value (float): value for IDD Field `Rated Outlet Water Temperature`
                Units: C
                Default value: 71.1
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Outlet Water Temperature"] = value

    @property
    def rated_outlet_air_temperature(self):
        """Get rated_outlet_air_temperature.

        Returns:
            float: the value of `rated_outlet_air_temperature` or None if not set

        """
        return self["Rated Outlet Air Temperature"]

    @rated_outlet_air_temperature.setter
    def rated_outlet_air_temperature(self, value=32.2):
        """Corresponds to IDD field `Rated Outlet Air Temperature`

        Args:
            value (float): value for IDD Field `Rated Outlet Air Temperature`
                Units: C
                Default value: 32.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Outlet Air Temperature"] = value

    @property
    def rated_ratio_for_air_and_water_convection(self):
        """Get rated_ratio_for_air_and_water_convection.

        Returns:
            float: the value of `rated_ratio_for_air_and_water_convection` or None if not set

        """
        return self["Rated Ratio for Air and Water Convection"]

    @rated_ratio_for_air_and_water_convection.setter
    def rated_ratio_for_air_and_water_convection(self, value=0.5):
        """Corresponds to IDD field `Rated Ratio for Air and Water Convection`

        Args:
            value (float): value for IDD Field `Rated Ratio for Air and Water Convection`
                Default value: 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Ratio for Air and Water Convection"] = value




class CoilHeatingSteam(DataObject):

    """ Corresponds to IDD object `Coil:Heating:Steam`
        Steam heating coil. Condenses and sub-cools steam at loop pressure and discharges
        condensate through steam traps to low pressure condensate line.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:Steam',
              'pyname': u'CoilHeatingSteam',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'maximum steam flow rate',
                                      {'name': u'Maximum Steam Flow Rate',
                                       'pyname': u'maximum_steam_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'm3/s'}),
                                     (u'degree of subcooling',
                                      {'name': u'Degree of SubCooling',
                                       'pyname': u'degree_of_subcooling',
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 1.0,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'C'}),
                                     (u'degree of loop subcooling',
                                      {'name': u'Degree of Loop SubCooling',
                                       'pyname': u'degree_of_loop_subcooling',
                                       'default': 20.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 10.0,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'C'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'coil control type',
                                      {'name': u'Coil Control Type',
                                       'pyname': u'coil_control_type',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'TemperatureSetpointControl',
                                                           u'ZoneLoadControl'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'temperature setpoint node name',
                                      {'name': u'Temperature Setpoint Node Name',
                                       'pyname': u'temperature_setpoint_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def maximum_steam_flow_rate(self):
        """Get maximum_steam_flow_rate.

        Returns:
            float: the value of `maximum_steam_flow_rate` or None if not set

        """
        return self["Maximum Steam Flow Rate"]

    @maximum_steam_flow_rate.setter
    def maximum_steam_flow_rate(self, value=None):
        """Corresponds to IDD field `Maximum Steam Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Steam Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Maximum Steam Flow Rate"] = value

    @property
    def degree_of_subcooling(self):
        """Get degree_of_subcooling.

        Returns:
            float: the value of `degree_of_subcooling` or None if not set

        """
        return self["Degree of SubCooling"]

    @degree_of_subcooling.setter
    def degree_of_subcooling(self, value=None):
        """Corresponds to IDD field `Degree of SubCooling`

        Args:
            value (float): value for IDD Field `Degree of SubCooling`
                Units: C
                value >= 1.0
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Degree of SubCooling"] = value

    @property
    def degree_of_loop_subcooling(self):
        """Get degree_of_loop_subcooling.

        Returns:
            float: the value of `degree_of_loop_subcooling` or None if not set

        """
        return self["Degree of Loop SubCooling"]

    @degree_of_loop_subcooling.setter
    def degree_of_loop_subcooling(self, value=20.0):
        """Corresponds to IDD field `Degree of Loop SubCooling`

        Args:
            value (float): value for IDD Field `Degree of Loop SubCooling`
                Units: C
                Default value: 20.0
                value >= 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Degree of Loop SubCooling"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def coil_control_type(self):
        """Get coil_control_type.

        Returns:
            str: the value of `coil_control_type` or None if not set

        """
        return self["Coil Control Type"]

    @coil_control_type.setter
    def coil_control_type(self, value=None):
        """Corresponds to IDD field `Coil Control Type` Use ZoneLoadControl if
        the coil is contained within another component such as an air terminal
        unit, zone HVAC equipment, or unitary system. Use
        TemperatureSetpointControl if the coil is located directly in an air
        loop branch or outdoor air equipment list.

        Args:
            value (str): value for IDD Field `Coil Control Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Coil Control Type"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name.

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set

        """
        return self["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """Corresponds to IDD field `Temperature Setpoint Node Name` Required
        if Coil Control Type is TemperatureSetpointControl.

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Temperature Setpoint Node Name"] = value




class CoilHeatingElectric(DataObject):

    """ Corresponds to IDD object `Coil:Heating:Electric`
        Electric heating coil. If the coil is located directly in an air loop branch or
        outdoor air equipment list, then it is controlled on leaving air temperature and
        the Temperature Setpoint Node Name must be specified. If the coil is contained within
        another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:Electric',
              'pyname': u'CoilHeatingElectric',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'efficiency',
                                      {'name': u'Efficiency',
                                       'pyname': u'efficiency',
                                       'default': 1.0,
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real'}),
                                     (u'nominal capacity',
                                      {'name': u'Nominal Capacity',
                                       'pyname': u'nominal_capacity',
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'temperature setpoint node name',
                                      {'name': u'Temperature Setpoint Node Name',
                                       'pyname': u'temperature_setpoint_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def efficiency(self):
        """Get efficiency.

        Returns:
            float: the value of `efficiency` or None if not set

        """
        return self["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=1.0):
        """Corresponds to IDD field `Efficiency`

        Args:
            value (float): value for IDD Field `Efficiency`
                Default value: 1.0
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Efficiency"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity.

        Returns:
            float: the value of `nominal_capacity` or None if not set

        """
        return self["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """Corresponds to IDD field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Capacity"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name.

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set

        """
        return self["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """Corresponds to IDD field `Temperature Setpoint Node Name` Required
        if coil is temperature controlled.

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Temperature Setpoint Node Name"] = value




class CoilHeatingElectricMultiStage(DataObject):

    """ Corresponds to IDD object `Coil:Heating:Electric:MultiStage`
        Electric heating coil, multi-stage. If the coil is located directly in an air loop
        branch or outdoor air equipment list, then it is controlled on leaving air temperature
        and the Temperature Setpoint Node Name must be specified. If the coil is contained
        within another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:Electric:MultiStage',
              'pyname': u'CoilHeatingElectricMultiStage',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'temperature setpoint node name',
                                      {'name': u'Temperature Setpoint Node Name',
                                       'pyname': u'temperature_setpoint_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'number of stages',
                                      {'name': u'Number of Stages',
                                       'pyname': u'number_of_stages',
                                       'maximum': 4,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'stage 1 efficiency',
                                      {'name': u'Stage 1 Efficiency',
                                       'pyname': u'stage_1_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 1 nominal capacity',
                                      {'name': u'Stage 1 Nominal Capacity',
                                       'pyname': u'stage_1_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'stage 2 efficiency',
                                      {'name': u'Stage 2 Efficiency',
                                       'pyname': u'stage_2_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 2 nominal capacity',
                                      {'name': u'Stage 2 Nominal Capacity',
                                       'pyname': u'stage_2_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'stage 3 efficiency',
                                      {'name': u'Stage 3 Efficiency',
                                       'pyname': u'stage_3_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 3 nominal capacity',
                                      {'name': u'Stage 3 Nominal Capacity',
                                       'pyname': u'stage_3_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'stage 4 efficiency',
                                      {'name': u'Stage 4 Efficiency',
                                       'pyname': u'stage_4_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 4 nominal capacity',
                                      {'name': u'Stage 4 Nominal Capacity',
                                       'pyname': u'stage_4_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name.

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set

        """
        return self["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """Corresponds to IDD field `Temperature Setpoint Node Name` Required
        if coil is temperature controlled. controlled.

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Temperature Setpoint Node Name"] = value

    @property
    def number_of_stages(self):
        """Get number_of_stages.

        Returns:
            int: the value of `number_of_stages` or None if not set

        """
        return self["Number of Stages"]

    @number_of_stages.setter
    def number_of_stages(self, value=None):
        """Corresponds to IDD field `Number of Stages` Enter the number of the
        following sets of data for coil capacity and Efficiency.

        Args:
            value (int): value for IDD Field `Number of Stages`
                value >= 1
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Stages"] = value

    @property
    def stage_1_efficiency(self):
        """Get stage_1_efficiency.

        Returns:
            float: the value of `stage_1_efficiency` or None if not set

        """
        return self["Stage 1 Efficiency"]

    @stage_1_efficiency.setter
    def stage_1_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 1 Efficiency`

        Args:
            value (float): value for IDD Field `Stage 1 Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 1 Efficiency"] = value

    @property
    def stage_1_nominal_capacity(self):
        """Get stage_1_nominal_capacity.

        Returns:
            float: the value of `stage_1_nominal_capacity` or None if not set

        """
        return self["Stage 1 Nominal Capacity"]

    @stage_1_nominal_capacity.setter
    def stage_1_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 1 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 1 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 1 Nominal Capacity"] = value

    @property
    def stage_2_efficiency(self):
        """Get stage_2_efficiency.

        Returns:
            float: the value of `stage_2_efficiency` or None if not set

        """
        return self["Stage 2 Efficiency"]

    @stage_2_efficiency.setter
    def stage_2_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 2 Efficiency`

        Args:
            value (float): value for IDD Field `Stage 2 Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 2 Efficiency"] = value

    @property
    def stage_2_nominal_capacity(self):
        """Get stage_2_nominal_capacity.

        Returns:
            float: the value of `stage_2_nominal_capacity` or None if not set

        """
        return self["Stage 2 Nominal Capacity"]

    @stage_2_nominal_capacity.setter
    def stage_2_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 2 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 2 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 2 Nominal Capacity"] = value

    @property
    def stage_3_efficiency(self):
        """Get stage_3_efficiency.

        Returns:
            float: the value of `stage_3_efficiency` or None if not set

        """
        return self["Stage 3 Efficiency"]

    @stage_3_efficiency.setter
    def stage_3_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 3 Efficiency`

        Args:
            value (float): value for IDD Field `Stage 3 Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 3 Efficiency"] = value

    @property
    def stage_3_nominal_capacity(self):
        """Get stage_3_nominal_capacity.

        Returns:
            float: the value of `stage_3_nominal_capacity` or None if not set

        """
        return self["Stage 3 Nominal Capacity"]

    @stage_3_nominal_capacity.setter
    def stage_3_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 3 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 3 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 3 Nominal Capacity"] = value

    @property
    def stage_4_efficiency(self):
        """Get stage_4_efficiency.

        Returns:
            float: the value of `stage_4_efficiency` or None if not set

        """
        return self["Stage 4 Efficiency"]

    @stage_4_efficiency.setter
    def stage_4_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 4 Efficiency`

        Args:
            value (float): value for IDD Field `Stage 4 Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 4 Efficiency"] = value

    @property
    def stage_4_nominal_capacity(self):
        """Get stage_4_nominal_capacity.

        Returns:
            float: the value of `stage_4_nominal_capacity` or None if not set

        """
        return self["Stage 4 Nominal Capacity"]

    @stage_4_nominal_capacity.setter
    def stage_4_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 4 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 4 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 4 Nominal Capacity"] = value




class CoilHeatingGas(DataObject):

    """ Corresponds to IDD object `Coil:Heating:Gas`
        Gas heating coil. If the coil is located directly in an air loop branch or
        outdoor air equipment list, then it is controlled on leaving air temperature and
        the Temperature Setpoint Node Name must be specified. If the coil is contained within
        another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:Gas',
              'pyname': u'CoilHeatingGas',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'gas burner efficiency',
                                      {'name': u'Gas Burner Efficiency',
                                       'pyname': u'gas_burner_efficiency',
                                       'default': 0.8,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': 'real'}),
                                     (u'nominal capacity',
                                      {'name': u'Nominal Capacity',
                                       'pyname': u'nominal_capacity',
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'temperature setpoint node name',
                                      {'name': u'Temperature Setpoint Node Name',
                                       'pyname': u'temperature_setpoint_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'parasitic electric load',
                                      {'name': u'Parasitic Electric Load',
                                       'pyname': u'parasitic_electric_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'}),
                                     (u'part load fraction correlation curve name',
                                      {'name': u'Part Load Fraction Correlation Curve Name',
                                       'pyname': u'part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'parasitic gas load',
                                      {'name': u'Parasitic Gas Load',
                                       'pyname': u'parasitic_gas_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def gas_burner_efficiency(self):
        """Get gas_burner_efficiency.

        Returns:
            float: the value of `gas_burner_efficiency` or None if not set

        """
        return self["Gas Burner Efficiency"]

    @gas_burner_efficiency.setter
    def gas_burner_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Burner Efficiency`

        Args:
            value (float): value for IDD Field `Gas Burner Efficiency`
                Default value: 0.8
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gas Burner Efficiency"] = value

    @property
    def nominal_capacity(self):
        """Get nominal_capacity.

        Returns:
            float: the value of `nominal_capacity` or None if not set

        """
        return self["Nominal Capacity"]

    @nominal_capacity.setter
    def nominal_capacity(self, value=None):
        """Corresponds to IDD field `Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Capacity"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name.

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set

        """
        return self["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD field `Temperature Setpoint Node Name`
        optional, used if coil is temperature control and not load-base controlled

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Temperature Setpoint Node Name"] = value

    @property
    def parasitic_electric_load(self):
        """Get parasitic_electric_load.

        Returns:
            float: the value of `parasitic_electric_load` or None if not set

        """
        return self["Parasitic Electric Load"]

    @parasitic_electric_load.setter
    def parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Parasitic Electric Load` parasitic
        electric load associated with the gas coil operation such as an inducer
        fan, etc..  This will be modified by the part load ratio to reflect the
        time of operation in a timestep.

        Args:
            value (float): value for IDD Field `Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Parasitic Electric Load"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve, PLF = a + b*PLR + c*PLR**2
        cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3
        PLF = part load fraction
        PLR = part load ratio (sensible heating load/steady state heating capacity)
        Coil runtime fraction = Part Load Ratio / PLF
        This part load degradation is for coil performance & will
        increase the gas consumption of the coil due to transient coil operation.

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Part Load Fraction Correlation Curve Name"] = value

    @property
    def parasitic_gas_load(self):
        """Get parasitic_gas_load.

        Returns:
            float: the value of `parasitic_gas_load` or None if not set

        """
        return self["Parasitic Gas Load"]

    @parasitic_gas_load.setter
    def parasitic_gas_load(self, value=None):
        """Corresponds to IDD field `Parasitic Gas Load` parasitic gas load
        associated with the gas coil operation (i.e., standing pilot)

        Args:
            value (float): value for IDD Field `Parasitic Gas Load`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Parasitic Gas Load"] = value




class CoilHeatingGasMultiStage(DataObject):

    """ Corresponds to IDD object `Coil:Heating:Gas:MultiStage`
        Gas heating coil, multi-stage. If the coil is located directly in an air loop
        branch or outdoor air equipment list, then it is controlled on leaving air temperature
        and the Temperature Setpoint Node Name must be specified. If the coil is contained
        within another component such as an air terminal unit, zone HVAC equipment, or unitary
        system, then the coil is controlled by the parent component and the setpoint node name
        is not entered.
    """
    schema = {'min-fields': 8,
              'name': u'Coil:Heating:Gas:MultiStage',
              'pyname': u'CoilHeatingGasMultiStage',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'temperature setpoint node name',
                                      {'name': u'Temperature Setpoint Node Name',
                                       'pyname': u'temperature_setpoint_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'part load fraction correlation curve name',
                                      {'name': u'Part Load Fraction Correlation Curve Name',
                                       'pyname': u'part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'parasitic gas load',
                                      {'name': u'Parasitic Gas Load',
                                       'pyname': u'parasitic_gas_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'}),
                                     (u'number of stages',
                                      {'name': u'Number of Stages',
                                       'pyname': u'number_of_stages',
                                       'maximum': 4,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'stage 1 gas burner efficiency',
                                      {'name': u'Stage 1 Gas Burner Efficiency',
                                       'pyname': u'stage_1_gas_burner_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 1 nominal capacity',
                                      {'name': u'Stage 1 Nominal Capacity',
                                       'pyname': u'stage_1_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'stage 1 parasitic electric load',
                                      {'name': u'Stage 1 Parasitic Electric Load',
                                       'pyname': u'stage_1_parasitic_electric_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'}),
                                     (u'stage 2 gas burner efficiency',
                                      {'name': u'Stage 2 Gas Burner Efficiency',
                                       'pyname': u'stage_2_gas_burner_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 2 nominal capacity',
                                      {'name': u'Stage 2 Nominal Capacity',
                                       'pyname': u'stage_2_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'stage 2 parasitic electric load',
                                      {'name': u'Stage 2 Parasitic Electric Load',
                                       'pyname': u'stage_2_parasitic_electric_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'}),
                                     (u'stage 3 gas burner efficiency',
                                      {'name': u'Stage 3 Gas Burner Efficiency',
                                       'pyname': u'stage_3_gas_burner_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 3 nominal capacity',
                                      {'name': u'Stage 3 Nominal Capacity',
                                       'pyname': u'stage_3_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'stage 3 parasitic electric load',
                                      {'name': u'Stage 3 Parasitic Electric Load',
                                       'pyname': u'stage_3_parasitic_electric_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'}),
                                     (u'stage 4 gas burner efficiency',
                                      {'name': u'Stage 4 Gas Burner Efficiency',
                                       'pyname': u'stage_4_gas_burner_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'stage 4 nominal capacity',
                                      {'name': u'Stage 4 Nominal Capacity',
                                       'pyname': u'stage_4_nominal_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'stage 4 parasitic electric load',
                                      {'name': u'Stage 4 Parasitic Electric Load',
                                       'pyname': u'stage_4_parasitic_electric_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'W'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name.

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set

        """
        return self["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD field `Temperature Setpoint Node Name`
        optional, used if coil is temperature control and not load-base
        controlled.

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Temperature Setpoint Node Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve, PLF = a + b*PLR + c*PLR**2
        cubic curve, PLF = a + b*PLR + c*PLR**2 + d*PLR**3
        PLF = part load fraction
        PLR = part load ratio (sensible heating load/steady state
        heating capacity)
        Coil runtime fraction = Part Load Ratio / PLF
        This part load degradation is for coil performance & will
        increase the gas consumption of the coil due to transient coil
        operation.

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Part Load Fraction Correlation Curve Name"] = value

    @property
    def parasitic_gas_load(self):
        """Get parasitic_gas_load.

        Returns:
            float: the value of `parasitic_gas_load` or None if not set

        """
        return self["Parasitic Gas Load"]

    @parasitic_gas_load.setter
    def parasitic_gas_load(self, value=None):
        """Corresponds to IDD field `Parasitic Gas Load` parasitic gas load
        associated with the gas coil operation (i.e., standing pilot)

        Args:
            value (float): value for IDD Field `Parasitic Gas Load`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Parasitic Gas Load"] = value

    @property
    def number_of_stages(self):
        """Get number_of_stages.

        Returns:
            int: the value of `number_of_stages` or None if not set

        """
        return self["Number of Stages"]

    @number_of_stages.setter
    def number_of_stages(self, value=None):
        """Corresponds to IDD field `Number of Stages` Enter the number of the
        following sets of data for coil capacity and Gas Burner Efficiency.

        Args:
            value (int): value for IDD Field `Number of Stages`
                value >= 1
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Stages"] = value

    @property
    def stage_1_gas_burner_efficiency(self):
        """Get stage_1_gas_burner_efficiency.

        Returns:
            float: the value of `stage_1_gas_burner_efficiency` or None if not set

        """
        return self["Stage 1 Gas Burner Efficiency"]

    @stage_1_gas_burner_efficiency.setter
    def stage_1_gas_burner_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 1 Gas Burner Efficiency`

        Args:
            value (float): value for IDD Field `Stage 1 Gas Burner Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 1 Gas Burner Efficiency"] = value

    @property
    def stage_1_nominal_capacity(self):
        """Get stage_1_nominal_capacity.

        Returns:
            float: the value of `stage_1_nominal_capacity` or None if not set

        """
        return self["Stage 1 Nominal Capacity"]

    @stage_1_nominal_capacity.setter
    def stage_1_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 1 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 1 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 1 Nominal Capacity"] = value

    @property
    def stage_1_parasitic_electric_load(self):
        """Get stage_1_parasitic_electric_load.

        Returns:
            float: the value of `stage_1_parasitic_electric_load` or None if not set

        """
        return self["Stage 1 Parasitic Electric Load"]

    @stage_1_parasitic_electric_load.setter
    def stage_1_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Stage 1 Parasitic Electric Load` Stage 1
        parasitic electric load associated with the gas coil operation such as
        an inducer fan, etc.  This will be modified by the part load ratio to
        reflect the time of operation in a timestep.

        Args:
            value (float): value for IDD Field `Stage 1 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 1 Parasitic Electric Load"] = value

    @property
    def stage_2_gas_burner_efficiency(self):
        """Get stage_2_gas_burner_efficiency.

        Returns:
            float: the value of `stage_2_gas_burner_efficiency` or None if not set

        """
        return self["Stage 2 Gas Burner Efficiency"]

    @stage_2_gas_burner_efficiency.setter
    def stage_2_gas_burner_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 2 Gas Burner Efficiency`

        Args:
            value (float): value for IDD Field `Stage 2 Gas Burner Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 2 Gas Burner Efficiency"] = value

    @property
    def stage_2_nominal_capacity(self):
        """Get stage_2_nominal_capacity.

        Returns:
            float: the value of `stage_2_nominal_capacity` or None if not set

        """
        return self["Stage 2 Nominal Capacity"]

    @stage_2_nominal_capacity.setter
    def stage_2_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 2 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 2 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 2 Nominal Capacity"] = value

    @property
    def stage_2_parasitic_electric_load(self):
        """Get stage_2_parasitic_electric_load.

        Returns:
            float: the value of `stage_2_parasitic_electric_load` or None if not set

        """
        return self["Stage 2 Parasitic Electric Load"]

    @stage_2_parasitic_electric_load.setter
    def stage_2_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Stage 2 Parasitic Electric Load` Stage 2
        parasitic electric load associated with the gas coil operation such as
        an inducer fan, etc.  This will be modified by the part load ratio to
        reflect the time of operation in a timestep.

        Args:
            value (float): value for IDD Field `Stage 2 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 2 Parasitic Electric Load"] = value

    @property
    def stage_3_gas_burner_efficiency(self):
        """Get stage_3_gas_burner_efficiency.

        Returns:
            float: the value of `stage_3_gas_burner_efficiency` or None if not set

        """
        return self["Stage 3 Gas Burner Efficiency"]

    @stage_3_gas_burner_efficiency.setter
    def stage_3_gas_burner_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 3 Gas Burner Efficiency`

        Args:
            value (float): value for IDD Field `Stage 3 Gas Burner Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 3 Gas Burner Efficiency"] = value

    @property
    def stage_3_nominal_capacity(self):
        """Get stage_3_nominal_capacity.

        Returns:
            float: the value of `stage_3_nominal_capacity` or None if not set

        """
        return self["Stage 3 Nominal Capacity"]

    @stage_3_nominal_capacity.setter
    def stage_3_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 3 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 3 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 3 Nominal Capacity"] = value

    @property
    def stage_3_parasitic_electric_load(self):
        """Get stage_3_parasitic_electric_load.

        Returns:
            float: the value of `stage_3_parasitic_electric_load` or None if not set

        """
        return self["Stage 3 Parasitic Electric Load"]

    @stage_3_parasitic_electric_load.setter
    def stage_3_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Stage 3 Parasitic Electric Load` Stage 3
        parasitic electric load associated with the gas coil operation such as
        an inducer fan, etc.  This will be modified by the part load ratio to
        reflect the time of operation in a timestep.

        Args:
            value (float): value for IDD Field `Stage 3 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 3 Parasitic Electric Load"] = value

    @property
    def stage_4_gas_burner_efficiency(self):
        """Get stage_4_gas_burner_efficiency.

        Returns:
            float: the value of `stage_4_gas_burner_efficiency` or None if not set

        """
        return self["Stage 4 Gas Burner Efficiency"]

    @stage_4_gas_burner_efficiency.setter
    def stage_4_gas_burner_efficiency(self, value=None):
        """Corresponds to IDD field `Stage 4 Gas Burner Efficiency`

        Args:
            value (float): value for IDD Field `Stage 4 Gas Burner Efficiency`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 4 Gas Burner Efficiency"] = value

    @property
    def stage_4_nominal_capacity(self):
        """Get stage_4_nominal_capacity.

        Returns:
            float: the value of `stage_4_nominal_capacity` or None if not set

        """
        return self["Stage 4 Nominal Capacity"]

    @stage_4_nominal_capacity.setter
    def stage_4_nominal_capacity(self, value=None):
        """Corresponds to IDD field `Stage 4 Nominal Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Stage 4 Nominal Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 4 Nominal Capacity"] = value

    @property
    def stage_4_parasitic_electric_load(self):
        """Get stage_4_parasitic_electric_load.

        Returns:
            float: the value of `stage_4_parasitic_electric_load` or None if not set

        """
        return self["Stage 4 Parasitic Electric Load"]

    @stage_4_parasitic_electric_load.setter
    def stage_4_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Stage 4 Parasitic Electric Load` Stage 4
        parasitic electric load associated with the gas coil operation such as
        an inducer fan, etc.  This will be modified by the part load ratio to
        reflect the time of operation in a timestep.

        Args:
            value (float): value for IDD Field `Stage 4 Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Stage 4 Parasitic Electric Load"] = value




class CoilHeatingDesuperheater(DataObject):

    """ Corresponds to IDD object `Coil:Heating:Desuperheater`
        Desuperheater air heating coil. The heating energy provided by this coil is reclaimed
        from the superheated refrigerant gas leaving a compressor and does not impact the
        performance of the compressor. If the coil is located directly in an air loop
        branch or outdoor air equipment list, then it is controlled on leaving air temperature
        and the Temperature Setpoint Node Name must be specified. If the coil is contained
        within another component such as a unitary system, then the coil is controlled by the
        parent component and the setpoint node name is not entered.
    """
    schema = {'min-fields': 7,
              'name': u'Coil:Heating:Desuperheater',
              'pyname': u'CoilHeatingDesuperheater',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heat reclaim recovery efficiency',
                                      {'name': u'Heat Reclaim Recovery Efficiency',
                                       'pyname': u'heat_reclaim_recovery_efficiency',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'heating source object type',
                                      {'name': u'Heating Source Object Type',
                                       'pyname': u'heating_source_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Coil:Cooling:DX:SingleSpeed',
                                                           u'Coil:Cooling:DX:TwoSpeed',
                                                           u'Coil:Cooling:DX:TwoStageWithHumidityControlMode',
                                                           u'Refrigeration:CompressorRack',
                                                           u'Refrigeration:Condenser:AirCooled',
                                                           u'Refrigeration:Condenser:EvaporativeCooled',
                                                           u'Refrigeration:Condenser:WaterCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heating source name',
                                      {'name': u'Heating Source Name',
                                       'pyname': u'heating_source_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'temperature setpoint node name',
                                      {'name': u'Temperature Setpoint Node Name',
                                       'pyname': u'temperature_setpoint_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'parasitic electric load',
                                      {'name': u'Parasitic Electric Load',
                                       'pyname': u'parasitic_electric_load',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def heat_reclaim_recovery_efficiency(self):
        """Get heat_reclaim_recovery_efficiency.

        Returns:
            float: the value of `heat_reclaim_recovery_efficiency` or None if not set

        """
        return self["Heat Reclaim Recovery Efficiency"]

    @heat_reclaim_recovery_efficiency.setter
    def heat_reclaim_recovery_efficiency(self, value=None):
        """Corresponds to IDD field `Heat Reclaim Recovery Efficiency`

        Args:
            value (float): value for IDD Field `Heat Reclaim Recovery Efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heat Reclaim Recovery Efficiency"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def heating_source_object_type(self):
        """Get heating_source_object_type.

        Returns:
            str: the value of `heating_source_object_type` or None if not set

        """
        return self["Heating Source Object Type"]

    @heating_source_object_type.setter
    def heating_source_object_type(self, value=None):
        """Corresponds to IDD field `Heating Source Object Type`

        Args:
            value (str): value for IDD Field `Heating Source Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Source Object Type"] = value

    @property
    def heating_source_name(self):
        """Get heating_source_name.

        Returns:
            str: the value of `heating_source_name` or None if not set

        """
        return self["Heating Source Name"]

    @heating_source_name.setter
    def heating_source_name(self, value=None):
        """Corresponds to IDD field `Heating Source Name`

        Args:
            value (str): value for IDD Field `Heating Source Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Source Name"] = value

    @property
    def temperature_setpoint_node_name(self):
        """Get temperature_setpoint_node_name.

        Returns:
            str: the value of `temperature_setpoint_node_name` or None if not set

        """
        return self["Temperature Setpoint Node Name"]

    @temperature_setpoint_node_name.setter
    def temperature_setpoint_node_name(self, value=None):
        """  Corresponds to IDD field `Temperature Setpoint Node Name`
        Required if coil is temperature controlled.
        Temperature-based control requires the use of a SetpointManager object

        Args:
            value (str): value for IDD Field `Temperature Setpoint Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Temperature Setpoint Node Name"] = value

    @property
    def parasitic_electric_load(self):
        """Get parasitic_electric_load.

        Returns:
            float: the value of `parasitic_electric_load` or None if not set

        """
        return self["Parasitic Electric Load"]

    @parasitic_electric_load.setter
    def parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Parasitic Electric Load` parasitic
        electric load associated with the desuperheater coil operation such as
        solenoid valves, etc.

        Args:
            value (float): value for IDD Field `Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Parasitic Electric Load"] = value




class CoilHeatingDxSingleSpeed(DataObject):

    """ Corresponds to IDD object `Coil:Heating:DX:SingleSpeed`
        Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit
        (includes electric compressor and outdoor fan), single-speed, with defrost controls.
    """
    schema = {'min-fields': 21,
              'name': u'Coil:Heating:DX:SingleSpeed',
              'pyname': u'CoilHeatingDxSingleSpeed',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'gross rated heating capacity',
                                      {'name': u'Gross Rated Heating Capacity',
                                       'pyname': u'gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'gross rated heating cop',
                                      {'name': u'Gross Rated Heating COP',
                                       'pyname': u'gross_rated_heating_cop',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'rated air flow rate',
                                      {'name': u'Rated Air Flow Rate',
                                       'pyname': u'rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated supply fan power per volume flow rate',
                                      {'name': u'Rated Supply Fan Power Per Volume Flow Rate',
                                       'pyname': u'rated_supply_fan_power_per_volume_flow_rate',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'heating capacity function of temperature curve name',
                                      {'name': u'Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'heating_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating capacity function of flow fraction curve name',
                                      {'name': u'Heating Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'heating_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of temperature curve name',
                                      {'name': u'Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'energy input ratio function of flow fraction curve name',
                                      {'name': u'Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'part load fraction correlation curve name',
                                      {'name': u'Part Load Fraction Correlation Curve Name',
                                       'pyname': u'part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'defrost energy input ratio function of temperature curve name',
                                      {'name': u'Defrost Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'defrost_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'minimum outdoor dry-bulb temperature for compressor operation',
                                      {'name': u'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation',
                                       'pyname': u'minimum_outdoor_drybulb_temperature_for_compressor_operation',
                                       'default': -8.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': -20.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'outdoor dry-bulb temperature to turn on compressor',
                                      {'name': u'Outdoor Dry-Bulb Temperature to Turn On Compressor',
                                       'pyname': u'outdoor_drybulb_temperature_to_turn_on_compressor',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'maximum outdoor dry-bulb temperature for defrost operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Defrost Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_defrost_operation',
                                       'default': 5.0,
                                       'maximum': 7.22,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum outdoor dry-bulb temperature for crankcase heater operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'defrost strategy',
                                      {'name': u'Defrost Strategy',
                                       'pyname': u'defrost_strategy',
                                       'default': u'ReverseCycle',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'ReverseCycle',
                                                           u'Resistive'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'defrost control',
                                      {'name': u'Defrost Control',
                                       'pyname': u'defrost_control',
                                       'default': u'Timed',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Timed',
                                                           u'OnDemand'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'defrost time period fraction',
                                      {'name': u'Defrost Time Period Fraction',
                                       'pyname': u'defrost_time_period_fraction',
                                       'default': 0.058333,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'resistive defrost heater capacity',
                                      {'name': u'Resistive Defrost Heater Capacity',
                                       'pyname': u'resistive_defrost_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'region number for calculating hspf',
                                      {'name': u'Region number for calculating HSPF',
                                       'pyname': u'region_number_for_calculating_hspf',
                                       'default': 4,
                                       'maximum': 6,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'evaporator air inlet node name',
                                      {'name': u'Evaporator Air Inlet Node Name',
                                       'pyname': u'evaporator_air_inlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity.

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set

        """
        return self["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD field `Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Gross Rated Heating Capacity"] = value

    @property
    def gross_rated_heating_cop(self):
        """Get gross_rated_heating_cop.

        Returns:
            float: the value of `gross_rated_heating_cop` or None if not set

        """
        return self["Gross Rated Heating COP"]

    @gross_rated_heating_cop.setter
    def gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Gross Rated Heating COP` Rated heating
        capacity divided by power input to the compressor and outdoor fan, does
        not include supply air fan heat or supply air fan electrical energy
        does not include supply air fan heat or supply air fan electrical
        energy.

        Args:
            value (float): value for IDD Field `Gross Rated Heating COP`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Heating COP"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate.

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set

        """
        return self["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated heating capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Air Flow Rate"] = value

    @property
    def rated_supply_fan_power_per_volume_flow_rate(self):
        """Get rated_supply_fan_power_per_volume_flow_rate.

        Returns:
            float: the value of `rated_supply_fan_power_per_volume_flow_rate` or None if not set

        """
        return self["Rated Supply Fan Power Per Volume Flow Rate"]

    @rated_supply_fan_power_per_volume_flow_rate.setter
    def rated_supply_fan_power_per_volume_flow_rate(self, value=773.3):
        """Corresponds to IDD field `Rated Supply Fan Power Per Volume Flow
        Rate` Enter the supply fan power per air volume flow rate at the rated
        test conditions. The test conditions vary external static pressure
        based on heating capacity. This value is only used to calculate Heating
        Seasonal Performance Factor(HSPF). This value is not used for modeling
        the supply (condenser) fan during simulations.

        Args:
            value (float): value for IDD Field `Rated Supply Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Supply Fan Power Per Volume Flow Rate"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def heating_capacity_function_of_temperature_curve_name(self):
        """Get heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self["Heating Capacity Function of Temperature Curve Name"]

    @heating_capacity_function_of_temperature_curve_name.setter
    def heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD field `Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        Biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get heating_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `heating_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Heating Capacity Function of Flow Fraction Curve Name"]

    @heating_capacity_function_of_flow_fraction_curve_name.setter
    def heating_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def energy_input_ratio_function_of_temperature_curve_name(self):
        """Get energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Temperature Curve Name"]

    @energy_input_ratio_function_of_temperature_curve_name.setter
    def energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self["Energy Input Ratio Function of Flow Fraction Curve Name"]

    @energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Part Load Fraction Correlation Curve Name"] = value

    @property
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get defrost_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `defrost_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Defrost Energy Input Ratio Function of Temperature Curve Name"]

    @defrost_energy_input_ratio_function_of_temperature_curve_name.setter
    def defrost_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Defrost Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat
        wb = wet-bulb temperature (C) of air entering the indoor coil
        oat = outdoor air dry-bulb temperature (C)
        only required if ReverseCycle defrost strategy is specified

        Args:
            value (str): value for IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Defrost Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation.

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set

        """
        return self[
            "Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(
            self,
            value=-
            8.0):
        """  Corresponds to IDD field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`

        Args:
            value (float): value for IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
                Units: C
                Default value: -8.0
                value >= -20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def outdoor_drybulb_temperature_to_turn_on_compressor(self):
        """Get outdoor_drybulb_temperature_to_turn_on_compressor.

        Returns:
            float: the value of `outdoor_drybulb_temperature_to_turn_on_compressor` or None if not set

        """
        return self["Outdoor Dry-Bulb Temperature to Turn On Compressor"]

    @outdoor_drybulb_temperature_to_turn_on_compressor.setter
    def outdoor_drybulb_temperature_to_turn_on_compressor(self, value=None):
        """  Corresponds to IDD field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
        The outdoor temperature when the compressor is automatically turned back on following an
        automatic shut off because of low outdoor dry-bulb temperature. This field is only used
        for the calculation of HSPF. If this field is not provided, then outdoor bin temperature
        used in the HSPF calculation is always considered to be greater than this temperature and
        'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.
        This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error
        in the final value of HSPF.

        Args:
            value (float): value for IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_defrost_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(
            self,
            value=5.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
                Units: C
                Default value: 5.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """Corresponds to IDD field `Crankcase Heater Capacity`

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self):
        """Get
        maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def defrost_strategy(self):
        """Get defrost_strategy.

        Returns:
            str: the value of `defrost_strategy` or None if not set

        """
        return self["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="ReverseCycle"):
        """Corresponds to IDD field `Defrost Strategy`

        Args:
            value (str): value for IDD Field `Defrost Strategy`
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """Get defrost_control.

        Returns:
            str: the value of `defrost_control` or None if not set

        """
        return self["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """Corresponds to IDD field `Defrost Control`

        Args:
            value (str): value for IDD Field `Defrost Control`
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """Get defrost_time_period_fraction.

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set

        """
        return self["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333):
        """Corresponds to IDD field `Defrost Time Period Fraction` Fraction of
        time in defrost mode only applicable if timed defrost control is
        specified.

        Args:
            value (float): value for IDD Field `Defrost Time Period Fraction`
                Default value: 0.058333
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """Get resistive_defrost_heater_capacity.

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set

        """
        return self["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value=None):
        """Corresponds to IDD field `Resistive Defrost Heater Capacity` only
        applicable if resistive defrost strategy is specified.

        Args:
            value (float or "Autosize"): value for IDD Field `Resistive Defrost Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Resistive Defrost Heater Capacity"] = value

    @property
    def region_number_for_calculating_hspf(self):
        """Get region_number_for_calculating_hspf.

        Returns:
            int: the value of `region_number_for_calculating_hspf` or None if not set

        """
        return self["Region number for calculating HSPF"]

    @region_number_for_calculating_hspf.setter
    def region_number_for_calculating_hspf(self, value=4):
        """Corresponds to IDD field `Region number for calculating HSPF`
        Standard Region number for which HSPF and other standard ratings are
        calculated.

        Args:
            value (int): value for IDD Field `Region number for calculating HSPF`
                Default value: 4
                value >= 1
                value <= 6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Region number for calculating HSPF"] = value

    @property
    def evaporator_air_inlet_node_name(self):
        """Get evaporator_air_inlet_node_name.

        Returns:
            str: the value of `evaporator_air_inlet_node_name` or None if not set

        """
        return self["Evaporator Air Inlet Node Name"]

    @evaporator_air_inlet_node_name.setter
    def evaporator_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Evaporator Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Evaporator Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Evaporator Air Inlet Node Name"] = value




class CoilHeatingDxMultiSpeed(DataObject):

    """ Corresponds to IDD object `Coil:Heating:DX:MultiSpeed`
        Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit
        (includes electric or engine-driven compressor and outdoor fan), multi-speed
        (or variable-speed), with defrost controls. Requires two to four sets
        of performance data and will interpolate between speeds.
    """
    schema = {'min-fields': 40,
              'name': u'Coil:Heating:DX:MultiSpeed',
              'pyname': u'CoilHeatingDxMultiSpeed',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'minimum outdoor dry-bulb temperature for compressor operation',
                                      {'name': u'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation',
                                       'pyname': u'minimum_outdoor_drybulb_temperature_for_compressor_operation',
                                       'default': -8.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'outdoor dry-bulb temperature to turn on compressor',
                                      {'name': u'Outdoor Dry-Bulb Temperature to Turn On Compressor',
                                       'pyname': u'outdoor_drybulb_temperature_to_turn_on_compressor',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum outdoor dry-bulb temperature for crankcase heater operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'defrost energy input ratio function of temperature curve name',
                                      {'name': u'Defrost Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'defrost_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'maximum outdoor dry-bulb temperature for defrost operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Defrost Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_defrost_operation',
                                       'default': 5.0,
                                       'maximum': 7.22,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'defrost strategy',
                                      {'name': u'Defrost Strategy',
                                       'pyname': u'defrost_strategy',
                                       'default': u'ReverseCycle',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'ReverseCycle',
                                                           u'Resistive'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'defrost control',
                                      {'name': u'Defrost Control',
                                       'pyname': u'defrost_control',
                                       'default': u'Timed',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Timed',
                                                           u'OnDemand'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'defrost time period fraction',
                                      {'name': u'Defrost Time Period Fraction',
                                       'pyname': u'defrost_time_period_fraction',
                                       'default': 0.058333,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'resistive defrost heater capacity',
                                      {'name': u'Resistive Defrost Heater Capacity',
                                       'pyname': u'resistive_defrost_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'apply part load fraction to speeds greater than 1',
                                      {'name': u'Apply Part Load Fraction to Speeds Greater than 1',
                                       'pyname': u'apply_part_load_fraction_to_speeds_greater_than_1',
                                       'default': u'No',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'fuel type',
                                      {'name': u'Fuel Type',
                                       'pyname': u'fuel_type',
                                       'default': u'NaturalGas',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Electricity',
                                                           u'NaturalGas',
                                                           u'PropaneGas',
                                                           u'Diesel',
                                                           u'Gasoline',
                                                           u'FuelOil#1',
                                                           u'FuelOil#2',
                                                           u'OtherFuel1',
                                                           u'OtherFuel2'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'region number for calculating hspf',
                                      {'name': u'Region number for Calculating HSPF',
                                       'pyname': u'region_number_for_calculating_hspf',
                                       'default': 4,
                                       'maximum': 6,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'number of speeds',
                                      {'name': u'Number of Speeds',
                                       'pyname': u'number_of_speeds',
                                       'maximum': 4,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 2,
                                       'autocalculatable': False,
                                       'type': u'integer'}),
                                     (u'speed 1 gross rated heating capacity',
                                      {'name': u'Speed 1 Gross Rated Heating Capacity',
                                       'pyname': u'speed_1_gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 1 gross rated heating cop',
                                      {'name': u'Speed 1 Gross Rated Heating COP',
                                       'pyname': u'speed_1_gross_rated_heating_cop',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 1 rated air flow rate',
                                      {'name': u'Speed 1 Rated Air Flow Rate',
                                       'pyname': u'speed_1_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 rated supply air fan power per volume flow rate',
                                      {'name': u'Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate',
                                       'pyname': u'speed_1_rated_supply_air_fan_power_per_volume_flow_rate',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 1 heating capacity function of temperature curve name',
                                      {'name': u'Speed 1 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_1_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 heating capacity function of flow fraction curve name',
                                      {'name': u'Speed 1 Heating Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_1_heating_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 part load fraction correlation curve name',
                                      {'name': u'Speed 1 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_1_part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 rated waste heat fraction of power input',
                                      {'name': u'Speed 1 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_1_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 waste heat function of temperature curve name',
                                      {'name': u'Speed 1 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_1_waste_heat_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 gross rated heating capacity',
                                      {'name': u'Speed 2 Gross Rated Heating Capacity',
                                       'pyname': u'speed_2_gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 2 gross rated heating cop',
                                      {'name': u'Speed 2 Gross Rated Heating COP',
                                       'pyname': u'speed_2_gross_rated_heating_cop',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 2 rated air flow rate',
                                      {'name': u'Speed 2 Rated Air Flow Rate',
                                       'pyname': u'speed_2_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 rated supply air fan power per volume flow rate',
                                      {'name': u'Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate',
                                       'pyname': u'speed_2_rated_supply_air_fan_power_per_volume_flow_rate',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 2 heating capacity function of temperature curve name',
                                      {'name': u'Speed 2 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_2_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 heating capacity function of flow fraction curve name',
                                      {'name': u'Speed 2 Heating Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_2_heating_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 part load fraction correlation curve name',
                                      {'name': u'Speed 2 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_2_part_load_fraction_correlation_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 rated waste heat fraction of power input',
                                      {'name': u'Speed 2 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_2_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 waste heat function of temperature curve name',
                                      {'name': u'Speed 2 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_2_waste_heat_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 gross rated heating capacity',
                                      {'name': u'Speed 3 Gross Rated Heating Capacity',
                                       'pyname': u'speed_3_gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 3 gross rated heating cop',
                                      {'name': u'Speed 3 Gross Rated Heating COP',
                                       'pyname': u'speed_3_gross_rated_heating_cop',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 3 rated air flow rate',
                                      {'name': u'Speed 3 Rated Air Flow Rate',
                                       'pyname': u'speed_3_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 rated supply air fan power per volume flow rate',
                                      {'name': u'Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate',
                                       'pyname': u'speed_3_rated_supply_air_fan_power_per_volume_flow_rate',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 3 heating capacity function of temperature curve name',
                                      {'name': u'Speed 3 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_3_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 heating capacity function of flow fraction curve name',
                                      {'name': u'Speed 3 Heating Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_3_heating_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 part load fraction correlation curve name',
                                      {'name': u'Speed 3 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_3_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 rated waste heat fraction of power input',
                                      {'name': u'Speed 3 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_3_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 waste heat function of temperature curve name',
                                      {'name': u'Speed 3 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_3_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 gross rated heating capacity',
                                      {'name': u'Speed 4 Gross Rated Heating Capacity',
                                       'pyname': u'speed_4_gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 4 gross rated heating cop',
                                      {'name': u'Speed 4 Gross Rated Heating COP',
                                       'pyname': u'speed_4_gross_rated_heating_cop',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'speed 4 rated air flow rate',
                                      {'name': u'Speed 4 Rated Air Flow Rate',
                                       'pyname': u'speed_4_rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 rated supply air fan power per volume flow rate',
                                      {'name': u'Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate',
                                       'pyname': u'speed_4_rated_supply_air_fan_power_per_volume_flow_rate',
                                       'default': 773.3,
                                       'maximum': 1250.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/(m3/s)'}),
                                     (u'speed 4 heating capacity function of temperature curve name',
                                      {'name': u'Speed 4 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_4_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 heating capacity function of flow fraction curve name',
                                      {'name': u'Speed 4 Heating Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_4_heating_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 part load fraction correlation curve name',
                                      {'name': u'Speed 4 Part Load Fraction Correlation Curve Name',
                                       'pyname': u'speed_4_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 rated waste heat fraction of power input',
                                      {'name': u'Speed 4 Rated Waste Heat Fraction of Power Input',
                                       'pyname': u'speed_4_rated_waste_heat_fraction_of_power_input',
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 waste heat function of temperature curve name',
                                      {'name': u'Speed 4 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_4_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation.

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set

        """
        return self[
            "Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(
            self,
            value=-
            8.0):
        """  Corresponds to IDD field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`

        Args:
            value (float): value for IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
                Units: C
                Default value: -8.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def outdoor_drybulb_temperature_to_turn_on_compressor(self):
        """Get outdoor_drybulb_temperature_to_turn_on_compressor.

        Returns:
            float: the value of `outdoor_drybulb_temperature_to_turn_on_compressor` or None if not set

        """
        return self["Outdoor Dry-Bulb Temperature to Turn On Compressor"]

    @outdoor_drybulb_temperature_to_turn_on_compressor.setter
    def outdoor_drybulb_temperature_to_turn_on_compressor(self, value=None):
        """  Corresponds to IDD field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
        The outdoor temperature when the compressor is automatically turned back on following an
        automatic shut off because of low outdoor dry-bulb temperature. This field is only used
        for the calculation of HSPF. If this field is not provided, then outdoor bin temperature
        used in the HSPF calculation is always considered to be greater than this temperature and
        'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.
        This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error
        in the final value of HSPF.

        Args:
            value (float): value for IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """Corresponds to IDD field `Crankcase Heater Capacity`

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self):
        """Get
        maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get defrost_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `defrost_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Defrost Energy Input Ratio Function of Temperature Curve Name"]

    @defrost_energy_input_ratio_function_of_temperature_curve_name.setter
    def defrost_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Defrost Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat
        wb = wet-bulb temperature (C) of air entering the indoor coil
        oat = outdoor air dry-bulb temperature (C)
        only required if ReverseCycle defrost strategy is specified

        Args:
            value (str): value for IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Defrost Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_defrost_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(
            self,
            value=5.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
                Units: C
                Default value: 5.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = value

    @property
    def defrost_strategy(self):
        """Get defrost_strategy.

        Returns:
            str: the value of `defrost_strategy` or None if not set

        """
        return self["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="ReverseCycle"):
        """Corresponds to IDD field `Defrost Strategy`

        Args:
            value (str): value for IDD Field `Defrost Strategy`
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """Get defrost_control.

        Returns:
            str: the value of `defrost_control` or None if not set

        """
        return self["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """Corresponds to IDD field `Defrost Control`

        Args:
            value (str): value for IDD Field `Defrost Control`
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """Get defrost_time_period_fraction.

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set

        """
        return self["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333):
        """Corresponds to IDD field `Defrost Time Period Fraction` Fraction of
        time in defrost mode only applicable if timed defrost control is
        specified.

        Args:
            value (float): value for IDD Field `Defrost Time Period Fraction`
                Default value: 0.058333
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """Get resistive_defrost_heater_capacity.

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set

        """
        return self["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value=None):
        """Corresponds to IDD field `Resistive Defrost Heater Capacity` only
        applicable if resistive defrost strategy is specified.

        Args:
            value (float or "Autosize"): value for IDD Field `Resistive Defrost Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Resistive Defrost Heater Capacity"] = value

    @property
    def apply_part_load_fraction_to_speeds_greater_than_1(self):
        """Get apply_part_load_fraction_to_speeds_greater_than_1.

        Returns:
            str: the value of `apply_part_load_fraction_to_speeds_greater_than_1` or None if not set

        """
        return self["Apply Part Load Fraction to Speeds Greater than 1"]

    @apply_part_load_fraction_to_speeds_greater_than_1.setter
    def apply_part_load_fraction_to_speeds_greater_than_1(self, value="No"):
        """Corresponds to IDD field `Apply Part Load Fraction to Speeds Greater
        than 1`

        Args:
            value (str): value for IDD Field `Apply Part Load Fraction to Speeds Greater than 1`
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Apply Part Load Fraction to Speeds Greater than 1"] = value

    @property
    def fuel_type(self):
        """Get fuel_type.

        Returns:
            str: the value of `fuel_type` or None if not set

        """
        return self["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="NaturalGas"):
        """Corresponds to IDD field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Default value: NaturalGas
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fuel Type"] = value

    @property
    def region_number_for_calculating_hspf(self):
        """Get region_number_for_calculating_hspf.

        Returns:
            int: the value of `region_number_for_calculating_hspf` or None if not set

        """
        return self["Region number for Calculating HSPF"]

    @region_number_for_calculating_hspf.setter
    def region_number_for_calculating_hspf(self, value=4):
        """Corresponds to IDD field `Region number for Calculating HSPF`
        Standard Region number for which HSPF and other standard ratings are
        calculated.

        Args:
            value (int): value for IDD Field `Region number for Calculating HSPF`
                Default value: 4
                value >= 1
                value <= 6
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Region number for Calculating HSPF"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds.

        Returns:
            int: the value of `number_of_speeds` or None if not set

        """
        return self["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=None):
        """Corresponds to IDD field `Number of Speeds` Enter the number of the
        following sets of data for coil capacity, COP, flow rate, and
        associated curves.

        Args:
            value (int): value for IDD Field `Number of Speeds`
                value >= 2
                value <= 4
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Speeds"] = value

    @property
    def speed_1_gross_rated_heating_capacity(self):
        """Get speed_1_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_1_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 1 Gross Rated Heating Capacity"]

    @speed_1_gross_rated_heating_capacity.setter
    def speed_1_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 1 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 1 Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Gross Rated Heating Capacity"] = value

    @property
    def speed_1_gross_rated_heating_cop(self):
        """Get speed_1_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_1_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 1 Gross Rated Heating COP"]

    @speed_1_gross_rated_heating_cop.setter
    def speed_1_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 1 Gross Rated Heating COP` Rated
        heating capacity divided by power input to the compressor and outdoor
        fan, does not include supply air fan heat or supply air fan electrical
        energy.

        Args:
            value (float): value for IDD Field `Speed 1 Gross Rated Heating COP`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Gross Rated Heating COP"] = value

    @property
    def speed_1_rated_air_flow_rate(self):
        """Get speed_1_rated_air_flow_rate.

        Returns:
            float: the value of `speed_1_rated_air_flow_rate` or None if not set

        """
        return self["Speed 1 Rated Air Flow Rate"]

    @speed_1_rated_air_flow_rate.setter
    def speed_1_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 1 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 1 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Rated Air Flow Rate"] = value

    @property
    def speed_1_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_1_rated_supply_air_fan_power_per_volume_flow_rate.

        Returns:
            float: the value of `speed_1_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set

        """
        return self["Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_1_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_1_rated_supply_air_fan_power_per_volume_flow_rate(
            self,
            value=773.3):
        """Corresponds to IDD field `Speed 1 Rated Supply Air Fan Power Per
        Volume Flow Rate` Enter the supply air fan power per air volume flow
        rate at the rated speed 1 test conditions. The test conditions vary
        external static pressure based on heating capacity. This value is only
        used to calculate Heating Seasonal Performance Factor(HSPF). This value
        is not used for modeling the supply air fan during simulations.

        Args:
            value (float): value for IDD Field `Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_1_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Heating Capacity Function of Temperature Curve Name"]

    @speed_1_heating_capacity_function_of_temperature_curve_name.setter
    def speed_1_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_1_heating_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_1_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_1_heating_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_1_part_load_fraction_correlation_curve_name(self):
        """Get speed_1_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_1_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 1 Part Load Fraction Correlation Curve Name"]

    @speed_1_part_load_fraction_correlation_curve_name.setter
    def speed_1_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 1 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)

        Args:
            value (str): value for IDD Field `Speed 1 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_1_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_1_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_1_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 1 Rated Waste Heat Fraction of Power Input"]

    @speed_1_rated_waste_heat_fraction_of_power_input.setter
    def speed_1_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 1 Rated Waste Heat Fraction of Power
        Input` recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 1 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_gross_rated_heating_capacity(self):
        """Get speed_2_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_2_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 2 Gross Rated Heating Capacity"]

    @speed_2_gross_rated_heating_capacity.setter
    def speed_2_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 2 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 2 Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Gross Rated Heating Capacity"] = value

    @property
    def speed_2_gross_rated_heating_cop(self):
        """Get speed_2_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_2_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 2 Gross Rated Heating COP"]

    @speed_2_gross_rated_heating_cop.setter
    def speed_2_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 2 Gross Rated Heating COP` Rated
        heating capacity divided by power input to the compressor and outdoor
        fan, does not include supply air fan heat or supply air fan electrical
        energy.

        Args:
            value (float): value for IDD Field `Speed 2 Gross Rated Heating COP`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Gross Rated Heating COP"] = value

    @property
    def speed_2_rated_air_flow_rate(self):
        """Get speed_2_rated_air_flow_rate.

        Returns:
            float: the value of `speed_2_rated_air_flow_rate` or None if not set

        """
        return self["Speed 2 Rated Air Flow Rate"]

    @speed_2_rated_air_flow_rate.setter
    def speed_2_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 2 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 2 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Rated Air Flow Rate"] = value

    @property
    def speed_2_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_2_rated_supply_air_fan_power_per_volume_flow_rate.

        Returns:
            float: the value of `speed_2_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set

        """
        return self["Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_2_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_2_rated_supply_air_fan_power_per_volume_flow_rate(
            self,
            value=773.3):
        """Corresponds to IDD field `Speed 2 Rated Supply Air Fan Power Per
        Volume Flow Rate` Enter the supply air fan power per air volume flow
        rate at the rated speed 2 test conditions. The test conditions vary
        external static pressure based on heating capacity. This value is only
        used to calculate Heating Seasonal Performance Factor(HSPF). This value
        is not used for modeling the supply air fan during simulations.

        Args:
            value (float): value for IDD Field `Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_2_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Heating Capacity Function of Temperature Curve Name"]

    @speed_2_heating_capacity_function_of_temperature_curve_name.setter
    def speed_2_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_2_heating_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_2_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_2_heating_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_2_part_load_fraction_correlation_curve_name(self):
        """Get speed_2_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_2_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 2 Part Load Fraction Correlation Curve Name"]

    @speed_2_part_load_fraction_correlation_curve_name.setter
    def speed_2_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 2 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)

        Args:
            value (str): value for IDD Field `Speed 2 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_2_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_2_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_2_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 2 Rated Waste Heat Fraction of Power Input"]

    @speed_2_rated_waste_heat_fraction_of_power_input.setter
    def speed_2_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 2 Rated Waste Heat Fraction of Power
        Input` recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 2 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_gross_rated_heating_capacity(self):
        """Get speed_3_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_3_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 3 Gross Rated Heating Capacity"]

    @speed_3_gross_rated_heating_capacity.setter
    def speed_3_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 3 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 3 Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Gross Rated Heating Capacity"] = value

    @property
    def speed_3_gross_rated_heating_cop(self):
        """Get speed_3_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_3_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 3 Gross Rated Heating COP"]

    @speed_3_gross_rated_heating_cop.setter
    def speed_3_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 3 Gross Rated Heating COP` Rated
        heating capacity divided by power input to the compressor and outdoor
        fan, does not include supply air fan heat or supply air fan electrical
        energy.

        Args:
            value (float): value for IDD Field `Speed 3 Gross Rated Heating COP`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Gross Rated Heating COP"] = value

    @property
    def speed_3_rated_air_flow_rate(self):
        """Get speed_3_rated_air_flow_rate.

        Returns:
            float: the value of `speed_3_rated_air_flow_rate` or None if not set

        """
        return self["Speed 3 Rated Air Flow Rate"]

    @speed_3_rated_air_flow_rate.setter
    def speed_3_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 3 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 3 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Rated Air Flow Rate"] = value

    @property
    def speed_3_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_3_rated_supply_air_fan_power_per_volume_flow_rate.

        Returns:
            float: the value of `speed_3_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set

        """
        return self["Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_3_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_3_rated_supply_air_fan_power_per_volume_flow_rate(
            self,
            value=773.3):
        """Corresponds to IDD field `Speed 3 Rated Supply Air Fan Power Per
        Volume Flow Rate` Enter the supply air fan power per air volume flow
        rate at the rated speed 3 test conditions. The test conditions vary
        external static pressure based on heating capacity. This value is only
        used to calculate Heating Seasonal Performance Factor(HSPF). This value
        is not used for modeling the supply air fan during simulations.

        Args:
            value (float): value for IDD Field `Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_3_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Heating Capacity Function of Temperature Curve Name"]

    @speed_3_heating_capacity_function_of_temperature_curve_name.setter
    def speed_3_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_3_heating_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_3_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_3_heating_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Heating Capacity Function of Flow Fraction Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_3_part_load_fraction_correlation_curve_name(self):
        """Get speed_3_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_3_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 3 Part Load Fraction Correlation Curve Name"]

    @speed_3_part_load_fraction_correlation_curve_name.setter
    def speed_3_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 3 Part Load Fraction Correlation Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)

        Args:
            value (str): value for IDD Field `Speed 3 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_3_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_3_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_3_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 3 Rated Waste Heat Fraction of Power Input"]

    @speed_3_rated_waste_heat_fraction_of_power_input.setter
    def speed_3_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 3 Rated Waste Heat Fraction of Power
        Input` recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 3 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_gross_rated_heating_capacity(self):
        """Get speed_4_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_4_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 4 Gross Rated Heating Capacity"]

    @speed_4_gross_rated_heating_capacity.setter
    def speed_4_gross_rated_heating_capacity(self, value=None):
        """  Corresponds to IDD field `Speed 4 Gross Rated Heating Capacity`
        Heating capacity not accounting for the effect of supply air fan heat
        capacity excluding supply air fan heat
        rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        rating point heating coil entering air dry-bulb 21.11 C, coil entering
        wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 4 Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Gross Rated Heating Capacity"] = value

    @property
    def speed_4_gross_rated_heating_cop(self):
        """Get speed_4_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_4_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 4 Gross Rated Heating COP"]

    @speed_4_gross_rated_heating_cop.setter
    def speed_4_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 4 Gross Rated Heating COP` Rated
        heating capacity divided by power input to the compressor and outdoor
        fan, does not include supply air fan heat or supply air fan electrical
        energy.

        Args:
            value (float): value for IDD Field `Speed 4 Gross Rated Heating COP`
                Units: W/W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Gross Rated Heating COP"] = value

    @property
    def speed_4_rated_air_flow_rate(self):
        """Get speed_4_rated_air_flow_rate.

        Returns:
            float: the value of `speed_4_rated_air_flow_rate` or None if not set

        """
        return self["Speed 4 Rated Air Flow Rate"]

    @speed_4_rated_air_flow_rate.setter
    def speed_4_rated_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Speed 4 Rated Air Flow Rate`
        Flow rate corresponding to rated total capacity
        should be between 0.00004027 m3/s and .00006041 m3/s per watt of rated total
        heating capacity

        Args:
            value (float or "Autosize"): value for IDD Field `Speed 4 Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Rated Air Flow Rate"] = value

    @property
    def speed_4_rated_supply_air_fan_power_per_volume_flow_rate(self):
        """Get speed_4_rated_supply_air_fan_power_per_volume_flow_rate.

        Returns:
            float: the value of `speed_4_rated_supply_air_fan_power_per_volume_flow_rate` or None if not set

        """
        return self["Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate"]

    @speed_4_rated_supply_air_fan_power_per_volume_flow_rate.setter
    def speed_4_rated_supply_air_fan_power_per_volume_flow_rate(
            self,
            value=773.3):
        """Corresponds to IDD field `Speed 4 Rated Supply Air Fan Power Per
        Volume Flow Rate` Enter the supply air fan power per air volume flow
        rate at the rated speed 4 test conditions. The test conditions vary
        external static pressure based on heating capacity. This value is only
        used to calculate Heating Seasonal Performance Factor(HSPF). This value
        is not used for modeling the supply air fan during simulations.

        Args:
            value (float): value for IDD Field `Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate`
                Units: W/(m3/s)
                Default value: 773.3
                value <= 1250.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Rated Supply Air Fan Power Per Volume Flow Rate"] = value

    @property
    def speed_4_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Heating Capacity Function of Temperature Curve Name"]

    @speed_4_heating_capacity_function_of_temperature_curve_name.setter
    def speed_4_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the heating capacity to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_heating_capacity_function_of_flow_fraction_curve_name(self):
        """Get speed_4_heating_capacity_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Heating Capacity Function of Flow Fraction Curve Name"]

    @speed_4_heating_capacity_function_of_flow_fraction_curve_name.setter
    def speed_4_heating_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Heating Capacity Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Heating Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        quadratic curve = a + b*oat + c*oat**2
        cubic curve = a + b*oat + c*oat**2 + d*oat**3
        biquadratic curve = a + b*iat + c*iat**2 + d*oat + e*oat**2 + f*iat*oat
        oat = outdoor air dry-bulb temperature (C)
        iat = indoor air dry-bulb temperature (C)
        biquadratic curve is recommended if sufficient manufacturer data is
        available for the energy input ratio to be sensitive to both iat and oat.

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = fraction of the full load flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def speed_4_part_load_fraction_correlation_curve_name(self):
        """Get speed_4_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `speed_4_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Speed 4 Part Load Fraction Correlation Curve Name"]

    @speed_4_part_load_fraction_correlation_curve_name.setter
    def speed_4_part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Speed 4 Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (sensible heating load/steady state heating capacity)

        Args:
            value (str): value for IDD Field `Speed 4 Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Part Load Fraction Correlation Curve Name"] = value

    @property
    def speed_4_rated_waste_heat_fraction_of_power_input(self):
        """Get speed_4_rated_waste_heat_fraction_of_power_input.

        Returns:
            float: the value of `speed_4_rated_waste_heat_fraction_of_power_input` or None if not set

        """
        return self["Speed 4 Rated Waste Heat Fraction of Power Input"]

    @speed_4_rated_waste_heat_fraction_of_power_input.setter
    def speed_4_rated_waste_heat_fraction_of_power_input(self, value=None):
        """Corresponds to IDD field `Speed 4 Rated Waste Heat Fraction of Power
        Input` recoverable waste heat at full load and rated conditions.

        Args:
            value (float): value for IDD Field `Speed 4 Rated Waste Heat Fraction of Power Input`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Rated Waste Heat Fraction of Power Input"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*odb + c*odb**2 + d*db + e*db**2 + f*odb*db
        odb = Outdoor air dry-bulb temperature (C)
        db = entering coil dry-bulb temperature (C)

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Waste Heat Function of Temperature Curve Name"] = value




class CoilHeatingDxVariableSpeed(DataObject):

    """ Corresponds to IDD object `Coil:Heating:DX:VariableSpeed`
        Direct expansion (DX) heating coil (air-to-air heat pump) and compressor unit
        (includes electric compressor and outdoor fan), variable-speed, with defrost
        controls. Requires two to ten sets of performance data and will interpolate between
        speeds.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:DX:VariableSpeed',
              'pyname': u'CoilHeatingDxVariableSpeed',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'indoor air inlet node name',
                                      {'name': u'Indoor Air Inlet Node Name',
                                       'pyname': u'indoor_air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'indoor air outlet node name',
                                      {'name': u'Indoor Air Outlet Node Name',
                                       'pyname': u'indoor_air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'number of speeds',
                                      {'name': u'Number of Speeds',
                                       'pyname': u'number_of_speeds',
                                       'default': 2,
                                       'maximum': 10,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'nominal speed level',
                                      {'name': u'Nominal Speed Level',
                                       'pyname': u'nominal_speed_level',
                                       'default': 2,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'rated heating capacity at selected nominal speed level',
                                      {'name': u'Rated Heating Capacity At Selected Nominal Speed Level',
                                       'pyname': u'rated_heating_capacity_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'rated air flow rate at selected nominal speed level',
                                      {'name': u'Rated Air Flow Rate At Selected Nominal Speed Level',
                                       'pyname': u'rated_air_flow_rate_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'energy part load fraction curve name',
                                      {'name': u'Energy Part Load Fraction Curve Name',
                                       'pyname': u'energy_part_load_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'defrost energy input ratio function of temperature curve name',
                                      {'name': u'Defrost Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'defrost_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'minimum outdoor dry-bulb temperature for compressor operation',
                                      {'name': u'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation',
                                       'pyname': u'minimum_outdoor_drybulb_temperature_for_compressor_operation',
                                       'default': -8.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': -50.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'outdoor dry-bulb temperature to turn on compressor',
                                      {'name': u'Outdoor Dry-Bulb Temperature to Turn On Compressor',
                                       'pyname': u'outdoor_drybulb_temperature_to_turn_on_compressor',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'maximum outdoor dry-bulb temperature for defrost operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Defrost Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_defrost_operation',
                                       'default': 5.0,
                                       'maximum': 7.22,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum outdoor dry-bulb temperature for crankcase heater operation',
                                      {'name': u'Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'defrost strategy',
                                      {'name': u'Defrost Strategy',
                                       'pyname': u'defrost_strategy',
                                       'default': u'ReverseCycle',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'ReverseCycle',
                                                           u'Resistive'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'defrost control',
                                      {'name': u'Defrost Control',
                                       'pyname': u'defrost_control',
                                       'default': u'Timed',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Timed',
                                                           u'OnDemand'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'defrost time period fraction',
                                      {'name': u'Defrost Time Period Fraction',
                                       'pyname': u'defrost_time_period_fraction',
                                       'default': 0.058333,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'resistive defrost heater capacity',
                                      {'name': u'Resistive Defrost Heater Capacity',
                                       'pyname': u'resistive_defrost_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'speed 1 reference unit gross rated heating capacity',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_1_reference_unit_gross_rated_heating_capacity',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 1 reference unit gross rated heating cop',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_1_reference_unit_gross_rated_heating_cop',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 reference unit rated air flow rate',
                                      {'name': u'Speed 1 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_1_reference_unit_rated_air_flow_rate',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 heating capacity function of temperature curve name',
                                      {'name': u'Speed 1 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_1_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 reference unit gross rated heating capacity',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_2_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 2 reference unit gross rated heating cop',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_2_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 reference unit rated air flow rate',
                                      {'name': u'Speed 2 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_2_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 heating capacity function of temperature curve name',
                                      {'name': u'Speed 2 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_2_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 reference unit gross rated heating capacity',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_3_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 3 reference unit gross rated heating cop',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_3_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 reference unit rated air flow rate',
                                      {'name': u'Speed 3 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_3_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 heating capacity function of temperature curve name',
                                      {'name': u'Speed 3 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_3_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 reference unit gross rated heating capacity',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_4_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 4 reference unit gross rated heating cop',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_4_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 reference unit rated air flow rate',
                                      {'name': u'Speed 4 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_4_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 heating capacity function of temperature curve name',
                                      {'name': u'Speed 4 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_4_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 reference unit gross rated heating capacity',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_5_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 5 reference unit gross rated heating cop',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_5_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 reference unit rated air flow rate',
                                      {'name': u'Speed 5 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_5_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 5 heating capacity function of temperature curve name',
                                      {'name': u'Speed 5 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_5_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 reference unit gross rated heating capacity',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_6_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 6 reference unit gross rated heating cop',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_6_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 reference unit rated air flow rate',
                                      {'name': u'Speed 6 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_6_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 6 heating capacity function of temperature curve name',
                                      {'name': u'Speed 6 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_6_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 reference unit gross rated heating capacity',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_7_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 7 reference unit gross rated heating cop',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_7_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 reference unit rated air flow rate',
                                      {'name': u'Speed 7 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_7_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 7 heating capacity function of temperature curve name',
                                      {'name': u'Speed 7 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_7_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 reference unit gross rated heating capacity',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_8_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 8 reference unit gross rated heating cop',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_8_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 reference unit rated air flow rate',
                                      {'name': u'Speed 8 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_8_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 8 heating capacity function of temperature curve name',
                                      {'name': u'Speed 8 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_8_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 reference unit gross rated heating capacity',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_9_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 9 reference unit gross rated heating cop',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_9_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 reference unit rated air flow rate',
                                      {'name': u'Speed 9 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_9_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 9 heating capacity function of temperature curve name',
                                      {'name': u'Speed 9 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_9_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 reference unit gross rated heating capacity',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_10_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 10 reference unit gross rated heating cop',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_10_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 reference unit rated air flow rate',
                                      {'name': u'Speed 10 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_10_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 10 heating capacity function of temperature curve name',
                                      {'name': u'Speed 10 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_10_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name.

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set

        """
        return self["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name.

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set

        """
        return self["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds.

        Returns:
            int: the value of `number_of_speeds` or None if not set

        """
        return self["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2):
        """Corresponds to IDD field `Number of Speeds`

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level.

        Returns:
            int: the value of `nominal_speed_level` or None if not set

        """
        return self["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2):
        """Corresponds to IDD field `Nominal Speed Level` must be lower than or
        equal to the highest speed number.

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Speed Level"] = value

    @property
    def rated_heating_capacity_at_selected_nominal_speed_level(self):
        """Get rated_heating_capacity_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_heating_capacity_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Heating Capacity At Selected Nominal Speed Level"]

    @rated_heating_capacity_at_selected_nominal_speed_level.setter
    def rated_heating_capacity_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Heating Capacity At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Heating Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Heating Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Air Flow Rate At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name.

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set

        """
        return self["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (heating load/steady state capacity)

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Part Load Fraction Curve Name"] = value

    @property
    def defrost_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get defrost_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `defrost_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Defrost Energy Input Ratio Function of Temperature Curve Name"]

    @defrost_energy_input_ratio_function_of_temperature_curve_name.setter
    def defrost_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Defrost Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        biquadratic curve = a + b*wb + c*wb**2 + d*oat + e*oat**2 + f*wb*oat
        wb = wet-bulb temperature (C) of air entering the indoor coil
        oat = outdoor air dry-bulb temperature (C)
        only required if ReverseCycle defrost strategy is specified

        Args:
            value (str): value for IDD Field `Defrost Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Defrost Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(self):
        """Get minimum_outdoor_drybulb_temperature_for_compressor_operation.

        Returns:
            float: the value of `minimum_outdoor_drybulb_temperature_for_compressor_operation` or None if not set

        """
        return self[
            "Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"]

    @minimum_outdoor_drybulb_temperature_for_compressor_operation.setter
    def minimum_outdoor_drybulb_temperature_for_compressor_operation(
            self,
            value=-
            8.0):
        """  Corresponds to IDD field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`

        Args:
            value (float): value for IDD Field `Minimum Outdoor Dry-Bulb Temperature for Compressor Operation`
                Units: C
                Default value: -8.0
                value >= -50.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Minimum Outdoor Dry-Bulb Temperature for Compressor Operation"] = value

    @property
    def outdoor_drybulb_temperature_to_turn_on_compressor(self):
        """Get outdoor_drybulb_temperature_to_turn_on_compressor.

        Returns:
            float: the value of `outdoor_drybulb_temperature_to_turn_on_compressor` or None if not set

        """
        return self["Outdoor Dry-Bulb Temperature to Turn On Compressor"]

    @outdoor_drybulb_temperature_to_turn_on_compressor.setter
    def outdoor_drybulb_temperature_to_turn_on_compressor(self, value=None):
        """  Corresponds to IDD field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
        The outdoor tempearture when the compressor is automatically turned back on following an
        automatic shut off because of low outdoor dry-bulb temperature. This field is only used
        for the calculation of HSPF. If this field is not provided, then outdoor bin temperature
        used in the HSPF calculation is always considered to be greater than this temperature and
        'Minimum Outdoor Dry-Bulb Temperature for Compressor Operation' field described above.
        This assumption is based on AHRI standard 210/240 (2008) and can introduce significant error
        in the final value of HSPF.

        Args:
            value (float): value for IDD Field `Outdoor Dry-Bulb Temperature to Turn On Compressor`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Outdoor Dry-Bulb Temperature to Turn On Compressor"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """Get maximum_outdoor_drybulb_temperature_for_defrost_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(
            self,
            value=5.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Defrost Operation`
                Units: C
                Default value: 5.0
                value <= 7.22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Defrost Operation"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """Corresponds to IDD field `Crankcase Heater Capacity`

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self):
        """Get
        maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Outdoor Dry-Bulb Temperature for Crankcase Heater Operation"] = value

    @property
    def defrost_strategy(self):
        """Get defrost_strategy.

        Returns:
            str: the value of `defrost_strategy` or None if not set

        """
        return self["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="ReverseCycle"):
        """Corresponds to IDD field `Defrost Strategy`

        Args:
            value (str): value for IDD Field `Defrost Strategy`
                Default value: ReverseCycle
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """Get defrost_control.

        Returns:
            str: the value of `defrost_control` or None if not set

        """
        return self["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """Corresponds to IDD field `Defrost Control`

        Args:
            value (str): value for IDD Field `Defrost Control`
                Default value: Timed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """Get defrost_time_period_fraction.

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set

        """
        return self["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333):
        """Corresponds to IDD field `Defrost Time Period Fraction` Fraction of
        time in defrost mode only applicable if timed defrost control is
        specified.

        Args:
            value (float): value for IDD Field `Defrost Time Period Fraction`
                Default value: 0.058333
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """Get resistive_defrost_heater_capacity.

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set

        """
        return self["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value=None):
        """Corresponds to IDD field `Resistive Defrost Heater Capacity` only
        applicable if resistive defrost strategy is specified.

        Args:
            value (float or "Autosize"): value for IDD Field `Resistive Defrost Heater Capacity`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Resistive Defrost Heater Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_1_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Heating Capacity"]

    @speed_1_reference_unit_gross_rated_heating_capacity.setter
    def speed_1_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_cop(self):
        """Get speed_1_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Heating COP"]

    @speed_1_reference_unit_gross_rated_heating_cop.setter
    def speed_1_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 1 Reference Unit Rated Air Flow Rate"]

    @speed_1_reference_unit_rated_air_flow_rate.setter
    def speed_1_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_1_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Heating Capacity Function of Temperature Curve Name"]

    @speed_1_heating_capacity_function_of_temperature_curve_name.setter
    def speed_1_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_1_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_2_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Heating Capacity"]

    @speed_2_reference_unit_gross_rated_heating_capacity.setter
    def speed_2_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_cop(self):
        """Get speed_2_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Heating COP"]

    @speed_2_reference_unit_gross_rated_heating_cop.setter
    def speed_2_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Heating Capacity Function of Temperature Curve Name"]

    @speed_2_heating_capacity_function_of_temperature_curve_name.setter
    def speed_2_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_2_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_3_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Heating Capacity"]

    @speed_3_reference_unit_gross_rated_heating_capacity.setter
    def speed_3_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_cop(self):
        """Get speed_3_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Heating COP"]

    @speed_3_reference_unit_gross_rated_heating_cop.setter
    def speed_3_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Heating Capacity Function of Temperature Curve Name"]

    @speed_3_heating_capacity_function_of_temperature_curve_name.setter
    def speed_3_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_3_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_4_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Heating Capacity"]

    @speed_4_reference_unit_gross_rated_heating_capacity.setter
    def speed_4_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_cop(self):
        """Get speed_4_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Heating COP"]

    @speed_4_reference_unit_gross_rated_heating_cop.setter
    def speed_4_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Heating Capacity Function of Temperature Curve Name"]

    @speed_4_heating_capacity_function_of_temperature_curve_name.setter
    def speed_4_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_4_heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_5_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Heating Capacity"]

    @speed_5_reference_unit_gross_rated_heating_capacity.setter
    def speed_5_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_cop(self):
        """Get speed_5_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Heating COP"]

    @speed_5_reference_unit_gross_rated_heating_cop.setter
    def speed_5_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_5_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Heating Capacity Function of Temperature Curve Name"]

    @speed_5_heating_capacity_function_of_temperature_curve_name.setter
    def speed_5_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_5_heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_6_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Heating Capacity"]

    @speed_6_reference_unit_gross_rated_heating_capacity.setter
    def speed_6_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_cop(self):
        """Get speed_6_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Heating COP"]

    @speed_6_reference_unit_gross_rated_heating_cop.setter
    def speed_6_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_6_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Heating Capacity Function of Temperature Curve Name"]

    @speed_6_heating_capacity_function_of_temperature_curve_name.setter
    def speed_6_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_6_heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_7_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Heating Capacity"]

    @speed_7_reference_unit_gross_rated_heating_capacity.setter
    def speed_7_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_cop(self):
        """Get speed_7_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Heating COP"]

    @speed_7_reference_unit_gross_rated_heating_cop.setter
    def speed_7_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_7_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Heating Capacity Function of Temperature Curve Name"]

    @speed_7_heating_capacity_function_of_temperature_curve_name.setter
    def speed_7_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_7_heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_8_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Heating Capacity"]

    @speed_8_reference_unit_gross_rated_heating_capacity.setter
    def speed_8_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_cop(self):
        """Get speed_8_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Heating COP"]

    @speed_8_reference_unit_gross_rated_heating_cop.setter
    def speed_8_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_8_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Heating Capacity Function of Temperature Curve Name"]

    @speed_8_heating_capacity_function_of_temperature_curve_name.setter
    def speed_8_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_8_heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_9_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Heating Capacity"]

    @speed_9_reference_unit_gross_rated_heating_capacity.setter
    def speed_9_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_cop(self):
        """Get speed_9_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Heating COP"]

    @speed_9_reference_unit_gross_rated_heating_cop.setter
    def speed_9_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_9_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Heating Capacity Function of Temperature Curve Name"]

    @speed_9_heating_capacity_function_of_temperature_curve_name.setter
    def speed_9_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_9_heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_10_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Heating Capacity"]

    @speed_10_reference_unit_gross_rated_heating_capacity.setter
    def speed_10_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Heating Capacity` Heating capacity not accounting for the effect of
        supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_cop(self):
        """Get speed_10_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Heating COP"]

    @speed_10_reference_unit_gross_rated_heating_cop.setter
    def speed_10_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Heating COP`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_10_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Heating Capacity Function of Temperature Curve Name"]

    @speed_10_heating_capacity_function_of_temperature_curve_name.setter
    def speed_10_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_10_heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*oat + e*oat**2 + f*db*oat
        db = entering air dry bulb temperature (C)
        oat = air entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_
        name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value




class CoilCoolingWaterToAirHeatPumpParameterEstimation(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:WaterToAirHeatPump:ParameterEstimation`
        Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric
        compressor), single-speed, parameter estimation model. Optional inputs for moisture
        evaporation from wet coil when compressor cycles off with continuous fan operation.
        Parameter estimation model is a deterministic model that requires a consistent set of
        parameters to describe the operating conditions of the heat pump components.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Cooling:WaterToAirHeatPump:ParameterEstimation',
              'pyname': u'CoilCoolingWaterToAirHeatPumpParameterEstimation',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'compressor type',
                                      {'name': u'Compressor Type',
                                       'pyname': u'compressor_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Reciprocating',
                                                           u'Rotary',
                                                           u'Scroll'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'refrigerant type',
                                      {'name': u'Refrigerant Type',
                                       'pyname': u'refrigerant_type',
                                       'default': u'R22',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'design source side flow rate',
                                      {'name': u'Design Source Side Flow Rate',
                                       'pyname': u'design_source_side_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'nominal cooling coil capacity',
                                      {'name': u'Nominal Cooling Coil Capacity',
                                       'pyname': u'nominal_cooling_coil_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'nominal time for condensate removal to begin',
                                      {'name': u'Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity',
                                       'pyname': u'ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'high pressure cutoff',
                                      {'name': u'High Pressure Cutoff',
                                       'pyname': u'high_pressure_cutoff',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'real',
                                       'unit': u'Pa'}),
                                     (u'low pressure cutoff',
                                      {'name': u'Low Pressure Cutoff',
                                       'pyname': u'low_pressure_cutoff',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'Pa'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'load side total heat transfer coefficient',
                                      {'name': u'Load Side Total Heat Transfer Coefficient',
                                       'pyname': u'load_side_total_heat_transfer_coefficient',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'load side outside surface heat transfer coefficient',
                                      {'name': u'Load Side Outside Surface Heat Transfer Coefficient',
                                       'pyname': u'load_side_outside_surface_heat_transfer_coefficient',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'superheat temperature at the evaporator outlet',
                                      {'name': u'Superheat Temperature at the Evaporator Outlet',
                                       'pyname': u'superheat_temperature_at_the_evaporator_outlet',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'compressor power losses',
                                      {'name': u'Compressor Power Losses',
                                       'pyname': u'compressor_power_losses',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'compressor efficiency',
                                      {'name': u'Compressor Efficiency',
                                       'pyname': u'compressor_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'compressor piston displacement',
                                      {'name': u'Compressor Piston Displacement',
                                       'pyname': u'compressor_piston_displacement',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'compressor suction/discharge pressure drop',
                                      {'name': u'Compressor Suction/Discharge Pressure Drop',
                                       'pyname': u'compressor_suction_or_discharge_pressure_drop',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'Pa'}),
                                     (u'compressor clearance factor',
                                      {'name': u'Compressor Clearance Factor',
                                       'pyname': u'compressor_clearance_factor',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'refrigerant volume flow rate',
                                      {'name': u'Refrigerant Volume Flow Rate',
                                       'pyname': u'refrigerant_volume_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'volume ratio',
                                      {'name': u'Volume Ratio',
                                       'pyname': u'volume_ratio',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'leak rate coefficient',
                                      {'name': u'Leak Rate Coefficient',
                                       'pyname': u'leak_rate_coefficient',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'source side heat transfer coefficient',
                                      {'name': u'Source Side Heat Transfer Coefficient',
                                       'pyname': u'source_side_heat_transfer_coefficient',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'source side heat transfer resistance1',
                                      {'name': u'Source Side Heat Transfer Resistance1',
                                       'pyname': u'source_side_heat_transfer_resistance1',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'source side heat transfer resistance2',
                                      {'name': u'Source Side Heat Transfer Resistance2',
                                       'pyname': u'source_side_heat_transfer_resistance2',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def compressor_type(self):
        """Get compressor_type.

        Returns:
            str: the value of `compressor_type` or None if not set

        """
        return self["Compressor Type"]

    @compressor_type.setter
    def compressor_type(self, value=None):
        """  Corresponds to IDD field `Compressor Type`
        Parameters 1-5 are as named below.
        Parameters 6-10 depend on the type of compressor and fluid.
        Refer to the InputOutputReference on the parameters required

        Args:
            value (str): value for IDD Field `Compressor Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Compressor Type"] = value

    @property
    def refrigerant_type(self):
        """Get refrigerant_type.

        Returns:
            str: the value of `refrigerant_type` or None if not set

        """
        return self["Refrigerant Type"]

    @refrigerant_type.setter
    def refrigerant_type(self, value="R22"):
        """Corresponds to IDD field `Refrigerant Type`

        Args:
            value (str): value for IDD Field `Refrigerant Type`
                Default value: R22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Refrigerant Type"] = value

    @property
    def design_source_side_flow_rate(self):
        """Get design_source_side_flow_rate.

        Returns:
            float: the value of `design_source_side_flow_rate` or None if not set

        """
        return self["Design Source Side Flow Rate"]

    @design_source_side_flow_rate.setter
    def design_source_side_flow_rate(self, value=None):
        """Corresponds to IDD field `Design Source Side Flow Rate`

        Args:
            value (float): value for IDD Field `Design Source Side Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Source Side Flow Rate"] = value

    @property
    def nominal_cooling_coil_capacity(self):
        """Get nominal_cooling_coil_capacity.

        Returns:
            float: the value of `nominal_cooling_coil_capacity` or None if not set

        """
        return self["Nominal Cooling Coil Capacity"]

    @nominal_cooling_coil_capacity.setter
    def nominal_cooling_coil_capacity(self, value=None):
        """Corresponds to IDD field `Nominal Cooling Coil Capacity`

        Args:
            value (float): value for IDD Field `Nominal Cooling Coil Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Cooling Coil Capacity"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Nominal Time for Condensate Removal to
        Begin` The nominal time for condensate to begin leaving the coil's
        condensate drain line at the coil's rated air flow rate and temperature
        conditions. Nominal time is equal to the ratio of the energy of the
        coil's maximum condensate holding capacity (J) to the coil's steady
        state latent capacity (W). Suggested value is 1000; zero value means
        latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_late
        nt_capacity.

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value

    @property
    def high_pressure_cutoff(self):
        """Get high_pressure_cutoff.

        Returns:
            float: the value of `high_pressure_cutoff` or None if not set

        """
        return self["High Pressure Cutoff"]

    @high_pressure_cutoff.setter
    def high_pressure_cutoff(self, value=None):
        """Corresponds to IDD field `High Pressure Cutoff`

        Args:
            value (float): value for IDD Field `High Pressure Cutoff`
                Units: Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["High Pressure Cutoff"] = value

    @property
    def low_pressure_cutoff(self):
        """Get low_pressure_cutoff.

        Returns:
            float: the value of `low_pressure_cutoff` or None if not set

        """
        return self["Low Pressure Cutoff"]

    @low_pressure_cutoff.setter
    def low_pressure_cutoff(self, value=None):
        """Corresponds to IDD field `Low Pressure Cutoff`

        Args:
            value (float): value for IDD Field `Low Pressure Cutoff`
                Units: Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Low Pressure Cutoff"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def load_side_total_heat_transfer_coefficient(self):
        """Get load_side_total_heat_transfer_coefficient.

        Returns:
            float: the value of `load_side_total_heat_transfer_coefficient` or None if not set

        """
        return self["Load Side Total Heat Transfer Coefficient"]

    @load_side_total_heat_transfer_coefficient.setter
    def load_side_total_heat_transfer_coefficient(self, value=None):
        """Corresponds to IDD field `Load Side Total Heat Transfer Coefficient`
        Previously called Parameter 1.

        Args:
            value (float): value for IDD Field `Load Side Total Heat Transfer Coefficient`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Load Side Total Heat Transfer Coefficient"] = value

    @property
    def load_side_outside_surface_heat_transfer_coefficient(self):
        """Get load_side_outside_surface_heat_transfer_coefficient.

        Returns:
            float: the value of `load_side_outside_surface_heat_transfer_coefficient` or None if not set

        """
        return self["Load Side Outside Surface Heat Transfer Coefficient"]

    @load_side_outside_surface_heat_transfer_coefficient.setter
    def load_side_outside_surface_heat_transfer_coefficient(self, value=None):
        """Corresponds to IDD field `Load Side Outside Surface Heat Transfer
        Coefficient` Previously called Parameter 2.

        Args:
            value (float): value for IDD Field `Load Side Outside Surface Heat Transfer Coefficient`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Load Side Outside Surface Heat Transfer Coefficient"] = value

    @property
    def superheat_temperature_at_the_evaporator_outlet(self):
        """Get superheat_temperature_at_the_evaporator_outlet.

        Returns:
            float: the value of `superheat_temperature_at_the_evaporator_outlet` or None if not set

        """
        return self["Superheat Temperature at the Evaporator Outlet"]

    @superheat_temperature_at_the_evaporator_outlet.setter
    def superheat_temperature_at_the_evaporator_outlet(self, value=None):
        """Corresponds to IDD field `Superheat Temperature at the Evaporator
        Outlet` Previously called Parameter 3.

        Args:
            value (float): value for IDD Field `Superheat Temperature at the Evaporator Outlet`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Superheat Temperature at the Evaporator Outlet"] = value

    @property
    def compressor_power_losses(self):
        """Get compressor_power_losses.

        Returns:
            float: the value of `compressor_power_losses` or None if not set

        """
        return self["Compressor Power Losses"]

    @compressor_power_losses.setter
    def compressor_power_losses(self, value=None):
        """Corresponds to IDD field `Compressor Power Losses` Accounts for the
        loss of work due to mechanical and electrical losses in the compressor.
        Previously called Parameter 4.

        Args:
            value (float): value for IDD Field `Compressor Power Losses`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Power Losses"] = value

    @property
    def compressor_efficiency(self):
        """Get compressor_efficiency.

        Returns:
            float: the value of `compressor_efficiency` or None if not set

        """
        return self["Compressor Efficiency"]

    @compressor_efficiency.setter
    def compressor_efficiency(self, value=None):
        """Corresponds to IDD field `Compressor Efficiency` Previously called
        Parameter 5.

        Args:
            value (float): value for IDD Field `Compressor Efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Efficiency"] = value

    @property
    def compressor_piston_displacement(self):
        """Get compressor_piston_displacement.

        Returns:
            float: the value of `compressor_piston_displacement` or None if not set

        """
        return self["Compressor Piston Displacement"]

    @compressor_piston_displacement.setter
    def compressor_piston_displacement(self, value=None):
        """Corresponds to IDD field `Compressor Piston Displacement` Use when
        Compressor Type is Reciprocating or Rotary Leave this field blank for
        Compressor Type is Scroll. Previously part of Parameter 6.

        Args:
            value (float): value for IDD Field `Compressor Piston Displacement`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Piston Displacement"] = value

    @property
    def compressor_suction_or_discharge_pressure_drop(self):
        """Get compressor_suction_or_discharge_pressure_drop.

        Returns:
            float: the value of `compressor_suction_or_discharge_pressure_drop` or None if not set

        """
        return self["Compressor Suction/Discharge Pressure Drop"]

    @compressor_suction_or_discharge_pressure_drop.setter
    def compressor_suction_or_discharge_pressure_drop(self, value=None):
        """Corresponds to IDD field `Compressor Suction/Discharge Pressure
        Drop` Used when Compressor Type is Rotary or Reciprocating Leave this
        field blank for Compressor Type is Scroll. Previously part of Parameter
        7.

        Args:
            value (float): value for IDD Field `Compressor Suction/Discharge Pressure Drop`
                Units: Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Suction/Discharge Pressure Drop"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor.

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set

        """
        return self["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """Corresponds to IDD field `Compressor Clearance Factor` Used when
        Compressor Type is Reciprocating. Leave this field blank for Compressor
        Type is Rotary or Scroll. Previously part of Parameter 8.

        Args:
            value (float): value for IDD Field `Compressor Clearance Factor`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Clearance Factor"] = value

    @property
    def refrigerant_volume_flow_rate(self):
        """Get refrigerant_volume_flow_rate.

        Returns:
            float: the value of `refrigerant_volume_flow_rate` or None if not set

        """
        return self["Refrigerant Volume Flow Rate"]

    @refrigerant_volume_flow_rate.setter
    def refrigerant_volume_flow_rate(self, value=None):
        """Corresponds to IDD field `Refrigerant Volume Flow Rate` Use when
        Compressor Type is Scroll Leave this field blank for Compressor Type is
        Rotary or Reciprocating. Previously part of Parameter 6.

        Args:
            value (float): value for IDD Field `Refrigerant Volume Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Refrigerant Volume Flow Rate"] = value

    @property
    def volume_ratio(self):
        """Get volume_ratio.

        Returns:
            float: the value of `volume_ratio` or None if not set

        """
        return self["Volume Ratio"]

    @volume_ratio.setter
    def volume_ratio(self, value=None):
        """Corresponds to IDD field `Volume Ratio` Use when Compressor Type is
        Scroll. Leave this field blank for Compressor Type is Rotary or
        Reciprocating. Previously part of Parameter 7.

        Args:
            value (float): value for IDD Field `Volume Ratio`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Volume Ratio"] = value

    @property
    def leak_rate_coefficient(self):
        """Get leak_rate_coefficient.

        Returns:
            float: the value of `leak_rate_coefficient` or None if not set

        """
        return self["Leak Rate Coefficient"]

    @leak_rate_coefficient.setter
    def leak_rate_coefficient(self, value=None):
        """Corresponds to IDD field `Leak Rate Coefficient` Use when Compressor
        Type is Scroll. Leave this field blank for Compressor Type is Rotary or
        Reciprocating. Previously part of Parameter 8.

        Args:
            value (float): value for IDD Field `Leak Rate Coefficient`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Leak Rate Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient.

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set

        """
        return self["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """Corresponds to IDD field `Source Side Heat Transfer Coefficient` Use
        when Source Side Fluid Name is Water Leave this field blank when Source
        Side Fluid Name is an antifreeze Previously part of Parameter 9.

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Coefficient`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Source Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_resistance1(self):
        """Get source_side_heat_transfer_resistance1.

        Returns:
            float: the value of `source_side_heat_transfer_resistance1` or None if not set

        """
        return self["Source Side Heat Transfer Resistance1"]

    @source_side_heat_transfer_resistance1.setter
    def source_side_heat_transfer_resistance1(self, value=None):
        """Corresponds to IDD field `Source Side Heat Transfer Resistance1` Use
        when Source Side Fluid Name is an antifreeze Leave this field blank for
        Source Side Fluid is Water Previously part of Parameter 9.

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Source Side Heat Transfer Resistance1"] = value

    @property
    def source_side_heat_transfer_resistance2(self):
        """Get source_side_heat_transfer_resistance2.

        Returns:
            float: the value of `source_side_heat_transfer_resistance2` or None if not set

        """
        return self["Source Side Heat Transfer Resistance2"]

    @source_side_heat_transfer_resistance2.setter
    def source_side_heat_transfer_resistance2(self, value=None):
        """Corresponds to IDD field `Source Side Heat Transfer Resistance2` Use
        when Source Side Fluid Name is an antifreeze Leave this field blank for
        Source Side Fluid is Water Previously part of Parameter 10.

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance2`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Source Side Heat Transfer Resistance2"] = value




class CoilHeatingWaterToAirHeatPumpParameterEstimation(DataObject):

    """ Corresponds to IDD object `Coil:Heating:WaterToAirHeatPump:ParameterEstimation`
        Direct expansion (DX) heating coil for water-to-air heat pump (includes electric
        compressor), single-speed, parameter estimation model. Parameter estimation model is
        a deterministic model that requires a consistent set of parameters to describe
        the operating conditions of the heat pump components.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:WaterToAirHeatPump:ParameterEstimation',
              'pyname': u'CoilHeatingWaterToAirHeatPumpParameterEstimation',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'compressor type',
                                      {'name': u'Compressor Type',
                                       'pyname': u'compressor_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Reciprocating',
                                                           u'Rotary',
                                                           u'Scroll'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'refrigerant type',
                                      {'name': u'Refrigerant Type',
                                       'pyname': u'refrigerant_type',
                                       'default': u'R22',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'design source side flow rate',
                                      {'name': u'Design Source Side Flow Rate',
                                       'pyname': u'design_source_side_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'gross rated heating capacity',
                                      {'name': u'Gross Rated Heating Capacity',
                                       'pyname': u'gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'high pressure cutoff',
                                      {'name': u'High Pressure Cutoff',
                                       'pyname': u'high_pressure_cutoff',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'low pressure cutoff',
                                      {'name': u'Low Pressure Cutoff',
                                       'pyname': u'low_pressure_cutoff',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'Pa'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'load side total heat transfer coefficient',
                                      {'name': u'Load Side Total Heat Transfer Coefficient',
                                       'pyname': u'load_side_total_heat_transfer_coefficient',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'superheat temperature at the evaporator outlet',
                                      {'name': u'Superheat Temperature at the Evaporator Outlet',
                                       'pyname': u'superheat_temperature_at_the_evaporator_outlet',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'compressor power losses',
                                      {'name': u'Compressor Power Losses',
                                       'pyname': u'compressor_power_losses',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'compressor efficiency',
                                      {'name': u'Compressor Efficiency',
                                       'pyname': u'compressor_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'compressor piston displacement',
                                      {'name': u'Compressor Piston Displacement',
                                       'pyname': u'compressor_piston_displacement',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'compressor suction/discharge pressure drop',
                                      {'name': u'Compressor Suction/Discharge Pressure Drop',
                                       'pyname': u'compressor_suction_or_discharge_pressure_drop',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'Pa'}),
                                     (u'compressor clearance factor',
                                      {'name': u'Compressor Clearance Factor',
                                       'pyname': u'compressor_clearance_factor',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'refrigerant volume flow rate',
                                      {'name': u'Refrigerant Volume Flow Rate',
                                       'pyname': u'refrigerant_volume_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'volume ratio',
                                      {'name': u'Volume Ratio',
                                       'pyname': u'volume_ratio',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'leak rate coefficient',
                                      {'name': u'Leak Rate Coefficient',
                                       'pyname': u'leak_rate_coefficient',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'source side heat transfer coefficient',
                                      {'name': u'Source Side Heat Transfer Coefficient',
                                       'pyname': u'source_side_heat_transfer_coefficient',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'source side heat transfer resistance1',
                                      {'name': u'Source Side Heat Transfer Resistance1',
                                       'pyname': u'source_side_heat_transfer_resistance1',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'source side heat transfer resistance2',
                                      {'name': u'Source Side Heat Transfer Resistance2',
                                       'pyname': u'source_side_heat_transfer_resistance2',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def compressor_type(self):
        """Get compressor_type.

        Returns:
            str: the value of `compressor_type` or None if not set

        """
        return self["Compressor Type"]

    @compressor_type.setter
    def compressor_type(self, value=None):
        """  Corresponds to IDD field `Compressor Type`
        Parameters 1-4 are as named below.
        Parameters 5-9 depend on the type of compressor.
        Refer to the InputOutputReference on the parameters required

        Args:
            value (str): value for IDD Field `Compressor Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Compressor Type"] = value

    @property
    def refrigerant_type(self):
        """Get refrigerant_type.

        Returns:
            str: the value of `refrigerant_type` or None if not set

        """
        return self["Refrigerant Type"]

    @refrigerant_type.setter
    def refrigerant_type(self, value="R22"):
        """Corresponds to IDD field `Refrigerant Type`

        Args:
            value (str): value for IDD Field `Refrigerant Type`
                Default value: R22
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Refrigerant Type"] = value

    @property
    def design_source_side_flow_rate(self):
        """Get design_source_side_flow_rate.

        Returns:
            float: the value of `design_source_side_flow_rate` or None if not set

        """
        return self["Design Source Side Flow Rate"]

    @design_source_side_flow_rate.setter
    def design_source_side_flow_rate(self, value=None):
        """Corresponds to IDD field `Design Source Side Flow Rate`

        Args:
            value (float): value for IDD Field `Design Source Side Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Design Source Side Flow Rate"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity.

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set

        """
        return self["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Gross Rated Heating Capacity` Heating
        capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Heating Capacity"] = value

    @property
    def high_pressure_cutoff(self):
        """Get high_pressure_cutoff.

        Returns:
            float: the value of `high_pressure_cutoff` or None if not set

        """
        return self["High Pressure Cutoff"]

    @high_pressure_cutoff.setter
    def high_pressure_cutoff(self, value=None):
        """Corresponds to IDD field `High Pressure Cutoff`

        Args:
            value (float): value for IDD Field `High Pressure Cutoff`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["High Pressure Cutoff"] = value

    @property
    def low_pressure_cutoff(self):
        """Get low_pressure_cutoff.

        Returns:
            float: the value of `low_pressure_cutoff` or None if not set

        """
        return self["Low Pressure Cutoff"]

    @low_pressure_cutoff.setter
    def low_pressure_cutoff(self, value=None):
        """Corresponds to IDD field `Low Pressure Cutoff`

        Args:
            value (float): value for IDD Field `Low Pressure Cutoff`
                Units: Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Low Pressure Cutoff"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def load_side_total_heat_transfer_coefficient(self):
        """Get load_side_total_heat_transfer_coefficient.

        Returns:
            float: the value of `load_side_total_heat_transfer_coefficient` or None if not set

        """
        return self["Load Side Total Heat Transfer Coefficient"]

    @load_side_total_heat_transfer_coefficient.setter
    def load_side_total_heat_transfer_coefficient(self, value=None):
        """Corresponds to IDD field `Load Side Total Heat Transfer Coefficient`
        Previously called Parameter 1.

        Args:
            value (float): value for IDD Field `Load Side Total Heat Transfer Coefficient`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Load Side Total Heat Transfer Coefficient"] = value

    @property
    def superheat_temperature_at_the_evaporator_outlet(self):
        """Get superheat_temperature_at_the_evaporator_outlet.

        Returns:
            float: the value of `superheat_temperature_at_the_evaporator_outlet` or None if not set

        """
        return self["Superheat Temperature at the Evaporator Outlet"]

    @superheat_temperature_at_the_evaporator_outlet.setter
    def superheat_temperature_at_the_evaporator_outlet(self, value=None):
        """Corresponds to IDD field `Superheat Temperature at the Evaporator
        Outlet` Previously called Parameter 2.

        Args:
            value (float): value for IDD Field `Superheat Temperature at the Evaporator Outlet`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Superheat Temperature at the Evaporator Outlet"] = value

    @property
    def compressor_power_losses(self):
        """Get compressor_power_losses.

        Returns:
            float: the value of `compressor_power_losses` or None if not set

        """
        return self["Compressor Power Losses"]

    @compressor_power_losses.setter
    def compressor_power_losses(self, value=None):
        """Corresponds to IDD field `Compressor Power Losses` Accounts for the
        loss of work due to mechanical and electrical losses in the compressor.
        Previously called Parameter 3.

        Args:
            value (float): value for IDD Field `Compressor Power Losses`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Power Losses"] = value

    @property
    def compressor_efficiency(self):
        """Get compressor_efficiency.

        Returns:
            float: the value of `compressor_efficiency` or None if not set

        """
        return self["Compressor Efficiency"]

    @compressor_efficiency.setter
    def compressor_efficiency(self, value=None):
        """Corresponds to IDD field `Compressor Efficiency` Previously called
        Parameter 4.

        Args:
            value (float): value for IDD Field `Compressor Efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Efficiency"] = value

    @property
    def compressor_piston_displacement(self):
        """Get compressor_piston_displacement.

        Returns:
            float: the value of `compressor_piston_displacement` or None if not set

        """
        return self["Compressor Piston Displacement"]

    @compressor_piston_displacement.setter
    def compressor_piston_displacement(self, value=None):
        """Corresponds to IDD field `Compressor Piston Displacement` Use when
        Compressor Type is Reciprocating or Rotary Leave this field blank for
        Compressor Type is Scroll. Previously part of Parameter 5.

        Args:
            value (float): value for IDD Field `Compressor Piston Displacement`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Piston Displacement"] = value

    @property
    def compressor_suction_or_discharge_pressure_drop(self):
        """Get compressor_suction_or_discharge_pressure_drop.

        Returns:
            float: the value of `compressor_suction_or_discharge_pressure_drop` or None if not set

        """
        return self["Compressor Suction/Discharge Pressure Drop"]

    @compressor_suction_or_discharge_pressure_drop.setter
    def compressor_suction_or_discharge_pressure_drop(self, value=None):
        """Corresponds to IDD field `Compressor Suction/Discharge Pressure
        Drop` Used when Compressor Type is Rotary or Reciprocating Leave this
        field blank for Compressor Type is Scroll. Previously part of Parameter
        6.

        Args:
            value (float): value for IDD Field `Compressor Suction/Discharge Pressure Drop`
                Units: Pa
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Suction/Discharge Pressure Drop"] = value

    @property
    def compressor_clearance_factor(self):
        """Get compressor_clearance_factor.

        Returns:
            float: the value of `compressor_clearance_factor` or None if not set

        """
        return self["Compressor Clearance Factor"]

    @compressor_clearance_factor.setter
    def compressor_clearance_factor(self, value=None):
        """Corresponds to IDD field `Compressor Clearance Factor` Used when
        Compressor Type is Reciprocating. Leave this field blank for Compressor
        Type is Rotary or Scroll. Previously part of Parameter 7.

        Args:
            value (float): value for IDD Field `Compressor Clearance Factor`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Compressor Clearance Factor"] = value

    @property
    def refrigerant_volume_flow_rate(self):
        """Get refrigerant_volume_flow_rate.

        Returns:
            float: the value of `refrigerant_volume_flow_rate` or None if not set

        """
        return self["Refrigerant Volume Flow Rate"]

    @refrigerant_volume_flow_rate.setter
    def refrigerant_volume_flow_rate(self, value=None):
        """Corresponds to IDD field `Refrigerant Volume Flow Rate` Use when
        Compressor Type is Scroll Leave this field blank for Compressor Type is
        Rotary or Reciprocating. Previously part of Parameter 5.

        Args:
            value (float): value for IDD Field `Refrigerant Volume Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Refrigerant Volume Flow Rate"] = value

    @property
    def volume_ratio(self):
        """Get volume_ratio.

        Returns:
            float: the value of `volume_ratio` or None if not set

        """
        return self["Volume Ratio"]

    @volume_ratio.setter
    def volume_ratio(self, value=None):
        """Corresponds to IDD field `Volume Ratio` Use when Compressor Type is
        Scroll. Leave this field blank for Compressor Type is Rotary or
        Reciprocating. Previously part of Parameter 6.

        Args:
            value (float): value for IDD Field `Volume Ratio`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Volume Ratio"] = value

    @property
    def leak_rate_coefficient(self):
        """Get leak_rate_coefficient.

        Returns:
            float: the value of `leak_rate_coefficient` or None if not set

        """
        return self["Leak Rate Coefficient"]

    @leak_rate_coefficient.setter
    def leak_rate_coefficient(self, value=None):
        """Corresponds to IDD field `Leak Rate Coefficient` Use when Compressor
        Type is Scroll. Leave this field blank for Compressor Type is Rotary or
        Reciprocating. Previously part of Parameter 7.

        Args:
            value (float): value for IDD Field `Leak Rate Coefficient`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Leak Rate Coefficient"] = value

    @property
    def source_side_heat_transfer_coefficient(self):
        """Get source_side_heat_transfer_coefficient.

        Returns:
            float: the value of `source_side_heat_transfer_coefficient` or None if not set

        """
        return self["Source Side Heat Transfer Coefficient"]

    @source_side_heat_transfer_coefficient.setter
    def source_side_heat_transfer_coefficient(self, value=None):
        """Corresponds to IDD field `Source Side Heat Transfer Coefficient` Use
        when Source Side Fluid Name is Water Leave this field blank when Source
        Side Fluid is an antifreeze Previously part of Parameter 8.

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Coefficient`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Source Side Heat Transfer Coefficient"] = value

    @property
    def source_side_heat_transfer_resistance1(self):
        """Get source_side_heat_transfer_resistance1.

        Returns:
            float: the value of `source_side_heat_transfer_resistance1` or None if not set

        """
        return self["Source Side Heat Transfer Resistance1"]

    @source_side_heat_transfer_resistance1.setter
    def source_side_heat_transfer_resistance1(self, value=None):
        """Corresponds to IDD field `Source Side Heat Transfer Resistance1` Use
        when Source Side Fluid Name is an antifreeze Leave this field blank for
        Source Side Fluid is Water Previously part of Parameter 8.

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Source Side Heat Transfer Resistance1"] = value

    @property
    def source_side_heat_transfer_resistance2(self):
        """Get source_side_heat_transfer_resistance2.

        Returns:
            float: the value of `source_side_heat_transfer_resistance2` or None if not set

        """
        return self["Source Side Heat Transfer Resistance2"]

    @source_side_heat_transfer_resistance2.setter
    def source_side_heat_transfer_resistance2(self, value=None):
        """Corresponds to IDD field `Source Side Heat Transfer Resistance2` Use
        when Source Side Fluid Name is an antifreeze Leave this field blank for
        Source Side Fluid is Water Previously part of Parameter 9.

        Args:
            value (float): value for IDD Field `Source Side Heat Transfer Resistance2`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Source Side Heat Transfer Resistance2"] = value




class CoilCoolingWaterToAirHeatPumpEquationFit(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:WaterToAirHeatPump:EquationFit`
        Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric
        compressor), single-speed, equation-fit model. Optional inputs for moisture
        evaporation from wet coil when compressor cycles off with continuous fan operation.
        Equation-fit model uses normalized curves to describe the heat pump performance.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Cooling:WaterToAirHeatPump:EquationFit',
              'pyname': u'CoilCoolingWaterToAirHeatPumpEquationFit',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'rated air flow rate',
                                      {'name': u'Rated Air Flow Rate',
                                       'pyname': u'rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated water flow rate',
                                      {'name': u'Rated Water Flow Rate',
                                       'pyname': u'rated_water_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'gross rated total cooling capacity',
                                      {'name': u'Gross Rated Total Cooling Capacity',
                                       'pyname': u'gross_rated_total_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'gross rated sensible cooling capacity',
                                      {'name': u'Gross Rated Sensible Cooling Capacity',
                                       'pyname': u'gross_rated_sensible_cooling_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'gross rated cooling cop',
                                      {'name': u'Gross Rated Cooling COP',
                                       'pyname': u'gross_rated_cooling_cop',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'total cooling capacity coefficient 1',
                                      {'name': u'Total Cooling Capacity Coefficient 1',
                                       'pyname': u'total_cooling_capacity_coefficient_1',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'total cooling capacity coefficient 2',
                                      {'name': u'Total Cooling Capacity Coefficient 2',
                                       'pyname': u'total_cooling_capacity_coefficient_2',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'total cooling capacity coefficient 3',
                                      {'name': u'Total Cooling Capacity Coefficient 3',
                                       'pyname': u'total_cooling_capacity_coefficient_3',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'total cooling capacity coefficient 4',
                                      {'name': u'Total Cooling Capacity Coefficient 4',
                                       'pyname': u'total_cooling_capacity_coefficient_4',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'total cooling capacity coefficient 5',
                                      {'name': u'Total Cooling Capacity Coefficient 5',
                                       'pyname': u'total_cooling_capacity_coefficient_5',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'sensible cooling capacity coefficient 1',
                                      {'name': u'Sensible Cooling Capacity Coefficient 1',
                                       'pyname': u'sensible_cooling_capacity_coefficient_1',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'sensible cooling capacity coefficient 2',
                                      {'name': u'Sensible Cooling Capacity Coefficient 2',
                                       'pyname': u'sensible_cooling_capacity_coefficient_2',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'sensible cooling capacity coefficient 3',
                                      {'name': u'Sensible Cooling Capacity Coefficient 3',
                                       'pyname': u'sensible_cooling_capacity_coefficient_3',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'sensible cooling capacity coefficient 4',
                                      {'name': u'Sensible Cooling Capacity Coefficient 4',
                                       'pyname': u'sensible_cooling_capacity_coefficient_4',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'sensible cooling capacity coefficient 5',
                                      {'name': u'Sensible Cooling Capacity Coefficient 5',
                                       'pyname': u'sensible_cooling_capacity_coefficient_5',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'sensible cooling capacity coefficient 6',
                                      {'name': u'Sensible Cooling Capacity Coefficient 6',
                                       'pyname': u'sensible_cooling_capacity_coefficient_6',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling power consumption coefficient 1',
                                      {'name': u'Cooling Power Consumption Coefficient 1',
                                       'pyname': u'cooling_power_consumption_coefficient_1',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling power consumption coefficient 2',
                                      {'name': u'Cooling Power Consumption Coefficient 2',
                                       'pyname': u'cooling_power_consumption_coefficient_2',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling power consumption coefficient 3',
                                      {'name': u'Cooling Power Consumption Coefficient 3',
                                       'pyname': u'cooling_power_consumption_coefficient_3',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling power consumption coefficient 4',
                                      {'name': u'Cooling Power Consumption Coefficient 4',
                                       'pyname': u'cooling_power_consumption_coefficient_4',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling power consumption coefficient 5',
                                      {'name': u'Cooling Power Consumption Coefficient 5',
                                       'pyname': u'cooling_power_consumption_coefficient_5',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'nominal time for condensate removal to begin',
                                      {'name': u'Nominal Time for Condensate Removal to Begin',
                                       'pyname': u'nominal_time_for_condensate_removal_to_begin',
                                       'default': 0.0,
                                       'maximum': 3000.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'ratio of initial moisture evaporation rate and steady state latent capacity',
                                      {'name': u'Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity',
                                       'pyname': u'ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity',
                                       'default': 0.0,
                                       'maximum': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate.

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set

        """
        return self["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Rated Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Air Flow Rate"] = value

    @property
    def rated_water_flow_rate(self):
        """Get rated_water_flow_rate.

        Returns:
            float: the value of `rated_water_flow_rate` or None if not set

        """
        return self["Rated Water Flow Rate"]

    @rated_water_flow_rate.setter
    def rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Rated Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Water Flow Rate"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """Get gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value=None):
        """Corresponds to IDD field `Gross Rated Total Cooling Capacity` Total
        cooling capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_sensible_cooling_capacity(self):
        """Get gross_rated_sensible_cooling_capacity.

        Returns:
            float: the value of `gross_rated_sensible_cooling_capacity` or None if not set

        """
        return self["Gross Rated Sensible Cooling Capacity"]

    @gross_rated_sensible_cooling_capacity.setter
    def gross_rated_sensible_cooling_capacity(self, value=None):
        """Corresponds to IDD field `Gross Rated Sensible Cooling Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Sensible Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Sensible Cooling Capacity"] = value

    @property
    def gross_rated_cooling_cop(self):
        """Get gross_rated_cooling_cop.

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set

        """
        return self["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Gross Rated Cooling COP`

        Args:
            value (float): value for IDD Field `Gross Rated Cooling COP`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Cooling COP"] = value

    @property
    def total_cooling_capacity_coefficient_1(self):
        """Get total_cooling_capacity_coefficient_1.

        Returns:
            float: the value of `total_cooling_capacity_coefficient_1` or None if not set

        """
        return self["Total Cooling Capacity Coefficient 1"]

    @total_cooling_capacity_coefficient_1.setter
    def total_cooling_capacity_coefficient_1(self, value=None):
        """Corresponds to IDD field `Total Cooling Capacity Coefficient 1`

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Total Cooling Capacity Coefficient 1"] = value

    @property
    def total_cooling_capacity_coefficient_2(self):
        """Get total_cooling_capacity_coefficient_2.

        Returns:
            float: the value of `total_cooling_capacity_coefficient_2` or None if not set

        """
        return self["Total Cooling Capacity Coefficient 2"]

    @total_cooling_capacity_coefficient_2.setter
    def total_cooling_capacity_coefficient_2(self, value=None):
        """Corresponds to IDD field `Total Cooling Capacity Coefficient 2`

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Total Cooling Capacity Coefficient 2"] = value

    @property
    def total_cooling_capacity_coefficient_3(self):
        """Get total_cooling_capacity_coefficient_3.

        Returns:
            float: the value of `total_cooling_capacity_coefficient_3` or None if not set

        """
        return self["Total Cooling Capacity Coefficient 3"]

    @total_cooling_capacity_coefficient_3.setter
    def total_cooling_capacity_coefficient_3(self, value=None):
        """Corresponds to IDD field `Total Cooling Capacity Coefficient 3`

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Total Cooling Capacity Coefficient 3"] = value

    @property
    def total_cooling_capacity_coefficient_4(self):
        """Get total_cooling_capacity_coefficient_4.

        Returns:
            float: the value of `total_cooling_capacity_coefficient_4` or None if not set

        """
        return self["Total Cooling Capacity Coefficient 4"]

    @total_cooling_capacity_coefficient_4.setter
    def total_cooling_capacity_coefficient_4(self, value=None):
        """Corresponds to IDD field `Total Cooling Capacity Coefficient 4`

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Total Cooling Capacity Coefficient 4"] = value

    @property
    def total_cooling_capacity_coefficient_5(self):
        """Get total_cooling_capacity_coefficient_5.

        Returns:
            float: the value of `total_cooling_capacity_coefficient_5` or None if not set

        """
        return self["Total Cooling Capacity Coefficient 5"]

    @total_cooling_capacity_coefficient_5.setter
    def total_cooling_capacity_coefficient_5(self, value=None):
        """Corresponds to IDD field `Total Cooling Capacity Coefficient 5`

        Args:
            value (float): value for IDD Field `Total Cooling Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Total Cooling Capacity Coefficient 5"] = value

    @property
    def sensible_cooling_capacity_coefficient_1(self):
        """Get sensible_cooling_capacity_coefficient_1.

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_1` or None if not set

        """
        return self["Sensible Cooling Capacity Coefficient 1"]

    @sensible_cooling_capacity_coefficient_1.setter
    def sensible_cooling_capacity_coefficient_1(self, value=None):
        """Corresponds to IDD field `Sensible Cooling Capacity Coefficient 1`

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Sensible Cooling Capacity Coefficient 1"] = value

    @property
    def sensible_cooling_capacity_coefficient_2(self):
        """Get sensible_cooling_capacity_coefficient_2.

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_2` or None if not set

        """
        return self["Sensible Cooling Capacity Coefficient 2"]

    @sensible_cooling_capacity_coefficient_2.setter
    def sensible_cooling_capacity_coefficient_2(self, value=None):
        """Corresponds to IDD field `Sensible Cooling Capacity Coefficient 2`

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Sensible Cooling Capacity Coefficient 2"] = value

    @property
    def sensible_cooling_capacity_coefficient_3(self):
        """Get sensible_cooling_capacity_coefficient_3.

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_3` or None if not set

        """
        return self["Sensible Cooling Capacity Coefficient 3"]

    @sensible_cooling_capacity_coefficient_3.setter
    def sensible_cooling_capacity_coefficient_3(self, value=None):
        """Corresponds to IDD field `Sensible Cooling Capacity Coefficient 3`

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Sensible Cooling Capacity Coefficient 3"] = value

    @property
    def sensible_cooling_capacity_coefficient_4(self):
        """Get sensible_cooling_capacity_coefficient_4.

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_4` or None if not set

        """
        return self["Sensible Cooling Capacity Coefficient 4"]

    @sensible_cooling_capacity_coefficient_4.setter
    def sensible_cooling_capacity_coefficient_4(self, value=None):
        """Corresponds to IDD field `Sensible Cooling Capacity Coefficient 4`

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Sensible Cooling Capacity Coefficient 4"] = value

    @property
    def sensible_cooling_capacity_coefficient_5(self):
        """Get sensible_cooling_capacity_coefficient_5.

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_5` or None if not set

        """
        return self["Sensible Cooling Capacity Coefficient 5"]

    @sensible_cooling_capacity_coefficient_5.setter
    def sensible_cooling_capacity_coefficient_5(self, value=None):
        """Corresponds to IDD field `Sensible Cooling Capacity Coefficient 5`

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Sensible Cooling Capacity Coefficient 5"] = value

    @property
    def sensible_cooling_capacity_coefficient_6(self):
        """Get sensible_cooling_capacity_coefficient_6.

        Returns:
            float: the value of `sensible_cooling_capacity_coefficient_6` or None if not set

        """
        return self["Sensible Cooling Capacity Coefficient 6"]

    @sensible_cooling_capacity_coefficient_6.setter
    def sensible_cooling_capacity_coefficient_6(self, value=None):
        """Corresponds to IDD field `Sensible Cooling Capacity Coefficient 6`

        Args:
            value (float): value for IDD Field `Sensible Cooling Capacity Coefficient 6`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Sensible Cooling Capacity Coefficient 6"] = value

    @property
    def cooling_power_consumption_coefficient_1(self):
        """Get cooling_power_consumption_coefficient_1.

        Returns:
            float: the value of `cooling_power_consumption_coefficient_1` or None if not set

        """
        return self["Cooling Power Consumption Coefficient 1"]

    @cooling_power_consumption_coefficient_1.setter
    def cooling_power_consumption_coefficient_1(self, value=None):
        """Corresponds to IDD field `Cooling Power Consumption Coefficient 1`

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Power Consumption Coefficient 1"] = value

    @property
    def cooling_power_consumption_coefficient_2(self):
        """Get cooling_power_consumption_coefficient_2.

        Returns:
            float: the value of `cooling_power_consumption_coefficient_2` or None if not set

        """
        return self["Cooling Power Consumption Coefficient 2"]

    @cooling_power_consumption_coefficient_2.setter
    def cooling_power_consumption_coefficient_2(self, value=None):
        """Corresponds to IDD field `Cooling Power Consumption Coefficient 2`

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Power Consumption Coefficient 2"] = value

    @property
    def cooling_power_consumption_coefficient_3(self):
        """Get cooling_power_consumption_coefficient_3.

        Returns:
            float: the value of `cooling_power_consumption_coefficient_3` or None if not set

        """
        return self["Cooling Power Consumption Coefficient 3"]

    @cooling_power_consumption_coefficient_3.setter
    def cooling_power_consumption_coefficient_3(self, value=None):
        """Corresponds to IDD field `Cooling Power Consumption Coefficient 3`

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Power Consumption Coefficient 3"] = value

    @property
    def cooling_power_consumption_coefficient_4(self):
        """Get cooling_power_consumption_coefficient_4.

        Returns:
            float: the value of `cooling_power_consumption_coefficient_4` or None if not set

        """
        return self["Cooling Power Consumption Coefficient 4"]

    @cooling_power_consumption_coefficient_4.setter
    def cooling_power_consumption_coefficient_4(self, value=None):
        """Corresponds to IDD field `Cooling Power Consumption Coefficient 4`

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Power Consumption Coefficient 4"] = value

    @property
    def cooling_power_consumption_coefficient_5(self):
        """Get cooling_power_consumption_coefficient_5.

        Returns:
            float: the value of `cooling_power_consumption_coefficient_5` or None if not set

        """
        return self["Cooling Power Consumption Coefficient 5"]

    @cooling_power_consumption_coefficient_5.setter
    def cooling_power_consumption_coefficient_5(self, value=None):
        """Corresponds to IDD field `Cooling Power Consumption Coefficient 5`

        Args:
            value (float): value for IDD Field `Cooling Power Consumption Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Power Consumption Coefficient 5"] = value

    @property
    def nominal_time_for_condensate_removal_to_begin(self):
        """Get nominal_time_for_condensate_removal_to_begin.

        Returns:
            float: the value of `nominal_time_for_condensate_removal_to_begin` or None if not set

        """
        return self["Nominal Time for Condensate Removal to Begin"]

    @nominal_time_for_condensate_removal_to_begin.setter
    def nominal_time_for_condensate_removal_to_begin(self, value=None):
        """Corresponds to IDD field `Nominal Time for Condensate Removal to
        Begin` The nominal time for condensate to begin leaving the coil's
        condensate drain line at the coil's rated air flow and temperature
        conditions. Nominal time is equal to the ratio of the energy of the
        coil's maximum condensate holding capacity (J) to the coil's steady
        state latent capacity (W). Suggested value is 1000; zero value means
        latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate Removal to Begin`
                Units: s
                value <= 3000.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Time for Condensate Removal to Begin"] = value

    @property
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self):
        """Get ratio_of_initial_moisture_evaporation_rate_and_steady_state_late
        nt_capacity.

        Returns:
            float: the value of `ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity` or None if not set

        """
        return self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"]

    @ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity.setter
    def ratio_of_initial_moisture_evaporation_rate_and_steady_state_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
        Ratio of the initial moisture evaporation rate from the cooling coil (when
        the compressor first turns off) and the coil's steady state latent capacity
        at rated air flow rate and temperature conditions. Suggested value is 1.5; zero value
        means latent degradation model is disabled.

        Args:
            value (float): value for IDD Field `Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity`
                Units: dimensionless
                value <= 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Ratio of Initial Moisture Evaporation Rate and Steady State Latent Capacity"] = value




class CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit`
        Direct expansion (DX) cooling coil for water-to-air heat pump (includes electric
        compressor), variable-speed, equation-fit model. Optional inputs for moisture
        evaporation from wet coil when compressor cycles off with continuous fan operation.
        Equation-fit model uses normalized curves to describe the heat pump performance.
        Requires two to ten sets of performance data and will interpolate between speeds.
        Modeled as a single coil with variable-speed compressor.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Cooling:WaterToAirHeatPump:VariableSpeedEquationFit',
              'pyname': u'CoilCoolingWaterToAirHeatPumpVariableSpeedEquationFit',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'water-to-refrigerant hx water inlet node name',
                                      {'name': u'Water-to-Refrigerant HX Water Inlet Node Name',
                                       'pyname': u'watertorefrigerant_hx_water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water-to-refrigerant hx water outlet node name',
                                      {'name': u'Water-to-Refrigerant HX Water Outlet Node Name',
                                       'pyname': u'watertorefrigerant_hx_water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'indoor air inlet node name',
                                      {'name': u'Indoor Air Inlet Node Name',
                                       'pyname': u'indoor_air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'indoor air outlet node name',
                                      {'name': u'Indoor Air Outlet Node Name',
                                       'pyname': u'indoor_air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'number of speeds',
                                      {'name': u'Number of Speeds',
                                       'pyname': u'number_of_speeds',
                                       'default': 2,
                                       'maximum': 10,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'nominal speed level',
                                      {'name': u'Nominal Speed Level',
                                       'pyname': u'nominal_speed_level',
                                       'default': 2,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'gross rated total cooling capacity at selected nominal speed level',
                                      {'name': u'Gross Rated Total Cooling Capacity At Selected Nominal Speed Level',
                                       'pyname': u'gross_rated_total_cooling_capacity_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'rated air flow rate at selected nominal speed level',
                                      {'name': u'Rated Air Flow Rate At Selected Nominal Speed Level',
                                       'pyname': u'rated_air_flow_rate_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated water flow rate at selected nominal speed level',
                                      {'name': u'Rated Water Flow Rate At Selected Nominal Speed Level',
                                       'pyname': u'rated_water_flow_rate_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'nominal time for condensate to begin leaving the coil',
                                      {'name': u'Nominal Time for Condensate to Begin Leaving the Coil',
                                       'pyname': u'nominal_time_for_condensate_to_begin_leaving_the_coil',
                                       'default': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u's'}),
                                     (u'initial moisture evaporation rate divided by steady-state ac latent capacity',
                                      {'name': u'Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity',
                                       'pyname': u'initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity',
                                       'default': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'flag for using hot gas reheat, 0 or 1',
                                      {'name': u'Flag for Using Hot Gas Reheat, 0 or 1',
                                       'pyname': u'flag_for_using_hot_gas_reheat_0_or_1',
                                       'default': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'energy part load fraction curve name',
                                      {'name': u'Energy Part Load Fraction Curve Name',
                                       'pyname': u'energy_part_load_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_1_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 1 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_1_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 reference unit gross rated cooling cop',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_1_reference_unit_gross_rated_cooling_cop',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 reference unit rated air flow rate',
                                      {'name': u'Speed 1 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_1_reference_unit_rated_air_flow_rate',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 reference unit rated water flow rate',
                                      {'name': u'Speed 1 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_1_reference_unit_rated_water_flow_rate',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 1 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_1_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 waste heat function of temperature curve name',
                                      {'name': u'Speed 1 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_1_waste_heat_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_2_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 2 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_2_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 reference unit gross rated cooling cop',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_2_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 reference unit rated air flow rate',
                                      {'name': u'Speed 2 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_2_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 reference unit rated water flow rate',
                                      {'name': u'Speed 2 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_2_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 2 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_2_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 waste heat function of temperature curve name',
                                      {'name': u'Speed 2 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_2_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_3_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 3 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_3_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 reference unit gross rated cooling cop',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_3_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 reference unit rated air flow rate',
                                      {'name': u'Speed 3 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_3_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 reference unit rated water flow rate',
                                      {'name': u'Speed 3 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_3_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 3 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_3_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 waste heat function of temperature curve name',
                                      {'name': u'Speed 3 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_3_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_4_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 4 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_4_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 reference unit gross rated cooling cop',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_4_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 reference unit rated air flow rate',
                                      {'name': u'Speed 4 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_4_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 reference unit rated water flow rate',
                                      {'name': u'Speed 4 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_4_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 4 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_4_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 waste heat function of temperature curve name',
                                      {'name': u'Speed 4 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_4_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_5_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 5 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_5_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 reference unit gross rated cooling cop',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_5_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 reference unit rated air flow rate',
                                      {'name': u'Speed 5 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_5_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 5 reference unit rated water flow rate',
                                      {'name': u'Speed 5 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_5_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 5 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 5 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_5_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 waste heat function of temperature curve name',
                                      {'name': u'Speed 5 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_5_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_6_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 6 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_6_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 reference unit gross rated cooling cop',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_6_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 reference unit rated air flow rate',
                                      {'name': u'Speed 6 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_6_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 6 reference unit rated water flow rate',
                                      {'name': u'Speed 6 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_6_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 6 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 6 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_6_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 waste heat function of temperature curve name',
                                      {'name': u'Speed 6 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_6_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_7_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 7 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_7_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 reference unit gross rated cooling cop',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_7_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 reference unit rated air flow rate',
                                      {'name': u'Speed 7 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_7_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 7 reference unit rated water flow rate',
                                      {'name': u'Speed 7 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_7_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 7 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 7 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_7_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 waste heat function of temperature curve name',
                                      {'name': u'Speed 7 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_7_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_8_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 8 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_8_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 reference unit gross rated cooling cop',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_8_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 reference unit rated air flow rate',
                                      {'name': u'Speed 8 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_8_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 8 reference unit rated water flow rate',
                                      {'name': u'Speed 8 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_8_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 8 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 8 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_8_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 waste heat function of temperature curve name',
                                      {'name': u'Speed 8 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_8_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_9_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 9 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_9_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 reference unit gross rated cooling cop',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_9_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 reference unit rated air flow rate',
                                      {'name': u'Speed 9 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_9_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 9 reference unit rated water flow rate',
                                      {'name': u'Speed 9 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_9_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 9 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 9 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_9_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 waste heat function of temperature curve name',
                                      {'name': u'Speed 9 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_9_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 reference unit gross rated total cooling capacity',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Total Cooling Capacity',
                                       'pyname': u'speed_10_reference_unit_gross_rated_total_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 10 reference unit gross rated sensible heat ratio',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Sensible Heat Ratio',
                                       'pyname': u'speed_10_reference_unit_gross_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 reference unit gross rated cooling cop',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Cooling COP',
                                       'pyname': u'speed_10_reference_unit_gross_rated_cooling_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 reference unit rated air flow rate',
                                      {'name': u'Speed 10 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_10_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 10 reference unit rated water flow rate',
                                      {'name': u'Speed 10 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_10_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 10 total cooling capacity function of temperature curve name',
                                      {'name': u'Speed 10 Total Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_10_total_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 total cooling capacity function of air flow fraction curve name',
                                      {'name': u'Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 total cooling capacity function of water flow fraction curve name',
                                      {'name': u'Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 waste heat function of temperature curve name',
                                      {'name': u'Speed 10 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_10_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def watertorefrigerant_hx_water_inlet_node_name(self):
        """Get watertorefrigerant_hx_water_inlet_node_name.

        Returns:
            str: the value of `watertorefrigerant_hx_water_inlet_node_name` or None if not set

        """
        return self["Water-to-Refrigerant HX Water Inlet Node Name"]

    @watertorefrigerant_hx_water_inlet_node_name.setter
    def watertorefrigerant_hx_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Water-to-Refrigerant HX Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Water-to-Refrigerant HX Water Inlet Node Name"] = value

    @property
    def watertorefrigerant_hx_water_outlet_node_name(self):
        """Get watertorefrigerant_hx_water_outlet_node_name.

        Returns:
            str: the value of `watertorefrigerant_hx_water_outlet_node_name` or None if not set

        """
        return self["Water-to-Refrigerant HX Water Outlet Node Name"]

    @watertorefrigerant_hx_water_outlet_node_name.setter
    def watertorefrigerant_hx_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD field `Water-to-Refrigerant HX Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Water-to-Refrigerant HX Water Outlet Node Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name.

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set

        """
        return self["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name.

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set

        """
        return self["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds.

        Returns:
            int: the value of `number_of_speeds` or None if not set

        """
        return self["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2):
        """Corresponds to IDD field `Number of Speeds`

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level.

        Returns:
            int: the value of `nominal_speed_level` or None if not set

        """
        return self["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2):
        """Corresponds to IDD field `Nominal Speed Level` must be lower than or
        equal to the highest speed number.

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Speed Level"] = value

    @property
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(
            self):
        """Get
        gross_rated_total_cooling_capacity_at_selected_nominal_speed_level.

        Returns:
            float: the value of `gross_rated_total_cooling_capacity_at_selected_nominal_speed_level` or None if not set

        """
        return self[
            "Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"]

    @gross_rated_total_cooling_capacity_at_selected_nominal_speed_level.setter
    def gross_rated_total_cooling_capacity_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Gross Rated Total Cooling Capacity At
        Selected Nominal Speed Level` Total cooling capacity not accounting for
        the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Total Cooling Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Gross Rated Total Cooling Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Air Flow Rate At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def rated_water_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_water_flow_rate_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_water_flow_rate_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Water Flow Rate At Selected Nominal Speed Level"]

    @rated_water_flow_rate_at_selected_nominal_speed_level.setter
    def rated_water_flow_rate_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Water Flow Rate At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Water Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Water Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def nominal_time_for_condensate_to_begin_leaving_the_coil(self):
        """Get nominal_time_for_condensate_to_begin_leaving_the_coil.

        Returns:
            float: the value of `nominal_time_for_condensate_to_begin_leaving_the_coil` or None if not set

        """
        return self["Nominal Time for Condensate to Begin Leaving the Coil"]

    @nominal_time_for_condensate_to_begin_leaving_the_coil.setter
    def nominal_time_for_condensate_to_begin_leaving_the_coil(
            self,
            value=None):
        """Corresponds to IDD field `Nominal Time for Condensate to Begin
        Leaving the Coil`

        Args:
            value (float): value for IDD Field `Nominal Time for Condensate to Begin Leaving the Coil`
                Units: s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Time for Condensate to Begin Leaving the Coil"] = value

    @property
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(
            self):
        """Get initial_moisture_evaporation_rate_divided_by_steadystate_ac_late
        nt_capacity.

        Returns:
            float: the value of `initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity` or None if not set

        """
        return self[
            "Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"]

    @initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity.setter
    def initial_moisture_evaporation_rate_divided_by_steadystate_ac_latent_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`

        Args:
            value (float): value for IDD Field `Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Initial Moisture Evaporation Rate Divided by Steady-State AC Latent Capacity"] = value

    @property
    def flag_for_using_hot_gas_reheat_0_or_1(self):
        """Get flag_for_using_hot_gas_reheat_0_or_1.

        Returns:
            float: the value of `flag_for_using_hot_gas_reheat_0_or_1` or None if not set

        """
        return self["Flag for Using Hot Gas Reheat, 0 or 1"]

    @flag_for_using_hot_gas_reheat_0_or_1.setter
    def flag_for_using_hot_gas_reheat_0_or_1(self, value=None):
        """Corresponds to IDD field `Flag for Using Hot Gas Reheat, 0 or 1`

        Flag for using hot gas reheat, 0 - not used, 1 - used

        Args:
            value (float): value for IDD Field `Flag for Using Hot Gas Reheat, 0 or 1`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Flag for Using Hot Gas Reheat, 0 or 1"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name.

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set

        """
        return self["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Part Load Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_1_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 1 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_1_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_1_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 1 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_1_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_1_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_1_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_1_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_1_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Cooling COP"]

    @speed_1_reference_unit_gross_rated_cooling_cop.setter
    def speed_1_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow_rate(self):
        """Get speed_1_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 1 Reference Unit Rated Air Flow Rate"]

    @speed_1_reference_unit_rated_air_flow_rate.setter
    def speed_1_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_1_reference_unit_rated_water_flow_rate(self):
        """Get speed_1_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_1_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 1 Reference Unit Rated Water Flow Rate"]

    @speed_1_reference_unit_rated_water_flow_rate.setter
    def speed_1_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_1_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_1_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_1_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_1_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_1_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_1_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_2_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 2 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_2_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_2_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 2 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_2_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_2_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_2_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_2_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_2_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Cooling COP"]

    @speed_2_reference_unit_gross_rated_cooling_cop.setter
    def speed_2_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_water_flow_rate(self):
        """Get speed_2_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_2_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 2 Reference Unit Rated Water Flow Rate"]

    @speed_2_reference_unit_rated_water_flow_rate.setter
    def speed_2_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_2_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_2_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_2_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_2_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_2_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewet + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_2_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_3_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 3 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_3_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_3_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 3 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_3_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_3_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_3_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_3_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_3_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Cooling COP"]

    @speed_3_reference_unit_gross_rated_cooling_cop.setter
    def speed_3_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_water_flow_rate(self):
        """Get speed_3_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_3_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 3 Reference Unit Rated Water Flow Rate"]

    @speed_3_reference_unit_rated_water_flow_rate.setter
    def speed_3_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_3_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_3_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_3_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_3_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_3_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_3_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_4_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 4 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_4_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_4_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 4 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_4_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_4_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_4_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_4_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_4_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Cooling COP"]

    @speed_4_reference_unit_gross_rated_cooling_cop.setter
    def speed_4_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_water_flow_rate(self):
        """Get speed_4_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_4_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 4 Reference Unit Rated Water Flow Rate"]

    @speed_4_reference_unit_rated_water_flow_rate.setter
    def speed_4_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_4_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_4_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_4_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_4_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_4_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_4_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_5_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 5 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_5_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_5_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 5 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_5_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_5_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_5_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_5_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_5_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Cooling COP"]

    @speed_5_reference_unit_gross_rated_cooling_cop.setter
    def speed_5_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_water_flow_rate(self):
        """Get speed_5_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_5_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 5 Reference Unit Rated Water Flow Rate"]

    @speed_5_reference_unit_rated_water_flow_rate.setter
    def speed_5_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_5_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_5_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_5_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_5_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_5_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_5_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_5_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_5_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 5 Waste Heat Function of Temperature Curve Name"]

    @speed_5_waste_heat_function_of_temperature_curve_name.setter
    def speed_5_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 5 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 5 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_6_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 6 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_6_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_6_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 6 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_6_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_6_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_6_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_6_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_6_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Cooling COP"]

    @speed_6_reference_unit_gross_rated_cooling_cop.setter
    def speed_6_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_rated_water_flow_rate(self):
        """Get speed_6_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_6_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 6 Reference Unit Rated Water Flow Rate"]

    @speed_6_reference_unit_rated_water_flow_rate.setter
    def speed_6_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_6_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_6_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_6_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_6_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_6_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_6_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_6_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_6_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 6 Waste Heat Function of Temperature Curve Name"]

    @speed_6_waste_heat_function_of_temperature_curve_name.setter
    def speed_6_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 6 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 6 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_7_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 7 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_7_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_7_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 7 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_7_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_7_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_7_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_7_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_7_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Cooling COP"]

    @speed_7_reference_unit_gross_rated_cooling_cop.setter
    def speed_7_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_reference_unit_rated_water_flow_rate(self):
        """Get speed_7_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_7_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 7 Reference Unit Rated Water Flow Rate"]

    @speed_7_reference_unit_rated_water_flow_rate.setter
    def speed_7_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_7_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_7_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_7_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_7_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_7_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_7_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_7_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_7_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 7 Waste Heat Function of Temperature Curve Name"]

    @speed_7_waste_heat_function_of_temperature_curve_name.setter
    def speed_7_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 7 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 7 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_8_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 8 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_8_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_8_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 8 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_8_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_8_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_8_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_8_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_8_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Cooling COP"]

    @speed_8_reference_unit_gross_rated_cooling_cop.setter
    def speed_8_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_rated_water_flow_rate(self):
        """Get speed_8_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_8_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 8 Reference Unit Rated Water Flow Rate"]

    @speed_8_reference_unit_rated_water_flow_rate.setter
    def speed_8_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_8_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_8_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_8_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_8_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_8_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_8_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_8_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_8_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 8 Waste Heat Function of Temperature Curve Name"]

    @speed_8_waste_heat_function_of_temperature_curve_name.setter
    def speed_8_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 8 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 8 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_9_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 9 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_9_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_9_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 9 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_9_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_9_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_9_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_9_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_9_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Cooling COP"]

    @speed_9_reference_unit_gross_rated_cooling_cop.setter
    def speed_9_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Cooling
        COP`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_rated_water_flow_rate(self):
        """Get speed_9_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_9_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 9 Reference Unit Rated Water Flow Rate"]

    @speed_9_reference_unit_rated_water_flow_rate.setter
    def speed_9_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_9_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_9_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_9_total_cooling_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_9_total_cooling_capacity_function_of_water_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_9_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_9_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_9_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_9_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 9 Waste Heat Function of Temperature Curve Name"]

    @speed_9_waste_heat_function_of_temperature_curve_name.setter
    def speed_9_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 9 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 9 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(self):
        """Get speed_10_reference_unit_gross_rated_total_cooling_capacity.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_total_cooling_capacity` or None if not set

        """
        return self[
            "Speed 10 Reference Unit Gross Rated Total Cooling Capacity"]

    @speed_10_reference_unit_gross_rated_total_cooling_capacity.setter
    def speed_10_reference_unit_gross_rated_total_cooling_capacity(
            self,
            value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated Total
        Cooling Capacity` Total cooling capacity not accounting for the effect
        of supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Total Cooling Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 10 Reference Unit Gross Rated Total Cooling Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(self):
        """Get speed_10_reference_unit_gross_rated_sensible_heat_ratio.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"]

    @speed_10_reference_unit_gross_rated_sensible_heat_ratio.setter
    def speed_10_reference_unit_gross_rated_sensible_heat_ratio(
            self,
            value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Sensible Heat Ratio`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Sensible Heat Ratio`
                Units: dimensionless
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Sensible Heat Ratio"] = value

    @property
    def speed_10_reference_unit_gross_rated_cooling_cop(self):
        """Get speed_10_reference_unit_gross_rated_cooling_cop.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_cooling_cop` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Cooling COP"]

    @speed_10_reference_unit_gross_rated_cooling_cop.setter
    def speed_10_reference_unit_gross_rated_cooling_cop(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Cooling COP`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Cooling COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Cooling COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_rated_water_flow_rate(self):
        """Get speed_10_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_10_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 10 Reference Unit Rated Water Flow Rate"]

    @speed_10_reference_unit_rated_water_flow_rate.setter
    def speed_10_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get
        speed_10_total_cooling_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Total Cooling Capacity Function of Temperature Curve Name"]

    @speed_10_total_cooling_capacity_function_of_temperature_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Total Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_10_total_cooling_capacity_function_of_air_flow_fraction_cu
        rve_name.

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Total Cooling Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_10_total_cooling_capacity_function_of_water_flow_fraction_
        curve_name.

        Returns:
            str: the value of `speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name"]

    @speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_10_total_cooling_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Total Cooling Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_
        name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_10_energy_input_ratio_function_of_water_flow_fraction_curv
        e_name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_10_reference_unit_waste_heat_fraction_of_input_power_at_ra
        ted_conditions.

        Returns:
            float: the value of `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Waste Heat
        Fraction of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_10_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_10_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 10 Waste Heat Function of Temperature Curve Name"]

    @speed_10_waste_heat_function_of_temperature_curve_name.setter
    def speed_10_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*wb + c*wb**2 + d*ewt + e*ewt**2 + f*wb*ewt
        wb = entering wet-bulb temperature (C)
        ewt = water entering temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Speed 10 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 10 Waste Heat Function of Temperature Curve Name"] = value




class CoilHeatingWaterToAirHeatPumpEquationFit(DataObject):

    """ Corresponds to IDD object `Coil:Heating:WaterToAirHeatPump:EquationFit`
        Direct expansion (DX) heating coil for water-to-air heat pump (includes electric
        compressor), single-speed, equation-fit model. Equation-fit model uses normalized
        curves to describe the heat pump performance.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:WaterToAirHeatPump:EquationFit',
              'pyname': u'CoilHeatingWaterToAirHeatPumpEquationFit',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air inlet node name',
                                      {'name': u'Air Inlet Node Name',
                                       'pyname': u'air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'air outlet node name',
                                      {'name': u'Air Outlet Node Name',
                                       'pyname': u'air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'rated air flow rate',
                                      {'name': u'Rated Air Flow Rate',
                                       'pyname': u'rated_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated water flow rate',
                                      {'name': u'Rated Water Flow Rate',
                                       'pyname': u'rated_water_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'gross rated heating capacity',
                                      {'name': u'Gross Rated Heating Capacity',
                                       'pyname': u'gross_rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'gross rated heating cop',
                                      {'name': u'Gross Rated Heating COP',
                                       'pyname': u'gross_rated_heating_cop',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating capacity coefficient 1',
                                      {'name': u'Heating Capacity Coefficient 1',
                                       'pyname': u'heating_capacity_coefficient_1',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating capacity coefficient 2',
                                      {'name': u'Heating Capacity Coefficient 2',
                                       'pyname': u'heating_capacity_coefficient_2',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating capacity coefficient 3',
                                      {'name': u'Heating Capacity Coefficient 3',
                                       'pyname': u'heating_capacity_coefficient_3',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating capacity coefficient 4',
                                      {'name': u'Heating Capacity Coefficient 4',
                                       'pyname': u'heating_capacity_coefficient_4',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating capacity coefficient 5',
                                      {'name': u'Heating Capacity Coefficient 5',
                                       'pyname': u'heating_capacity_coefficient_5',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating power consumption coefficient 1',
                                      {'name': u'Heating Power Consumption Coefficient 1',
                                       'pyname': u'heating_power_consumption_coefficient_1',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating power consumption coefficient 2',
                                      {'name': u'Heating Power Consumption Coefficient 2',
                                       'pyname': u'heating_power_consumption_coefficient_2',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating power consumption coefficient 3',
                                      {'name': u'Heating Power Consumption Coefficient 3',
                                       'pyname': u'heating_power_consumption_coefficient_3',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating power consumption coefficient 4',
                                      {'name': u'Heating Power Consumption Coefficient 4',
                                       'pyname': u'heating_power_consumption_coefficient_4',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'heating power consumption coefficient 5',
                                      {'name': u'Heating Power Consumption Coefficient 5',
                                       'pyname': u'heating_power_consumption_coefficient_5',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def air_inlet_node_name(self):
        """Get air_inlet_node_name.

        Returns:
            str: the value of `air_inlet_node_name` or None if not set

        """
        return self["Air Inlet Node Name"]

    @air_inlet_node_name.setter
    def air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Inlet Node Name"] = value

    @property
    def air_outlet_node_name(self):
        """Get air_outlet_node_name.

        Returns:
            str: the value of `air_outlet_node_name` or None if not set

        """
        return self["Air Outlet Node Name"]

    @air_outlet_node_name.setter
    def air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Air Outlet Node Name"] = value

    @property
    def rated_air_flow_rate(self):
        """Get rated_air_flow_rate.

        Returns:
            float: the value of `rated_air_flow_rate` or None if not set

        """
        return self["Rated Air Flow Rate"]

    @rated_air_flow_rate.setter
    def rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Rated Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Air Flow Rate"] = value

    @property
    def rated_water_flow_rate(self):
        """Get rated_water_flow_rate.

        Returns:
            float: the value of `rated_water_flow_rate` or None if not set

        """
        return self["Rated Water Flow Rate"]

    @rated_water_flow_rate.setter
    def rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Rated Water Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Water Flow Rate"] = value

    @property
    def gross_rated_heating_capacity(self):
        """Get gross_rated_heating_capacity.

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set

        """
        return self["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Gross Rated Heating Capacity` Heating
        capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Heating Capacity"] = value

    @property
    def gross_rated_heating_cop(self):
        """Get gross_rated_heating_cop.

        Returns:
            float: the value of `gross_rated_heating_cop` or None if not set

        """
        return self["Gross Rated Heating COP"]

    @gross_rated_heating_cop.setter
    def gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Gross Rated Heating COP`

        Args:
            value (float): value for IDD Field `Gross Rated Heating COP`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Gross Rated Heating COP"] = value

    @property
    def heating_capacity_coefficient_1(self):
        """Get heating_capacity_coefficient_1.

        Returns:
            float: the value of `heating_capacity_coefficient_1` or None if not set

        """
        return self["Heating Capacity Coefficient 1"]

    @heating_capacity_coefficient_1.setter
    def heating_capacity_coefficient_1(self, value=None):
        """Corresponds to IDD field `Heating Capacity Coefficient 1`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Capacity Coefficient 1"] = value

    @property
    def heating_capacity_coefficient_2(self):
        """Get heating_capacity_coefficient_2.

        Returns:
            float: the value of `heating_capacity_coefficient_2` or None if not set

        """
        return self["Heating Capacity Coefficient 2"]

    @heating_capacity_coefficient_2.setter
    def heating_capacity_coefficient_2(self, value=None):
        """Corresponds to IDD field `Heating Capacity Coefficient 2`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Capacity Coefficient 2"] = value

    @property
    def heating_capacity_coefficient_3(self):
        """Get heating_capacity_coefficient_3.

        Returns:
            float: the value of `heating_capacity_coefficient_3` or None if not set

        """
        return self["Heating Capacity Coefficient 3"]

    @heating_capacity_coefficient_3.setter
    def heating_capacity_coefficient_3(self, value=None):
        """Corresponds to IDD field `Heating Capacity Coefficient 3`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Capacity Coefficient 3"] = value

    @property
    def heating_capacity_coefficient_4(self):
        """Get heating_capacity_coefficient_4.

        Returns:
            float: the value of `heating_capacity_coefficient_4` or None if not set

        """
        return self["Heating Capacity Coefficient 4"]

    @heating_capacity_coefficient_4.setter
    def heating_capacity_coefficient_4(self, value=None):
        """Corresponds to IDD field `Heating Capacity Coefficient 4`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Capacity Coefficient 4"] = value

    @property
    def heating_capacity_coefficient_5(self):
        """Get heating_capacity_coefficient_5.

        Returns:
            float: the value of `heating_capacity_coefficient_5` or None if not set

        """
        return self["Heating Capacity Coefficient 5"]

    @heating_capacity_coefficient_5.setter
    def heating_capacity_coefficient_5(self, value=None):
        """Corresponds to IDD field `Heating Capacity Coefficient 5`

        Args:
            value (float): value for IDD Field `Heating Capacity Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Capacity Coefficient 5"] = value

    @property
    def heating_power_consumption_coefficient_1(self):
        """Get heating_power_consumption_coefficient_1.

        Returns:
            float: the value of `heating_power_consumption_coefficient_1` or None if not set

        """
        return self["Heating Power Consumption Coefficient 1"]

    @heating_power_consumption_coefficient_1.setter
    def heating_power_consumption_coefficient_1(self, value=None):
        """Corresponds to IDD field `Heating Power Consumption Coefficient 1`

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 1`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Power Consumption Coefficient 1"] = value

    @property
    def heating_power_consumption_coefficient_2(self):
        """Get heating_power_consumption_coefficient_2.

        Returns:
            float: the value of `heating_power_consumption_coefficient_2` or None if not set

        """
        return self["Heating Power Consumption Coefficient 2"]

    @heating_power_consumption_coefficient_2.setter
    def heating_power_consumption_coefficient_2(self, value=None):
        """Corresponds to IDD field `Heating Power Consumption Coefficient 2`

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 2`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Power Consumption Coefficient 2"] = value

    @property
    def heating_power_consumption_coefficient_3(self):
        """Get heating_power_consumption_coefficient_3.

        Returns:
            float: the value of `heating_power_consumption_coefficient_3` or None if not set

        """
        return self["Heating Power Consumption Coefficient 3"]

    @heating_power_consumption_coefficient_3.setter
    def heating_power_consumption_coefficient_3(self, value=None):
        """Corresponds to IDD field `Heating Power Consumption Coefficient 3`

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 3`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Power Consumption Coefficient 3"] = value

    @property
    def heating_power_consumption_coefficient_4(self):
        """Get heating_power_consumption_coefficient_4.

        Returns:
            float: the value of `heating_power_consumption_coefficient_4` or None if not set

        """
        return self["Heating Power Consumption Coefficient 4"]

    @heating_power_consumption_coefficient_4.setter
    def heating_power_consumption_coefficient_4(self, value=None):
        """Corresponds to IDD field `Heating Power Consumption Coefficient 4`

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 4`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Power Consumption Coefficient 4"] = value

    @property
    def heating_power_consumption_coefficient_5(self):
        """Get heating_power_consumption_coefficient_5.

        Returns:
            float: the value of `heating_power_consumption_coefficient_5` or None if not set

        """
        return self["Heating Power Consumption Coefficient 5"]

    @heating_power_consumption_coefficient_5.setter
    def heating_power_consumption_coefficient_5(self, value=None):
        """Corresponds to IDD field `Heating Power Consumption Coefficient 5`

        Args:
            value (float): value for IDD Field `Heating Power Consumption Coefficient 5`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Power Consumption Coefficient 5"] = value




class CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit(DataObject):

    """ Corresponds to IDD object `Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit`
        Direct expansion (DX) heating coil for water-to-air heat pump (includes electric
        compressor), variable-speed, equation-fit model. Equation-fit model uses normalized
        curves to describe the heat pump performance. Requires two to ten sets of performance
        data and will interpolate between speeds.
    """
    schema = {'min-fields': 0,
              'name': u'Coil:Heating:WaterToAirHeatPump:VariableSpeedEquationFit',
              'pyname': u'CoilHeatingWaterToAirHeatPumpVariableSpeedEquationFit',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'water-to-refrigerant hx water inlet node name',
                                      {'name': u'Water-to-Refrigerant HX Water Inlet Node Name',
                                       'pyname': u'watertorefrigerant_hx_water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water-to-refrigerant hx water outlet node name',
                                      {'name': u'Water-to-Refrigerant HX Water Outlet Node Name',
                                       'pyname': u'watertorefrigerant_hx_water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'indoor air inlet node name',
                                      {'name': u'Indoor Air Inlet Node Name',
                                       'pyname': u'indoor_air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'indoor air outlet node name',
                                      {'name': u'Indoor Air Outlet Node Name',
                                       'pyname': u'indoor_air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'number of speeds',
                                      {'name': u'Number of Speeds',
                                       'pyname': u'number_of_speeds',
                                       'default': 2,
                                       'maximum': 10,
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 1,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'nominal speed level',
                                      {'name': u'Nominal Speed Level',
                                       'pyname': u'nominal_speed_level',
                                       'default': 2,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'integer',
                                       'unit': u'dimensionless'}),
                                     (u'rated heating capacity at selected nominal speed level',
                                      {'name': u'Rated Heating Capacity At Selected Nominal Speed Level',
                                       'pyname': u'rated_heating_capacity_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'rated air flow rate at selected nominal speed level',
                                      {'name': u'Rated Air Flow Rate At Selected Nominal Speed Level',
                                       'pyname': u'rated_air_flow_rate_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated water flow rate at selected nominal speed level',
                                      {'name': u'Rated Water Flow Rate At Selected Nominal Speed Level',
                                       'pyname': u'rated_water_flow_rate_at_selected_nominal_speed_level',
                                       'default': 'autosize',
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'energy part load fraction curve name',
                                      {'name': u'Energy Part Load Fraction Curve Name',
                                       'pyname': u'energy_part_load_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 reference unit gross rated heating capacity',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_1_reference_unit_gross_rated_heating_capacity',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 1 reference unit gross rated heating cop',
                                      {'name': u'Speed 1 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_1_reference_unit_gross_rated_heating_cop',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 reference unit rated air flow',
                                      {'name': u'Speed 1 Reference Unit Rated Air Flow',
                                       'pyname': u'speed_1_reference_unit_rated_air_flow',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 reference unit rated water flow rate',
                                      {'name': u'Speed 1 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_1_reference_unit_rated_water_flow_rate',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 1 heating capacity function of temperature curve name',
                                      {'name': u'Speed 1 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_1_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_1_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 1 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': True,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 1 waste heat function of temperature curve name',
                                      {'name': u'Speed 1 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_1_waste_heat_function_of_temperature_curve_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 reference unit gross rated heating capacity',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_2_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 2 reference unit gross rated heating cop',
                                      {'name': u'Speed 2 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_2_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 reference unit rated air flow rate',
                                      {'name': u'Speed 2 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_2_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 reference unit rated water flow rate',
                                      {'name': u'Speed 2 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_2_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 2 heating capacity function of temperature curve name',
                                      {'name': u'Speed 2 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_2_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_2_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 2 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 2 waste heat function of temperature curve name',
                                      {'name': u'Speed 2 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_2_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 reference unit gross rated heating capacity',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_3_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 3 reference unit gross rated heating cop',
                                      {'name': u'Speed 3 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_3_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 reference unit rated air flow rate',
                                      {'name': u'Speed 3 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_3_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 reference unit rated water flow rate',
                                      {'name': u'Speed 3 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_3_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 3 heating capacity function of temperature curve name',
                                      {'name': u'Speed 3 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_3_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_3_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 3 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 3 waste heat function of temperature curve name',
                                      {'name': u'Speed 3 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_3_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 reference unit gross rated heating capacity',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_4_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 4 reference unit gross rated heating cop',
                                      {'name': u'Speed 4 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_4_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 reference unit rated air flow rate',
                                      {'name': u'Speed 4 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_4_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 reference unit rated water flow rate',
                                      {'name': u'Speed 4 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_4_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 4 heating capacity function of temperature curve name',
                                      {'name': u'Speed 4 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_4_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_4_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 4 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 4 waste heat function of temperature curve name',
                                      {'name': u'Speed 4 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_4_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 reference unit gross rated heating capacity',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_5_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 5 reference unit gross rated heating cop',
                                      {'name': u'Speed 5 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_5_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 reference unit rated air flow rate',
                                      {'name': u'Speed 5 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_5_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 5 reference unit rated water flow rate',
                                      {'name': u'Speed 5 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_5_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 5 heating capacity function of temperature curve name',
                                      {'name': u'Speed 5 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_5_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_5_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 5 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 5 waste heat function of temperature curve name',
                                      {'name': u'Speed 5 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_5_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 reference unit gross rated heating capacity',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_6_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 6 reference unit gross rated heating cop',
                                      {'name': u'Speed 6 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_6_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 reference unit rated air flow rate',
                                      {'name': u'Speed 6 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_6_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 6 reference unit rated water flow rate',
                                      {'name': u'Speed 6 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_6_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 6 heating capacity function of temperature curve name',
                                      {'name': u'Speed 6 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_6_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_6_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 6 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 6 waste heat function of temperature curve name',
                                      {'name': u'Speed 6 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_6_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 reference unit gross rated heating capacity',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_7_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 7 reference unit gross rated heating cop',
                                      {'name': u'Speed 7 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_7_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 reference unit rated air flow rate',
                                      {'name': u'Speed 7 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_7_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 7 reference unit rated water flow rate',
                                      {'name': u'Speed 7 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_7_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 7 heating capacity function of temperature curve name',
                                      {'name': u'Speed 7 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_7_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_7_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 7 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 7 waste heat function of temperature curve name',
                                      {'name': u'Speed 7 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_7_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 reference unit gross rated heating capacity',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_8_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 8 reference unit gross rated heating cop',
                                      {'name': u'Speed 8 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_8_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 reference unit rated air flow rate',
                                      {'name': u'Speed 8 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_8_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 8 reference unit rated water flow rate',
                                      {'name': u'Speed 8 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_8_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 8 heating capacity function of temperature curve name',
                                      {'name': u'Speed 8 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_8_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_8_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 8 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 8 waste heat function of temperature curve name',
                                      {'name': u'Speed 8 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_8_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 reference unit gross rated heating capacity',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_9_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 9 reference unit gross rated heating cop',
                                      {'name': u'Speed 9 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_9_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 reference unit rated air flow rate',
                                      {'name': u'Speed 9 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_9_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 9 reference unit rated water flow rate',
                                      {'name': u'Speed 9 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_9_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 9 heating capacity function of temperature curve name',
                                      {'name': u'Speed 9 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_9_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_9_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 9 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 9 waste heat function of temperature curve name',
                                      {'name': u'Speed 9 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_9_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 reference unit gross rated heating capacity',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Heating Capacity',
                                       'pyname': u'speed_10_reference_unit_gross_rated_heating_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'w'}),
                                     (u'speed 10 reference unit gross rated heating cop',
                                      {'name': u'Speed 10 Reference Unit Gross Rated Heating COP',
                                       'pyname': u'speed_10_reference_unit_gross_rated_heating_cop',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 reference unit rated air flow rate',
                                      {'name': u'Speed 10 Reference Unit Rated Air Flow Rate',
                                       'pyname': u'speed_10_reference_unit_rated_air_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 10 reference unit rated water flow rate',
                                      {'name': u'Speed 10 Reference Unit Rated Water Flow Rate',
                                       'pyname': u'speed_10_reference_unit_rated_water_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'speed 10 heating capacity function of temperature curve name',
                                      {'name': u'Speed 10 Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'speed_10_heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 total  heating capacity function of air flow fraction curve name',
                                      {'name': u'Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 heating capacity function of water flow fraction curve name',
                                      {'name': u'Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_10_heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of temperature curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of air flow fraction curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 energy input ratio function of water flow fraction curve name',
                                      {'name': u'Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name',
                                       'pyname': u'speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'speed 10 reference unit waste heat fraction of input power at rated conditions',
                                      {'name': u'Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions',
                                       'pyname': u'speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'speed 10 waste heat function of temperature curve name',
                                      {'name': u'Speed 10 Waste Heat Function of Temperature Curve Name',
                                       'pyname': u'speed_10_waste_heat_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def watertorefrigerant_hx_water_inlet_node_name(self):
        """Get watertorefrigerant_hx_water_inlet_node_name.

        Returns:
            str: the value of `watertorefrigerant_hx_water_inlet_node_name` or None if not set

        """
        return self["Water-to-Refrigerant HX Water Inlet Node Name"]

    @watertorefrigerant_hx_water_inlet_node_name.setter
    def watertorefrigerant_hx_water_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Water-to-Refrigerant HX Water Inlet Node Name`

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Water-to-Refrigerant HX Water Inlet Node Name"] = value

    @property
    def watertorefrigerant_hx_water_outlet_node_name(self):
        """Get watertorefrigerant_hx_water_outlet_node_name.

        Returns:
            str: the value of `watertorefrigerant_hx_water_outlet_node_name` or None if not set

        """
        return self["Water-to-Refrigerant HX Water Outlet Node Name"]

    @watertorefrigerant_hx_water_outlet_node_name.setter
    def watertorefrigerant_hx_water_outlet_node_name(self, value=None):
        """  Corresponds to IDD field `Water-to-Refrigerant HX Water Outlet Node Name`

        Args:
            value (str): value for IDD Field `Water-to-Refrigerant HX Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Water-to-Refrigerant HX Water Outlet Node Name"] = value

    @property
    def indoor_air_inlet_node_name(self):
        """Get indoor_air_inlet_node_name.

        Returns:
            str: the value of `indoor_air_inlet_node_name` or None if not set

        """
        return self["Indoor Air Inlet Node Name"]

    @indoor_air_inlet_node_name.setter
    def indoor_air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Inlet Node Name"] = value

    @property
    def indoor_air_outlet_node_name(self):
        """Get indoor_air_outlet_node_name.

        Returns:
            str: the value of `indoor_air_outlet_node_name` or None if not set

        """
        return self["Indoor Air Outlet Node Name"]

    @indoor_air_outlet_node_name.setter
    def indoor_air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Indoor Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Indoor Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Indoor Air Outlet Node Name"] = value

    @property
    def number_of_speeds(self):
        """Get number_of_speeds.

        Returns:
            int: the value of `number_of_speeds` or None if not set

        """
        return self["Number of Speeds"]

    @number_of_speeds.setter
    def number_of_speeds(self, value=2):
        """Corresponds to IDD field `Number of Speeds`

        Args:
            value (int): value for IDD Field `Number of Speeds`
                Units: dimensionless
                Default value: 2
                value >= 1
                value <= 10
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Number of Speeds"] = value

    @property
    def nominal_speed_level(self):
        """Get nominal_speed_level.

        Returns:
            int: the value of `nominal_speed_level` or None if not set

        """
        return self["Nominal Speed Level"]

    @nominal_speed_level.setter
    def nominal_speed_level(self, value=2):
        """Corresponds to IDD field `Nominal Speed Level` must be lower than or
        equal to the highest speed number.

        Args:
            value (int): value for IDD Field `Nominal Speed Level`
                Units: dimensionless
                Default value: 2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Nominal Speed Level"] = value

    @property
    def rated_heating_capacity_at_selected_nominal_speed_level(self):
        """Get rated_heating_capacity_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_heating_capacity_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Heating Capacity At Selected Nominal Speed Level"]

    @rated_heating_capacity_at_selected_nominal_speed_level.setter
    def rated_heating_capacity_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Heating Capacity At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Heating Capacity At Selected Nominal Speed Level`
                Units: w
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Heating Capacity At Selected Nominal Speed Level"] = value

    @property
    def rated_air_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_air_flow_rate_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_air_flow_rate_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Air Flow Rate At Selected Nominal Speed Level"]

    @rated_air_flow_rate_at_selected_nominal_speed_level.setter
    def rated_air_flow_rate_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Air Flow Rate At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Air Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Air Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def rated_water_flow_rate_at_selected_nominal_speed_level(self):
        """Get rated_water_flow_rate_at_selected_nominal_speed_level.

        Returns:
            float: the value of `rated_water_flow_rate_at_selected_nominal_speed_level` or None if not set

        """
        return self["Rated Water Flow Rate At Selected Nominal Speed Level"]

    @rated_water_flow_rate_at_selected_nominal_speed_level.setter
    def rated_water_flow_rate_at_selected_nominal_speed_level(
            self,
            value="autosize"):
        """Corresponds to IDD field `Rated Water Flow Rate At Selected Nominal
        Speed Level`

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Water Flow Rate At Selected Nominal Speed Level`
                Units: m3/s
                Default value: "autosize"
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Water Flow Rate At Selected Nominal Speed Level"] = value

    @property
    def energy_part_load_fraction_curve_name(self):
        """Get energy_part_load_fraction_curve_name.

        Returns:
            str: the value of `energy_part_load_fraction_curve_name` or None if not set

        """
        return self["Energy Part Load Fraction Curve Name"]

    @energy_part_load_fraction_curve_name.setter
    def energy_part_load_fraction_curve_name(self, value=None):
        """  Corresponds to IDD field `Energy Part Load Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        PLR = part load ratio (heating load/steady state capacity)

        Args:
            value (str): value for IDD Field `Energy Part Load Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Energy Part Load Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_1_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Heating Capacity"]

    @speed_1_reference_unit_gross_rated_heating_capacity.setter
    def speed_1_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_1_reference_unit_gross_rated_heating_cop(self):
        """Get speed_1_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_1_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 1 Reference Unit Gross Rated Heating COP"]

    @speed_1_reference_unit_gross_rated_heating_cop.setter
    def speed_1_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_1_reference_unit_rated_air_flow(self):
        """Get speed_1_reference_unit_rated_air_flow.

        Returns:
            float: the value of `speed_1_reference_unit_rated_air_flow` or None if not set

        """
        return self["Speed 1 Reference Unit Rated Air Flow"]

    @speed_1_reference_unit_rated_air_flow.setter
    def speed_1_reference_unit_rated_air_flow(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Rated Air Flow`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Air Flow`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Rated Air Flow"] = value

    @property
    def speed_1_reference_unit_rated_water_flow_rate(self):
        """Get speed_1_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_1_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 1 Reference Unit Rated Water Flow Rate"]

    @speed_1_reference_unit_rated_water_flow_rate.setter
    def speed_1_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 1 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_1_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_1_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Heating Capacity Function of Temperature Curve Name"]

    @speed_1_heating_capacity_function_of_temperature_curve_name.setter
    def speed_1_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_1_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_1_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_1_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_1_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_1_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_1_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_1_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_1_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_1_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_1_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 1 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_1_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 1 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 1 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_1_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_1_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_1_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 1 Waste Heat Function of Temperature Curve Name"]

    @speed_1_waste_heat_function_of_temperature_curve_name.setter
    def speed_1_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 1 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 1 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 1 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_2_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Heating Capacity"]

    @speed_2_reference_unit_gross_rated_heating_capacity.setter
    def speed_2_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_2_reference_unit_gross_rated_heating_cop(self):
        """Get speed_2_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_2_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 2 Reference Unit Gross Rated Heating COP"]

    @speed_2_reference_unit_gross_rated_heating_cop.setter
    def speed_2_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_2_reference_unit_rated_air_flow_rate(self):
        """Get speed_2_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_2_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 2 Reference Unit Rated Air Flow Rate"]

    @speed_2_reference_unit_rated_air_flow_rate.setter
    def speed_2_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_2_reference_unit_rated_water_flow_rate(self):
        """Get speed_2_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_2_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 2 Reference Unit Rated Water Flow Rate"]

    @speed_2_reference_unit_rated_water_flow_rate.setter
    def speed_2_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 2 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_2_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_2_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Heating Capacity Function of Temperature Curve Name"]

    @speed_2_heating_capacity_function_of_temperature_curve_name.setter
    def speed_2_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_2_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_2_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_2_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_2_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_2_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_2_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_2_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_2_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_2_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_2_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 2 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_2_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 2 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 2 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_2_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_2_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_2_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 2 Waste Heat Function of Temperature Curve Name"]

    @speed_2_waste_heat_function_of_temperature_curve_name.setter
    def speed_2_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 2 Waste Heat Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 2 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 2 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_3_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Heating Capacity"]

    @speed_3_reference_unit_gross_rated_heating_capacity.setter
    def speed_3_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_3_reference_unit_gross_rated_heating_cop(self):
        """Get speed_3_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_3_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 3 Reference Unit Gross Rated Heating COP"]

    @speed_3_reference_unit_gross_rated_heating_cop.setter
    def speed_3_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_3_reference_unit_rated_air_flow_rate(self):
        """Get speed_3_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_3_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 3 Reference Unit Rated Air Flow Rate"]

    @speed_3_reference_unit_rated_air_flow_rate.setter
    def speed_3_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_3_reference_unit_rated_water_flow_rate(self):
        """Get speed_3_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_3_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 3 Reference Unit Rated Water Flow Rate"]

    @speed_3_reference_unit_rated_water_flow_rate.setter
    def speed_3_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 3 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_3_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_3_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Heating Capacity Function of Temperature Curve Name"]

    @speed_3_heating_capacity_function_of_temperature_curve_name.setter
    def speed_3_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_3_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_3_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_3_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_3_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_3_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_3_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_3_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_3_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_3_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_3_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 3 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_3_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 3 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 3 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_3_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_3_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_3_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 3 Waste Heat Function of Temperature Curve Name"]

    @speed_3_waste_heat_function_of_temperature_curve_name.setter
    def speed_3_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 3 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 3 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 3 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_4_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Heating Capacity"]

    @speed_4_reference_unit_gross_rated_heating_capacity.setter
    def speed_4_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_4_reference_unit_gross_rated_heating_cop(self):
        """Get speed_4_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_4_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 4 Reference Unit Gross Rated Heating COP"]

    @speed_4_reference_unit_gross_rated_heating_cop.setter
    def speed_4_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_4_reference_unit_rated_air_flow_rate(self):
        """Get speed_4_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_4_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 4 Reference Unit Rated Air Flow Rate"]

    @speed_4_reference_unit_rated_air_flow_rate.setter
    def speed_4_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_4_reference_unit_rated_water_flow_rate(self):
        """Get speed_4_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_4_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 4 Reference Unit Rated Water Flow Rate"]

    @speed_4_reference_unit_rated_water_flow_rate.setter
    def speed_4_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 4 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_4_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_4_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Heating Capacity Function of Temperature Curve Name"]

    @speed_4_heating_capacity_function_of_temperature_curve_name.setter
    def speed_4_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_4_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_4_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_4_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_4_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_4_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_4_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_4_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_4_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_4_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_4_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 4 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_4_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 4 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 4 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_4_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_4_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_4_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 4 Waste Heat Function of Temperature Curve Name"]

    @speed_4_waste_heat_function_of_temperature_curve_name.setter
    def speed_4_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 4 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 4 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 4 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_5_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Heating Capacity"]

    @speed_5_reference_unit_gross_rated_heating_capacity.setter
    def speed_5_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_5_reference_unit_gross_rated_heating_cop(self):
        """Get speed_5_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_5_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 5 Reference Unit Gross Rated Heating COP"]

    @speed_5_reference_unit_gross_rated_heating_cop.setter
    def speed_5_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_5_reference_unit_rated_air_flow_rate(self):
        """Get speed_5_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_5_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 5 Reference Unit Rated Air Flow Rate"]

    @speed_5_reference_unit_rated_air_flow_rate.setter
    def speed_5_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_5_reference_unit_rated_water_flow_rate(self):
        """Get speed_5_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_5_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 5 Reference Unit Rated Water Flow Rate"]

    @speed_5_reference_unit_rated_water_flow_rate.setter
    def speed_5_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 5 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_5_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_5_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Heating Capacity Function of Temperature Curve Name"]

    @speed_5_heating_capacity_function_of_temperature_curve_name.setter
    def speed_5_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_5_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_5_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_5_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_5_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_5_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_5_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_5_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_5_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_5_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_5_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_5_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 5 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_5_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 5 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 5 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_5_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_5_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_5_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 5 Waste Heat Function of Temperature Curve Name"]

    @speed_5_waste_heat_function_of_temperature_curve_name.setter
    def speed_5_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 5 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 5 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 5 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_6_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Heating Capacity"]

    @speed_6_reference_unit_gross_rated_heating_capacity.setter
    def speed_6_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_6_reference_unit_gross_rated_heating_cop(self):
        """Get speed_6_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_6_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 6 Reference Unit Gross Rated Heating COP"]

    @speed_6_reference_unit_gross_rated_heating_cop.setter
    def speed_6_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_6_reference_unit_rated_air_flow_rate(self):
        """Get speed_6_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_6_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 6 Reference Unit Rated Air Flow Rate"]

    @speed_6_reference_unit_rated_air_flow_rate.setter
    def speed_6_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_6_reference_unit_rated_water_flow_rate(self):
        """Get speed_6_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_6_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 6 Reference Unit Rated Water Flow Rate"]

    @speed_6_reference_unit_rated_water_flow_rate.setter
    def speed_6_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 6 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_6_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_6_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Heating Capacity Function of Temperature Curve Name"]

    @speed_6_heating_capacity_function_of_temperature_curve_name.setter
    def speed_6_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_6_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_6_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_6_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_6_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_6_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_6_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_6_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_6_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_6_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_6_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_6_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 6 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_6_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 6 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 6 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_6_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_6_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_6_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 6 Waste Heat Function of Temperature Curve Name"]

    @speed_6_waste_heat_function_of_temperature_curve_name.setter
    def speed_6_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 6 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 6 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 6 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_7_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Heating Capacity"]

    @speed_7_reference_unit_gross_rated_heating_capacity.setter
    def speed_7_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_7_reference_unit_gross_rated_heating_cop(self):
        """Get speed_7_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_7_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 7 Reference Unit Gross Rated Heating COP"]

    @speed_7_reference_unit_gross_rated_heating_cop.setter
    def speed_7_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_7_reference_unit_rated_air_flow_rate(self):
        """Get speed_7_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_7_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 7 Reference Unit Rated Air Flow Rate"]

    @speed_7_reference_unit_rated_air_flow_rate.setter
    def speed_7_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_7_reference_unit_rated_water_flow_rate(self):
        """Get speed_7_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_7_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 7 Reference Unit Rated Water Flow Rate"]

    @speed_7_reference_unit_rated_water_flow_rate.setter
    def speed_7_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 7 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_7_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_7_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Heating Capacity Function of Temperature Curve Name"]

    @speed_7_heating_capacity_function_of_temperature_curve_name.setter
    def speed_7_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_7_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_7_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_7_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_7_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_7_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_7_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_7_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_7_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_7_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_7_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_7_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 7 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_7_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 7 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 7 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_7_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_7_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_7_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 7 Waste Heat Function of Temperature Curve Name"]

    @speed_7_waste_heat_function_of_temperature_curve_name.setter
    def speed_7_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 7 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 7 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 7 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_8_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Heating Capacity"]

    @speed_8_reference_unit_gross_rated_heating_capacity.setter
    def speed_8_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_8_reference_unit_gross_rated_heating_cop(self):
        """Get speed_8_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_8_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 8 Reference Unit Gross Rated Heating COP"]

    @speed_8_reference_unit_gross_rated_heating_cop.setter
    def speed_8_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_8_reference_unit_rated_air_flow_rate(self):
        """Get speed_8_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_8_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 8 Reference Unit Rated Air Flow Rate"]

    @speed_8_reference_unit_rated_air_flow_rate.setter
    def speed_8_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_8_reference_unit_rated_water_flow_rate(self):
        """Get speed_8_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_8_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 8 Reference Unit Rated Water Flow Rate"]

    @speed_8_reference_unit_rated_water_flow_rate.setter
    def speed_8_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 8 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_8_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_8_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Heating Capacity Function of Temperature Curve Name"]

    @speed_8_heating_capacity_function_of_temperature_curve_name.setter
    def speed_8_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_8_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_8_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_8_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_8_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_8_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_8_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_8_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_8_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_8_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_8_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_8_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 8 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_8_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 8 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 8 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_8_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_8_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_8_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 8 Waste Heat Function of Temperature Curve Name"]

    @speed_8_waste_heat_function_of_temperature_curve_name.setter
    def speed_8_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 8 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 8 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 8 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_9_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Heating Capacity"]

    @speed_9_reference_unit_gross_rated_heating_capacity.setter
    def speed_9_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Heating
        Capacity` Heating capacity not accounting for the effect of supply air
        fan heat.

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_9_reference_unit_gross_rated_heating_cop(self):
        """Get speed_9_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_9_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 9 Reference Unit Gross Rated Heating COP"]

    @speed_9_reference_unit_gross_rated_heating_cop.setter
    def speed_9_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Gross Rated Heating
        COP`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_9_reference_unit_rated_air_flow_rate(self):
        """Get speed_9_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_9_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 9 Reference Unit Rated Air Flow Rate"]

    @speed_9_reference_unit_rated_air_flow_rate.setter
    def speed_9_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_9_reference_unit_rated_water_flow_rate(self):
        """Get speed_9_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_9_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 9 Reference Unit Rated Water Flow Rate"]

    @speed_9_reference_unit_rated_water_flow_rate.setter
    def speed_9_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 9 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_9_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_9_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Heating Capacity Function of Temperature Curve Name"]

    @speed_9_heating_capacity_function_of_temperature_curve_name.setter
    def speed_9_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_9_total_heating_capacity_function_of_air_flow_fraction_cur
        ve_name.

        Returns:
            str: the value of `speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_9_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get
        speed_9_heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_9_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_9_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_9_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_9_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_9_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_9_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get
        speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_9_energy_input_ratio_function_of_water_flow_fraction_curve
        _name.

        Returns:
            str: the value of `speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_9_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 9 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rat
        ed_conditions.

        Returns:
            float: the value of `speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_9_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 9 Reference Unit Waste Heat Fraction
        of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 9 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_9_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_9_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_9_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 9 Waste Heat Function of Temperature Curve Name"]

    @speed_9_waste_heat_function_of_temperature_curve_name.setter
    def speed_9_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 9 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 9 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 9 Waste Heat Function of Temperature Curve Name"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_capacity(self):
        """Get speed_10_reference_unit_gross_rated_heating_capacity.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_capacity` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Heating Capacity"]

    @speed_10_reference_unit_gross_rated_heating_capacity.setter
    def speed_10_reference_unit_gross_rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Heating Capacity` Heating capacity not accounting for the effect of
        supply air fan heat.

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating Capacity`
                Units: w
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Heating Capacity"] = value

    @property
    def speed_10_reference_unit_gross_rated_heating_cop(self):
        """Get speed_10_reference_unit_gross_rated_heating_cop.

        Returns:
            float: the value of `speed_10_reference_unit_gross_rated_heating_cop` or None if not set

        """
        return self["Speed 10 Reference Unit Gross Rated Heating COP"]

    @speed_10_reference_unit_gross_rated_heating_cop.setter
    def speed_10_reference_unit_gross_rated_heating_cop(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Gross Rated
        Heating COP`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Gross Rated Heating COP`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Gross Rated Heating COP"] = value

    @property
    def speed_10_reference_unit_rated_air_flow_rate(self):
        """Get speed_10_reference_unit_rated_air_flow_rate.

        Returns:
            float: the value of `speed_10_reference_unit_rated_air_flow_rate` or None if not set

        """
        return self["Speed 10 Reference Unit Rated Air Flow Rate"]

    @speed_10_reference_unit_rated_air_flow_rate.setter
    def speed_10_reference_unit_rated_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Rated Air Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Rated Air Flow Rate"] = value

    @property
    def speed_10_reference_unit_rated_water_flow_rate(self):
        """Get speed_10_reference_unit_rated_water_flow_rate.

        Returns:
            float: the value of `speed_10_reference_unit_rated_water_flow_rate` or None if not set

        """
        return self["Speed 10 Reference Unit Rated Water Flow Rate"]

    @speed_10_reference_unit_rated_water_flow_rate.setter
    def speed_10_reference_unit_rated_water_flow_rate(self, value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Rated Water Flow
        Rate`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Rated Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Speed 10 Reference Unit Rated Water Flow Rate"] = value

    @property
    def speed_10_heating_capacity_function_of_temperature_curve_name(self):
        """Get speed_10_heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Heating Capacity Function of Temperature Curve Name"]

    @speed_10_heating_capacity_function_of_temperature_curve_name.setter
    def speed_10_heating_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Heating Capacity Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_10_total_heating_capacity_function_of_air_flow_fraction_cu
        rve_name.

        Returns:
            str: the value of `speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name"]

    @speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def speed_10_total_heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Total  Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_heating_capacity_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_10_heating_capacity_function_of_water_flow_fraction_curve_
        name.

        Returns:
            str: the value of `speed_10_heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name"]

    @speed_10_heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def speed_10_heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(self):
        """Get speed_10_energy_input_ratio_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"]

    @speed_10_energy_input_ratio_function_of_temperature_curve_name.setter
    def speed_10_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self):
        """Get speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_
        name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffa + c*ffa**2
        cubic curve = a + b*ffa + c*ffa**2 + d*ffa**3
        ffa = Fraction of the full load Air Flow

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Air Flow Fraction Curve Name"] = value

    @property
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self):
        """Get speed_10_energy_input_ratio_function_of_water_flow_fraction_curv
        e_name.

        Returns:
            str: the value of `speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"]

    @speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name.setter
    def speed_10_energy_input_ratio_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
        optional
        Table:OneIndependentVariable object can also be used
        quadratic curve = a + b*ffw + c*ffw**2
        cubic curve = a + b*ffw + c*ffw**2 + d*ffw**3
        ffw = Fraction of the full load Water Flow

        Args:
            value (str): value for IDD Field `Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Speed 10 Energy Input Ratio Function of Water Flow Fraction Curve Name"] = value

    @property
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self):
        """Get speed_10_reference_unit_waste_heat_fraction_of_input_power_at_ra
        ted_conditions.

        Returns:
            float: the value of `speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions` or None if not set

        """
        return self[
            "Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"]

    @speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions.setter
    def speed_10_reference_unit_waste_heat_fraction_of_input_power_at_rated_conditions(
            self,
            value=None):
        """Corresponds to IDD field `Speed 10 Reference Unit Waste Heat
        Fraction of Input Power At Rated Conditions`

        Args:
            value (float): value for IDD Field `Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions`
                Units: dimensionless
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Speed 10 Reference Unit Waste Heat Fraction of Input Power At Rated Conditions"] = value

    @property
    def speed_10_waste_heat_function_of_temperature_curve_name(self):
        """Get speed_10_waste_heat_function_of_temperature_curve_name.

        Returns:
            str: the value of `speed_10_waste_heat_function_of_temperature_curve_name` or None if not set

        """
        return self["Speed 10 Waste Heat Function of Temperature Curve Name"]

    @speed_10_waste_heat_function_of_temperature_curve_name.setter
    def speed_10_waste_heat_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Speed 10 Waste Heat Function of Temperature Curve Name`
        optional
        Table:TwoIndependentVariables object can also be used
        curve = a + b*db + c*db**2 + d*ewt + e*ewt**2 + f*db*ewt
        db = entering air dry bulb temperature (C)
        ewt = water entering temperature seen by the evaporator (C)

        Args:
            value (str): value for IDD Field `Speed 10 Waste Heat Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Speed 10 Waste Heat Function of Temperature Curve Name"] = value




class CoilWaterHeatingAirToWaterHeatPump(DataObject):

    """ Corresponds to IDD object `Coil:WaterHeating:AirToWaterHeatPump`
        Heat pump water heater (HPWH) heating coil, air-to-water direct-expansion (DX)
        system which includes a water heating coil, evaporator air coil, evaporator
        fan, electric compressor, and water pump. Part of a WaterHeater:HeatPump system.
    """
    schema = {'min-fields': 21,
              'name': u'Coil:WaterHeating:AirToWaterHeatPump',
              'pyname': u'CoilWaterHeatingAirToWaterHeatPump',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'rated heating capacity',
                                      {'name': u'Rated Heating Capacity',
                                       'pyname': u'rated_heating_capacity',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'rated cop',
                                      {'name': u'Rated COP',
                                       'pyname': u'rated_cop',
                                       'default': 3.2,
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'rated sensible heat ratio',
                                      {'name': u'Rated Sensible Heat Ratio',
                                       'pyname': u'rated_sensible_heat_ratio',
                                       'default': 0.85,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.5,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'rated evaporator inlet air dry-bulb temperature',
                                      {'name': u'Rated Evaporator Inlet Air Dry-Bulb Temperature',
                                       'pyname': u'rated_evaporator_inlet_air_drybulb_temperature',
                                       'default': 19.7,
                                       'minimum>': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated evaporator inlet air wet-bulb temperature',
                                      {'name': u'Rated Evaporator Inlet Air Wet-Bulb Temperature',
                                       'pyname': u'rated_evaporator_inlet_air_wetbulb_temperature',
                                       'default': 13.5,
                                       'minimum>': 5.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated condenser inlet water temperature',
                                      {'name': u'Rated Condenser Inlet Water Temperature',
                                       'pyname': u'rated_condenser_inlet_water_temperature',
                                       'default': 57.5,
                                       'minimum>': 25.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated evaporator air flow rate',
                                      {'name': u'Rated Evaporator Air Flow Rate',
                                       'pyname': u'rated_evaporator_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'rated condenser water flow rate',
                                      {'name': u'Rated Condenser Water Flow Rate',
                                       'pyname': u'rated_condenser_water_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'evaporator fan power included in rated cop',
                                      {'name': u'Evaporator Fan Power Included in Rated COP',
                                       'pyname': u'evaporator_fan_power_included_in_rated_cop',
                                       'default': u'Yes',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'condenser pump power included in rated cop',
                                      {'name': u'Condenser Pump Power Included in Rated COP',
                                       'pyname': u'condenser_pump_power_included_in_rated_cop',
                                       'default': u'No',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'condenser pump heat included in rated heating capacity and rated cop',
                                      {'name': u'Condenser Pump Heat Included in Rated Heating Capacity and Rated COP',
                                       'pyname': u'condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop',
                                       'default': u'No',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'condenser water pump power',
                                      {'name': u'Condenser Water Pump Power',
                                       'pyname': u'condenser_water_pump_power',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'fraction of condenser pump heat to water',
                                      {'name': u'Fraction of Condenser Pump Heat to Water',
                                       'pyname': u'fraction_of_condenser_pump_heat_to_water',
                                       'default': 0.2,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'evaporator air inlet node name',
                                      {'name': u'Evaporator Air Inlet Node Name',
                                       'pyname': u'evaporator_air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'evaporator air outlet node name',
                                      {'name': u'Evaporator Air Outlet Node Name',
                                       'pyname': u'evaporator_air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser water inlet node name',
                                      {'name': u'Condenser Water Inlet Node Name',
                                       'pyname': u'condenser_water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser water outlet node name',
                                      {'name': u'Condenser Water Outlet Node Name',
                                       'pyname': u'condenser_water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'crankcase heater capacity',
                                      {'name': u'Crankcase Heater Capacity',
                                       'pyname': u'crankcase_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'maximum ambient temperature for crankcase heater operation',
                                      {'name': u'Maximum Ambient Temperature for Crankcase Heater Operation',
                                       'pyname': u'maximum_ambient_temperature_for_crankcase_heater_operation',
                                       'default': 10.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'evaporator air temperature type for curve objects',
                                      {'name': u'Evaporator Air Temperature Type for Curve Objects',
                                       'pyname': u'evaporator_air_temperature_type_for_curve_objects',
                                       'default': u'WetBulbTemperature',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'DryBulbTemperature',
                                                           u'WetBulbTemperature'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heating capacity function of temperature curve name',
                                      {'name': u'Heating Capacity Function of Temperature Curve Name',
                                       'pyname': u'heating_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating capacity function of air flow fraction curve name',
                                      {'name': u'Heating Capacity Function of Air Flow Fraction Curve Name',
                                       'pyname': u'heating_capacity_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating capacity function of water flow fraction curve name',
                                      {'name': u'Heating Capacity Function of Water Flow Fraction Curve Name',
                                       'pyname': u'heating_capacity_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating cop function of temperature curve name',
                                      {'name': u'Heating COP Function of Temperature Curve Name',
                                       'pyname': u'heating_cop_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating cop function of air flow fraction curve name',
                                      {'name': u'Heating COP Function of Air Flow Fraction Curve Name',
                                       'pyname': u'heating_cop_function_of_air_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating cop function of water flow fraction curve name',
                                      {'name': u'Heating COP Function of Water Flow Fraction Curve Name',
                                       'pyname': u'heating_cop_function_of_water_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'part load fraction correlation curve name',
                                      {'name': u'Part Load Fraction Correlation Curve Name',
                                       'pyname': u'part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name` Unique name for this instance of a
        heat pump water heater DX coil.

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def rated_heating_capacity(self):
        """Get rated_heating_capacity.

        Returns:
            float: the value of `rated_heating_capacity` or None if not set

        """
        return self["Rated Heating Capacity"]

    @rated_heating_capacity.setter
    def rated_heating_capacity(self, value=None):
        """Corresponds to IDD field `Rated Heating Capacity` Heating capacity
        at the rated inlet air temperatures, rated condenser inlet water
        temperature, rated air flow rate, and rated water flow rate. Can
        optionally include condenser pump heat.

        Args:
            value (float): value for IDD Field `Rated Heating Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Heating Capacity"] = value

    @property
    def rated_cop(self):
        """Get rated_cop.

        Returns:
            float: the value of `rated_cop` or None if not set

        """
        return self["Rated COP"]

    @rated_cop.setter
    def rated_cop(self, value=3.2):
        """Corresponds to IDD field `Rated COP` Heating coefficient of
        performance at the rated inlet air temperatures, rated condenser inlet
        water temperature, rated air flow rate, and rated water flow rate. Can
        optionally include condenser pump power and evaporator fan power (see
        fields below).

        Args:
            value (float): value for IDD Field `Rated COP`
                Units: W/W
                Default value: 3.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated COP"] = value

    @property
    def rated_sensible_heat_ratio(self):
        """Get rated_sensible_heat_ratio.

        Returns:
            float: the value of `rated_sensible_heat_ratio` or None if not set

        """
        return self["Rated Sensible Heat Ratio"]

    @rated_sensible_heat_ratio.setter
    def rated_sensible_heat_ratio(self, value=0.85):
        """  Corresponds to IDD field `Rated Sensible Heat Ratio`
        Gross air-side sensible heat ratio at the rated inlet air temperatures,
        rated condenser inlet water temperature, rated air flow rate, and rated water flow rate.
        Sensible heat ratio equals gross sensible cooling capacity divided by gross total cooling
        capacity. Rated SHR (gross) should not include evaporator fan heat, only sensible cooling
        and dehumidification by the coil alone.

        Args:
            value (float): value for IDD Field `Rated Sensible Heat Ratio`
                Default value: 0.85
                value >= 0.5
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Sensible Heat Ratio"] = value

    @property
    def rated_evaporator_inlet_air_drybulb_temperature(self):
        """Get rated_evaporator_inlet_air_drybulb_temperature.

        Returns:
            float: the value of `rated_evaporator_inlet_air_drybulb_temperature` or None if not set

        """
        return self["Rated Evaporator Inlet Air Dry-Bulb Temperature"]

    @rated_evaporator_inlet_air_drybulb_temperature.setter
    def rated_evaporator_inlet_air_drybulb_temperature(self, value=19.7):
        """  Corresponds to IDD field `Rated Evaporator Inlet Air Dry-Bulb Temperature`
        Evaporator inlet air dry-bulb temperature corresponding to rated coil performance
        (heating capacity, COP and SHR).

        Args:
            value (float): value for IDD Field `Rated Evaporator Inlet Air Dry-Bulb Temperature`
                Units: C
                Default value: 19.7
                value > 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Evaporator Inlet Air Dry-Bulb Temperature"] = value

    @property
    def rated_evaporator_inlet_air_wetbulb_temperature(self):
        """Get rated_evaporator_inlet_air_wetbulb_temperature.

        Returns:
            float: the value of `rated_evaporator_inlet_air_wetbulb_temperature` or None if not set

        """
        return self["Rated Evaporator Inlet Air Wet-Bulb Temperature"]

    @rated_evaporator_inlet_air_wetbulb_temperature.setter
    def rated_evaporator_inlet_air_wetbulb_temperature(self, value=13.5):
        """  Corresponds to IDD field `Rated Evaporator Inlet Air Wet-Bulb Temperature`
        Evaporator inlet air wet-bulb temperature corresponding to rated coil performance
        (heating capacity, COP and SHR).

        Args:
            value (float): value for IDD Field `Rated Evaporator Inlet Air Wet-Bulb Temperature`
                Units: C
                Default value: 13.5
                value > 5.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Evaporator Inlet Air Wet-Bulb Temperature"] = value

    @property
    def rated_condenser_inlet_water_temperature(self):
        """Get rated_condenser_inlet_water_temperature.

        Returns:
            float: the value of `rated_condenser_inlet_water_temperature` or None if not set

        """
        return self["Rated Condenser Inlet Water Temperature"]

    @rated_condenser_inlet_water_temperature.setter
    def rated_condenser_inlet_water_temperature(self, value=57.5):
        """Corresponds to IDD field `Rated Condenser Inlet Water Temperature`
        Condenser inlet water temperature corresponding to rated coil
        performance (heating capacity, COP and SHR).

        Args:
            value (float): value for IDD Field `Rated Condenser Inlet Water Temperature`
                Units: C
                Default value: 57.5
                value > 25.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Condenser Inlet Water Temperature"] = value

    @property
    def rated_evaporator_air_flow_rate(self):
        """Get rated_evaporator_air_flow_rate.

        Returns:
            float: the value of `rated_evaporator_air_flow_rate` or None if not set

        """
        return self["Rated Evaporator Air Flow Rate"]

    @rated_evaporator_air_flow_rate.setter
    def rated_evaporator_air_flow_rate(self, value=None):
        """  Corresponds to IDD field `Rated Evaporator Air Flow Rate`
        Evaporator air flow rate corresponding to rated coil performance
        (heating capacity, COP and SHR).
        Default is 5.035E-5 m3/s/W (31.25 cfm/MBH) of rated heating capacity when autocalculated.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Rated Evaporator Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Evaporator Air Flow Rate"] = value

    @property
    def rated_condenser_water_flow_rate(self):
        """Get rated_condenser_water_flow_rate.

        Returns:
            float: the value of `rated_condenser_water_flow_rate` or None if not set

        """
        return self["Rated Condenser Water Flow Rate"]

    @rated_condenser_water_flow_rate.setter
    def rated_condenser_water_flow_rate(self, value=None):
        """  Corresponds to IDD field `Rated Condenser Water Flow Rate`
        Condenser water flow rate corresponding to rated coil performance
        (heating capacity, COP and SHR).
        Default is 4.487E-8 m3/s/W (0.208 gpm/MBH) of rated heating capacity when autocalculated.
        A warning message will be issued if the ratio of Rated Condenser Water Flow Rate
        to Heating Capacity is less than 1.79405E-8 m3/s/W (0.083 gpm/MBH)
        or greater than 8.97024E-8 m3/s/W (0.417 gpm/MBH), but the simulation will continue.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Rated Condenser Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Condenser Water Flow Rate"] = value

    @property
    def evaporator_fan_power_included_in_rated_cop(self):
        """Get evaporator_fan_power_included_in_rated_cop.

        Returns:
            str: the value of `evaporator_fan_power_included_in_rated_cop` or None if not set

        """
        return self["Evaporator Fan Power Included in Rated COP"]

    @evaporator_fan_power_included_in_rated_cop.setter
    def evaporator_fan_power_included_in_rated_cop(self, value="Yes"):
        """Corresponds to IDD field `Evaporator Fan Power Included in Rated
        COP` Select Yes if the evaporator fan power is included in the rated
        COP. This choice field impacts the calculation of compressor electric
        power.

        Args:
            value (str): value for IDD Field `Evaporator Fan Power Included in Rated COP`
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporator Fan Power Included in Rated COP"] = value

    @property
    def condenser_pump_power_included_in_rated_cop(self):
        """Get condenser_pump_power_included_in_rated_cop.

        Returns:
            str: the value of `condenser_pump_power_included_in_rated_cop` or None if not set

        """
        return self["Condenser Pump Power Included in Rated COP"]

    @condenser_pump_power_included_in_rated_cop.setter
    def condenser_pump_power_included_in_rated_cop(self, value="No"):
        """Corresponds to IDD field `Condenser Pump Power Included in Rated
        COP` Select Yes if the condenser pump power is included in the rated
        COP. This choice field impacts the calculation of compressor electric
        power.

        Args:
            value (str): value for IDD Field `Condenser Pump Power Included in Rated COP`
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Pump Power Included in Rated COP"] = value

    @property
    def condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop(
            self):
        """Get condenser_pump_heat_included_in_rated_heating_capacity_and_rated
        _cop.

        Returns:
            str: the value of `condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop` or None if not set

        """
        return self[
            "Condenser Pump Heat Included in Rated Heating Capacity and Rated COP"]

    @condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop.setter
    def condenser_pump_heat_included_in_rated_heating_capacity_and_rated_cop(
            self,
            value="No"):
        """Corresponds to IDD field `Condenser Pump Heat Included in Rated
        Heating Capacity and Rated COP` Select Yes if the condenser pump heat
        is included in the rated heating capacity and rated COP. This choice
        field impacts the calculation of water heating capacity.

        Args:
            value (str): value for IDD Field `Condenser Pump Heat Included in Rated Heating Capacity and Rated COP`
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Condenser Pump Heat Included in Rated Heating Capacity and Rated COP"] = value

    @property
    def condenser_water_pump_power(self):
        """Get condenser_water_pump_power.

        Returns:
            float: the value of `condenser_water_pump_power` or None if not set

        """
        return self["Condenser Water Pump Power"]

    @condenser_water_pump_power.setter
    def condenser_water_pump_power(self, value=None):
        """  Corresponds to IDD field `Condenser Water Pump Power`
        A warning message will be issued if the ratio of Condenser Water Pump Power to Rated
        Heating Capacity exceeds 0.1422 W/W (41.67 Watts/MBH), but the simulation will continue.

        Args:
            value (float): value for IDD Field `Condenser Water Pump Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Condenser Water Pump Power"] = value

    @property
    def fraction_of_condenser_pump_heat_to_water(self):
        """Get fraction_of_condenser_pump_heat_to_water.

        Returns:
            float: the value of `fraction_of_condenser_pump_heat_to_water` or None if not set

        """
        return self["Fraction of Condenser Pump Heat to Water"]

    @fraction_of_condenser_pump_heat_to_water.setter
    def fraction_of_condenser_pump_heat_to_water(self, value=0.2):
        """Corresponds to IDD field `Fraction of Condenser Pump Heat to Water`
        Fraction of pump heat transferred to the condenser water. The pump is
        assumed to be located downstream of the condenser.

        Args:
            value (float): value for IDD Field `Fraction of Condenser Pump Heat to Water`
                Default value: 0.2
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fraction of Condenser Pump Heat to Water"] = value

    @property
    def evaporator_air_inlet_node_name(self):
        """Get evaporator_air_inlet_node_name.

        Returns:
            str: the value of `evaporator_air_inlet_node_name` or None if not set

        """
        return self["Evaporator Air Inlet Node Name"]

    @evaporator_air_inlet_node_name.setter
    def evaporator_air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Evaporator Air Inlet Node Name` The node
        from which the DX coil draws its inlet air.

        Args:
            value (str): value for IDD Field `Evaporator Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporator Air Inlet Node Name"] = value

    @property
    def evaporator_air_outlet_node_name(self):
        """Get evaporator_air_outlet_node_name.

        Returns:
            str: the value of `evaporator_air_outlet_node_name` or None if not set

        """
        return self["Evaporator Air Outlet Node Name"]

    @evaporator_air_outlet_node_name.setter
    def evaporator_air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Evaporator Air Outlet Node Name` The node
        to which the DX coil sends its outlet air.

        Args:
            value (str): value for IDD Field `Evaporator Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporator Air Outlet Node Name"] = value

    @property
    def condenser_water_inlet_node_name(self):
        """Get condenser_water_inlet_node_name.

        Returns:
            str: the value of `condenser_water_inlet_node_name` or None if not set

        """
        return self["Condenser Water Inlet Node Name"]

    @condenser_water_inlet_node_name.setter
    def condenser_water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Condenser Water Inlet Node Name` The node
        from which the DX coil condenser draws its inlet water. This name
        should match the source side outlet node name in the associated water
        heater tank object.

        Args:
            value (str): value for IDD Field `Condenser Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Water Inlet Node Name"] = value

    @property
    def condenser_water_outlet_node_name(self):
        """Get condenser_water_outlet_node_name.

        Returns:
            str: the value of `condenser_water_outlet_node_name` or None if not set

        """
        return self["Condenser Water Outlet Node Name"]

    @condenser_water_outlet_node_name.setter
    def condenser_water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Condenser Water Outlet Node Name` The node
        to which the DX coil condenser sends its outlet water. This name should
        match the source side inlet node name in the associated water heater
        tank object.

        Args:
            value (str): value for IDD Field `Condenser Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Water Outlet Node Name"] = value

    @property
    def crankcase_heater_capacity(self):
        """Get crankcase_heater_capacity.

        Returns:
            float: the value of `crankcase_heater_capacity` or None if not set

        """
        return self["Crankcase Heater Capacity"]

    @crankcase_heater_capacity.setter
    def crankcase_heater_capacity(self, value=None):
        """  Corresponds to IDD field `Crankcase Heater Capacity`
        The compressor crankcase heater only operates when the dry-bulb temperature of air
        surrounding the compressor is below the Maximum Ambient Temperature for Crankcase
        Heater Operation and the DX coil is off.  The ambient temperature surrounding the
        compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).

        Args:
            value (float): value for IDD Field `Crankcase Heater Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Crankcase Heater Capacity"] = value

    @property
    def maximum_ambient_temperature_for_crankcase_heater_operation(self):
        """Get maximum_ambient_temperature_for_crankcase_heater_operation.

        Returns:
            float: the value of `maximum_ambient_temperature_for_crankcase_heater_operation` or None if not set

        """
        return self[
            "Maximum Ambient Temperature for Crankcase Heater Operation"]

    @maximum_ambient_temperature_for_crankcase_heater_operation.setter
    def maximum_ambient_temperature_for_crankcase_heater_operation(
            self,
            value=10.0):
        """  Corresponds to IDD field `Maximum Ambient Temperature for Crankcase Heater Operation`
        The compressor crankcase heater only operates when the dry-bulb temperature of air
        surrounding the compressor is below the Maximum Outdoor Temperature for Crankcase
        Heater Operation and the unit is off. The ambient temperature surrounding the
        compressor is set by the WaterHeater:HeatPump parent object (field Compressor Location).

        Args:
            value (float): value for IDD Field `Maximum Ambient Temperature for Crankcase Heater Operation`
                Units: C
                Default value: 10.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Maximum Ambient Temperature for Crankcase Heater Operation"] = value

    @property
    def evaporator_air_temperature_type_for_curve_objects(self):
        """Get evaporator_air_temperature_type_for_curve_objects.

        Returns:
            str: the value of `evaporator_air_temperature_type_for_curve_objects` or None if not set

        """
        return self["Evaporator Air Temperature Type for Curve Objects"]

    @evaporator_air_temperature_type_for_curve_objects.setter
    def evaporator_air_temperature_type_for_curve_objects(
            self,
            value="WetBulbTemperature"):
        """  Corresponds to IDD field `Evaporator Air Temperature Type for Curve Objects`
        Determines temperature type for heating capacity curves and
        heating COP curves. This input determines whether
        the inlet air dry-bulb or wet-bulb temperature is used to evaluate these curves.

        Args:
            value (str): value for IDD Field `Evaporator Air Temperature Type for Curve Objects`
                Default value: WetBulbTemperature
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Evaporator Air Temperature Type for Curve Objects"] = value

    @property
    def heating_capacity_function_of_temperature_curve_name(self):
        """Get heating_capacity_function_of_temperature_curve_name.

        Returns:
            str: the value of `heating_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self["Heating Capacity Function of Temperature Curve Name"]

    @heating_capacity_function_of_temperature_curve_name.setter
    def heating_capacity_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD field `Heating Capacity Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        Heating capacity modifier curve (function of temperature) should be biquadratic or cubic.
        Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw).
        Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3.
        ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C).
        tw = condenser inlet water temperature (C).
        The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb
        is used as the evaporator inlet air temperature (ta).

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Heating Capacity Function of Temperature Curve Name"] = value

    @property
    def heating_capacity_function_of_air_flow_fraction_curve_name(self):
        """Get heating_capacity_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `heating_capacity_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Heating Capacity Function of Air Flow Fraction Curve Name"]

    @heating_capacity_function_of_air_flow_fraction_curve_name.setter
    def heating_capacity_function_of_air_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Heating Capacity Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating capacity modifier curve (function of air flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated evaporator air flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in air flow rate fraction.

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Heating Capacity Function of Air Flow Fraction Curve Name"] = value

    @property
    def heating_capacity_function_of_water_flow_fraction_curve_name(self):
        """Get heating_capacity_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `heating_capacity_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Heating Capacity Function of Water Flow Fraction Curve Name"]

    @heating_capacity_function_of_water_flow_fraction_curve_name.setter
    def heating_capacity_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Heating Capacity Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating capacity modifier curve (function of water flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated condenser water flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in water flow rate fraction.

        Args:
            value (str): value for IDD Field `Heating Capacity Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Heating Capacity Function of Water Flow Fraction Curve Name"] = value

    @property
    def heating_cop_function_of_temperature_curve_name(self):
        """Get heating_cop_function_of_temperature_curve_name.

        Returns:
            str: the value of `heating_cop_function_of_temperature_curve_name` or None if not set

        """
        return self["Heating COP Function of Temperature Curve Name"]

    @heating_cop_function_of_temperature_curve_name.setter
    def heating_cop_function_of_temperature_curve_name(self, value=None):
        """  Corresponds to IDD field `Heating COP Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        Heating COP modifier curve (function of temperature) should be biquadratic or cubic.
        Biquadratic curve = a + b(ta) + c(ta)^2 + d(tw) + e(tw)^2 + f(ta)(tw).
        Cubic curve = a + b(ta) + c(ta)^2 + d(ta)^3.
        ta = evaporator inlet air [dry-bulb or wet-bulb] temperature (C).
        tw = condenser inlet water temperature (C).
        The field Evaporator Air Temperature Type for Curve Objects determines if dry-bulb or wet-bulb
        is used as the evaporator inlet air temperature (ta).

        Args:
            value (str): value for IDD Field `Heating COP Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Heating COP Function of Temperature Curve Name"] = value

    @property
    def heating_cop_function_of_air_flow_fraction_curve_name(self):
        """Get heating_cop_function_of_air_flow_fraction_curve_name.

        Returns:
            str: the value of `heating_cop_function_of_air_flow_fraction_curve_name` or None if not set

        """
        return self["Heating COP Function of Air Flow Fraction Curve Name"]

    @heating_cop_function_of_air_flow_fraction_curve_name.setter
    def heating_cop_function_of_air_flow_fraction_curve_name(self, value=None):
        """  Corresponds to IDD field `Heating COP Function of Air Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating COP modifier curve (function of air flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated evaporator air flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in air flow rate fraction.

        Args:
            value (str): value for IDD Field `Heating COP Function of Air Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Heating COP Function of Air Flow Fraction Curve Name"] = value

    @property
    def heating_cop_function_of_water_flow_fraction_curve_name(self):
        """Get heating_cop_function_of_water_flow_fraction_curve_name.

        Returns:
            str: the value of `heating_cop_function_of_water_flow_fraction_curve_name` or None if not set

        """
        return self["Heating COP Function of Water Flow Fraction Curve Name"]

    @heating_cop_function_of_water_flow_fraction_curve_name.setter
    def heating_cop_function_of_water_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Heating COP Function of Water Flow Fraction Curve Name`
        Table:OneIndependentVariable object can also be used
        Heating COP modifier curve (function of water flow fraction) should be quadratic or cubic.
        Quadratic curve = a + b(ff) + c(ff)^2.
        Cubic curve = a + b(ff) + c(ff)^2 + d(ff)^3.
        ff = fraction of the rated condenser water flow rate.
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in water flow rate fraction.

        Args:
            value (str): value for IDD Field `Heating COP Function of Water Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Heating COP Function of Water Flow Fraction Curve Name"] = value

    @property
    def part_load_fraction_correlation_curve_name(self):
        """Get part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `part_load_fraction_correlation_curve_name` or None if not set

        """
        return self["Part Load Fraction Correlation Curve Name"]

    @part_load_fraction_correlation_curve_name.setter
    def part_load_fraction_correlation_curve_name(self, value=None):
        """  Corresponds to IDD field `Part Load Fraction Correlation Curve Name`
        Table:OneIndependentVariable object can also be used
        Part Load Fraction Correlation (function of part load ratio) should be quadratic or cubic.
        Quadratic curve = a + b(PLR) + c(PLR)^2.
        Cubic curve = a + b(PLR) + c(PLR)^2 + d(PLR)^3.
        PLR = part load ratio (heating delivered/steady state heating capacity).
        Use curve coefficients of 1,0,0 or leave this field blank when neglecting performance impacts
        due to variations in part load ratio.

        Args:
            value (str): value for IDD Field `Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Part Load Fraction Correlation Curve Name"] = value




class CoilWaterHeatingDesuperheater(DataObject):

    """ Corresponds to IDD object `Coil:WaterHeating:Desuperheater`
        Desuperheater air heating coil. The heating energy provided by this coil is reclaimed
        from the superheated refrigerant gas leaving a compressor and does not impact the
        performance of the compressor. This coil must be used with a water heater tank, see
        Water Heater:Mixed.
    """
    schema = {'min-fields': 18,
              'name': u'Coil:WaterHeating:Desuperheater',
              'pyname': u'CoilWaterHeatingDesuperheater',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'setpoint temperature schedule name',
                                      {'name': u'Setpoint Temperature Schedule Name',
                                       'pyname': u'setpoint_temperature_schedule_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'dead band temperature difference',
                                      {'name': u'Dead Band Temperature Difference',
                                       'pyname': u'dead_band_temperature_difference',
                                       'default': 5.0,
                                       'minimum>': 0.0,
                                       'maximum': 20.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'deltaC'}),
                                     (u'rated heat reclaim recovery efficiency',
                                      {'name': u'Rated Heat Reclaim Recovery Efficiency',
                                       'pyname': u'rated_heat_reclaim_recovery_efficiency',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'rated inlet water temperature',
                                      {'name': u'Rated Inlet Water Temperature',
                                       'pyname': u'rated_inlet_water_temperature',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated outdoor air temperature',
                                      {'name': u'Rated Outdoor Air Temperature',
                                       'pyname': u'rated_outdoor_air_temperature',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'maximum inlet water temperature for heat reclaim',
                                      {'name': u'Maximum Inlet Water Temperature for Heat Reclaim',
                                       'pyname': u'maximum_inlet_water_temperature_for_heat_reclaim',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'heat reclaim efficiency function of temperature curve name',
                                      {'name': u'Heat Reclaim Efficiency Function of Temperature Curve Name',
                                       'pyname': u'heat_reclaim_efficiency_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'water inlet node name',
                                      {'name': u'Water Inlet Node Name',
                                       'pyname': u'water_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'water outlet node name',
                                      {'name': u'Water Outlet Node Name',
                                       'pyname': u'water_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'tank object type',
                                      {'name': u'Tank Object Type',
                                       'pyname': u'tank_object_type',
                                       'default': u'WaterHeater:Mixed',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'WaterHeater:Mixed'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'tank name',
                                      {'name': u'Tank Name',
                                       'pyname': u'tank_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'heating source object type',
                                      {'name': u'Heating Source Object Type',
                                       'pyname': u'heating_source_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Coil:Cooling:DX:SingleSpeed',
                                                           u'Coil:Cooling:DX:TwoSpeed',
                                                           u'Coil:Cooling:DX:TwoStageWithHumidityControlMode',
                                                           u'Refrigeration:CompressorRack',
                                                           u'Refrigeration:Condenser:AirCooled',
                                                           u'Refrigeration:Condenser:EvaporativeCooled',
                                                           u'Refrigeration:Condenser:WaterCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heating source name',
                                      {'name': u'Heating Source Name',
                                       'pyname': u'heating_source_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'water flow rate',
                                      {'name': u'Water Flow Rate',
                                       'pyname': u'water_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'water pump power',
                                      {'name': u'Water Pump Power',
                                       'pyname': u'water_pump_power',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'fraction of pump heat to water',
                                      {'name': u'Fraction of Pump Heat to Water',
                                       'pyname': u'fraction_of_pump_heat_to_water',
                                       'default': 0.2,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'on-cycle parasitic electric load',
                                      {'name': u'On-Cycle Parasitic Electric Load',
                                       'pyname': u'oncycle_parasitic_electric_load',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'off-cycle parasitic electric load',
                                      {'name': u'Off-Cycle Parasitic Electric Load',
                                       'pyname': u'offcycle_parasitic_electric_load',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name` Unique name for this instance of a
        desuperheater water heating coil.

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.
        Schedule values of 0 denote the desuperheater heating coil is off and
        the parasitic electric energy is also off.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def setpoint_temperature_schedule_name(self):
        """Get setpoint_temperature_schedule_name.

        Returns:
            str: the value of `setpoint_temperature_schedule_name` or None if not set

        """
        return self["Setpoint Temperature Schedule Name"]

    @setpoint_temperature_schedule_name.setter
    def setpoint_temperature_schedule_name(self, value=None):
        """  Corresponds to IDD field `Setpoint Temperature Schedule Name`
        Defines the cut-out temperature where the desuperheater water heating coil turns off.
        The desuperheater heating coil setpoint temperature should always be greater
        than the water tank's heater (element or burner) setpoint temperature. Temperature
        schedule values should be in degrees C.

        Args:
            value (str): value for IDD Field `Setpoint Temperature Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Setpoint Temperature Schedule Name"] = value

    @property
    def dead_band_temperature_difference(self):
        """Get dead_band_temperature_difference.

        Returns:
            float: the value of `dead_band_temperature_difference` or None if not set

        """
        return self["Dead Band Temperature Difference"]

    @dead_band_temperature_difference.setter
    def dead_band_temperature_difference(self, value=5.0):
        """  Corresponds to IDD field `Dead Band Temperature Difference`
        Setpoint temperature minus the dead band temperature difference defines
        the cut-in temperature where the desuperheater water heating coil turns on.
        The water tank's heater (element or burner) setpoint temperature
        should always be less than the desuperheater heating coil cut-in temperature.

        Args:
            value (float): value for IDD Field `Dead Band Temperature Difference`
                Units: deltaC
                Default value: 5.0
                value <= 20.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Dead Band Temperature Difference"] = value

    @property
    def rated_heat_reclaim_recovery_efficiency(self):
        """Get rated_heat_reclaim_recovery_efficiency.

        Returns:
            float: the value of `rated_heat_reclaim_recovery_efficiency` or None if not set

        """
        return self["Rated Heat Reclaim Recovery Efficiency"]

    @rated_heat_reclaim_recovery_efficiency.setter
    def rated_heat_reclaim_recovery_efficiency(self, value=None):
        """Corresponds to IDD field `Rated Heat Reclaim Recovery Efficiency`
        Enter the fraction of waste heat reclaimed by the desuperheater water
        heating coil.

        Args:
            value (float): value for IDD Field `Rated Heat Reclaim Recovery Efficiency`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Heat Reclaim Recovery Efficiency"] = value

    @property
    def rated_inlet_water_temperature(self):
        """Get rated_inlet_water_temperature.

        Returns:
            float: the value of `rated_inlet_water_temperature` or None if not set

        """
        return self["Rated Inlet Water Temperature"]

    @rated_inlet_water_temperature.setter
    def rated_inlet_water_temperature(self, value=None):
        """Corresponds to IDD field `Rated Inlet Water Temperature` The inlet
        water temperature corresponding to the rated heat reclaim recovery
        efficiency.

        Args:
            value (float): value for IDD Field `Rated Inlet Water Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Inlet Water Temperature"] = value

    @property
    def rated_outdoor_air_temperature(self):
        """Get rated_outdoor_air_temperature.

        Returns:
            float: the value of `rated_outdoor_air_temperature` or None if not set

        """
        return self["Rated Outdoor Air Temperature"]

    @rated_outdoor_air_temperature.setter
    def rated_outdoor_air_temperature(self, value=None):
        """  Corresponds to IDD field `Rated Outdoor Air Temperature`
        The outdoor air dry-bulb temperature corresponding to the
        rated heat reclaim recovery efficiency.

        Args:
            value (float): value for IDD Field `Rated Outdoor Air Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Rated Outdoor Air Temperature"] = value

    @property
    def maximum_inlet_water_temperature_for_heat_reclaim(self):
        """Get maximum_inlet_water_temperature_for_heat_reclaim.

        Returns:
            float: the value of `maximum_inlet_water_temperature_for_heat_reclaim` or None if not set

        """
        return self["Maximum Inlet Water Temperature for Heat Reclaim"]

    @maximum_inlet_water_temperature_for_heat_reclaim.setter
    def maximum_inlet_water_temperature_for_heat_reclaim(self, value=None):
        """Corresponds to IDD field `Maximum Inlet Water Temperature for Heat
        Reclaim` The desuperheater water heating coil is off when the inlet
        water temperature is above the maximum inlet water temperature for heat
        reclaim.

        Args:
            value (float): value for IDD Field `Maximum Inlet Water Temperature for Heat Reclaim`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Maximum Inlet Water Temperature for Heat Reclaim"] = value

    @property
    def heat_reclaim_efficiency_function_of_temperature_curve_name(self):
        """Get heat_reclaim_efficiency_function_of_temperature_curve_name.

        Returns:
            str: the value of `heat_reclaim_efficiency_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Heat Reclaim Efficiency Function of Temperature Curve Name"]

    @heat_reclaim_efficiency_function_of_temperature_curve_name.setter
    def heat_reclaim_efficiency_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Heat Reclaim Efficiency Function of Temperature Curve Name`
        Table:TwoIndependentVariables object can also be used
        A biquadratic curve defining the performance of the desuperheater heating coil.
        Performance can be specified as a function of inlet water temperature, outdoor air
        dry-bulb temperature, or both.
        Curve = a + b*Tw + c*Tw**2 + d*odb + e*odb**2 + f*Tw*odb.
        Tw = desuperheater heating coil entering water temperature (C).
        Odb = outdoor dry-bulb temperature at DX system condenser (C).

        Args:
            value (str): value for IDD Field `Heat Reclaim Efficiency Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Heat Reclaim Efficiency Function of Temperature Curve Name"] = value

    @property
    def water_inlet_node_name(self):
        """Get water_inlet_node_name.

        Returns:
            str: the value of `water_inlet_node_name` or None if not set

        """
        return self["Water Inlet Node Name"]

    @water_inlet_node_name.setter
    def water_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Inlet Node Name` The node from which
        the desuperheater heating coil draws its inlet water. This name should
        match the source side outlet node name in the associated water heater
        tank object.

        Args:
            value (str): value for IDD Field `Water Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Inlet Node Name"] = value

    @property
    def water_outlet_node_name(self):
        """Get water_outlet_node_name.

        Returns:
            str: the value of `water_outlet_node_name` or None if not set

        """
        return self["Water Outlet Node Name"]

    @water_outlet_node_name.setter
    def water_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Water Outlet Node Name` The node to which
        the desuperheater heating coil sends its outlet water. This name should
        match the source side inlet node name in the associated water heater
        tank object.

        Args:
            value (str): value for IDD Field `Water Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Outlet Node Name"] = value

    @property
    def tank_object_type(self):
        """Get tank_object_type.

        Returns:
            str: the value of `tank_object_type` or None if not set

        """
        return self["Tank Object Type"]

    @tank_object_type.setter
    def tank_object_type(self, value="WaterHeater:Mixed"):
        """Corresponds to IDD field `Tank Object Type` Specify the type of
        water heater tank used by this desuperheater water heating coil.

        Args:
            value (str): value for IDD Field `Tank Object Type`
                Default value: WaterHeater:Mixed
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Tank Object Type"] = value

    @property
    def tank_name(self):
        """Get tank_name.

        Returns:
            str: the value of `tank_name` or None if not set

        """
        return self["Tank Name"]

    @tank_name.setter
    def tank_name(self, value=None):
        """Corresponds to IDD field `Tank Name` The name of the water heater
        tank used by this desuperheater water heating coil. Needs to match the
        name used in the corresponding water heater object.

        Args:
            value (str): value for IDD Field `Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Tank Name"] = value

    @property
    def heating_source_object_type(self):
        """Get heating_source_object_type.

        Returns:
            str: the value of `heating_source_object_type` or None if not set

        """
        return self["Heating Source Object Type"]

    @heating_source_object_type.setter
    def heating_source_object_type(self, value=None):
        """Corresponds to IDD field `Heating Source Object Type` The type of DX
        system that is providing waste heat for reclaim.

        Args:
            value (str): value for IDD Field `Heating Source Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Source Object Type"] = value

    @property
    def heating_source_name(self):
        """Get heating_source_name.

        Returns:
            str: the value of `heating_source_name` or None if not set

        """
        return self["Heating Source Name"]

    @heating_source_name.setter
    def heating_source_name(self, value=None):
        """Corresponds to IDD field `Heating Source Name` The name of the DX
        system used for heat reclaim.

        Args:
            value (str): value for IDD Field `Heating Source Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Source Name"] = value

    @property
    def water_flow_rate(self):
        """Get water_flow_rate.

        Returns:
            float: the value of `water_flow_rate` or None if not set

        """
        return self["Water Flow Rate"]

    @water_flow_rate.setter
    def water_flow_rate(self, value=None):
        """Corresponds to IDD field `Water Flow Rate` The operating water flow
        rate.

        Args:
            value (float): value for IDD Field `Water Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Flow Rate"] = value

    @property
    def water_pump_power(self):
        """Get water_pump_power.

        Returns:
            float: the value of `water_pump_power` or None if not set

        """
        return self["Water Pump Power"]

    @water_pump_power.setter
    def water_pump_power(self, value=None):
        """Corresponds to IDD field `Water Pump Power` The water circulation
        pump electric power.

        Args:
            value (float): value for IDD Field `Water Pump Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Water Pump Power"] = value

    @property
    def fraction_of_pump_heat_to_water(self):
        """Get fraction_of_pump_heat_to_water.

        Returns:
            float: the value of `fraction_of_pump_heat_to_water` or None if not set

        """
        return self["Fraction of Pump Heat to Water"]

    @fraction_of_pump_heat_to_water.setter
    def fraction_of_pump_heat_to_water(self, value=0.2):
        """Corresponds to IDD field `Fraction of Pump Heat to Water` The
        fraction of pump heat transferred to the water. The pump is assumed to
        be downstream of the desuperheater water heating coil.

        Args:
            value (float): value for IDD Field `Fraction of Pump Heat to Water`
                Default value: 0.2
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fraction of Pump Heat to Water"] = value

    @property
    def oncycle_parasitic_electric_load(self):
        """Get oncycle_parasitic_electric_load.

        Returns:
            float: the value of `oncycle_parasitic_electric_load` or None if not set

        """
        return self["On-Cycle Parasitic Electric Load"]

    @oncycle_parasitic_electric_load.setter
    def oncycle_parasitic_electric_load(self, value=None):
        """  Corresponds to IDD field `On-Cycle Parasitic Electric Load`
        Parasitic electric power consumed when the desuperheater water heating coil operates.
        Parasitic electric load does not contribute to water heating or the zone air heat balance.

        Args:
            value (float): value for IDD Field `On-Cycle Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["On-Cycle Parasitic Electric Load"] = value

    @property
    def offcycle_parasitic_electric_load(self):
        """Get offcycle_parasitic_electric_load.

        Returns:
            float: the value of `offcycle_parasitic_electric_load` or None if not set

        """
        return self["Off-Cycle Parasitic Electric Load"]

    @offcycle_parasitic_electric_load.setter
    def offcycle_parasitic_electric_load(self, value=None):
        """  Corresponds to IDD field `Off-Cycle Parasitic Electric Load`
        Parasitic electric load consumed when the desuperheater water heating coil is off.
        Parasitic electric load does not contribute to water heating or the zone air heat balance.
        Off-cycle parasitic power is 0 when the availability schedule is 0.

        Args:
            value (float): value for IDD Field `Off-Cycle Parasitic Electric Load`
                Units: W
                IP-Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Off-Cycle Parasitic Electric Load"] = value




class CoilSystemCoolingDx(DataObject):

    """ Corresponds to IDD object `CoilSystem:Cooling:DX`
        Virtual container component that consists of a DX cooling coil and its associated
        controls. This control object supports several different types of DX cooling coils
        and may be placed directly in an air loop branch or outdoor air equipment list.
    """
    schema = {'min-fields': 7,
              'name': u'CoilSystem:Cooling:DX',
              'pyname': u'CoilSystemCoolingDx',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'dx cooling coil system inlet node name',
                                      {'name': u'DX Cooling Coil System Inlet Node Name',
                                       'pyname': u'dx_cooling_coil_system_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'dx cooling coil system outlet node name',
                                      {'name': u'DX Cooling Coil System Outlet Node Name',
                                       'pyname': u'dx_cooling_coil_system_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'dx cooling coil system sensor node name',
                                      {'name': u'DX Cooling Coil System Sensor Node Name',
                                       'pyname': u'dx_cooling_coil_system_sensor_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'cooling coil object type',
                                      {'name': u'Cooling Coil Object Type',
                                       'pyname': u'cooling_coil_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Coil:Cooling:DX:SingleSpeed',
                                                           u'CoilSystem:Cooling:DX:HeatExchangerAssisted',
                                                           u'Coil:Cooling:DX:TwoSpeed',
                                                           u'Coil:Cooling:DX:TwoStageWithHumidityControlMode',
                                                           u'Coil:Cooling:DX:VariableSpeed',
                                                           u'Coil:Cooling:DX:SingleSpeed:ThermalStorage'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'cooling coil name',
                                      {'name': u'Cooling Coil Name',
                                       'pyname': u'cooling_coil_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'dehumidification control type',
                                      {'name': u'Dehumidification Control Type',
                                       'pyname': u'dehumidification_control_type',
                                       'default': u'None',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'None',
                                                           u'Multimode',
                                                           u'CoolReheat'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'run on sensible load',
                                      {'name': u'Run on Sensible Load',
                                       'pyname': u'run_on_sensible_load',
                                       'default': u'Yes',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'run on latent load',
                                      {'name': u'Run on Latent Load',
                                       'pyname': u'run_on_latent_load',
                                       'default': u'No',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'use outdoor air dx cooling coil',
                                      {'name': u'Use Outdoor Air DX Cooling Coil',
                                       'pyname': u'use_outdoor_air_dx_cooling_coil',
                                       'default': u'No',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'outdoor air dx cooling coil leaving minimum air temperature',
                                      {'name': u'Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature',
                                       'pyname': u'outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature',
                                       'default': 2.0,
                                       'maximum': 7.2,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def dx_cooling_coil_system_inlet_node_name(self):
        """Get dx_cooling_coil_system_inlet_node_name.

        Returns:
            str: the value of `dx_cooling_coil_system_inlet_node_name` or None if not set

        """
        return self["DX Cooling Coil System Inlet Node Name"]

    @dx_cooling_coil_system_inlet_node_name.setter
    def dx_cooling_coil_system_inlet_node_name(self, value=None):
        """Corresponds to IDD field `DX Cooling Coil System Inlet Node Name`

        Args:
            value (str): value for IDD Field `DX Cooling Coil System Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["DX Cooling Coil System Inlet Node Name"] = value

    @property
    def dx_cooling_coil_system_outlet_node_name(self):
        """Get dx_cooling_coil_system_outlet_node_name.

        Returns:
            str: the value of `dx_cooling_coil_system_outlet_node_name` or None if not set

        """
        return self["DX Cooling Coil System Outlet Node Name"]

    @dx_cooling_coil_system_outlet_node_name.setter
    def dx_cooling_coil_system_outlet_node_name(self, value=None):
        """Corresponds to IDD field `DX Cooling Coil System Outlet Node Name`

        Args:
            value (str): value for IDD Field `DX Cooling Coil System Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["DX Cooling Coil System Outlet Node Name"] = value

    @property
    def dx_cooling_coil_system_sensor_node_name(self):
        """Get dx_cooling_coil_system_sensor_node_name.

        Returns:
            str: the value of `dx_cooling_coil_system_sensor_node_name` or None if not set

        """
        return self["DX Cooling Coil System Sensor Node Name"]

    @dx_cooling_coil_system_sensor_node_name.setter
    def dx_cooling_coil_system_sensor_node_name(self, value=None):
        """Corresponds to IDD field `DX Cooling Coil System Sensor Node Name`

        Args:
            value (str): value for IDD Field `DX Cooling Coil System Sensor Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["DX Cooling Coil System Sensor Node Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type.

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set

        """
        return self["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """Corresponds to IDD field `Cooling Coil Object Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name.

        Returns:
            str: the value of `cooling_coil_name` or None if not set

        """
        return self["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Name`

        Args:
            value (str): value for IDD Field `Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Coil Name"] = value

    @property
    def dehumidification_control_type(self):
        """Get dehumidification_control_type.

        Returns:
            str: the value of `dehumidification_control_type` or None if not set

        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """  Corresponds to IDD field `Dehumidification Control Type`
        None = meet sensible load only
        Multimode = activate enhanced dehumidification mode
        as needed and meet sensible load. If no sensible load
        exists, and Run on Latent Load = Yes, and a latent
        load exists, the unit will operate to meet the latent load.
        Valid only with Coil:Cooling:DX:TwoStageWithHumidityControlMode
        or CoilSystem:Cooling:DX:HeatExchangerAssisted.
        CoolReheat = cool beyond the dry bulb setpoint.
        as required to meet the humidity setpoint.
        Valid for all coil types.
        For all dehumidification controls, the max
        humidity setpoint on the Sensor Node is used.
        SetpointManager:SingleZone:Humidity:Maximum,
        SetpointManager:MultiZone:Humidity:Maximum, or
        SetpointManager:MultiZone:MaximumHumidity:Average, and
        SetpointManager:OutdoorAirPretreat (optional) objects.

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Dehumidification Control Type"] = value

    @property
    def run_on_sensible_load(self):
        """Get run_on_sensible_load.

        Returns:
            str: the value of `run_on_sensible_load` or None if not set

        """
        return self["Run on Sensible Load"]

    @run_on_sensible_load.setter
    def run_on_sensible_load(self, value="Yes"):
        """Corresponds to IDD field `Run on Sensible Load` If Yes, unit will
        run if there is a sensible load. If No, unit will not run if there is
        only a sensible load. Dehumidification controls will be active if
        specified.

        Args:
            value (str): value for IDD Field `Run on Sensible Load`
                Default value: Yes
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Run on Sensible Load"] = value

    @property
    def run_on_latent_load(self):
        """Get run_on_latent_load.

        Returns:
            str: the value of `run_on_latent_load` or None if not set

        """
        return self["Run on Latent Load"]

    @run_on_latent_load.setter
    def run_on_latent_load(self, value="No"):
        """Corresponds to IDD field `Run on Latent Load` If Yes, unit will run
        if there is a latent load. even if there is no sensible load. If No,
        unit will not run only if there is a latent load. Dehumidification
        controls will be active if specified.

        Args:
            value (str): value for IDD Field `Run on Latent Load`
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Run on Latent Load"] = value

    @property
    def use_outdoor_air_dx_cooling_coil(self):
        """Get use_outdoor_air_dx_cooling_coil.

        Returns:
            str: the value of `use_outdoor_air_dx_cooling_coil` or None if not set

        """
        return self["Use Outdoor Air DX Cooling Coil"]

    @use_outdoor_air_dx_cooling_coil.setter
    def use_outdoor_air_dx_cooling_coil(self, value="No"):
        """Corresponds to IDD field `Use Outdoor Air DX Cooling Coil` This
        input field is designed for use with DX cooling coils with low air
        flow.

        to capacity ratio range (100 - 300 cfm/ton). Typical application is 100% dedicated
        outdoor air system (DOAS). Other air loop or zone HVAC systems with low flow
        to capacity ratio range may also use this input field.  If Yes, the DX cooling
        coil runs as 100% DOAS DX coil or low flow to capacity ratio range.
        If No, the DX cooling coil runs as a regular DX coil. If left blank the
        default is regular DX coil.

        Args:
            value (str): value for IDD Field `Use Outdoor Air DX Cooling Coil`
                Default value: No
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Use Outdoor Air DX Cooling Coil"] = value

    @property
    def outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature(self):
        """Get outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature.

        Returns:
            float: the value of `outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature` or None if not set

        """
        return self[
            "Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature"]

    @outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature.setter
    def outdoor_air_dx_cooling_coil_leaving_minimum_air_temperature(
            self,
            value=2.0):
        """Corresponds to IDD field `Outdoor Air DX Cooling Coil Leaving
        Minimum Air Temperature` DX cooling coil leaving minimum air
        temperature defines the minimum DX cooling coil leaving air temperature
        that should be maintained to avoid frost formation. This input field is
        optional and only used along with the input field above.

        Args:
            value (float): value for IDD Field `Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature`
                Units: C
                Default value: 2.0
                value <= 7.2
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Outdoor Air DX Cooling Coil Leaving Minimum Air Temperature"] = value




class CoilSystemHeatingDx(DataObject):

    """ Corresponds to IDD object `CoilSystem:Heating:DX`
        Virtual container component that consists of a DX heating coil (heat pump) and its
        associated controls. This control object supports two different types of DX heating
        coils and may be placed directly in an air loop branch or outdoor air equipment list.
    """
    schema = {'min-fields': 4,
              'name': u'CoilSystem:Heating:DX',
              'pyname': u'CoilSystemHeatingDx',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'heating coil object type',
                                      {'name': u'Heating Coil Object Type',
                                       'pyname': u'heating_coil_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Coil:Heating:DX:SingleSpeed',
                                                           u'Coil:Heating:DX:VariableSpeed'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heating coil name',
                                      {'name': u'Heating Coil Name',
                                       'pyname': u'heating_coil_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def heating_coil_object_type(self):
        """Get heating_coil_object_type.

        Returns:
            str: the value of `heating_coil_object_type` or None if not set

        """
        return self["Heating Coil Object Type"]

    @heating_coil_object_type.setter
    def heating_coil_object_type(self, value=None):
        """Corresponds to IDD field `Heating Coil Object Type`

        Args:
            value (str): value for IDD Field `Heating Coil Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Coil Object Type"] = value

    @property
    def heating_coil_name(self):
        """Get heating_coil_name.

        Returns:
            str: the value of `heating_coil_name` or None if not set

        """
        return self["Heating Coil Name"]

    @heating_coil_name.setter
    def heating_coil_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Name`

        Args:
            value (str): value for IDD Field `Heating Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heating Coil Name"] = value




class CoilSystemCoolingWaterHeatExchangerAssisted(DataObject):

    """ Corresponds to IDD object `CoilSystem:Cooling:Water:HeatExchangerAssisted`
        Virtual component consisting of a chilled-water cooling coil and an air-to-air heat
        exchanger. The air-to-air heat exchanger precools the air entering the cooling coil
        and reuses this energy to reheat the supply air leaving the cooling coil. This heat
        exchange process improves the latent removal performance of the cooling coil (lower
        sensible heat ratio).
    """
    schema = {'min-fields': 5,
              'name': u'CoilSystem:Cooling:Water:HeatExchangerAssisted',
              'pyname': u'CoilSystemCoolingWaterHeatExchangerAssisted',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heat exchanger object type',
                                      {'name': u'Heat Exchanger Object Type',
                                       'pyname': u'heat_exchanger_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'HeatExchanger:AirToAir:FlatPlate',
                                                           u'HeatExchanger:AirToAir:SensibleAndLatent'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heat exchanger name',
                                      {'name': u'Heat Exchanger Name',
                                       'pyname': u'heat_exchanger_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'cooling coil object type',
                                      {'name': u'Cooling Coil Object Type',
                                       'pyname': u'cooling_coil_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Coil:Cooling:Water',
                                                           u'Coil:Cooling:Water:DetailedGeometry'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'cooling coil name',
                                      {'name': u'Cooling Coil Name',
                                       'pyname': u'cooling_coil_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def heat_exchanger_object_type(self):
        """Get heat_exchanger_object_type.

        Returns:
            str: the value of `heat_exchanger_object_type` or None if not set

        """
        return self["Heat Exchanger Object Type"]

    @heat_exchanger_object_type.setter
    def heat_exchanger_object_type(self, value=None):
        """Corresponds to IDD field `Heat Exchanger Object Type`

        Args:
            value (str): value for IDD Field `Heat Exchanger Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heat Exchanger Object Type"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name.

        Returns:
            str: the value of `heat_exchanger_name` or None if not set

        """
        return self["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """Corresponds to IDD field `Heat Exchanger Name`

        Args:
            value (str): value for IDD Field `Heat Exchanger Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heat Exchanger Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type.

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set

        """
        return self["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """Corresponds to IDD field `Cooling Coil Object Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name.

        Returns:
            str: the value of `cooling_coil_name` or None if not set

        """
        return self["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Name`

        Args:
            value (str): value for IDD Field `Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Coil Name"] = value




class CoilSystemCoolingDxHeatExchangerAssisted(DataObject):

    """ Corresponds to IDD object `CoilSystem:Cooling:DX:HeatExchangerAssisted`
        Virtual component consisting of a direct expansion (DX) cooling coil and an
        air-to-air heat exchanger. The air-to-air heat exchanger precools the air entering the
        cooling coil and reuses this energy to reheat the supply air leaving the cooling
        coil. This heat exchange process improves the latent removal performance of the
        cooling coil (lower sensible heat ratio).
    """
    schema = {'min-fields': 5,
              'name': u'CoilSystem:Cooling:DX:HeatExchangerAssisted',
              'pyname': u'CoilSystemCoolingDxHeatExchangerAssisted',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heat exchanger object type',
                                      {'name': u'Heat Exchanger Object Type',
                                       'pyname': u'heat_exchanger_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'HeatExchanger:AirToAir:FlatPlate',
                                                           u'HeatExchanger:AirToAir:SensibleAndLatent',
                                                           u'HeatExchanger:Desiccant:BalancedFlow'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'heat exchanger name',
                                      {'name': u'Heat Exchanger Name',
                                       'pyname': u'heat_exchanger_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling coil object type',
                                      {'name': u'Cooling Coil Object Type',
                                       'pyname': u'cooling_coil_object_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Coil:Cooling:DX:SingleSpeed'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'cooling coil name',
                                      {'name': u'Cooling Coil Name',
                                       'pyname': u'cooling_coil_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def heat_exchanger_object_type(self):
        """Get heat_exchanger_object_type.

        Returns:
            str: the value of `heat_exchanger_object_type` or None if not set

        """
        return self["Heat Exchanger Object Type"]

    @heat_exchanger_object_type.setter
    def heat_exchanger_object_type(self, value=None):
        """Corresponds to IDD field `Heat Exchanger Object Type`

        Args:
            value (str): value for IDD Field `Heat Exchanger Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heat Exchanger Object Type"] = value

    @property
    def heat_exchanger_name(self):
        """Get heat_exchanger_name.

        Returns:
            str: the value of `heat_exchanger_name` or None if not set

        """
        return self["Heat Exchanger Name"]

    @heat_exchanger_name.setter
    def heat_exchanger_name(self, value=None):
        """Corresponds to IDD field `Heat Exchanger Name`

        Args:
            value (str): value for IDD Field `Heat Exchanger Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Heat Exchanger Name"] = value

    @property
    def cooling_coil_object_type(self):
        """Get cooling_coil_object_type.

        Returns:
            str: the value of `cooling_coil_object_type` or None if not set

        """
        return self["Cooling Coil Object Type"]

    @cooling_coil_object_type.setter
    def cooling_coil_object_type(self, value=None):
        """Corresponds to IDD field `Cooling Coil Object Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Object Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Coil Object Type"] = value

    @property
    def cooling_coil_name(self):
        """Get cooling_coil_name.

        Returns:
            str: the value of `cooling_coil_name` or None if not set

        """
        return self["Cooling Coil Name"]

    @cooling_coil_name.setter
    def cooling_coil_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Name`

        Args:
            value (str): value for IDD Field `Cooling Coil Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Coil Name"] = value




class CoilCoolingDxSingleSpeedThermalStorage(DataObject):

    """ Corresponds to IDD object `Coil:Cooling:DX:SingleSpeed:ThermalStorage`
        Direct expansion (DX) cooling coil and condensing unit (includes electric compressor
        and condenser fan), single-speed with packaged integrated thermal storage for cooling.

    """
    schema = {'min-fields': 89,
              'name': u'Coil:Cooling:DX:SingleSpeed:ThermalStorage',
              'pyname': u'CoilCoolingDxSingleSpeedThermalStorage',
              'format': None,
              'fields': OrderedDict([(u'name',
                                      {'name': u'Name',
                                       'pyname': u'name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'alpha'}),
                                     (u'availability schedule name',
                                      {'name': u'Availability Schedule Name',
                                       'pyname': u'availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'operating mode control method',
                                      {'name': u'Operating Mode Control Method',
                                       'pyname': u'operating_mode_control_method',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'ScheduledModes',
                                                           u'EMSControlled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'operation mode control schedule name',
                                      {'name': u'Operation Mode Control Schedule Name',
                                       'pyname': u'operation_mode_control_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'storage type',
                                      {'name': u'Storage Type',
                                       'pyname': u'storage_type',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Water',
                                                           u'UserDefinedFluidType',
                                                           u'Ice'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'user defined fluid type',
                                      {'name': u'User Defined Fluid Type',
                                       'pyname': u'user_defined_fluid_type',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'fluid storage volume',
                                      {'name': u'Fluid Storage Volume',
                                       'pyname': u'fluid_storage_volume',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'm3'}),
                                     (u'ice storage capacity',
                                      {'name': u'Ice Storage Capacity',
                                       'pyname': u'ice_storage_capacity',
                                       'minimum>': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'GJ'}),
                                     (u'storage capacity sizing factor',
                                      {'name': u'Storage Capacity Sizing Factor',
                                       'pyname': u'storage_capacity_sizing_factor',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'hr'}),
                                     (u'storage tank ambient temperature node name',
                                      {'name': u'Storage Tank Ambient Temperature Node Name',
                                       'pyname': u'storage_tank_ambient_temperature_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'storage tank to ambient u-value times area heat transfer coefficient',
                                      {'name': u'Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient',
                                       'pyname': u'storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'fluid storage tank rating temperature',
                                      {'name': u'Fluid Storage Tank Rating Temperature',
                                       'pyname': u'fluid_storage_tank_rating_temperature',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'rated evaporator air flow rate',
                                      {'name': u'Rated Evaporator Air Flow Rate',
                                       'pyname': u'rated_evaporator_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': True,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'evaporator air inlet node name',
                                      {'name': u'Evaporator Air Inlet Node Name',
                                       'pyname': u'evaporator_air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'evaporator air outlet node name',
                                      {'name': u'Evaporator Air Outlet Node Name',
                                       'pyname': u'evaporator_air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'cooling only mode available',
                                      {'name': u'Cooling Only Mode Available',
                                       'pyname': u'cooling_only_mode_available',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'cooling only mode rated total evaporator cooling capacity',
                                      {'name': u'Cooling Only Mode Rated Total Evaporator Cooling Capacity',
                                       'pyname': u'cooling_only_mode_rated_total_evaporator_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'cooling only mode rated sensible heat ratio',
                                      {'name': u'Cooling Only Mode Rated Sensible Heat Ratio',
                                       'pyname': u'cooling_only_mode_rated_sensible_heat_ratio',
                                       'default': 0.7,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling only mode rated cop',
                                      {'name': u'Cooling Only Mode Rated COP',
                                       'pyname': u'cooling_only_mode_rated_cop',
                                       'default': 3.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'cooling only mode total evaporator cooling capacity function of temperature curve name',
                                      {'name': u'Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling only mode total evaporator cooling capacity function of flow fraction curve name',
                                      {'name': u'Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling only mode energy input ratio function of temperature curve name',
                                      {'name': u'Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling only mode energy input ratio function of flow fraction curve name',
                                      {'name': u'Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling only mode part load fraction correlation curve name',
                                      {'name': u'Cooling Only Mode Part Load Fraction Correlation Curve Name',
                                       'pyname': u'cooling_only_mode_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling only mode sensible heat ratio function of temperature curve name',
                                      {'name': u'Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling only mode sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode available',
                                      {'name': u'Cooling And Charge Mode Available',
                                       'pyname': u'cooling_and_charge_mode_available',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'cooling and charge mode rated total evaporator cooling capacity',
                                      {'name': u'Cooling And Charge Mode Rated Total Evaporator Cooling Capacity',
                                       'pyname': u'cooling_and_charge_mode_rated_total_evaporator_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'cooling and charge mode capacity sizing factor',
                                      {'name': u'Cooling And Charge Mode Capacity Sizing Factor',
                                       'pyname': u'cooling_and_charge_mode_capacity_sizing_factor',
                                       'default': 0.5,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling and charge mode rated storage charging capacity',
                                      {'name': u'Cooling And Charge Mode Rated Storage Charging Capacity',
                                       'pyname': u'cooling_and_charge_mode_rated_storage_charging_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'cooling and charge mode storage capacity sizing factor',
                                      {'name': u'Cooling And Charge Mode Storage Capacity Sizing Factor',
                                       'pyname': u'cooling_and_charge_mode_storage_capacity_sizing_factor',
                                       'default': 0.5,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling and charge mode rated sensible heat ratio',
                                      {'name': u'Cooling And Charge Mode Rated Sensible Heat Ratio',
                                       'pyname': u'cooling_and_charge_mode_rated_sensible_heat_ratio',
                                       'default': 0.7,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling and charge mode cooling rated cop',
                                      {'name': u'Cooling And Charge Mode Cooling Rated COP',
                                       'pyname': u'cooling_and_charge_mode_cooling_rated_cop',
                                       'default': 3.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'cooling and charge mode charging rated cop',
                                      {'name': u'Cooling And Charge Mode Charging Rated COP',
                                       'pyname': u'cooling_and_charge_mode_charging_rated_cop',
                                       'default': 3.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'cooling and charge mode total evaporator cooling capacity function of temperature curve name',
                                      {'name': u'Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode total evaporator cooling capacity function of flow fraction curve name',
                                      {'name': u'Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode evaporator energy input ratio function of temperature curve name',
                                      {'name': u'Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode evaporator energy input ratio function of flow fraction curve name',
                                      {'name': u'Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode evaporator part load fraction correlation curve name',
                                      {'name': u'Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name',
                                       'pyname': u'cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode storage charge capacity function of temperature curve name',
                                      {'name': u'Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode storage charge capacity function of total evaporator plr curve name',
                                      {'name': u'Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name',
                                       'pyname': u'cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode storage energy input ratio function of temperature curve name',
                                      {'name': u'Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode storage energy input ratio function of flow fraction curve name',
                                      {'name': u'Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode storage energy part load fraction correlation curve name',
                                      {'name': u'Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name',
                                       'pyname': u'cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode sensible heat ratio function of temperature curve name',
                                      {'name': u'Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and charge mode sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode available',
                                      {'name': u'Cooling And Discharge Mode Available',
                                       'pyname': u'cooling_and_discharge_mode_available',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'cooling and discharge mode rated total evaporator cooling capacity',
                                      {'name': u'Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity',
                                       'pyname': u'cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'cooling and discharge mode evaporator capacity sizing factor',
                                      {'name': u'Cooling And Discharge Mode Evaporator Capacity Sizing Factor',
                                       'pyname': u'cooling_and_discharge_mode_evaporator_capacity_sizing_factor',
                                       'default': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling and discharge mode rated storage discharging capacity',
                                      {'name': u'Cooling And Discharge Mode Rated Storage Discharging Capacity',
                                       'pyname': u'cooling_and_discharge_mode_rated_storage_discharging_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'cooling and discharge mode storage discharge capacity sizing factor',
                                      {'name': u'Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor',
                                       'pyname': u'cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor',
                                       'default': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling and discharge mode rated sensible heat ratio',
                                      {'name': u'Cooling And Discharge Mode Rated Sensible Heat Ratio',
                                       'pyname': u'cooling_and_discharge_mode_rated_sensible_heat_ratio',
                                       'default': 0.7,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'cooling and discharge mode cooling rated cop',
                                      {'name': u'Cooling And Discharge Mode Cooling Rated COP',
                                       'pyname': u'cooling_and_discharge_mode_cooling_rated_cop',
                                       'default': 3.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'cooling and discharge mode discharging rated cop',
                                      {'name': u'Cooling And Discharge Mode Discharging Rated COP',
                                       'pyname': u'cooling_and_discharge_mode_discharging_rated_cop',
                                       'default': 3.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'cooling and discharge mode total evaporator cooling capacity function of temperature curve name',
                                      {'name': u'Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode total evaporator cooling capacity function of flow fraction curve name',
                                      {'name': u'Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode evaporator energy input ratio function of temperature curve name',
                                      {'name': u'Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode evaporator energy input ratio function of flow fraction curve name',
                                      {'name': u'Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode evaporator part load fraction correlation curve name',
                                      {'name': u'Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode storage disharge capacity function of temperature curve name',
                                      {'name': u'Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode storage disharge capacity function of flow fraction curve name',
                                      {'name': u'Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode storage discharge capacity function of total evaporator plr curve name',
                                      {'name': u'Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode storage energy input ratio function of temperature curve name',
                                      {'name': u'Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode storage energy input ratio function of flow fraction curve name',
                                      {'name': u'Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode storage energy part load fraction correlation curve name',
                                      {'name': u'Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode sensible heat ratio function of temperature curve name',
                                      {'name': u'Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'cooling and discharge mode sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'charge only mode available',
                                      {'name': u'Charge Only Mode Available',
                                       'pyname': u'charge_only_mode_available',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'charge only mode rated storage charging capacity',
                                      {'name': u'Charge Only Mode Rated Storage Charging Capacity',
                                       'pyname': u'charge_only_mode_rated_storage_charging_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'charge only mode capacity sizing factor',
                                      {'name': u'Charge Only Mode Capacity Sizing Factor',
                                       'pyname': u'charge_only_mode_capacity_sizing_factor',
                                       'default': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'charge only mode charging rated cop',
                                      {'name': u'Charge Only Mode Charging Rated COP',
                                       'pyname': u'charge_only_mode_charging_rated_cop',
                                       'default': 3.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'charge only mode storage charge capacity function of temperature curve name',
                                      {'name': u'Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name',
                                       'pyname': u'charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'charge only mode storage energy input ratio function of temperature curve name',
                                      {'name': u'Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'discharge only mode available',
                                      {'name': u'Discharge Only Mode Available',
                                       'pyname': u'discharge_only_mode_available',
                                       'required-field': True,
                                       'autosizable': False,
                                       'accepted-values': [u'Yes',
                                                           u'No'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'discharge only mode rated storage discharging capacity',
                                      {'name': u'Discharge Only Mode Rated Storage Discharging Capacity',
                                       'pyname': u'discharge_only_mode_rated_storage_discharging_capacity',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'discharge only mode capacity sizing factor',
                                      {'name': u'Discharge Only Mode Capacity Sizing Factor',
                                       'pyname': u'discharge_only_mode_capacity_sizing_factor',
                                       'default': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'discharge only mode rated sensible heat ratio',
                                      {'name': u'Discharge Only Mode Rated Sensible Heat Ratio',
                                       'pyname': u'discharge_only_mode_rated_sensible_heat_ratio',
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'discharge only mode rated cop',
                                      {'name': u'Discharge Only Mode Rated COP',
                                       'pyname': u'discharge_only_mode_rated_cop',
                                       'default': 3.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/W'}),
                                     (u'discharge only mode storage discharge capacity function of temperature curve name',
                                      {'name': u'Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name',
                                       'pyname': u'discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'discharge only mode storage discharge capacity function of flow fraction curve name',
                                      {'name': u'Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name',
                                       'pyname': u'discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'discharge only mode energy input ratio function of temperature curve name',
                                      {'name': u'Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name',
                                       'pyname': u'discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'discharge only mode energy input ratio function of flow fraction curve name',
                                      {'name': u'Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'discharge only mode part load fraction correlation curve name',
                                      {'name': u'Discharge Only Mode Part Load Fraction Correlation Curve Name',
                                       'pyname': u'discharge_only_mode_part_load_fraction_correlation_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'discharge only mode sensible heat ratio function of temperature curve name',
                                      {'name': u'Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name',
                                       'pyname': u'discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'discharge only mode sensible heat ratio function of flow fraction curve name',
                                      {'name': u'Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name',
                                       'pyname': u'discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'ancillary electric power',
                                      {'name': u'Ancillary Electric Power',
                                       'pyname': u'ancillary_electric_power',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'cold weather operation minimum outdoor air temperature',
                                      {'name': u'Cold Weather Operation Minimum Outdoor Air Temperature',
                                       'pyname': u'cold_weather_operation_minimum_outdoor_air_temperature',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'cold weather operation ancillary power',
                                      {'name': u'Cold Weather Operation Ancillary Power',
                                       'pyname': u'cold_weather_operation_ancillary_power',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'condenser air inlet node name',
                                      {'name': u'Condenser Air Inlet Node Name',
                                       'pyname': u'condenser_air_inlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser air outlet node name',
                                      {'name': u'Condenser Air Outlet Node Name',
                                       'pyname': u'condenser_air_outlet_node_name',
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'condenser design air flow rate',
                                      {'name': u'Condenser Design Air Flow Rate',
                                       'pyname': u'condenser_design_air_flow_rate',
                                       'minimum>': 0.0,
                                       'required-field': True,
                                       'autosizable': False,
                                       'autocalculatable': True,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'condenser air flow sizing factor',
                                      {'name': u'Condenser Air Flow Sizing Factor',
                                       'pyname': u'condenser_air_flow_sizing_factor',
                                       'default': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'condenser type',
                                      {'name': u'Condenser Type',
                                       'pyname': u'condenser_type',
                                       'default': u'AirCooled',
                                       'required-field': False,
                                       'autosizable': False,
                                       'accepted-values': [u'AirCooled',
                                                           u'EvaporativelyCooled'],
                                       'autocalculatable': False,
                                       'type': 'alpha'}),
                                     (u'evaporative condenser effectiveness',
                                      {'name': u'Evaporative Condenser Effectiveness',
                                       'pyname': u'evaporative_condenser_effectiveness',
                                       'default': 0.7,
                                       'minimum>': 0.0,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'dimensionless'}),
                                     (u'evaporative condenser pump rated power consumption',
                                      {'name': u'Evaporative Condenser Pump Rated Power Consumption',
                                       'pyname': u'evaporative_condenser_pump_rated_power_consumption',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': True,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W'}),
                                     (u'basin heater capacity',
                                      {'name': u'Basin Heater Capacity',
                                       'pyname': u'basin_heater_capacity',
                                       'default': 0.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'W/K'}),
                                     (u'basin heater setpoint temperature',
                                      {'name': u'Basin Heater Setpoint Temperature',
                                       'pyname': u'basin_heater_setpoint_temperature',
                                       'default': 2.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 2.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'basin heater availability schedule name',
                                      {'name': u'Basin Heater Availability Schedule Name',
                                       'pyname': u'basin_heater_availability_schedule_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'supply water storage tank name',
                                      {'name': u'Supply Water Storage Tank Name',
                                       'pyname': u'supply_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'condensate collection water storage tank name',
                                      {'name': u'Condensate Collection Water Storage Tank Name',
                                       'pyname': u'condensate_collection_water_storage_tank_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'object-list'}),
                                     (u'storage tank plant connection inlet node name',
                                      {'name': u'Storage Tank Plant Connection Inlet Node Name',
                                       'pyname': u'storage_tank_plant_connection_inlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'storage tank plant connection outlet node name',
                                      {'name': u'Storage Tank Plant Connection Outlet Node Name',
                                       'pyname': u'storage_tank_plant_connection_outlet_node_name',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'node'}),
                                     (u'storage tank plant connection design flow rate',
                                      {'name': u'Storage Tank Plant Connection Design Flow Rate',
                                       'pyname': u'storage_tank_plant_connection_design_flow_rate',
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'm3/s'}),
                                     (u'storage tank plant connection heat transfer effectiveness',
                                      {'name': u'Storage Tank Plant Connection Heat Transfer Effectiveness',
                                       'pyname': u'storage_tank_plant_connection_heat_transfer_effectiveness',
                                       'default': 0.7,
                                       'maximum': 1.0,
                                       'required-field': False,
                                       'autosizable': False,
                                       'minimum': 0.0,
                                       'autocalculatable': False,
                                       'type': u'real'}),
                                     (u'storage tank minimum operating limit fluid temperature',
                                      {'name': u'Storage Tank Minimum Operating Limit Fluid Temperature',
                                       'pyname': u'storage_tank_minimum_operating_limit_fluid_temperature',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'}),
                                     (u'storage tank maximum operating limit fluid temperature',
                                      {'name': u'Storage Tank Maximum Operating Limit Fluid Temperature',
                                       'pyname': u'storage_tank_maximum_operating_limit_fluid_temperature',
                                       'required-field': False,
                                       'autosizable': False,
                                       'autocalculatable': False,
                                       'type': u'real',
                                       'unit': u'C'})]),
              'extensible-fields': OrderedDict(),
              'unique-object': False,
              'required-object': False,
              'group': u'Coils'}

    @property
    def name(self):
        """Get name.

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`

        Args:
            value (str): value for IDD Field `Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Name"] = value

    @property
    def availability_schedule_name(self):
        """Get availability_schedule_name.

        Returns:
            str: the value of `availability_schedule_name` or None if not set

        """
        return self["Availability Schedule Name"]

    @availability_schedule_name.setter
    def availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Availability Schedule Name` Availability
        schedule name for this system. Schedule value > 0 means the system is
        available. If this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Availability Schedule Name"] = value

    @property
    def operating_mode_control_method(self):
        """Get operating_mode_control_method.

        Returns:
            str: the value of `operating_mode_control_method` or None if not set

        """
        return self["Operating Mode Control Method"]

    @operating_mode_control_method.setter
    def operating_mode_control_method(self, value=None):
        """Corresponds to IDD field `Operating Mode Control Method`

        Args:
            value (str): value for IDD Field `Operating Mode Control Method`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Operating Mode Control Method"] = value

    @property
    def operation_mode_control_schedule_name(self):
        """Get operation_mode_control_schedule_name.

        Returns:
            str: the value of `operation_mode_control_schedule_name` or None if not set

        """
        return self["Operation Mode Control Schedule Name"]

    @operation_mode_control_schedule_name.setter
    def operation_mode_control_schedule_name(self, value=None):
        """  Corresponds to IDD field `Operation Mode Control Schedule Name`
        This field is used if the control method is set to ScheduledModes
        Schedule values control operating mode: 0=off, 1=cooling only, 2= cooling and charge,
        3= cooling and discharge, 4= charge only, and 5= discharge only

        Args:
            value (str): value for IDD Field `Operation Mode Control Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Operation Mode Control Schedule Name"] = value

    @property
    def storage_type(self):
        """Get storage_type.

        Returns:
            str: the value of `storage_type` or None if not set

        """
        return self["Storage Type"]

    @storage_type.setter
    def storage_type(self, value=None):
        """Corresponds to IDD field `Storage Type`

        Args:
            value (str): value for IDD Field `Storage Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Type"] = value

    @property
    def user_defined_fluid_type(self):
        """Get user_defined_fluid_type.

        Returns:
            str: the value of `user_defined_fluid_type` or None if not set

        """
        return self["User Defined Fluid Type"]

    @user_defined_fluid_type.setter
    def user_defined_fluid_type(self, value=None):
        """Corresponds to IDD field `User Defined Fluid Type` This field is
        required when Storage Type is UserDefinedFluidType.

        Args:
            value (str): value for IDD Field `User Defined Fluid Type`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["User Defined Fluid Type"] = value

    @property
    def fluid_storage_volume(self):
        """Get fluid_storage_volume.

        Returns:
            float: the value of `fluid_storage_volume` or None if not set

        """
        return self["Fluid Storage Volume"]

    @fluid_storage_volume.setter
    def fluid_storage_volume(self, value=None):
        """Corresponds to IDD field `Fluid Storage Volume` required field if
        Storage Type is Water or UserDefinedFluidType.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Fluid Storage Volume`
                Units: m3
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fluid Storage Volume"] = value

    @property
    def ice_storage_capacity(self):
        """Get ice_storage_capacity.

        Returns:
            float: the value of `ice_storage_capacity` or None if not set

        """
        return self["Ice Storage Capacity"]

    @ice_storage_capacity.setter
    def ice_storage_capacity(self, value=None):
        """Corresponds to IDD field `Ice Storage Capacity` required field if
        Storage Type is Ice.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Ice Storage Capacity`
                Units: GJ
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Ice Storage Capacity"] = value

    @property
    def storage_capacity_sizing_factor(self):
        """Get storage_capacity_sizing_factor.

        Returns:
            float: the value of `storage_capacity_sizing_factor` or None if not set

        """
        return self["Storage Capacity Sizing Factor"]

    @storage_capacity_sizing_factor.setter
    def storage_capacity_sizing_factor(self, value=None):
        """Corresponds to IDD field `Storage Capacity Sizing Factor` If one of
        the previous two fields is set to autocalculate, this determines the
        storage capacity as a function of Cooling Only Mode Rated Total
        Evaporator Cooling Capacity.

        Args:
            value (float): value for IDD Field `Storage Capacity Sizing Factor`
                Units: hr
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Capacity Sizing Factor"] = value

    @property
    def storage_tank_ambient_temperature_node_name(self):
        """Get storage_tank_ambient_temperature_node_name.

        Returns:
            str: the value of `storage_tank_ambient_temperature_node_name` or None if not set

        """
        return self["Storage Tank Ambient Temperature Node Name"]

    @storage_tank_ambient_temperature_node_name.setter
    def storage_tank_ambient_temperature_node_name(self, value=None):
        """Corresponds to IDD field `Storage Tank Ambient Temperature Node
        Name`

        Args:
            value (str): value for IDD Field `Storage Tank Ambient Temperature Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Tank Ambient Temperature Node Name"] = value

    @property
    def storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient(
            self):
        """Get
        storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient.

        Returns:
            float: the value of `storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient` or None if not set

        """
        return self[
            "Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient"]

    @storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient.setter
    def storage_tank_to_ambient_uvalue_times_area_heat_transfer_coefficient(
            self,
            value=None):
        """  Corresponds to IDD field `Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient`

        Args:
            value (float): value for IDD Field `Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Storage Tank to Ambient U-value Times Area Heat Transfer Coefficient"] = value

    @property
    def fluid_storage_tank_rating_temperature(self):
        """Get fluid_storage_tank_rating_temperature.

        Returns:
            float: the value of `fluid_storage_tank_rating_temperature` or None if not set

        """
        return self["Fluid Storage Tank Rating Temperature"]

    @fluid_storage_tank_rating_temperature.setter
    def fluid_storage_tank_rating_temperature(self, value=None):
        """Corresponds to IDD field `Fluid Storage Tank Rating Temperature`
        required field if Storage Type is Water or UserDefinedFluidType.

        Args:
            value (float): value for IDD Field `Fluid Storage Tank Rating Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Fluid Storage Tank Rating Temperature"] = value

    @property
    def rated_evaporator_air_flow_rate(self):
        """Get rated_evaporator_air_flow_rate.

        Returns:
            float: the value of `rated_evaporator_air_flow_rate` or None if not set

        """
        return self["Rated Evaporator Air Flow Rate"]

    @rated_evaporator_air_flow_rate.setter
    def rated_evaporator_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Rated Evaporator Air Flow Rate` Flow rate
        corresponding to rated total cooling capacity, Rated SHR and Rated COP.

        Args:
            value (float or "Autosize"): value for IDD Field `Rated Evaporator Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Rated Evaporator Air Flow Rate"] = value

    @property
    def evaporator_air_inlet_node_name(self):
        """Get evaporator_air_inlet_node_name.

        Returns:
            str: the value of `evaporator_air_inlet_node_name` or None if not set

        """
        return self["Evaporator Air Inlet Node Name"]

    @evaporator_air_inlet_node_name.setter
    def evaporator_air_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Evaporator Air Inlet Node Name`

        Args:
            value (str): value for IDD Field `Evaporator Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporator Air Inlet Node Name"] = value

    @property
    def evaporator_air_outlet_node_name(self):
        """Get evaporator_air_outlet_node_name.

        Returns:
            str: the value of `evaporator_air_outlet_node_name` or None if not set

        """
        return self["Evaporator Air Outlet Node Name"]

    @evaporator_air_outlet_node_name.setter
    def evaporator_air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Evaporator Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Evaporator Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporator Air Outlet Node Name"] = value

    @property
    def cooling_only_mode_available(self):
        """Get cooling_only_mode_available.

        Returns:
            str: the value of `cooling_only_mode_available` or None if not set

        """
        return self["Cooling Only Mode Available"]

    @cooling_only_mode_available.setter
    def cooling_only_mode_available(self, value=None):
        """Corresponds to IDD field `Cooling Only Mode Available`

        Args:
            value (str): value for IDD Field `Cooling Only Mode Available`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Only Mode Available"] = value

    @property
    def cooling_only_mode_rated_total_evaporator_cooling_capacity(self):
        """Get cooling_only_mode_rated_total_evaporator_cooling_capacity.

        Returns:
            float: the value of `cooling_only_mode_rated_total_evaporator_cooling_capacity` or None if not set

        """
        return self[
            "Cooling Only Mode Rated Total Evaporator Cooling Capacity"]

    @cooling_only_mode_rated_total_evaporator_cooling_capacity.setter
    def cooling_only_mode_rated_total_evaporator_cooling_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Rated Total Evaporator Cooling Capacity`
        required field if Cooling Only Mode is available or if autocalculating sizes
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Only Mode Rated Total Evaporator Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Rated Total Evaporator Cooling Capacity"] = value

    @property
    def cooling_only_mode_rated_sensible_heat_ratio(self):
        """Get cooling_only_mode_rated_sensible_heat_ratio.

        Returns:
            float: the value of `cooling_only_mode_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Only Mode Rated Sensible Heat Ratio"]

    @cooling_only_mode_rated_sensible_heat_ratio.setter
    def cooling_only_mode_rated_sensible_heat_ratio(self, value=0.7):
        """Corresponds to IDD field `Cooling Only Mode Rated Sensible Heat
        Ratio` required field if Cooling Only Mode is available Rated sensible
        heat ratio (gross sensible capacity/gross total capacity) sensible and
        total capacities do not include supply fan heat.

        Args:
            value (float): value for IDD Field `Cooling Only Mode Rated Sensible Heat Ratio`
                Default value: 0.7
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Only Mode Rated Sensible Heat Ratio"] = value

    @property
    def cooling_only_mode_rated_cop(self):
        """Get cooling_only_mode_rated_cop.

        Returns:
            float: the value of `cooling_only_mode_rated_cop` or None if not set

        """
        return self["Cooling Only Mode Rated COP"]

    @cooling_only_mode_rated_cop.setter
    def cooling_only_mode_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling Only Mode Rated COP` Gross cooling
        capacity divided by power input to the compressor and outdoor fan, does
        not include supply fan heat or supply fan electrical energy input
        required field if Cooling Only Mode is available.

        Args:
            value (float): value for IDD Field `Cooling Only Mode Rated COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling Only Mode Rated COP"] = value

    @property
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get cooling_only_mode_total_evaporator_cooling_capacity_function_of_
        temperature_curve_name.

        Returns:
            str: the value of `cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"]

    @cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        biquadratic curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db
        x = ewb = evaporator entering wetbulb temperature (C)
        y = db = drybulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_only_mode_total_evaporator_cooling_capacity_function_of_
        flow_fraction_curve_name.

        Returns:
            str: the value of `cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"]

    @cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_only_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow rate

        Args:
            value (str): value for IDD Field `Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_only_mode_energy_input_ratio_function_of_temperature_cur
        ve_name.

        Returns:
            str: the value of `cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_only_mode_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*db + e*db**2 + f*ewb*db
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = drybulb temperature seen by the condenser (C)

        Args:
            value (str): value for IDD Field `Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_only_mode_energy_input_ratio_function_of_flow_fraction_c
        urve_name.

        Returns:
            str: the value of `cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_only_mode_part_load_fraction_correlation_curve_name(self):
        """Get cooling_only_mode_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `cooling_only_mode_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self[
            "Cooling Only Mode Part Load Fraction Correlation Curve Name"]

    @cooling_only_mode_part_load_fraction_correlation_curve_name.setter
    def cooling_only_mode_part_load_fraction_correlation_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Part Load Fraction Correlation Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Cooling Only Mode Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_only_mode_sensible_heat_ratio_function_of_temperature_cu
        rve_name.

        Returns:
            str: the value of `cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def cooling_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = evaporator entering wetbulb temperature seen by the cooling coil (C)
        y = edb = evaporator entering drybulb temperature seen by the cooling coil (C)

        Args:
            value (str): value for IDD Field `Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_
        curve_name.

        Returns:
            str: the value of `cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Cooling Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_available(self):
        """Get cooling_and_charge_mode_available.

        Returns:
            str: the value of `cooling_and_charge_mode_available` or None if not set

        """
        return self["Cooling And Charge Mode Available"]

    @cooling_and_charge_mode_available.setter
    def cooling_and_charge_mode_available(self, value=None):
        """Corresponds to IDD field `Cooling And Charge Mode Available`

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Available`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Charge Mode Available"] = value

    @property
    def cooling_and_charge_mode_rated_total_evaporator_cooling_capacity(self):
        """Get cooling_and_charge_mode_rated_total_evaporator_cooling_capacity.

        Returns:
            float: the value of `cooling_and_charge_mode_rated_total_evaporator_cooling_capacity` or None if not set

        """
        return self[
            "Cooling And Charge Mode Rated Total Evaporator Cooling Capacity"]

    @cooling_and_charge_mode_rated_total_evaporator_cooling_capacity.setter
    def cooling_and_charge_mode_rated_total_evaporator_cooling_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Rated Total Evaporator Cooling Capacity`
        required field if Cooling And Charge Mode is available
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Charge Mode Rated Total Evaporator Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Rated Total Evaporator Cooling Capacity"] = value

    @property
    def cooling_and_charge_mode_capacity_sizing_factor(self):
        """Get cooling_and_charge_mode_capacity_sizing_factor.

        Returns:
            float: the value of `cooling_and_charge_mode_capacity_sizing_factor` or None if not set

        """
        return self["Cooling And Charge Mode Capacity Sizing Factor"]

    @cooling_and_charge_mode_capacity_sizing_factor.setter
    def cooling_and_charge_mode_capacity_sizing_factor(self, value=0.5):
        """Corresponds to IDD field `Cooling And Charge Mode Capacity Sizing
        Factor` If previous field is autocalculate, this determines the
        evaporator capacity as a multiplier on the Cooling Only Mode Rated
        Total Evaporator Cooling Capacity.

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Capacity Sizing Factor`
                Default value: 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Charge Mode Capacity Sizing Factor"] = value

    @property
    def cooling_and_charge_mode_rated_storage_charging_capacity(self):
        """Get cooling_and_charge_mode_rated_storage_charging_capacity.

        Returns:
            float: the value of `cooling_and_charge_mode_rated_storage_charging_capacity` or None if not set

        """
        return self["Cooling And Charge Mode Rated Storage Charging Capacity"]

    @cooling_and_charge_mode_rated_storage_charging_capacity.setter
    def cooling_and_charge_mode_rated_storage_charging_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Rated Storage Charging Capacity`
        required field if Cooling And Charge Mode is available
        net capacity including any internal devices
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Charge Mode Rated Storage Charging Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Cooling And Charge Mode Rated Storage Charging Capacity"] = value

    @property
    def cooling_and_charge_mode_storage_capacity_sizing_factor(self):
        """Get cooling_and_charge_mode_storage_capacity_sizing_factor.

        Returns:
            float: the value of `cooling_and_charge_mode_storage_capacity_sizing_factor` or None if not set

        """
        return self["Cooling And Charge Mode Storage Capacity Sizing Factor"]

    @cooling_and_charge_mode_storage_capacity_sizing_factor.setter
    def cooling_and_charge_mode_storage_capacity_sizing_factor(
            self,
            value=0.5):
        """Corresponds to IDD field `Cooling And Charge Mode Storage Capacity
        Sizing Factor` If previous field is autocalculate, this determines the
        storage cooling capacity as a multiplier on the Cooling Only Mode Rated
        Total Evaporator Cooling Capacity.

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Storage Capacity Sizing Factor`
                Default value: 0.5
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Charge Mode Storage Capacity Sizing Factor"] = value

    @property
    def cooling_and_charge_mode_rated_sensible_heat_ratio(self):
        """Get cooling_and_charge_mode_rated_sensible_heat_ratio.

        Returns:
            float: the value of `cooling_and_charge_mode_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling And Charge Mode Rated Sensible Heat Ratio"]

    @cooling_and_charge_mode_rated_sensible_heat_ratio.setter
    def cooling_and_charge_mode_rated_sensible_heat_ratio(self, value=0.7):
        """Corresponds to IDD field `Cooling And Charge Mode Rated Sensible
        Heat Ratio` required field if Cooling And Charge Mode is available
        Rated sensible heat ratio (gross sensible evaporator capacity/gross
        total evaporator capacity) sensible and total capacities do not include
        supply fan heat.

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Rated Sensible Heat Ratio`
                Default value: 0.7
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Charge Mode Rated Sensible Heat Ratio"] = value

    @property
    def cooling_and_charge_mode_cooling_rated_cop(self):
        """Get cooling_and_charge_mode_cooling_rated_cop.

        Returns:
            float: the value of `cooling_and_charge_mode_cooling_rated_cop` or None if not set

        """
        return self["Cooling And Charge Mode Cooling Rated COP"]

    @cooling_and_charge_mode_cooling_rated_cop.setter
    def cooling_and_charge_mode_cooling_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling And Charge Mode Cooling Rated COP`
        Gross evaporator cooling capacity divided by power input to the
        compressor (for cooling) and outdoor fan, does not include supply fan
        heat or supply fan electrical energy input required field if Cooling
        And Charge Mode is available.

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Cooling Rated COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Charge Mode Cooling Rated COP"] = value

    @property
    def cooling_and_charge_mode_charging_rated_cop(self):
        """Get cooling_and_charge_mode_charging_rated_cop.

        Returns:
            float: the value of `cooling_and_charge_mode_charging_rated_cop` or None if not set

        """
        return self["Cooling And Charge Mode Charging Rated COP"]

    @cooling_and_charge_mode_charging_rated_cop.setter
    def cooling_and_charge_mode_charging_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling And Charge Mode Charging Rated
        COP` net cooling capacity divided by power input to the compressor (for
        charging) and outdoor fan, includes any internal devices required field
        if Cooling And Charge Mode is available.

        Args:
            value (float): value for IDD Field `Cooling And Charge Mode Charging Rated COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Charge Mode Charging Rated COP"] = value

    @property
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get cooling_and_charge_mode_total_evaporator_cooling_capacity_functi
        on_of_temperature_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"]

    @cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = drybulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_charge_mode_total_evaporator_cooling_capacity_functi
        on_of_flow_fraction_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_and_charge_mode_evaporator_energy_input_ratio_function_o
        f_temperature_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_charge_mode_evaporator_energy_input_ratio_function_o
        f_flow_fraction_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name(
            self):
        """Get cooling_and_charge_mode_evaporator_part_load_fraction_correlatio
        n_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name"]

    @cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name.setter
    def cooling_and_charge_mode_evaporator_part_load_fraction_correlation_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Evaporator Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name(
            self):
        """Get cooling_and_charge_mode_storage_charge_capacity_function_of_temp
        erature_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name"]

    @cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_storage_charge_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Storage Charge Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name(
            self):
        """Get cooling_and_charge_mode_storage_charge_capacity_function_of_tota
        l_evaporator_plr_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name"]

    @cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name.setter
    def cooling_and_charge_mode_storage_charge_capacity_function_of_total_evaporator_plr_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Storage Charge Capacity Function of Total Evaporator PLR Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_and_charge_mode_storage_energy_input_ratio_function_of_t
        emperature_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_charge_mode_storage_energy_input_ratio_function_of_f
        low_fraction_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name(
            self):
        """Get cooling_and_charge_mode_storage_energy_part_load_fraction_correl
        ation_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name"]

    @cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name.setter
    def cooling_and_charge_mode_storage_energy_part_load_fraction_correlation_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Storage Energy Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_and_charge_mode_sensible_heat_ratio_function_of_temperat
        ure_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Cooling And Charge Mode is available
        Curves or tables with either two or three independent variables can be used.
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = entering wet-bulb temperature seen by the cooling coil (C)
        y = edb = entering dry-bulb temperature seen by the cooling coil (C)
        Also allows Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = edb, z = stes)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fra
        ction_curve_name.

        Returns:
            str: the value of `cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_charge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Charge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Charge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_available(self):
        """Get cooling_and_discharge_mode_available.

        Returns:
            str: the value of `cooling_and_discharge_mode_available` or None if not set

        """
        return self["Cooling And Discharge Mode Available"]

    @cooling_and_discharge_mode_available.setter
    def cooling_and_discharge_mode_available(self, value=None):
        """Corresponds to IDD field `Cooling And Discharge Mode Available`

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Available`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Discharge Mode Available"] = value

    @property
    def cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity(
            self):
        """Get
        cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity.

        Returns:
            float: the value of `cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity"]

    @cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity.setter
    def cooling_and_discharge_mode_rated_total_evaporator_cooling_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity`
        required field if Cooling And Discharge Mode is available
        gross capacity excluding supply air fan heat
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at Fluid Storage Tank Rating Temperature (water or fluid) or storage faction of 0.5 (ice)

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Rated Total Evaporator Cooling Capacity"] = value

    @property
    def cooling_and_discharge_mode_evaporator_capacity_sizing_factor(self):
        """Get cooling_and_discharge_mode_evaporator_capacity_sizing_factor.

        Returns:
            float: the value of `cooling_and_discharge_mode_evaporator_capacity_sizing_factor` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Evaporator Capacity Sizing Factor"]

    @cooling_and_discharge_mode_evaporator_capacity_sizing_factor.setter
    def cooling_and_discharge_mode_evaporator_capacity_sizing_factor(
            self,
            value=1.0):
        """Corresponds to IDD field `Cooling And Discharge Mode Evaporator
        Capacity Sizing Factor` If previous field is autocalculate, this
        determines the charging capacity as a multiplier on the Cooling Only
        Mode Rated Total Evaporator Cooling Capacity.

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Evaporator Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Cooling And Discharge Mode Evaporator Capacity Sizing Factor"] = value

    @property
    def cooling_and_discharge_mode_rated_storage_discharging_capacity(self):
        """Get cooling_and_discharge_mode_rated_storage_discharging_capacity.

        Returns:
            float: the value of `cooling_and_discharge_mode_rated_storage_discharging_capacity` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Rated Storage Discharging Capacity"]

    @cooling_and_discharge_mode_rated_storage_discharging_capacity.setter
    def cooling_and_discharge_mode_rated_storage_discharging_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Rated Storage Discharging Capacity`
        required field if Cooling And Discharge Mode is available
        net capacity including any internal devices
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)

        Args:
            value (float or "Autocalculate"): value for IDD Field `Cooling And Discharge Mode Rated Storage Discharging Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Rated Storage Discharging Capacity"] = value

    @property
    def cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor(
            self):
        """Get
        cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor.

        Returns:
            float: the value of `cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor"]

    @cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor.setter
    def cooling_and_discharge_mode_storage_discharge_capacity_sizing_factor(
            self,
            value=1.0):
        """Corresponds to IDD field `Cooling And Discharge Mode Storage
        Discharge Capacity Sizing Factor` If previous field is autocalculate,
        this determines the charging capacity as a multiplier on the Cooling
        Only Mode Rated Total Evaporator Cooling Capacity.

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Cooling And Discharge Mode Storage Discharge Capacity Sizing Factor"] = value

    @property
    def cooling_and_discharge_mode_rated_sensible_heat_ratio(self):
        """Get cooling_and_discharge_mode_rated_sensible_heat_ratio.

        Returns:
            float: the value of `cooling_and_discharge_mode_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling And Discharge Mode Rated Sensible Heat Ratio"]

    @cooling_and_discharge_mode_rated_sensible_heat_ratio.setter
    def cooling_and_discharge_mode_rated_sensible_heat_ratio(self, value=0.7):
        """Corresponds to IDD field `Cooling And Discharge Mode Rated Sensible
        Heat Ratio` required field if Cooling And Discharge Mode is available
        Rated sensible heat ratio (gross sensible evaporator capacity/gross
        total evaporator capacity) sensible and total capacities do not include
        supply fan heat.

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Rated Sensible Heat Ratio`
                Default value: 0.7
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Discharge Mode Rated Sensible Heat Ratio"] = value

    @property
    def cooling_and_discharge_mode_cooling_rated_cop(self):
        """Get cooling_and_discharge_mode_cooling_rated_cop.

        Returns:
            float: the value of `cooling_and_discharge_mode_cooling_rated_cop` or None if not set

        """
        return self["Cooling And Discharge Mode Cooling Rated COP"]

    @cooling_and_discharge_mode_cooling_rated_cop.setter
    def cooling_and_discharge_mode_cooling_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling And Discharge Mode Cooling Rated
        COP` Gross evaporator cooling capacity divided by power input to the
        compressor (for cooling) and outdoor fan, does not include supply fan
        heat or supply fan electrical energy input required field if Cooling
        And Discharge Mode is available.

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Cooling Rated COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Discharge Mode Cooling Rated COP"] = value

    @property
    def cooling_and_discharge_mode_discharging_rated_cop(self):
        """Get cooling_and_discharge_mode_discharging_rated_cop.

        Returns:
            float: the value of `cooling_and_discharge_mode_discharging_rated_cop` or None if not set

        """
        return self["Cooling And Discharge Mode Discharging Rated COP"]

    @cooling_and_discharge_mode_discharging_rated_cop.setter
    def cooling_and_discharge_mode_discharging_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling And Discharge Mode Discharging
        Rated COP` gross cooling capacity divided by power input to the
        compressor (for discharging), includes any internal devices for
        discharging storage but not supply fan required field if Cooling And
        Discharge Mode is available.

        Args:
            value (float): value for IDD Field `Cooling And Discharge Mode Discharging Rated COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cooling And Discharge Mode Discharging Rated COP"] = value

    @property
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(
            self):
        """Get cooling_and_discharge_mode_total_evaporator_cooling_capacity_fun
        ction_of_temperature_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
        required field if Cooling Only Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_discharge_mode_total_evaporator_cooling_capacity_fun
        ction_of_flow_fraction_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_total_evaporator_cooling_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Total Evaporator Cooling Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_and_discharge_mode_evaporator_energy_input_ratio_functio
        n_of_temperature_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_discharge_mode_evaporator_energy_input_ratio_functio
        n_of_flow_fraction_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_evaporator_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Evaporator Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name(
            self):
        """Get cooling_and_discharge_mode_evaporator_part_load_fraction_correla
        tion_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name"]

    @cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name.setter
    def cooling_and_discharge_mode_evaporator_part_load_fraction_correlation_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Evaporator Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name(
            self):
        """Get cooling_and_discharge_mode_storage_disharge_capacity_function_of
        _temperature_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Storage Disharge Capacity Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_discharge_mode_storage_disharge_capacity_function_of
        _flow_fraction_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_storage_disharge_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Storage Disharge Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name(
            self):
        """Get cooling_and_discharge_mode_storage_discharge_capacity_function_o
        f_total_evaporator_plr_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name"]

    @cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name.setter
    def cooling_and_discharge_mode_storage_discharge_capacity_function_of_total_evaporator_plr_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x =PLR = part load ratio (evaporator cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Storage Discharge Capacity Function of Total Evaporator PLR Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_and_discharge_mode_storage_energy_input_ratio_function_o
        f_temperature_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Allowed curve or table objects are Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = db, z = stes)
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = db = dry-bulb temperature seen by the condenser (C)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_discharge_mode_storage_energy_input_ratio_function_o
        f_flow_fraction_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_storage_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Storage Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name(
            self):
        """Get cooling_and_discharge_mode_storage_energy_part_load_fraction_cor
        relation_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name"]

    @cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name.setter
    def cooling_and_discharge_mode_storage_energy_part_load_fraction_correlation_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3
        x = PLR = part load ratio (evaporator cooling load/steady state capacity)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Storage Energy Part Load Fraction Correlation Curve Name"] = value

    @property
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self):
        """Get cooling_and_discharge_mode_sensible_heat_ratio_function_of_tempe
        rature_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Cooling And Discharge Mode is available
        Curves or tables with either two or three independent variables can be used.
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = entering wet-bulb temperature seen by the cooling coil (C)
        y = edb = entering dry-bulb temperature seen by the cooling coil (C)
        Also allows Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = edb, z = stes)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_
        fraction_curve_name.

        Returns:
            str: the value of `cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def cooling_and_discharge_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Cooling And Discharge Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Cooling And Discharge Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def charge_only_mode_available(self):
        """Get charge_only_mode_available.

        Returns:
            str: the value of `charge_only_mode_available` or None if not set

        """
        return self["Charge Only Mode Available"]

    @charge_only_mode_available.setter
    def charge_only_mode_available(self, value=None):
        """Corresponds to IDD field `Charge Only Mode Available`

        Args:
            value (str): value for IDD Field `Charge Only Mode Available`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Charge Only Mode Available"] = value

    @property
    def charge_only_mode_rated_storage_charging_capacity(self):
        """Get charge_only_mode_rated_storage_charging_capacity.

        Returns:
            float: the value of `charge_only_mode_rated_storage_charging_capacity` or None if not set

        """
        return self["Charge Only Mode Rated Storage Charging Capacity"]

    @charge_only_mode_rated_storage_charging_capacity.setter
    def charge_only_mode_rated_storage_charging_capacity(self, value=None):
        """  Corresponds to IDD field `Charge Only Mode Rated Storage Charging Capacity`
        required field if Charge Only  Mode is available
        net capacity including any internal devices
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb
        thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)

        Args:
            value (float or "Autocalculate"): value for IDD Field `Charge Only Mode Rated Storage Charging Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Charge Only Mode Rated Storage Charging Capacity"] = value

    @property
    def charge_only_mode_capacity_sizing_factor(self):
        """Get charge_only_mode_capacity_sizing_factor.

        Returns:
            float: the value of `charge_only_mode_capacity_sizing_factor` or None if not set

        """
        return self["Charge Only Mode Capacity Sizing Factor"]

    @charge_only_mode_capacity_sizing_factor.setter
    def charge_only_mode_capacity_sizing_factor(self, value=1.0):
        """Corresponds to IDD field `Charge Only Mode Capacity Sizing Factor`
        If previous field is autocalculate, this determines the charging
        capacity as a multiplier on the Cooling Only Mode Rated Total
        Evaporator Cooling Capacity.

        Args:
            value (float): value for IDD Field `Charge Only Mode Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Charge Only Mode Capacity Sizing Factor"] = value

    @property
    def charge_only_mode_charging_rated_cop(self):
        """Get charge_only_mode_charging_rated_cop.

        Returns:
            float: the value of `charge_only_mode_charging_rated_cop` or None if not set

        """
        return self["Charge Only Mode Charging Rated COP"]

    @charge_only_mode_charging_rated_cop.setter
    def charge_only_mode_charging_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Charge Only Mode Charging Rated COP` net
        cooling capacity divided by power input to the compressor (for
        charging) and outdoor fan, includes any internal devices required field
        if Charge Only Mode is available.

        Args:
            value (float): value for IDD Field `Charge Only Mode Charging Rated COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Charge Only Mode Charging Rated COP"] = value

    @property
    def charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name(
            self):
        """Get charge_only_mode_storage_charge_capacity_function_of_temperature
        _curve_name.

        Returns:
            str: the value of `charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name"]

    @charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name.setter
    def charge_only_mode_storage_charge_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name`
        required field if Charge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes
        x = db = drybulb temperature seen by the condenser (C)
        y = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Charge Only Mode Storage Charge Capacity Function of Temperature Curve Name"] = value

    @property
    def charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name(
            self):
        """Get charge_only_mode_storage_energy_input_ratio_function_of_temperat
        ure_curve_name.

        Returns:
            str: the value of `charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name"]

    @charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name.setter
    def charge_only_mode_storage_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name`
        required field if Charge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*db + c*db**2 + d*stes + e*stes**2 + f*db*stes
        x = db = drybulb temperature seen by the condenser (C)
        y = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Charge Only Mode Storage Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_available(self):
        """Get discharge_only_mode_available.

        Returns:
            str: the value of `discharge_only_mode_available` or None if not set

        """
        return self["Discharge Only Mode Available"]

    @discharge_only_mode_available.setter
    def discharge_only_mode_available(self, value=None):
        """Corresponds to IDD field `Discharge Only Mode Available`

        Args:
            value (str): value for IDD Field `Discharge Only Mode Available`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Discharge Only Mode Available"] = value

    @property
    def discharge_only_mode_rated_storage_discharging_capacity(self):
        """Get discharge_only_mode_rated_storage_discharging_capacity.

        Returns:
            float: the value of `discharge_only_mode_rated_storage_discharging_capacity` or None if not set

        """
        return self["Discharge Only Mode Rated Storage Discharging Capacity"]

    @discharge_only_mode_rated_storage_discharging_capacity.setter
    def discharge_only_mode_rated_storage_discharging_capacity(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Rated Storage Discharging Capacity`
        required field if Discharge Only Mode is available
        net capacity including any internal devices
        rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        thermal storage tank at 26.7 C (water) or storage faction of 0.5 (ice)

        Args:
            value (float or "Autocalculate"): value for IDD Field `Discharge Only Mode Rated Storage Discharging Capacity`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Discharge Only Mode Rated Storage Discharging Capacity"] = value

    @property
    def discharge_only_mode_capacity_sizing_factor(self):
        """Get discharge_only_mode_capacity_sizing_factor.

        Returns:
            float: the value of `discharge_only_mode_capacity_sizing_factor` or None if not set

        """
        return self["Discharge Only Mode Capacity Sizing Factor"]

    @discharge_only_mode_capacity_sizing_factor.setter
    def discharge_only_mode_capacity_sizing_factor(self, value=1.0):
        """Corresponds to IDD field `Discharge Only Mode Capacity Sizing
        Factor` If previous field is autocalculate, this determines the
        discharging capacity as a multiplier on the Cooling Only Mode Rated
        Total Evaporator Cooling Capacity.

        Args:
            value (float): value for IDD Field `Discharge Only Mode Capacity Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Discharge Only Mode Capacity Sizing Factor"] = value

    @property
    def discharge_only_mode_rated_sensible_heat_ratio(self):
        """Get discharge_only_mode_rated_sensible_heat_ratio.

        Returns:
            float: the value of `discharge_only_mode_rated_sensible_heat_ratio` or None if not set

        """
        return self["Discharge Only Mode Rated Sensible Heat Ratio"]

    @discharge_only_mode_rated_sensible_heat_ratio.setter
    def discharge_only_mode_rated_sensible_heat_ratio(self, value=None):
        """Corresponds to IDD field `Discharge Only Mode Rated Sensible Heat
        Ratio` required field if Discharge Only Mode is available Rated
        sensible heat ratio (gross sensible evaporator capacity/gross total
        evaporator capacity) sensible and total capacities do not include
        supply fan heat.

        Args:
            value (float): value for IDD Field `Discharge Only Mode Rated Sensible Heat Ratio`
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Discharge Only Mode Rated Sensible Heat Ratio"] = value

    @property
    def discharge_only_mode_rated_cop(self):
        """Get discharge_only_mode_rated_cop.

        Returns:
            float: the value of `discharge_only_mode_rated_cop` or None if not set

        """
        return self["Discharge Only Mode Rated COP"]

    @discharge_only_mode_rated_cop.setter
    def discharge_only_mode_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Discharge Only Mode Rated COP` required
        field if Discharge Only Mode is available gross cooling capacity
        divided by power input to the compressor (for discharging), includes
        any internal devices for discharging storage but not supply fan.

        Args:
            value (float): value for IDD Field `Discharge Only Mode Rated COP`
                Units: W/W
                Default value: 3.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Discharge Only Mode Rated COP"] = value

    @property
    def discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name(
            self):
        """Get discharge_only_mode_storage_discharge_capacity_function_of_tempe
        rature_curve_name.

        Returns:
            str: the value of `discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name"]

    @discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name.setter
    def discharge_only_mode_storage_discharge_capacity_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name`
        required field if Discharge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes
        x = ewb = evaporator entering wetbulb temperature (C)
        y = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Discharge Only Mode Storage Discharge Capacity Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name(
            self):
        """Get discharge_only_mode_storage_discharge_capacity_function_of_flow_
        fraction_curve_name.

        Returns:
            str: the value of `discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name"]

    @discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name.setter
    def discharge_only_mode_storage_discharge_capacity_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Discharge Only Mode Storage Discharge Capacity Function of Flow Fraction Curve Name"] = value

    @property
    def discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name(
            self):
        """Get discharge_only_mode_energy_input_ratio_function_of_temperature_c
        urve_name.

        Returns:
            str: the value of `discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name"]

    @discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name.setter
    def discharge_only_mode_energy_input_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name`
        required field if Discharge Only Mode is available
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*stes + e*stes**2 + f*ewb*stes
        x = ewb = evaporator entering wet-bulb temperature (C)
        y = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Discharge Only Mode Energy Input Ratio Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get discharge_only_mode_energy_input_ratio_function_of_flow_fraction
        _curve_name.

        Returns:
            str: the value of `discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"]

    @discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name.setter
    def discharge_only_mode_energy_input_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        x = ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Discharge Only Mode Energy Input Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def discharge_only_mode_part_load_fraction_correlation_curve_name(self):
        """Get discharge_only_mode_part_load_fraction_correlation_curve_name.

        Returns:
            str: the value of `discharge_only_mode_part_load_fraction_correlation_curve_name` or None if not set

        """
        return self[
            "Discharge Only Mode Part Load Fraction Correlation Curve Name"]

    @discharge_only_mode_part_load_fraction_correlation_curve_name.setter
    def discharge_only_mode_part_load_fraction_correlation_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Part Load Fraction Correlation Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*PLR + c*PLR**2
        cubic curve = a + b*PLR + c*PLR**2 + d*PLR**3

        Args:
            value (str): value for IDD Field `Discharge Only Mode Part Load Fraction Correlation Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Discharge Only Mode Part Load Fraction Correlation Curve Name"] = value

    @property
    def discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self):
        """Get discharge_only_mode_sensible_heat_ratio_function_of_temperature_
        curve_name.

        Returns:
            str: the value of `discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name` or None if not set

        """
        return self[
            "Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name"]

    @discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name.setter
    def discharge_only_mode_sensible_heat_ratio_function_of_temperature_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
        required field if Discharge Only Mode is available
        Curves or tables with either two or three independent variables can be used.
        Curve:Biquadratic, Table:TwoIndependentVariables, Curve:Bicubic and Curve:QuadraticLinear allowed
        curve = a + b*ewb + c*ewb**2 + d*edb + e*edb**2 + f*ewb*edb
        x = ewb = entering wet-bulb temperature seen by the cooling coil (C)
        y = edb = entering dry-bulb temperature seen by the cooling coil (C)
        Also allows Curve:Triquadratic and Table:MultiVariableLookup
        curve or table = func(x = ewb, y = edb, z = stes)
        z = stes = state of thermal energy storage (C or fraction)

        Args:
            value (str): value for IDD Field `Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Discharge Only Mode Sensible Heat Ratio Function of Temperature Curve Name"] = value

    @property
    def discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self):
        """Get discharge_only_mode_sensible_heat_ratio_function_of_flow_fractio
        n_curve_name.

        Returns:
            str: the value of `discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name` or None if not set

        """
        return self[
            "Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"]

    @discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name.setter
    def discharge_only_mode_sensible_heat_ratio_function_of_flow_fraction_curve_name(
            self,
            value=None):
        """  Corresponds to IDD field `Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
        required field if Discharge Only Mode is available
        Any curve or table with one independent variable can be used:
        Curve:Linear, Curve:Quadratic, Curve:Cubic, Curve:Quartic, Curve:Exponent,
        Curve:ExponentialSkewNormal, Curve:Sigmoid, Curve:RectuangularHyperbola1,
        Curve:RectangularHyperbola2, Curve:ExponentialDecay, Curve:DoubleExponentialDecay,
        Table:OneIndependentVariable
        quadratic curve = a + b*ff + c*ff**2
        cubic curve = a + b*ff + c*ff**2 + d*ff**3
        ff = Fraction of the full load evaporator air flow

        Args:
            value (str): value for IDD Field `Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self[
            "Discharge Only Mode Sensible Heat Ratio Function of Flow Fraction Curve Name"] = value

    @property
    def ancillary_electric_power(self):
        """Get ancillary_electric_power.

        Returns:
            float: the value of `ancillary_electric_power` or None if not set

        """
        return self["Ancillary Electric Power"]

    @ancillary_electric_power.setter
    def ancillary_electric_power(self, value=None):
        """Corresponds to IDD field `Ancillary Electric Power` controls and
        miscellaneous standby ancillary electric power draw, when available.

        Args:
            value (float): value for IDD Field `Ancillary Electric Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Ancillary Electric Power"] = value

    @property
    def cold_weather_operation_minimum_outdoor_air_temperature(self):
        """Get cold_weather_operation_minimum_outdoor_air_temperature.

        Returns:
            float: the value of `cold_weather_operation_minimum_outdoor_air_temperature` or None if not set

        """
        return self["Cold Weather Operation Minimum Outdoor Air Temperature"]

    @cold_weather_operation_minimum_outdoor_air_temperature.setter
    def cold_weather_operation_minimum_outdoor_air_temperature(
            self,
            value=None):
        """Corresponds to IDD field `Cold Weather Operation Minimum Outdoor Air
        Temperature`

        Args:
            value (float): value for IDD Field `Cold Weather Operation Minimum Outdoor Air Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cold Weather Operation Minimum Outdoor Air Temperature"] = value

    @property
    def cold_weather_operation_ancillary_power(self):
        """Get cold_weather_operation_ancillary_power.

        Returns:
            float: the value of `cold_weather_operation_ancillary_power` or None if not set

        """
        return self["Cold Weather Operation Ancillary Power"]

    @cold_weather_operation_ancillary_power.setter
    def cold_weather_operation_ancillary_power(self, value=None):
        """Corresponds to IDD field `Cold Weather Operation Ancillary Power`

        Args:
            value (float): value for IDD Field `Cold Weather Operation Ancillary Power`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Cold Weather Operation Ancillary Power"] = value

    @property
    def condenser_air_inlet_node_name(self):
        """Get condenser_air_inlet_node_name.

        Returns:
            str: the value of `condenser_air_inlet_node_name` or None if not set

        """
        return self["Condenser Air Inlet Node Name"]

    @condenser_air_inlet_node_name.setter
    def condenser_air_inlet_node_name(self, value=None):
        """  Corresponds to IDD field `Condenser Air Inlet Node Name`
        Enter the name of an outdoor air node. This node name is also specified in
        an OutdoorAir:Node or OutdoorAir:NodeList object.

        Args:
            value (str): value for IDD Field `Condenser Air Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Condenser Air Inlet Node Name"] = value

    @property
    def condenser_air_outlet_node_name(self):
        """Get condenser_air_outlet_node_name.

        Returns:
            str: the value of `condenser_air_outlet_node_name` or None if not set

        """
        return self["Condenser Air Outlet Node Name"]

    @condenser_air_outlet_node_name.setter
    def condenser_air_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Condenser Air Outlet Node Name`

        Args:
            value (str): value for IDD Field `Condenser Air Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Air Outlet Node Name"] = value

    @property
    def condenser_design_air_flow_rate(self):
        """Get condenser_design_air_flow_rate.

        Returns:
            float: the value of `condenser_design_air_flow_rate` or None if not set

        """
        return self["Condenser Design Air Flow Rate"]

    @condenser_design_air_flow_rate.setter
    def condenser_design_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Condenser Design Air Flow Rate` Used to
        calculate condenser leaving conditions and water use if evaporatively
        cooled.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Condenser Design Air Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Design Air Flow Rate"] = value

    @property
    def condenser_air_flow_sizing_factor(self):
        """Get condenser_air_flow_sizing_factor.

        Returns:
            float: the value of `condenser_air_flow_sizing_factor` or None if not set

        """
        return self["Condenser Air Flow Sizing Factor"]

    @condenser_air_flow_sizing_factor.setter
    def condenser_air_flow_sizing_factor(self, value=1.0):
        """Corresponds to IDD field `Condenser Air Flow Sizing Factor` If
        previous field is autocalculate, this determines the condenser air flow
        size as a multiplier on the Rated Evaporator Air Flow Rate.

        Args:
            value (float): value for IDD Field `Condenser Air Flow Sizing Factor`
                Default value: 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Air Flow Sizing Factor"] = value

    @property
    def condenser_type(self):
        """Get condenser_type.

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """Corresponds to IDD field `Condenser Type`

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: AirCooled
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condenser Type"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """Get evaporative_condenser_effectiveness.

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set

        """
        return self["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Evaporative Condenser Effectiveness`
        required field if condenser type is evaporatively cooled.

        Args:
            value (float): value for IDD Field `Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.7
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """Get evaporative_condenser_pump_rated_power_consumption.

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set

        """
        return self["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=None):
        """Corresponds to IDD field `Evaporative Condenser Pump Rated Power
        Consumption` Rated power consumed by the evaporative condenser's water
        pump.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def basin_heater_capacity(self):
        """Get basin_heater_capacity.

        Returns:
            float: the value of `basin_heater_capacity` or None if not set

        """
        return self["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=None):
        """  Corresponds to IDD field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.
        If this field is blank, the basin heater is always available.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """Get basin_heater_setpoint_temperature.

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set

        """
        return self["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """  Corresponds to IDD field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_availability_schedule_name(self):
        """Get basin_heater_availability_schedule_name.

        Returns:
            str: the value of `basin_heater_availability_schedule_name` or None if not set

        """
        return self["Basin Heater Availability Schedule Name"]

    @basin_heater_availability_schedule_name.setter
    def basin_heater_availability_schedule_name(self, value=None):
        """  Corresponds to IDD field `Basin Heater Availability Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Availability Schedule Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value
        """
        self["Basin Heater Availability Schedule Name"] = value

    @property
    def supply_water_storage_tank_name(self):
        """Get supply_water_storage_tank_name.

        Returns:
            str: the value of `supply_water_storage_tank_name` or None if not set

        """
        return self["Supply Water Storage Tank Name"]

    @supply_water_storage_tank_name.setter
    def supply_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Supply Water Storage Tank Name`

        Args:
            value (str): value for IDD Field `Supply Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Supply Water Storage Tank Name"] = value

    @property
    def condensate_collection_water_storage_tank_name(self):
        """Get condensate_collection_water_storage_tank_name.

        Returns:
            str: the value of `condensate_collection_water_storage_tank_name` or None if not set

        """
        return self["Condensate Collection Water Storage Tank Name"]

    @condensate_collection_water_storage_tank_name.setter
    def condensate_collection_water_storage_tank_name(self, value=None):
        """Corresponds to IDD field `Condensate Collection Water Storage Tank
        Name`

        Args:
            value (str): value for IDD Field `Condensate Collection Water Storage Tank Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Condensate Collection Water Storage Tank Name"] = value

    @property
    def storage_tank_plant_connection_inlet_node_name(self):
        """Get storage_tank_plant_connection_inlet_node_name.

        Returns:
            str: the value of `storage_tank_plant_connection_inlet_node_name` or None if not set

        """
        return self["Storage Tank Plant Connection Inlet Node Name"]

    @storage_tank_plant_connection_inlet_node_name.setter
    def storage_tank_plant_connection_inlet_node_name(self, value=None):
        """Corresponds to IDD field `Storage Tank Plant Connection Inlet Node
        Name`

        Args:
            value (str): value for IDD Field `Storage Tank Plant Connection Inlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Tank Plant Connection Inlet Node Name"] = value

    @property
    def storage_tank_plant_connection_outlet_node_name(self):
        """Get storage_tank_plant_connection_outlet_node_name.

        Returns:
            str: the value of `storage_tank_plant_connection_outlet_node_name` or None if not set

        """
        return self["Storage Tank Plant Connection Outlet Node Name"]

    @storage_tank_plant_connection_outlet_node_name.setter
    def storage_tank_plant_connection_outlet_node_name(self, value=None):
        """Corresponds to IDD field `Storage Tank Plant Connection Outlet Node
        Name`

        Args:
            value (str): value for IDD Field `Storage Tank Plant Connection Outlet Node Name`
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Tank Plant Connection Outlet Node Name"] = value

    @property
    def storage_tank_plant_connection_design_flow_rate(self):
        """Get storage_tank_plant_connection_design_flow_rate.

        Returns:
            float: the value of `storage_tank_plant_connection_design_flow_rate` or None if not set

        """
        return self["Storage Tank Plant Connection Design Flow Rate"]

    @storage_tank_plant_connection_design_flow_rate.setter
    def storage_tank_plant_connection_design_flow_rate(self, value=None):
        """Corresponds to IDD field `Storage Tank Plant Connection Design Flow
        Rate`

        Args:
            value (float): value for IDD Field `Storage Tank Plant Connection Design Flow Rate`
                Units: m3/s
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Tank Plant Connection Design Flow Rate"] = value

    @property
    def storage_tank_plant_connection_heat_transfer_effectiveness(self):
        """Get storage_tank_plant_connection_heat_transfer_effectiveness.

        Returns:
            float: the value of `storage_tank_plant_connection_heat_transfer_effectiveness` or None if not set

        """
        return self[
            "Storage Tank Plant Connection Heat Transfer Effectiveness"]

    @storage_tank_plant_connection_heat_transfer_effectiveness.setter
    def storage_tank_plant_connection_heat_transfer_effectiveness(
            self,
            value=0.7):
        """Corresponds to IDD field `Storage Tank Plant Connection Heat
        Transfer Effectiveness`

        Args:
            value (float): value for IDD Field `Storage Tank Plant Connection Heat Transfer Effectiveness`
                Default value: 0.7
                value <= 1.0
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self[
            "Storage Tank Plant Connection Heat Transfer Effectiveness"] = value

    @property
    def storage_tank_minimum_operating_limit_fluid_temperature(self):
        """Get storage_tank_minimum_operating_limit_fluid_temperature.

        Returns:
            float: the value of `storage_tank_minimum_operating_limit_fluid_temperature` or None if not set

        """
        return self["Storage Tank Minimum Operating Limit Fluid Temperature"]

    @storage_tank_minimum_operating_limit_fluid_temperature.setter
    def storage_tank_minimum_operating_limit_fluid_temperature(
            self,
            value=None):
        """Corresponds to IDD field `Storage Tank Minimum Operating Limit Fluid
        Temperature` For fluid storage tanks only, minimum limit for storage
        tank If omitted,then the minimum temperature limit is that used for
        fluid property data.

        Args:
            value (float): value for IDD Field `Storage Tank Minimum Operating Limit Fluid Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Tank Minimum Operating Limit Fluid Temperature"] = value

    @property
    def storage_tank_maximum_operating_limit_fluid_temperature(self):
        """Get storage_tank_maximum_operating_limit_fluid_temperature.

        Returns:
            float: the value of `storage_tank_maximum_operating_limit_fluid_temperature` or None if not set

        """
        return self["Storage Tank Maximum Operating Limit Fluid Temperature"]

    @storage_tank_maximum_operating_limit_fluid_temperature.setter
    def storage_tank_maximum_operating_limit_fluid_temperature(
            self,
            value=None):
        """Corresponds to IDD field `Storage Tank Maximum Operating Limit Fluid
        Temperature` For fluid storage tanks only, maximum limit for storage
        tank If omitted,then the maximum temperature limit is that used for
        fluid property data.

        Args:
            value (float): value for IDD Field `Storage Tank Maximum Operating Limit Fluid Temperature`
                Units: C
                if `value` is None it will not be checked against the
                specification and is assumed to be a missing value

        Raises:
            ValueError: if `value` is not a valid value

        """
        self["Storage Tank Maximum Operating Limit Fluid Temperature"] = value


