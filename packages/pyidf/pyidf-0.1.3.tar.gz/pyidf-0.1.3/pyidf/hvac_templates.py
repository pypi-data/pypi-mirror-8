""" Data objects in group "HVAC Templates"
"""

from collections import OrderedDict
import logging
from pyidf.helper import DataObject

logger = logging.getLogger("pyidf")
logger.addHandler(logging.NullHandler())



class HvactemplateThermostat(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Thermostat`
        Zone thermostat control.  Referenced schedules must be
        defined elsewhere in the idf.  Thermostat control type is
        dual setpoint with deadband.  It is not necessary to create
        a thermostat object for every zone, only for each unique
        set of setpoint schedules.  For example, an office building
        may have two thermostat objects, one for "Office" and one
        for "Storage".
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating setpoint schedule name',
                                       {'name': u'Heating Setpoint Schedule Name',
                                        'pyname': u'heating_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'constant heating setpoint',
                                       {'name': u'Constant Heating Setpoint',
                                        'pyname': u'constant_heating_setpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling setpoint schedule name',
                                       {'name': u'Cooling Setpoint Schedule Name',
                                        'pyname': u'cooling_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'constant cooling setpoint',
                                       {'name': u'Constant Cooling Setpoint',
                                        'pyname': u'constant_cooling_setpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 5,
               'name': u'HVACTemplate:Thermostat',
               'pyname': u'HvactemplateThermostat',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`
        This name is referenced by HVACTemplate:Zone:* objects

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set
        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def heating_setpoint_schedule_name(self):
        """field `Heating Setpoint Schedule Name` Leave blank if constant
        setpoint specified below, must enter schedule or constant setpoint.

        Args:
            value (str): value for IDD Field `Heating Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_setpoint_schedule_name` or None if not set

        """
        return self["Heating Setpoint Schedule Name"]

    @heating_setpoint_schedule_name.setter
    def heating_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Setpoint Schedule Name`"""
        self["Heating Setpoint Schedule Name"] = value

    @property
    def constant_heating_setpoint(self):
        """field `Constant Heating Setpoint` Ignored if schedule specified
        above, must enter schedule or constant setpoint.

        Args:
            value (float): value for IDD Field `Constant Heating Setpoint`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `constant_heating_setpoint` or None if not set

        """
        return self["Constant Heating Setpoint"]

    @constant_heating_setpoint.setter
    def constant_heating_setpoint(self, value=None):
        """Corresponds to IDD field `Constant Heating Setpoint`"""
        self["Constant Heating Setpoint"] = value

    @property
    def cooling_setpoint_schedule_name(self):
        """field `Cooling Setpoint Schedule Name` Leave blank if constant
        setpoint specified below, must enter schedule or constant setpoint.

        Args:
            value (str): value for IDD Field `Cooling Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_setpoint_schedule_name` or None if not set

        """
        return self["Cooling Setpoint Schedule Name"]

    @cooling_setpoint_schedule_name.setter
    def cooling_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Setpoint Schedule Name`"""
        self["Cooling Setpoint Schedule Name"] = value

    @property
    def constant_cooling_setpoint(self):
        """field `Constant Cooling Setpoint` Ignored if schedule specified
        above, must enter schedule or constant setpoint.

        Args:
            value (float): value for IDD Field `Constant Cooling Setpoint`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `constant_cooling_setpoint` or None if not set

        """
        return self["Constant Cooling Setpoint"]

    @constant_cooling_setpoint.setter
    def constant_cooling_setpoint(self, value=None):
        """Corresponds to IDD field `Constant Cooling Setpoint`"""
        self["Constant Cooling Setpoint"] = value




class HvactemplateZoneIdealLoadsAirSystem(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:IdealLoadsAirSystem`
        Zone with ideal air system that meets heating or cooling loads
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'maximum heating supply air temperature',
                                       {'name': u'Maximum Heating Supply Air Temperature',
                                        'pyname': u'maximum_heating_supply_air_temperature',
                                        'default': 50.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'maximum<': 100.0,
                                        'unit': u'C'}),
                                      (u'minimum cooling supply air temperature',
                                       {'name': u'Minimum Cooling Supply Air Temperature',
                                        'pyname': u'minimum_cooling_supply_air_temperature',
                                        'default': 13.0,
                                        'minimum>': -100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'maximum<': 50.0,
                                        'unit': u'C'}),
                                      (u'maximum heating supply air humidity ratio',
                                       {'name': u'Maximum Heating Supply Air Humidity Ratio',
                                        'pyname': u'maximum_heating_supply_air_humidity_ratio',
                                        'default': 0.0156,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'kgWater/kgDryAir'}),
                                      (u'minimum cooling supply air humidity ratio',
                                       {'name': u'Minimum Cooling Supply Air Humidity Ratio',
                                        'pyname': u'minimum_cooling_supply_air_humidity_ratio',
                                        'default': 0.0077,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'kgWater/kgDryAir'}),
                                      (u'heating limit',
                                       {'name': u'Heating Limit',
                                        'pyname': u'heating_limit',
                                        'default': u'NoLimit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLimit',
                                                            u'LimitFlowRate',
                                                            u'LimitCapacity',
                                                            u'LimitFlowRateAndCapacity'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'maximum heating air flow rate',
                                       {'name': u'Maximum Heating Air Flow Rate',
                                        'pyname': u'maximum_heating_air_flow_rate',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'maximum sensible heating capacity',
                                       {'name': u'Maximum Sensible Heating Capacity',
                                        'pyname': u'maximum_sensible_heating_capacity',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'cooling limit',
                                       {'name': u'Cooling Limit',
                                        'pyname': u'cooling_limit',
                                        'default': u'NoLimit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLimit',
                                                            u'LimitFlowRate',
                                                            u'LimitCapacity',
                                                            u'LimitFlowRateAndCapacity'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'maximum cooling air flow rate',
                                       {'name': u'Maximum Cooling Air Flow Rate',
                                        'pyname': u'maximum_cooling_air_flow_rate',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'maximum total cooling capacity',
                                       {'name': u'Maximum Total Cooling Capacity',
                                        'pyname': u'maximum_total_cooling_capacity',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'heating availability schedule name',
                                       {'name': u'Heating Availability Schedule Name',
                                        'pyname': u'heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling availability schedule name',
                                       {'name': u'Cooling Availability Schedule Name',
                                        'pyname': u'cooling_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'ConstantSensibleHeatRatio',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ConstantSensibleHeatRatio',
                                                            u'Humidistat',
                                                            u'None',
                                                            u'ConstantSupplyHumidityRatio'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling sensible heat ratio',
                                       {'name': u'Cooling Sensible Heat Ratio',
                                        'pyname': u'cooling_sensible_heat_ratio',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'dimensionless'}),
                                      (u'dehumidification setpoint',
                                       {'name': u'Dehumidification Setpoint',
                                        'pyname': u'dehumidification_setpoint',
                                        'default': 60.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'humidification control type',
                                       {'name': u'Humidification Control Type',
                                        'pyname': u'humidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Humidistat',
                                                            u'ConstantSupplyHumidityRatio'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidification setpoint',
                                       {'name': u'Humidification Setpoint',
                                        'pyname': u'humidification_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'demand controlled ventilation type',
                                       {'name': u'Demand Controlled Ventilation Type',
                                        'pyname': u'demand_controlled_ventilation_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'OccupancySchedule',
                                                            u'CO2Setpoint'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air economizer type',
                                       {'name': u'Outdoor Air Economizer Type',
                                        'pyname': u'outdoor_air_economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoEconomizer',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'dimensionless'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'dimensionless'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 26,
               'name': u'HVACTemplate:Zone:IdealLoadsAirSystem',
               'pyname': u'HvactemplateZoneIdealLoadsAirSystem',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def maximum_heating_supply_air_temperature(self):
        """field `Maximum Heating Supply Air Temperature`

        Args:
            value (float): value for IDD Field `Maximum Heating Supply Air Temperature`
                Units: C
                Default value: 50.0
                value < 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_heating_supply_air_temperature` or None if not set

        """
        return self["Maximum Heating Supply Air Temperature"]

    @maximum_heating_supply_air_temperature.setter
    def maximum_heating_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Maximum Heating Supply Air Temperature`"""
        self["Maximum Heating Supply Air Temperature"] = value

    @property
    def minimum_cooling_supply_air_temperature(self):
        """field `Minimum Cooling Supply Air Temperature`

        Args:
            value (float): value for IDD Field `Minimum Cooling Supply Air Temperature`
                Units: C
                Default value: 13.0
                value > -100.0
                value < 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_cooling_supply_air_temperature` or None if not set

        """
        return self["Minimum Cooling Supply Air Temperature"]

    @minimum_cooling_supply_air_temperature.setter
    def minimum_cooling_supply_air_temperature(self, value=13.0):
        """Corresponds to IDD field `Minimum Cooling Supply Air Temperature`"""
        self["Minimum Cooling Supply Air Temperature"] = value

    @property
    def maximum_heating_supply_air_humidity_ratio(self):
        """field `Maximum Heating Supply Air Humidity Ratio`

        Args:
            value (float): value for IDD Field `Maximum Heating Supply Air Humidity Ratio`
                Units: kgWater/kgDryAir
                Default value: 0.0156

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_heating_supply_air_humidity_ratio` or None if not set

        """
        return self["Maximum Heating Supply Air Humidity Ratio"]

    @maximum_heating_supply_air_humidity_ratio.setter
    def maximum_heating_supply_air_humidity_ratio(self, value=0.0156):
        """Corresponds to IDD field `Maximum Heating Supply Air Humidity
        Ratio`"""
        self["Maximum Heating Supply Air Humidity Ratio"] = value

    @property
    def minimum_cooling_supply_air_humidity_ratio(self):
        """field `Minimum Cooling Supply Air Humidity Ratio`

        Args:
            value (float): value for IDD Field `Minimum Cooling Supply Air Humidity Ratio`
                Units: kgWater/kgDryAir
                Default value: 0.0077

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_cooling_supply_air_humidity_ratio` or None if not set

        """
        return self["Minimum Cooling Supply Air Humidity Ratio"]

    @minimum_cooling_supply_air_humidity_ratio.setter
    def minimum_cooling_supply_air_humidity_ratio(self, value=0.0077):
        """Corresponds to IDD field `Minimum Cooling Supply Air Humidity
        Ratio`"""
        self["Minimum Cooling Supply Air Humidity Ratio"] = value

    @property
    def heating_limit(self):
        """field `Heating Limit`

        Args:
            value (str): value for IDD Field `Heating Limit`
                Default value: NoLimit

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_limit` or None if not set

        """
        return self["Heating Limit"]

    @heating_limit.setter
    def heating_limit(self, value="NoLimit"):
        """Corresponds to IDD field `Heating Limit`"""
        self["Heating Limit"] = value

    @property
    def maximum_heating_air_flow_rate(self):
        """field `Maximum Heating Air Flow Rate`
        This field is ignored if Heating Limit = NoLimit
        If this field is blank, there is no limit.

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Heating Air Flow Rate`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_heating_air_flow_rate` or None if not set
        """
        return self["Maximum Heating Air Flow Rate"]

    @maximum_heating_air_flow_rate.setter
    def maximum_heating_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Maximum Heating Air Flow Rate`"""
        self["Maximum Heating Air Flow Rate"] = value

    @property
    def maximum_sensible_heating_capacity(self):
        """field `Maximum Sensible Heating Capacity`
        This field is ignored if Heating Limit = NoLimit
        If this field is blank, there is no limit.

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Sensible Heating Capacity`
                Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_sensible_heating_capacity` or None if not set
        """
        return self["Maximum Sensible Heating Capacity"]

    @maximum_sensible_heating_capacity.setter
    def maximum_sensible_heating_capacity(self, value=None):
        """Corresponds to IDD field `Maximum Sensible Heating Capacity`"""
        self["Maximum Sensible Heating Capacity"] = value

    @property
    def cooling_limit(self):
        """field `Cooling Limit`

        Args:
            value (str): value for IDD Field `Cooling Limit`
                Default value: NoLimit

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_limit` or None if not set

        """
        return self["Cooling Limit"]

    @cooling_limit.setter
    def cooling_limit(self, value="NoLimit"):
        """Corresponds to IDD field `Cooling Limit`"""
        self["Cooling Limit"] = value

    @property
    def maximum_cooling_air_flow_rate(self):
        """field `Maximum Cooling Air Flow Rate`
        This field is ignored if Cooling Limit = NoLimit
        This field is required if Outdoor Air Economizer Type is anything other than NoEconomizer.

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Cooling Air Flow Rate`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_cooling_air_flow_rate` or None if not set
        """
        return self["Maximum Cooling Air Flow Rate"]

    @maximum_cooling_air_flow_rate.setter
    def maximum_cooling_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Maximum Cooling Air Flow Rate`"""
        self["Maximum Cooling Air Flow Rate"] = value

    @property
    def maximum_total_cooling_capacity(self):
        """field `Maximum Total Cooling Capacity`
        This field is ignored if Cooling Limit = NoLimit

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Total Cooling Capacity`
                Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_total_cooling_capacity` or None if not set
        """
        return self["Maximum Total Cooling Capacity"]

    @maximum_total_cooling_capacity.setter
    def maximum_total_cooling_capacity(self, value=None):
        """Corresponds to IDD field `Maximum Total Cooling Capacity`"""
        self["Maximum Total Cooling Capacity"] = value

    @property
    def heating_availability_schedule_name(self):
        """field `Heating Availability Schedule Name` If blank, heating is
        always available.

        Args:
            value (str): value for IDD Field `Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_availability_schedule_name` or None if not set

        """
        return self["Heating Availability Schedule Name"]

    @heating_availability_schedule_name.setter
    def heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Availability Schedule Name`"""
        self["Heating Availability Schedule Name"] = value

    @property
    def cooling_availability_schedule_name(self):
        """field `Cooling Availability Schedule Name` If blank, cooling is
        always available.

        Args:
            value (str): value for IDD Field `Cooling Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_availability_schedule_name` or None if not set

        """
        return self["Cooling Availability Schedule Name"]

    @cooling_availability_schedule_name.setter
    def cooling_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Availability Schedule Name`"""
        self["Cooling Availability Schedule Name"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        ConstantSensibleHeatRatio means that the ideal loads system
        will be controlled to meet the sensible cooling load, and the
        latent cooling rate will be computed using a constant
        sensible heat ratio (SHR)
        Humidistat means that there is a ZoneControl:Humidistat for this
        zone and the ideal loads system will attempt to satisfy the humidistat.
        None means that there is no dehumidification.
        ConstantSupplyHumidityRatio means that during cooling the supply air
        will always be at the Minimum Cooling Supply Humidity Ratio.

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: ConstantSensibleHeatRatio

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="ConstantSensibleHeatRatio"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def cooling_sensible_heat_ratio(self):
        """field `Cooling Sensible Heat Ratio` This field is applicable only
        when Dehumidification Control Type is ConstantSensibleHeatRatio.

        Args:
            value (float): value for IDD Field `Cooling Sensible Heat Ratio`
                Units: dimensionless
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Sensible Heat Ratio"]

    @cooling_sensible_heat_ratio.setter
    def cooling_sensible_heat_ratio(self, value=0.7):
        """Corresponds to IDD field `Cooling Sensible Heat Ratio`"""
        self["Cooling Sensible Heat Ratio"] = value

    @property
    def dehumidification_setpoint(self):
        """field `Dehumidification Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Dehumidification Setpoint`
                Units: percent
                Default value: 60.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set

        """
        return self["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0):
        """Corresponds to IDD field `Dehumidification Setpoint`"""
        self["Dehumidification Setpoint"] = value

    @property
    def humidification_control_type(self):
        """field `Humidification Control Type`
        None means that there is no humidification.
        Humidistat means that there is a ZoneControl:Humidistat for this
        zone and the ideal loads system will attempt to satisfy the humidistat.
        ConstantSupplyHumidityRatio means that during heating the supply air
        will always be at the Maximum Heating Supply Humidity Ratio.

        Args:
            value (str): value for IDD Field `Humidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidification_control_type` or None if not set
        """
        return self["Humidification Control Type"]

    @humidification_control_type.setter
    def humidification_control_type(self, value="None"):
        """Corresponds to IDD field `Humidification Control Type`"""
        self["Humidification Control Type"] = value

    @property
    def humidification_setpoint(self):
        """field `Humidification Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Humidification Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidification_setpoint` or None if not set

        """
        return self["Humidification Setpoint"]

    @humidification_setpoint.setter
    def humidification_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidification Setpoint`"""
        self["Humidification Setpoint"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        None means there is no outdoor air and all related fields will be ignored
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="None"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`
        When the name of a DesignSpecification:OutdoorAir object is entered, the minimum
        outdoor air flow rate will be computed using these specifications. The outdoor air
        flow rate will also be affected by the next two fields.
        If this field is blank, there will be no outdoor air and the remaining fields will
        be ignored.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def demand_controlled_ventilation_type(self):
        """field `Demand Controlled Ventilation Type`
        This field controls how the minimum outdoor air flow rate is calculated.
        None means that design occupancy will be uased to compute the minimum outdoor air flow rate
        OccupancySchedule means that current occupancy level will be used.
        CO2Setpoint means that the design occupancy will be used to compute the minimum outdoor air flow
        reate and the outdoor air flow rate may be increased if necessary to maintain the indoor air carbon
        dioxide setpoint defined in a ZoneControl:ContaminantController object.

        Args:
            value (str): value for IDD Field `Demand Controlled Ventilation Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `demand_controlled_ventilation_type` or None if not set
        """
        return self["Demand Controlled Ventilation Type"]

    @demand_controlled_ventilation_type.setter
    def demand_controlled_ventilation_type(self, value="None"):
        """Corresponds to IDD field `Demand Controlled Ventilation Type`"""
        self["Demand Controlled Ventilation Type"] = value

    @property
    def outdoor_air_economizer_type(self):
        """field `Outdoor Air Economizer Type` DifferentialDryBulb and
        DifferentialEnthalpy will increase the outdoor air flow rate when there
        is a cooling load and the outdoor air temperature or enthalpy is below
        the zone exhaust air temperature or enthalpy.

        Args:
            value (str): value for IDD Field `Outdoor Air Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_economizer_type` or None if not set

        """
        return self["Outdoor Air Economizer Type"]

    @outdoor_air_economizer_type.setter
    def outdoor_air_economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Outdoor Air Economizer Type`"""
        self["Outdoor Air Economizer Type"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Units: dimensionless
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness` Applicable only if Heat
        Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Units: dimensionless
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value




class HvactemplateZoneBaseboardHeat(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:BaseboardHeat`
        Zone baseboard heating system.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'HotWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'dedicated outdoor air system name',
                                       {'name': u'Dedicated Outdoor Air System Name',
                                        'pyname': u'dedicated_outdoor_air_system_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 11,
               'name': u'HVACTemplate:Zone:BaseboardHeat',
               'pyname': u'HvactemplateZoneBaseboardHeat',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: HotWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="HotWater"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """field `Dedicated Outdoor Air System Name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `Dedicated Outdoor Air System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """Corresponds to IDD field `Dedicated Outdoor Air System Name`"""
        self["Dedicated Outdoor Air System Name"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        name`"""
        self["Design Specification Outdoor Air Object name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value




class HvactemplateZoneFanCoil(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:FanCoil`
        4 pipe fan coil unit with optional outdoor air.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply air maximum flow rate',
                                       {'name': u'Supply Air Maximum Flow Rate',
                                        'pyname': u'supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 75.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'ChilledWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ChilledWater',
                                                            u'ChilledWaterDetailedFlatModel'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil design setpoint',
                                       {'name': u'Cooling Coil Design Setpoint',
                                        'pyname': u'cooling_coil_design_setpoint',
                                        'default': 14.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'HotWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil design setpoint',
                                       {'name': u'Heating Coil Design Setpoint',
                                        'pyname': u'heating_coil_design_setpoint',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'dedicated outdoor air system name',
                                       {'name': u'Dedicated Outdoor Air System Name',
                                        'pyname': u'dedicated_outdoor_air_system_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'capacity control method',
                                       {'name': u'Capacity Control Method',
                                        'pyname': u'capacity_control_method',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ConstantFanVariableFlow',
                                                            u'CyclingFan',
                                                            u'VariableFanVariableFlow',
                                                            u'VariableFanConstantFlow'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'low speed supply air flow ratio',
                                       {'name': u'Low Speed Supply Air Flow Ratio',
                                        'pyname': u'low_speed_supply_air_flow_ratio',
                                        'default': 0.33,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'medium speed supply air flow ratio',
                                       {'name': u'Medium Speed Supply Air Flow Ratio',
                                        'pyname': u'medium_speed_supply_air_flow_ratio',
                                        'default': 0.66,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'outdoor air schedule name',
                                       {'name': u'Outdoor Air Schedule Name',
                                        'pyname': u'outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 34,
               'name': u'HVACTemplate:Zone:FanCoil',
               'pyname': u'HvactemplateZoneFanCoil',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """field `Supply Air Maximum Flow Rate` This field may be set to
        "autosize".  If a value is entered, it will be multiplied by the Supply
        Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set

        """
        return self["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Maximum Flow Rate`"""
        self["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: ChilledWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """field `Cooling Coil Design Setpoint`
        Used for sizing when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Cooling Coil Design Setpoint`
                Units: C
                Default value: 14.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set
        """
        return self["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=14.0):
        """Corresponds to IDD field `Cooling Coil Design Setpoint`"""
        self["Cooling Coil Design Setpoint"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: HotWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """field `Heating Coil Design Setpoint`
        Used for sizing when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Heating Coil Design Setpoint`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set
        """
        return self["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=50.0):
        """Corresponds to IDD field `Heating Coil Design Setpoint`"""
        self["Heating Coil Design Setpoint"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """field `Dedicated Outdoor Air System Name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `Dedicated Outdoor Air System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """Corresponds to IDD field `Dedicated Outdoor Air System Name`"""
        self["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Cooling Coil Design Setpoint (above)
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Heating Coil Design Setpoint (above)
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def capacity_control_method(self):
        """field `Capacity Control Method` If this field is left blank, it will
        default to CyclingFan if a Dedicated Outdoor Air System is specified
        (see above), otherwise it will default to ConstantFanVariableFlow.

        Args:
            value (str): value for IDD Field `Capacity Control Method`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `capacity_control_method` or None if not set

        """
        return self["Capacity Control Method"]

    @capacity_control_method.setter
    def capacity_control_method(self, value=None):
        """Corresponds to IDD field `Capacity Control Method`"""
        self["Capacity Control Method"] = value

    @property
    def low_speed_supply_air_flow_ratio(self):
        """field `Low Speed Supply Air Flow Ratio`

        Args:
            value (float): value for IDD Field `Low Speed Supply Air Flow Ratio`
                Default value: 0.33

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `low_speed_supply_air_flow_ratio` or None if not set

        """
        return self["Low Speed Supply Air Flow Ratio"]

    @low_speed_supply_air_flow_ratio.setter
    def low_speed_supply_air_flow_ratio(self, value=0.33):
        """Corresponds to IDD field `Low Speed Supply Air Flow Ratio`"""
        self["Low Speed Supply Air Flow Ratio"] = value

    @property
    def medium_speed_supply_air_flow_ratio(self):
        """field `Medium Speed Supply Air Flow Ratio` Medium Speed Supply Air
        Flow Ratio should be greater than Low Speed Supply Air Flow Ratio.

        Args:
            value (float): value for IDD Field `Medium Speed Supply Air Flow Ratio`
                Default value: 0.66

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `medium_speed_supply_air_flow_ratio` or None if not set

        """
        return self["Medium Speed Supply Air Flow Ratio"]

    @medium_speed_supply_air_flow_ratio.setter
    def medium_speed_supply_air_flow_ratio(self, value=0.66):
        """Corresponds to IDD field `Medium Speed Supply Air Flow Ratio`"""
        self["Medium Speed Supply Air Flow Ratio"] = value

    @property
    def outdoor_air_schedule_name(self):
        """field `Outdoor Air Schedule Name` Value of schedule multiplies
        maximum outdoor air flow rate This schedule is ignored if this zone is
        served by an HVACTemplate dedicated outdoor air system.

        Args:
            value (str): value for IDD Field `Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_schedule_name` or None if not set

        """
        return self["Outdoor Air Schedule Name"]

    @outdoor_air_schedule_name.setter
    def outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Outdoor Air Schedule Name`"""
        self["Outdoor Air Schedule Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value




class HvactemplateZonePtac(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:PTAC`
        Packaged Terminal Air Conditioner
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling supply air flow rate',
                                       {'name': u'Cooling Supply Air Flow Rate',
                                        'pyname': u'cooling_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'heating supply air flow rate',
                                       {'name': u'Heating Supply Air Flow Rate',
                                        'pyname': u'heating_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'no load supply air flow rate',
                                       {'name': u'No Load Supply Air Flow Rate',
                                        'pyname': u'no_load_supply_air_flow_rate',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan operating mode schedule name',
                                       {'name': u'Supply Fan Operating Mode Schedule Name',
                                        'pyname': u'supply_fan_operating_mode_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 75.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'SingleSpeedDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeedDX'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil gross rated total capacity',
                                       {'name': u'Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'cooling coil gross rated sensible heat ratio',
                                       {'name': u'Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'cooling coil gross rated cooling cop',
                                       {'name': u'Cooling Coil Gross Rated Cooling COP',
                                        'pyname': u'cooling_coil_gross_rated_cooling_cop',
                                        'default': 3.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'Electric',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'HotWater',
                                                            u'Gas'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil capacity',
                                       {'name': u'Heating Coil Capacity',
                                        'pyname': u'heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'dedicated outdoor air system name',
                                       {'name': u'Dedicated Outdoor Air System Name',
                                        'pyname': u'dedicated_outdoor_air_system_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 14.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 39,
               'name': u'HVACTemplate:Zone:PTAC',
               'pyname': u'HvactemplateZonePtac',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """field `Cooling Supply Air Flow Rate` Supply air flow rate during
        cooling operation This field may be set to "autosize".  If a value is
        entered, it will be multiplied by the Supply Air Sizing Factor and by
        zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set

        """
        return self["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Cooling Supply Air Flow Rate`"""
        self["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """field `Heating Supply Air Flow Rate` Supply air flow rate during
        heating operation This field may be set to "autosize".  If a value is
        entered, it will be multiplied by the Supply Air Sizing Factor and by
        zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set

        """
        return self["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Heating Supply Air Flow Rate`"""
        self["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """field `No Load Supply Air Flow Rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        A value entered in this field will *not* be multiplied by the sizing factor or
        by zone multipliers.  It is best to autosize or leave blank when using zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `No Load Supply Air Flow Rate`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """Corresponds to IDD field `No Load Supply Air Flow Rate`"""
        self["No Load Supply Air Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """field `Supply Fan Operating Mode Schedule Name` Refers to a schedule
        to specify unitary supply fan operating mode. Schedule Name values of 0
        indicate cycling fan (auto) Schedule values of 1 indicate continuous
        fan (on) If this field is left blank, a schedule of always zero
        (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `Supply Fan Operating Mode Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set

        """
        return self["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """Corresponds to IDD field `Supply Fan Operating Mode Schedule
        Name`"""
        self["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: SingleSpeedDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """field `Cooling Coil Gross Rated Total Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Total
        Capacity`"""
        self["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `Cooling Coil Gross Rated Sensible Heat Ratio` Rated sensible
        heat ratio (gross sensible capacity/gross total capacity) Sensible and
        total capacities do not include effect of supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cooling_cop(self):
        """field `Cooling Coil Gross Rated Cooling COP` Gross cooling capacity
        divided by power input to the compressor and outdoor fan, does not
        include supply fan heat or supply fan electrical energy input.

        Args:
            value (float): value for IDD Field `Cooling Coil Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_cooling_cop` or None if not set

        """
        return self["Cooling Coil Gross Rated Cooling COP"]

    @cooling_coil_gross_rated_cooling_cop.setter
    def cooling_coil_gross_rated_cooling_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling Coil Gross Rated Cooling COP`"""
        self["Cooling Coil Gross Rated Cooling COP"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: Electric

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="Electric"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_capacity(self):
        """field `Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_capacity` or None if not set

        """
        return self["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heating Coil Capacity`"""
        self["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency` Applies only if Heating Coil
        Type is Gas.

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load` Applies only if
        Heating Coil Type is Gas.

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """field `Dedicated Outdoor Air System Name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `Dedicated Outdoor Air System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """Corresponds to IDD field `Dedicated Outdoor Air System Name`"""
        self["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 14.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value




class HvactemplateZonePthp(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:PTHP`
        Packaged Terminal Heat Pump
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling supply air flow rate',
                                       {'name': u'Cooling Supply Air Flow Rate',
                                        'pyname': u'cooling_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'heating supply air flow rate',
                                       {'name': u'Heating Supply Air Flow Rate',
                                        'pyname': u'heating_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'no load supply air flow rate',
                                       {'name': u'No Load Supply Air Flow Rate',
                                        'pyname': u'no_load_supply_air_flow_rate',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan operating mode schedule name',
                                       {'name': u'Supply Fan Operating Mode Schedule Name',
                                        'pyname': u'supply_fan_operating_mode_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 75.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'SingleSpeedDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeedDX'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil gross rated total capacity',
                                       {'name': u'Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'cooling coil gross rated sensible heat ratio',
                                       {'name': u'Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'cooling coil gross rated cop',
                                       {'name': u'Cooling Coil Gross Rated COP',
                                        'pyname': u'cooling_coil_gross_rated_cop',
                                        'default': 3.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'heat pump heating coil type',
                                       {'name': u'Heat Pump Heating Coil Type',
                                        'pyname': u'heat_pump_heating_coil_type',
                                        'default': u'SingleSpeedDXHeatPump',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeedDXHeatPump'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump heating coil availability schedule name',
                                       {'name': u'Heat Pump Heating Coil Availability Schedule Name',
                                        'pyname': u'heat_pump_heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat pump heating coil gross rated capacity',
                                       {'name': u'Heat Pump Heating Coil Gross Rated Capacity',
                                        'pyname': u'heat_pump_heating_coil_gross_rated_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'heat pump heating coil gross rated cop',
                                       {'name': u'Heat Pump Heating Coil Gross Rated COP',
                                        'pyname': u'heat_pump_heating_coil_gross_rated_cop',
                                        'default': 2.75,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heat pump heating minimum outdoor dry-bulb temperature',
                                       {'name': u'Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'heat_pump_heating_minimum_outdoor_drybulb_temperature',
                                        'default': -8.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': -20.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'heat pump defrost maximum outdoor dry-bulb temperature',
                                       {'name': u'Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'heat_pump_defrost_maximum_outdoor_drybulb_temperature',
                                        'default': 5.0,
                                        'maximum': 7.22,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'heat pump defrost strategy',
                                       {'name': u'Heat Pump Defrost Strategy',
                                        'pyname': u'heat_pump_defrost_strategy',
                                        'default': u'ReverseCycle',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ReverseCycle',
                                                            u'Resistive'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump defrost control',
                                       {'name': u'Heat Pump Defrost Control',
                                        'pyname': u'heat_pump_defrost_control',
                                        'default': u'Timed',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Timed',
                                                            u'OnDemand'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump defrost time period fraction',
                                       {'name': u'Heat Pump Defrost Time Period Fraction',
                                        'pyname': u'heat_pump_defrost_time_period_fraction',
                                        'default': 0.058333,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'supplemental heating coil type',
                                       {'name': u'Supplemental Heating Coil Type',
                                        'pyname': u'supplemental_heating_coil_type',
                                        'default': u'Electric',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'HotWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supplemental heating coil availability schedule name',
                                       {'name': u'Supplemental Heating Coil Availability Schedule Name',
                                        'pyname': u'supplemental_heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supplemental heating coil capacity',
                                       {'name': u'Supplemental Heating Coil Capacity',
                                        'pyname': u'supplemental_heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'supplemental heating coil maximum outdoor dry-bulb temperature',
                                       {'name': u'Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'supplemental_heating_coil_maximum_outdoor_drybulb_temperature',
                                        'default': 21.0,
                                        'maximum': 21.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supplemental gas heating coil efficiency',
                                       {'name': u'Supplemental Gas Heating Coil Efficiency',
                                        'pyname': u'supplemental_gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supplemental gas heating coil parasitic electric load',
                                       {'name': u'Supplemental Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'supplemental_gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'dedicated outdoor air system name',
                                       {'name': u'Dedicated Outdoor Air System Name',
                                        'pyname': u'dedicated_outdoor_air_system_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 14.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 49,
               'name': u'HVACTemplate:Zone:PTHP',
               'pyname': u'HvactemplateZonePthp',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """field `Cooling Supply Air Flow Rate` Supply air flow rate during
        cooling operation This field may be set to "autosize".  If a value is
        entered, it will be multiplied by the Supply Air Sizing Factor and by
        zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set

        """
        return self["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Cooling Supply Air Flow Rate`"""
        self["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """field `Heating Supply Air Flow Rate` Supply air flow rate during
        heating operation This field may be set to "autosize".  If a value is
        entered, it will be multiplied by the Supply Air Sizing Factor and by
        zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set

        """
        return self["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Heating Supply Air Flow Rate`"""
        self["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """field `No Load Supply Air Flow Rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        A value entered in this field will *not* be multiplied by the sizing factor or
        by zone multipliers.  It is best to autosize or leave blank when using zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `No Load Supply Air Flow Rate`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """Corresponds to IDD field `No Load Supply Air Flow Rate`"""
        self["No Load Supply Air Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """field `Supply Fan Operating Mode Schedule Name` Refers to a schedule
        to specify unitary supply fan operating mode. Schedule values of 0
        indicate cycling fan (auto) Schedule values of 1 indicate continuous
        fan (on) If this field is left blank, a schedule of always zero
        (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `Supply Fan Operating Mode Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set

        """
        return self["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """Corresponds to IDD field `Supply Fan Operating Mode Schedule
        Name`"""
        self["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: SingleSpeedDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """field `Cooling Coil Gross Rated Total Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Total
        Capacity`"""
        self["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `Cooling Coil Gross Rated Sensible Heat Ratio` Rated sensible
        heat ratio (gross sensible capacity/gross total capacity) Sensible and
        total capacities do not include effect of supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """field `Cooling Coil Gross Rated COP` Gross cooling capacity divided
        by power input to the compressor and outdoor fan, does not include
        supply fan heat or supply fan electrical energy input.

        Args:
            value (float): value for IDD Field `Cooling Coil Gross Rated COP`
                Units: W/W
                Default value: 3.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set

        """
        return self["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling Coil Gross Rated COP`"""
        self["Cooling Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """field `Heat Pump Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heat Pump Heating Coil Type`
                Default value: SingleSpeedDXHeatPump

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set

        """
        return self["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(self, value="SingleSpeedDXHeatPump"):
        """Corresponds to IDD field `Heat Pump Heating Coil Type`"""
        self["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_availability_schedule_name(self):
        """field `Heat Pump Heating Coil Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Heat Pump Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heat Pump Heating Coil Availability Schedule Name"]

    @heat_pump_heating_coil_availability_schedule_name.setter
    def heat_pump_heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heat Pump Heating Coil Availability
        Schedule Name`"""
        self["Heat Pump Heating Coil Availability Schedule Name"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """field `Heat Pump Heating Coil Gross Rated Capacity`
        Capacity excluding supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Heat Pump Heating Coil Gross Rated Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set
        """
        return self["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heat Pump Heating Coil Gross Rated
        Capacity`"""
        self["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def heat_pump_heating_coil_gross_rated_cop(self):
        """field `Heat Pump Heating Coil Gross Rated COP`
        Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan,
        Does not include supply air fan heat or supply air fan electrical energy
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `Heat Pump Heating Coil Gross Rated COP`
                Units: W/W
                Default value: 2.75

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_cop` or None if not set
        """
        return self["Heat Pump Heating Coil Gross Rated COP"]

    @heat_pump_heating_coil_gross_rated_cop.setter
    def heat_pump_heating_coil_gross_rated_cop(self, value=2.75):
        """Corresponds to IDD field `Heat Pump Heating Coil Gross Rated COP`"""
        self["Heat Pump Heating Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self):
        """field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`

        Args:
            value (float): value for IDD Field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: -8.0
                value >= -20.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_minimum_outdoor_drybulb_temperature` or None if not set
        """
        return self["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"]

    @heat_pump_heating_minimum_outdoor_drybulb_temperature.setter
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(
            self,
            value=-
            8.0):
        """  Corresponds to IDD field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`

        """
        self["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self):
        """field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`

        Args:
            value (float): value for IDD Field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: 5.0
                value <= 7.22

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_defrost_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"]

    @heat_pump_defrost_maximum_outdoor_drybulb_temperature.setter
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self, value=5.0):
        """  Corresponds to IDD field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`

        """
        self["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_strategy(self):
        """field `Heat Pump Defrost Strategy`

        Args:
            value (str): value for IDD Field `Heat Pump Defrost Strategy`
                Default value: ReverseCycle

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_defrost_strategy` or None if not set

        """
        return self["Heat Pump Defrost Strategy"]

    @heat_pump_defrost_strategy.setter
    def heat_pump_defrost_strategy(self, value="ReverseCycle"):
        """Corresponds to IDD field `Heat Pump Defrost Strategy`"""
        self["Heat Pump Defrost Strategy"] = value

    @property
    def heat_pump_defrost_control(self):
        """field `Heat Pump Defrost Control`

        Args:
            value (str): value for IDD Field `Heat Pump Defrost Control`
                Default value: Timed

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_defrost_control` or None if not set

        """
        return self["Heat Pump Defrost Control"]

    @heat_pump_defrost_control.setter
    def heat_pump_defrost_control(self, value="Timed"):
        """Corresponds to IDD field `Heat Pump Defrost Control`"""
        self["Heat Pump Defrost Control"] = value

    @property
    def heat_pump_defrost_time_period_fraction(self):
        """field `Heat Pump Defrost Time Period Fraction` Fraction of time in
        defrost mode only applicable if Timed defrost control is specified.

        Args:
            value (float): value for IDD Field `Heat Pump Defrost Time Period Fraction`
                Default value: 0.058333

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_defrost_time_period_fraction` or None if not set

        """
        return self["Heat Pump Defrost Time Period Fraction"]

    @heat_pump_defrost_time_period_fraction.setter
    def heat_pump_defrost_time_period_fraction(self, value=0.058333):
        """Corresponds to IDD field `Heat Pump Defrost Time Period Fraction`"""
        self["Heat Pump Defrost Time Period Fraction"] = value

    @property
    def supplemental_heating_coil_type(self):
        """field `Supplemental Heating Coil Type`

        Args:
            value (str): value for IDD Field `Supplemental Heating Coil Type`
                Default value: Electric

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_coil_type` or None if not set

        """
        return self["Supplemental Heating Coil Type"]

    @supplemental_heating_coil_type.setter
    def supplemental_heating_coil_type(self, value="Electric"):
        """Corresponds to IDD field `Supplemental Heating Coil Type`"""
        self["Supplemental Heating Coil Type"] = value

    @property
    def supplemental_heating_coil_availability_schedule_name(self):
        """field `Supplemental Heating Coil Availability Schedule Name` If
        blank, always on.

        Args:
            value (str): value for IDD Field `Supplemental Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_coil_availability_schedule_name` or None if not set

        """
        return self["Supplemental Heating Coil Availability Schedule Name"]

    @supplemental_heating_coil_availability_schedule_name.setter
    def supplemental_heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Supplemental Heating Coil Availability
        Schedule Name`"""
        self["Supplemental Heating Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_coil_capacity(self):
        """field `Supplemental Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Supplemental Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_heating_coil_capacity` or None if not set

        """
        return self["Supplemental Heating Coil Capacity"]

    @supplemental_heating_coil_capacity.setter
    def supplemental_heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Supplemental Heating Coil Capacity`"""
        self["Supplemental Heating Coil Capacity"] = value

    @property
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(self):
        """field `Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature`
        Supplemental heater will not operate when outdoor temperature exceeds this value.

        Args:
            value (float): value for IDD Field `Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: 21.0
                value <= 21.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_heating_coil_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self[
            "Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"]

    @supplemental_heating_coil_maximum_outdoor_drybulb_temperature.setter
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(
            self,
            value=21.0):
        """  Corresponds to IDD field `Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature`

        """
        self[
            "Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def supplemental_gas_heating_coil_efficiency(self):
        """field `Supplemental Gas Heating Coil Efficiency` Applies only if
        Supplemental Heating Coil Type is Gas.

        Args:
            value (float): value for IDD Field `Supplemental Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_gas_heating_coil_efficiency` or None if not set

        """
        return self["Supplemental Gas Heating Coil Efficiency"]

    @supplemental_gas_heating_coil_efficiency.setter
    def supplemental_gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Supplemental Gas Heating Coil
        Efficiency`"""
        self["Supplemental Gas Heating Coil Efficiency"] = value

    @property
    def supplemental_gas_heating_coil_parasitic_electric_load(self):
        """field `Supplemental Gas Heating Coil Parasitic Electric Load`
        Applies only if Supplemental Heating Coil Type is Gas.

        Args:
            value (float): value for IDD Field `Supplemental Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Supplemental Gas Heating Coil Parasitic Electric Load"]

    @supplemental_gas_heating_coil_parasitic_electric_load.setter
    def supplemental_gas_heating_coil_parasitic_electric_load(
            self,
            value=None):
        """Corresponds to IDD field `Supplemental Gas Heating Coil Parasitic
        Electric Load`"""
        self["Supplemental Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """field `Dedicated Outdoor Air System Name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `Dedicated Outdoor Air System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """Corresponds to IDD field `Dedicated Outdoor Air System Name`"""
        self["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 14.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value




class HvactemplateZoneWaterToAirHeatPump(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:WaterToAirHeatPump`
        Water to Air Heat Pump to be used with HVACTemplate:Plant:MixedWaterLoop
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling supply air flow rate',
                                       {'name': u'Cooling Supply Air Flow Rate',
                                        'pyname': u'cooling_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'heating supply air flow rate',
                                       {'name': u'Heating Supply Air Flow Rate',
                                        'pyname': u'heating_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'no load supply air flow rate',
                                       {'name': u'No Load Supply Air Flow Rate',
                                        'pyname': u'no_load_supply_air_flow_rate',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan operating mode schedule name',
                                       {'name': u'Supply Fan Operating Mode Schedule Name',
                                        'pyname': u'supply_fan_operating_mode_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 75.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'Coil:Cooling:WaterToAirHeatPump:EquationFit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Coil:Cooling:WaterToAirHeatPump:EquationFit'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil gross rated total capacity',
                                       {'name': u'Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'cooling coil gross rated sensible heat ratio',
                                       {'name': u'Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'cooling coil gross rated cop',
                                       {'name': u'Cooling Coil Gross Rated COP',
                                        'pyname': u'cooling_coil_gross_rated_cop',
                                        'default': 3.5,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'heat pump heating coil type',
                                       {'name': u'Heat Pump Heating Coil Type',
                                        'pyname': u'heat_pump_heating_coil_type',
                                        'default': u'Coil:Heating:WaterToAirHeatPump:EquationFit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Coil:Heating:WaterToAirHeatPump:EquationFit'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump heating coil gross rated capacity',
                                       {'name': u'Heat Pump Heating Coil Gross Rated Capacity',
                                        'pyname': u'heat_pump_heating_coil_gross_rated_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'heat pump heating coil gross rated cop',
                                       {'name': u'Heat Pump Heating Coil Gross Rated COP',
                                        'pyname': u'heat_pump_heating_coil_gross_rated_cop',
                                        'default': 4.2,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'supplemental heating coil availability schedule name',
                                       {'name': u'Supplemental Heating Coil Availability Schedule Name',
                                        'pyname': u'supplemental_heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supplemental heating coil capacity',
                                       {'name': u'Supplemental Heating Coil Capacity',
                                        'pyname': u'supplemental_heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum cycling rate',
                                       {'name': u'Maximum Cycling Rate',
                                        'pyname': u'maximum_cycling_rate',
                                        'default': 2.5,
                                        'maximum': 5.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'cycles/hr'}),
                                      (u'heat pump time constant',
                                       {'name': u'Heat Pump Time Constant',
                                        'pyname': u'heat_pump_time_constant',
                                        'default': 60.0,
                                        'maximum': 500.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u's'}),
                                      (u'fraction of on-cycle power use',
                                       {'name': u'Fraction of On-Cycle Power Use',
                                        'pyname': u'fraction_of_oncycle_power_use',
                                        'default': 0.01,
                                        'maximum': 0.05,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'heat pump fan delay time',
                                       {'name': u'Heat Pump Fan Delay Time',
                                        'pyname': u'heat_pump_fan_delay_time',
                                        'default': 60.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u's'}),
                                      (u'dedicated outdoor air system name',
                                       {'name': u'Dedicated Outdoor Air System Name',
                                        'pyname': u'dedicated_outdoor_air_system_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supplemental heating coil type',
                                       {'name': u'Supplemental Heating Coil Type',
                                        'pyname': u'supplemental_heating_coil_type',
                                        'default': u'Electric',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'HotWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 14.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'heat pump coil water flow mode',
                                       {'name': u'Heat Pump Coil Water Flow Mode',
                                        'pyname': u'heat_pump_coil_water_flow_mode',
                                        'default': u'Cycling',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Constant',
                                                            u'Cycling',
                                                            u'ConstantOnDemand'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 44,
               'name': u'HVACTemplate:Zone:WaterToAirHeatPump',
               'pyname': u'HvactemplateZoneWaterToAirHeatPump',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """field `Cooling Supply Air Flow Rate` Supply air flow rate during
        cooling operation This field may be set to "autosize".  If a value is
        entered, it will be multiplied by the Supply Air Sizing Factor and by
        zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set

        """
        return self["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Cooling Supply Air Flow Rate`"""
        self["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """field `Heating Supply Air Flow Rate` Supply air flow rate during
        heating operation This field may be set to "autosize".  If a value is
        entered, it will be multiplied by the Supply Air Sizing Factor and by
        zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set

        """
        return self["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Heating Supply Air Flow Rate`"""
        self["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """field `No Load Supply Air Flow Rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is continuous. This air flow rate
        is used when no heating or cooling is required.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        A value entered in this field will *not* be multiplied by the sizing factor or
        by zone multipliers.  It is best to autosize or leave blank when using zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `No Load Supply Air Flow Rate`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value=None):
        """Corresponds to IDD field `No Load Supply Air Flow Rate`"""
        self["No Load Supply Air Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """field `Supply Fan Operating Mode Schedule Name` Refers to a schedule
        to specify unitary supply fan operating mode. Schedule values of 0
        indicate cycling fan (auto) Schedule values of 1 indicate continuous
        fan (on) If this field is left blank, a schedule of always zero
        (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `Supply Fan Operating Mode Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set

        """
        return self["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """Corresponds to IDD field `Supply Fan Operating Mode Schedule
        Name`"""
        self["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: Coil:Cooling:WaterToAirHeatPump:EquationFit

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(
            self,
            value="Coil:Cooling:WaterToAirHeatPump:EquationFit"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """field `Cooling Coil Gross Rated Total Capacity` Total cooling
        capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set

        """
        return self["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Total
        Capacity`"""
        self["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `Cooling Coil Gross Rated Sensible Heat Ratio` Rated sensible
        heat ratio (gross sensible capacity/gross total capacity) Sensible and
        total capacities do not include effect of supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """field `Cooling Coil Gross Rated COP` Gross cooling capacity divided
        by power input to the compressor and outdoor fan, does not include
        supply fan heat or supply fan electric power input.

        Args:
            value (float): value for IDD Field `Cooling Coil Gross Rated COP`
                Units: W/W
                Default value: 3.5

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set

        """
        return self["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.5):
        """Corresponds to IDD field `Cooling Coil Gross Rated COP`"""
        self["Cooling Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """field `Heat Pump Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heat Pump Heating Coil Type`
                Default value: Coil:Heating:WaterToAirHeatPump:EquationFit

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set

        """
        return self["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(
            self,
            value="Coil:Heating:WaterToAirHeatPump:EquationFit"):
        """Corresponds to IDD field `Heat Pump Heating Coil Type`"""
        self["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """field `Heat Pump Heating Coil Gross Rated Capacity` Capacity
        excluding supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Heat Pump Heating Coil Gross Rated Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set

        """
        return self["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heat Pump Heating Coil Gross Rated
        Capacity`"""
        self["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def heat_pump_heating_coil_gross_rated_cop(self):
        """field `Heat Pump Heating Coil Gross Rated COP` Heat Pump Heating
        Coil Rated Capacity divided by power input to the compressor and
        outdoor fan, does not include supply air fan heat or supply air fan
        electric power input.

        Args:
            value (float): value for IDD Field `Heat Pump Heating Coil Gross Rated COP`
                Units: W/W
                Default value: 4.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_cop` or None if not set

        """
        return self["Heat Pump Heating Coil Gross Rated COP"]

    @heat_pump_heating_coil_gross_rated_cop.setter
    def heat_pump_heating_coil_gross_rated_cop(self, value=4.2):
        """Corresponds to IDD field `Heat Pump Heating Coil Gross Rated COP`"""
        self["Heat Pump Heating Coil Gross Rated COP"] = value

    @property
    def supplemental_heating_coil_availability_schedule_name(self):
        """field `Supplemental Heating Coil Availability Schedule Name` If
        blank, always on.

        Args:
            value (str): value for IDD Field `Supplemental Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_coil_availability_schedule_name` or None if not set

        """
        return self["Supplemental Heating Coil Availability Schedule Name"]

    @supplemental_heating_coil_availability_schedule_name.setter
    def supplemental_heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Supplemental Heating Coil Availability
        Schedule Name`"""
        self["Supplemental Heating Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_coil_capacity(self):
        """field `Supplemental Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Supplemental Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_heating_coil_capacity` or None if not set

        """
        return self["Supplemental Heating Coil Capacity"]

    @supplemental_heating_coil_capacity.setter
    def supplemental_heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Supplemental Heating Coil Capacity`"""
        self["Supplemental Heating Coil Capacity"] = value

    @property
    def maximum_cycling_rate(self):
        """field `Maximum Cycling Rate`
        The maximum on-off cycling rate for the compressor
        Suggested value is 2.5 for a typical heat pump

        Args:
            value (float): value for IDD Field `Maximum Cycling Rate`
                Units: cycles/hr
                Default value: 2.5
                value <= 5.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_cycling_rate` or None if not set
        """
        return self["Maximum Cycling Rate"]

    @maximum_cycling_rate.setter
    def maximum_cycling_rate(self, value=2.5):
        """Corresponds to IDD field `Maximum Cycling Rate`"""
        self["Maximum Cycling Rate"] = value

    @property
    def heat_pump_time_constant(self):
        """field `Heat Pump Time Constant` Time constant for the cooling coil's
        capacity to reach steady state after startup Suggested value is 60 for
        a typical heat pump.

        Args:
            value (float): value for IDD Field `Heat Pump Time Constant`
                Units: s
                Default value: 60.0
                value <= 500.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_time_constant` or None if not set

        """
        return self["Heat Pump Time Constant"]

    @heat_pump_time_constant.setter
    def heat_pump_time_constant(self, value=60.0):
        """Corresponds to IDD field `Heat Pump Time Constant`"""
        self["Heat Pump Time Constant"] = value

    @property
    def fraction_of_oncycle_power_use(self):
        """field `Fraction of On-Cycle Power Use`
        The fraction of on-cycle power use to adjust the part load fraction based on
        the off-cycle power consumption due to crankcase heaters, controls, fans, and etc.
        Suggested value is 0.01 for a typical heat pump

        Args:
            value (float): value for IDD Field `Fraction of On-Cycle Power Use`
                Default value: 0.01
                value <= 0.05

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `fraction_of_oncycle_power_use` or None if not set
        """
        return self["Fraction of On-Cycle Power Use"]

    @fraction_of_oncycle_power_use.setter
    def fraction_of_oncycle_power_use(self, value=0.01):
        """  Corresponds to IDD field `Fraction of On-Cycle Power Use`

        """
        self["Fraction of On-Cycle Power Use"] = value

    @property
    def heat_pump_fan_delay_time(self):
        """field `Heat Pump Fan Delay Time` Programmed time delay for heat pump
        fan to shut off after compressor cycle off. Only required when fan
        operating mode is cycling Enter 0 when fan operating mode is
        continuous.

        Args:
            value (float): value for IDD Field `Heat Pump Fan Delay Time`
                Units: s
                Default value: 60.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_fan_delay_time` or None if not set

        """
        return self["Heat Pump Fan Delay Time"]

    @heat_pump_fan_delay_time.setter
    def heat_pump_fan_delay_time(self, value=60.0):
        """Corresponds to IDD field `Heat Pump Fan Delay Time`"""
        self["Heat Pump Fan Delay Time"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """field `Dedicated Outdoor Air System Name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `Dedicated Outdoor Air System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """Corresponds to IDD field `Dedicated Outdoor Air System Name`"""
        self["Dedicated Outdoor Air System Name"] = value

    @property
    def supplemental_heating_coil_type(self):
        """field `Supplemental Heating Coil Type`

        Args:
            value (str): value for IDD Field `Supplemental Heating Coil Type`
                Default value: Electric

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_coil_type` or None if not set

        """
        return self["Supplemental Heating Coil Type"]

    @supplemental_heating_coil_type.setter
    def supplemental_heating_coil_type(self, value="Electric"):
        """Corresponds to IDD field `Supplemental Heating Coil Type`"""
        self["Supplemental Heating Coil Type"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 14.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def heat_pump_coil_water_flow_mode(self):
        """field `Heat Pump Coil Water Flow Mode`
        used only when the heat pump coils are of the type WaterToAirHeatPump:EquationFit
        Constant results in 100% water flow regardless of compressor PLR
        Cycling results in water flow that matches compressor PLR
        ConstantOnDemand results in 100% water flow whenever the coil is on, but is 0% whenever the coil has no load

        Args:
            value (str): value for IDD Field `Heat Pump Coil Water Flow Mode`
                Default value: Cycling

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_coil_water_flow_mode` or None if not set
        """
        return self["Heat Pump Coil Water Flow Mode"]

    @heat_pump_coil_water_flow_mode.setter
    def heat_pump_coil_water_flow_mode(self, value="Cycling"):
        """Corresponds to IDD field `Heat Pump Coil Water Flow Mode`"""
        self["Heat Pump Coil Water Flow Mode"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value




class HvactemplateZoneVrf(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:VRF`
        Zone terminal unit with variable refrigerant flow (VRF) DX cooling and heating coils
        (air-to-air or water-to-air heat pump). The VRF terminal units are served by an
        HVACTemplate:System:VRF system.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template vrf system name',
                                       {'name': u'Template VRF System Name',
                                        'pyname': u'template_vrf_system_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'rated total heating capacity sizing ratio',
                                       {'name': u'Rated Total Heating Capacity Sizing Ratio',
                                        'pyname': u'rated_total_heating_capacity_sizing_ratio',
                                        'default': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 1.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'supply air flow rate during cooling operation',
                                       {'name': u'Supply Air Flow Rate During Cooling Operation',
                                        'pyname': u'supply_air_flow_rate_during_cooling_operation',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'supply air flow rate when no cooling is needed',
                                       {'name': u'Supply Air Flow Rate When No Cooling is Needed',
                                        'pyname': u'supply_air_flow_rate_when_no_cooling_is_needed',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'supply air flow rate during heating operation',
                                       {'name': u'Supply Air Flow Rate During Heating Operation',
                                        'pyname': u'supply_air_flow_rate_during_heating_operation',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'supply air flow rate when no heating is needed',
                                       {'name': u'Supply Air Flow Rate When No Heating is Needed',
                                        'pyname': u'supply_air_flow_rate_when_no_heating_is_needed',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate during cooling operation',
                                       {'name': u'Outdoor Air Flow Rate During Cooling Operation',
                                        'pyname': u'outdoor_air_flow_rate_during_cooling_operation',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate during heating operation',
                                       {'name': u'Outdoor Air Flow Rate During Heating Operation',
                                        'pyname': u'outdoor_air_flow_rate_during_heating_operation',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate when no cooling or heating is needed',
                                       {'name': u'Outdoor Air Flow Rate When No Cooling or Heating is Needed',
                                        'pyname': u'outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan operating mode schedule name',
                                       {'name': u'Supply Fan Operating Mode Schedule Name',
                                        'pyname': u'supply_fan_operating_mode_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply air fan placement',
                                       {'name': u'Supply Air Fan placement',
                                        'pyname': u'supply_air_fan_placement',
                                        'default': u'BlowThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 75.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'VariableRefrigerantFlowDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'VariableRefrigerantFlowDX',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil gross rated total capacity',
                                       {'name': u'Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'cooling coil gross rated sensible heat ratio',
                                       {'name': u'Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'heat pump heating coil type',
                                       {'name': u'Heat Pump Heating Coil Type',
                                        'pyname': u'heat_pump_heating_coil_type',
                                        'default': u'VariableRefrigerantFlowDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'VariableRefrigerantFlowDX',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump heating coil availability schedule name',
                                       {'name': u'Heat Pump Heating Coil Availability Schedule Name',
                                        'pyname': u'heat_pump_heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat pump heating coil gross rated capacity',
                                       {'name': u'Heat Pump Heating Coil Gross Rated Capacity',
                                        'pyname': u'heat_pump_heating_coil_gross_rated_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'zone terminal unit on parasitic electric energy use',
                                       {'name': u'Zone Terminal Unit On Parasitic Electric Energy Use',
                                        'pyname': u'zone_terminal_unit_on_parasitic_electric_energy_use',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'zone terminal unit off parasitic electric energy use',
                                       {'name': u'Zone Terminal Unit Off Parasitic Electric Energy Use',
                                        'pyname': u'zone_terminal_unit_off_parasitic_electric_energy_use',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'dedicated outdoor air system name',
                                       {'name': u'Dedicated Outdoor Air System Name',
                                        'pyname': u'dedicated_outdoor_air_system_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 14.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 44,
               'name': u'HVACTemplate:Zone:VRF',
               'pyname': u'HvactemplateZoneVrf',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_vrf_system_name(self):
        """field `Template VRF System Name`
        Name of a HVACTemplate:System:VRF object serving this zone

        Args:
            value (str): value for IDD Field `Template VRF System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_vrf_system_name` or None if not set
        """
        return self["Template VRF System Name"]

    @template_vrf_system_name.setter
    def template_vrf_system_name(self, value=None):
        """Corresponds to IDD field `Template VRF System Name`"""
        self["Template VRF System Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def rated_total_heating_capacity_sizing_ratio(self):
        """field `Rated Total Heating Capacity Sizing Ratio`
        If this terminal unit's heating coil is autosized, the heating capacity is sized
        to be equal to the cooling capacity multiplied by this sizing ratio.
        This input applies to the terminal unit heating coil and overrides the sizing
        ratio entered in the HVACTemplate:System:VRF object.

        Args:
            value (float): value for IDD Field `Rated Total Heating Capacity Sizing Ratio`
                Units: W/W
                Default value: 1.0
                value >= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `rated_total_heating_capacity_sizing_ratio` or None if not set
        """
        return self["Rated Total Heating Capacity Sizing Ratio"]

    @rated_total_heating_capacity_sizing_ratio.setter
    def rated_total_heating_capacity_sizing_ratio(self, value=1.0):
        """Corresponds to IDD field `Rated Total Heating Capacity Sizing
        Ratio`"""
        self["Rated Total Heating Capacity Sizing Ratio"] = value

    @property
    def supply_air_flow_rate_during_cooling_operation(self):
        """field `Supply Air Flow Rate During Cooling Operation` This field may
        be set to "autosize".  If a value is entered, it will be multiplied by
        the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Flow Rate During Cooling Operation`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_flow_rate_during_cooling_operation` or None if not set

        """
        return self["Supply Air Flow Rate During Cooling Operation"]

    @supply_air_flow_rate_during_cooling_operation.setter
    def supply_air_flow_rate_during_cooling_operation(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Flow Rate During Cooling
        Operation`"""
        self["Supply Air Flow Rate During Cooling Operation"] = value

    @property
    def supply_air_flow_rate_when_no_cooling_is_needed(self):
        """field `Supply Air Flow Rate When No Cooling is Needed` This flow
        rate is used when the terminal is not cooling and the previous mode was
        cooling. This field may be set to "autosize".  If a value is entered,
        it will be multiplied by the Supply Air Sizing Factor and by zone
        multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Flow Rate When No Cooling is Needed`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_flow_rate_when_no_cooling_is_needed` or None if not set

        """
        return self["Supply Air Flow Rate When No Cooling is Needed"]

    @supply_air_flow_rate_when_no_cooling_is_needed.setter
    def supply_air_flow_rate_when_no_cooling_is_needed(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Flow Rate When No Cooling is
        Needed`"""
        self["Supply Air Flow Rate When No Cooling is Needed"] = value

    @property
    def supply_air_flow_rate_during_heating_operation(self):
        """field `Supply Air Flow Rate During Heating Operation` This field may
        be set to "autosize".  If a value is entered, it will be multiplied by
        the Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Flow Rate During Heating Operation`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_flow_rate_during_heating_operation` or None if not set

        """
        return self["Supply Air Flow Rate During Heating Operation"]

    @supply_air_flow_rate_during_heating_operation.setter
    def supply_air_flow_rate_during_heating_operation(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Flow Rate During Heating
        Operation`"""
        self["Supply Air Flow Rate During Heating Operation"] = value

    @property
    def supply_air_flow_rate_when_no_heating_is_needed(self):
        """field `Supply Air Flow Rate When No Heating is Needed` This flow
        rate is used when the terminal is not heating and the previous mode was
        heating. This field may be set to "autosize".  If a value is entered,
        it will be multiplied by the Supply Air Sizing Factor and by zone
        multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Flow Rate When No Heating is Needed`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_flow_rate_when_no_heating_is_needed` or None if not set

        """
        return self["Supply Air Flow Rate When No Heating is Needed"]

    @supply_air_flow_rate_when_no_heating_is_needed.setter
    def supply_air_flow_rate_when_no_heating_is_needed(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Flow Rate When No Heating is
        Needed`"""
        self["Supply Air Flow Rate When No Heating is Needed"] = value

    @property
    def outdoor_air_flow_rate_during_cooling_operation(self):
        """field `Outdoor Air Flow Rate During Cooling Operation` If this field
        is set to autosize it will be sized based on the outdoor air inputs
        below, unless a dedicated outdoor air system is specified for this zone
        and then it will be set to zero.

        Args:
            value (float or "Autosize"): value for IDD Field `Outdoor Air Flow Rate During Cooling Operation`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_during_cooling_operation` or None if not set

        """
        return self["Outdoor Air Flow Rate During Cooling Operation"]

    @outdoor_air_flow_rate_during_cooling_operation.setter
    def outdoor_air_flow_rate_during_cooling_operation(self, value="autosize"):
        """Corresponds to IDD field `Outdoor Air Flow Rate During Cooling
        Operation`"""
        self["Outdoor Air Flow Rate During Cooling Operation"] = value

    @property
    def outdoor_air_flow_rate_during_heating_operation(self):
        """field `Outdoor Air Flow Rate During Heating Operation` If this field
        is set to autosize it will be sized based on the outdoor air inputs
        below, unless a dedicated outdoor air system is specified for this zone
        and then it will be set to zero.

        Args:
            value (float or "Autosize"): value for IDD Field `Outdoor Air Flow Rate During Heating Operation`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_during_heating_operation` or None if not set

        """
        return self["Outdoor Air Flow Rate During Heating Operation"]

    @outdoor_air_flow_rate_during_heating_operation.setter
    def outdoor_air_flow_rate_during_heating_operation(self, value="autosize"):
        """Corresponds to IDD field `Outdoor Air Flow Rate During Heating
        Operation`"""
        self["Outdoor Air Flow Rate During Heating Operation"] = value

    @property
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(self):
        """field `Outdoor Air Flow Rate When No Cooling or Heating is Needed`
        If this field is set to autosize it will be sized based on the outdoor
        air inputs below, unless a dedicated outdoor air system is specified
        for this zone and then it will be set to zero.

        Args:
            value (float or "Autosize"): value for IDD Field `Outdoor Air Flow Rate When No Cooling or Heating is Needed`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed` or None if not set

        """
        return self[
            "Outdoor Air Flow Rate When No Cooling or Heating is Needed"]

    @outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed.setter
    def outdoor_air_flow_rate_when_no_cooling_or_heating_is_needed(
            self,
            value="autosize"):
        """Corresponds to IDD field `Outdoor Air Flow Rate When No Cooling or
        Heating is Needed`"""
        self[
            "Outdoor Air Flow Rate When No Cooling or Heating is Needed"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """field `Supply Fan Operating Mode Schedule Name` Refers to a schedule
        to specify unitary supply fan operating mode. Schedule values of 0
        indicate cycling fan (auto) Schedule values of 1 indicate continuous
        fan (on) If this field is left blank, a schedule of always zero
        (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `Supply Fan Operating Mode Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set

        """
        return self["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """Corresponds to IDD field `Supply Fan Operating Mode Schedule
        Name`"""
        self["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_air_fan_placement(self):
        """field `Supply Air Fan placement` Select fan placement as either blow
        through or draw through.

        Args:
            value (str): value for IDD Field `Supply Air Fan placement`
                Default value: BlowThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_air_fan_placement` or None if not set

        """
        return self["Supply Air Fan placement"]

    @supply_air_fan_placement.setter
    def supply_air_fan_placement(self, value="BlowThrough"):
        """Corresponds to IDD field `Supply Air Fan placement`"""
        self["Supply Air Fan placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 75.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=75.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: VariableRefrigerantFlowDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="VariableRefrigerantFlowDX"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """field `Cooling Coil Gross Rated Total Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Total
        Capacity`"""
        self["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `Cooling Coil Gross Rated Sensible Heat Ratio` Rated sensible
        heat ratio (gross sensible capacity/gross total capacity) Sensible and
        total capacities do not include effect of supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """field `Heat Pump Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heat Pump Heating Coil Type`
                Default value: VariableRefrigerantFlowDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set

        """
        return self["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(self, value="VariableRefrigerantFlowDX"):
        """Corresponds to IDD field `Heat Pump Heating Coil Type`"""
        self["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_availability_schedule_name(self):
        """field `Heat Pump Heating Coil Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Heat Pump Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heat Pump Heating Coil Availability Schedule Name"]

    @heat_pump_heating_coil_availability_schedule_name.setter
    def heat_pump_heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heat Pump Heating Coil Availability
        Schedule Name`"""
        self["Heat Pump Heating Coil Availability Schedule Name"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """field `Heat Pump Heating Coil Gross Rated Capacity`
        Capacity excluding supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Heat Pump Heating Coil Gross Rated Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set
        """
        return self["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heat Pump Heating Coil Gross Rated
        Capacity`"""
        self["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def zone_terminal_unit_on_parasitic_electric_energy_use(self):
        """field `Zone Terminal Unit On Parasitic Electric Energy Use`

        Args:
            value (float): value for IDD Field `Zone Terminal Unit On Parasitic Electric Energy Use`
                Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_terminal_unit_on_parasitic_electric_energy_use` or None if not set

        """
        return self["Zone Terminal Unit On Parasitic Electric Energy Use"]

    @zone_terminal_unit_on_parasitic_electric_energy_use.setter
    def zone_terminal_unit_on_parasitic_electric_energy_use(self, value=None):
        """Corresponds to IDD field `Zone Terminal Unit On Parasitic Electric
        Energy Use`"""
        self["Zone Terminal Unit On Parasitic Electric Energy Use"] = value

    @property
    def zone_terminal_unit_off_parasitic_electric_energy_use(self):
        """field `Zone Terminal Unit Off Parasitic Electric Energy Use`

        Args:
            value (float): value for IDD Field `Zone Terminal Unit Off Parasitic Electric Energy Use`
                Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_terminal_unit_off_parasitic_electric_energy_use` or None if not set

        """
        return self["Zone Terminal Unit Off Parasitic Electric Energy Use"]

    @zone_terminal_unit_off_parasitic_electric_energy_use.setter
    def zone_terminal_unit_off_parasitic_electric_energy_use(self, value=None):
        """Corresponds to IDD field `Zone Terminal Unit Off Parasitic Electric
        Energy Use`"""
        self["Zone Terminal Unit Off Parasitic Electric Energy Use"] = value

    @property
    def dedicated_outdoor_air_system_name(self):
        """field `Dedicated Outdoor Air System Name`
        Enter the name of an HVACTemplate:System:DedicatedOutdoorAir object if this
        zone is served by a separate dedicated outdoor air system (DOAS).
        Leave field blank if no DOAS serves this zone.

        Args:
            value (str): value for IDD Field `Dedicated Outdoor Air System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dedicated_outdoor_air_system_name` or None if not set
        """
        return self["Dedicated Outdoor Air System Name"]

    @dedicated_outdoor_air_system_name.setter
    def dedicated_outdoor_air_system_name(self, value=None):
        """Corresponds to IDD field `Dedicated Outdoor Air System Name`"""
        self["Dedicated Outdoor Air System Name"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 14.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=14.0):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value




class HvactemplateZoneUnitary(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:Unitary`
        Zone terminal unit, constant volume, no controls.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template unitary system name',
                                       {'name': u'Template Unitary System Name',
                                        'pyname': u'template_unitary_system_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply air maximum flow rate',
                                       {'name': u'Supply Air Maximum Flow Rate',
                                        'pyname': u'supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 21,
               'name': u'HVACTemplate:Zone:Unitary',
               'pyname': u'HvactemplateZoneUnitary',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_unitary_system_name(self):
        """field `Template Unitary System Name`
        Enter the name of an HVACTemplate:System:Unitary, HVACTemplate:System:UnitaryHeatPump:AirTtoAir,
        or HVACTemplate:System:UnitarySystem object serving this zone.

        Args:
            value (str): value for IDD Field `Template Unitary System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_unitary_system_name` or None if not set
        """
        return self["Template Unitary System Name"]

    @template_unitary_system_name.setter
    def template_unitary_system_name(self, value=None):
        """Corresponds to IDD field `Template Unitary System Name`"""
        self["Template Unitary System Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """field `Supply Air Maximum Flow Rate` This field may be set to
        "autosize".  If a value is entered, it will be multiplied by the Supply
        Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set

        """
        return self["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Maximum Flow Rate`"""
        self["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir
        Cooling Design Supply Air Temperature

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:Unitary or HVACTemplate:System:UnitaryHeatPump:AirToAir
        Heating Design Supply Air Temperature

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value




class HvactemplateZoneVav(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:VAV`
        Zone terminal unit, variable volume, reheat optional.
        For heating, this unit activates reheat coil first, then increases airflow (if reverse
        action specified).
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template vav system name',
                                       {'name': u'Template VAV System Name',
                                        'pyname': u'template_vav_system_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply air maximum flow rate',
                                       {'name': u'Supply Air Maximum Flow Rate',
                                        'pyname': u'supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone minimum air flow input method',
                                       {'name': u'Zone Minimum Air Flow Input Method',
                                        'pyname': u'zone_minimum_air_flow_input_method',
                                        'default': u'Constant',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Constant',
                                                            u'FixedFlowRate',
                                                            u'Scheduled'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'constant minimum air flow fraction',
                                       {'name': u'Constant Minimum Air Flow Fraction',
                                        'pyname': u'constant_minimum_air_flow_fraction',
                                        'default': 0.2,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'fixed minimum air flow rate',
                                       {'name': u'Fixed Minimum Air Flow Rate',
                                        'pyname': u'fixed_minimum_air_flow_rate',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum air flow fraction schedule name',
                                       {'name': u'Minimum Air Flow Fraction Schedule Name',
                                        'pyname': u'minimum_air_flow_fraction_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'reheat coil type',
                                       {'name': u'Reheat Coil Type',
                                        'pyname': u'reheat_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'reheat coil availability schedule name',
                                       {'name': u'Reheat Coil Availability Schedule Name',
                                        'pyname': u'reheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'damper heating action',
                                       {'name': u'Damper Heating Action',
                                        'pyname': u'damper_heating_action',
                                        'default': u'Reverse',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Normal',
                                                            u'Reverse'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'maximum flow per zone floor area during reheat',
                                       {'name': u'Maximum Flow per Zone Floor Area During Reheat',
                                        'pyname': u'maximum_flow_per_zone_floor_area_during_reheat',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': True,
                                        'type': u'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'maximum flow fraction during reheat',
                                       {'name': u'Maximum Flow Fraction During Reheat',
                                        'pyname': u'maximum_flow_fraction_during_reheat',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': True,
                                        'type': u'real'}),
                                      (u'maximum reheat air temperature',
                                       {'name': u'Maximum Reheat Air Temperature',
                                        'pyname': u'maximum_reheat_air_temperature',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'design specification outdoor air object name for control',
                                       {'name': u'Design Specification Outdoor Air Object Name for Control',
                                        'pyname': u'design_specification_outdoor_air_object_name_for_control',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'design specification outdoor air object name for sizing',
                                       {'name': u'Design Specification Outdoor Air Object Name for Sizing',
                                        'pyname': u'design_specification_outdoor_air_object_name_for_sizing',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 32,
               'name': u'HVACTemplate:Zone:VAV',
               'pyname': u'HvactemplateZoneVav',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_vav_system_name(self):
        """field `Template VAV System Name`
        Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV
        object serving this zone

        Args:
            value (str): value for IDD Field `Template VAV System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_vav_system_name` or None if not set
        """
        return self["Template VAV System Name"]

    @template_vav_system_name.setter
    def template_vav_system_name(self, value=None):
        """Corresponds to IDD field `Template VAV System Name`"""
        self["Template VAV System Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """field `Supply Air Maximum Flow Rate` This field may be set to
        "autosize".  If a value is entered, it will be multiplied by the Supply
        Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set

        """
        return self["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Maximum Flow Rate`"""
        self["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def zone_minimum_air_flow_input_method(self):
        """field `Zone Minimum Air Flow Input Method`
        Constant = Constant Minimum Air Flow Fraction (a fraction of Maximum Air Flow Rate)
        FixedFlowRate = Fixed Minimum Air Flow Rate (a fixed minimum air volume flow rate)
        Scheduled = Scheduled Minimum Air Flow Fraction (a fraction of Maximum Air Flow

        Args:
            value (str): value for IDD Field `Zone Minimum Air Flow Input Method`
                Default value: Constant

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_minimum_air_flow_input_method` or None if not set
        """
        return self["Zone Minimum Air Flow Input Method"]

    @zone_minimum_air_flow_input_method.setter
    def zone_minimum_air_flow_input_method(self, value="Constant"):
        """Corresponds to IDD field `Zone Minimum Air Flow Input Method`"""
        self["Zone Minimum Air Flow Input Method"] = value

    @property
    def constant_minimum_air_flow_fraction(self):
        """field `Constant Minimum Air Flow Fraction`
        This field is used if the field Zone Minimum Air Flow Input Method is Constant
        If the field Zone Minimum Air Flow Input Method is Scheduled, then this field
        is optional. If a value is entered, then it is used for sizing normal-action reheat coils.
        If both this field and the following field are entered, the larger result is used.

        Args:
            value (float): value for IDD Field `Constant Minimum Air Flow Fraction`
                Default value: 0.2
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `constant_minimum_air_flow_fraction` or None if not set
        """
        return self["Constant Minimum Air Flow Fraction"]

    @constant_minimum_air_flow_fraction.setter
    def constant_minimum_air_flow_fraction(self, value=0.2):
        """Corresponds to IDD field `Constant Minimum Air Flow Fraction`"""
        self["Constant Minimum Air Flow Fraction"] = value

    @property
    def fixed_minimum_air_flow_rate(self):
        """field `Fixed Minimum Air Flow Rate`
        This field is used if the field Zone Minimum Air Flow Input Method is FixedFlowRate.
        If the field Zone Minimum Air Flow Input Method is Scheduled, then this field
        is optional. If a value is entered, then it is used for sizing normal-action reheat coils.
        If both this field and the previous field are entered, the larger result is used.

        Args:
            value (float): value for IDD Field `Fixed Minimum Air Flow Rate`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `fixed_minimum_air_flow_rate` or None if not set
        """
        return self["Fixed Minimum Air Flow Rate"]

    @fixed_minimum_air_flow_rate.setter
    def fixed_minimum_air_flow_rate(self, value=None):
        """Corresponds to IDD field `Fixed Minimum Air Flow Rate`"""
        self["Fixed Minimum Air Flow Rate"] = value

    @property
    def minimum_air_flow_fraction_schedule_name(self):
        """field `Minimum Air Flow Fraction Schedule Name`
        This field is used if the field Zone Minimum Air Flow Input Method is Scheduled
        Schedule values are fractions, 0.0 to 1.0.
        If the field Constant Minimum Air Flow Fraction is blank, then the average of the
        minimum and maximum schedule values is used for sizing normal-action reheat coils.

        Args:
            value (str): value for IDD Field `Minimum Air Flow Fraction Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_air_flow_fraction_schedule_name` or None if not set
        """
        return self["Minimum Air Flow Fraction Schedule Name"]

    @minimum_air_flow_fraction_schedule_name.setter
    def minimum_air_flow_fraction_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Air Flow Fraction Schedule
        Name`"""
        self["Minimum Air Flow Fraction Schedule Name"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def reheat_coil_type(self):
        """field `Reheat Coil Type`

        Args:
            value (str): value for IDD Field `Reheat Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_type` or None if not set

        """
        return self["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="None"):
        """Corresponds to IDD field `Reheat Coil Type`"""
        self["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """field `Reheat Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Reheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set

        """
        return self["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Reheat Coil Availability Schedule Name`"""
        self["Reheat Coil Availability Schedule Name"] = value

    @property
    def damper_heating_action(self):
        """field `Damper Heating Action`

        Args:
            value (str): value for IDD Field `Damper Heating Action`
                Default value: Reverse

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `damper_heating_action` or None if not set

        """
        return self["Damper Heating Action"]

    @damper_heating_action.setter
    def damper_heating_action(self, value="Reverse"):
        """Corresponds to IDD field `Damper Heating Action`"""
        self["Damper Heating Action"] = value

    @property
    def maximum_flow_per_zone_floor_area_during_reheat(self):
        """field `Maximum Flow per Zone Floor Area During Reheat`
        Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse
        When autocalculating, the maximum flow per zone is set to 0.002032 m3/s-m2 (0.4 cfm/sqft)
        This optional field limits the maximum flow allowed in reheat mode.
        If this field and the following field are left blank, the maximum flow will not be limited.
        At no time will the maximum flow rate calculated here exceed the value of
        Maximum Air Flow Rate.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Maximum Flow per Zone Floor Area During Reheat`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_flow_per_zone_floor_area_during_reheat` or None if not set
        """
        return self["Maximum Flow per Zone Floor Area During Reheat"]

    @maximum_flow_per_zone_floor_area_during_reheat.setter
    def maximum_flow_per_zone_floor_area_during_reheat(self, value=None):
        """Corresponds to IDD field `Maximum Flow per Zone Floor Area During
        Reheat`"""
        self["Maximum Flow per Zone Floor Area During Reheat"] = value

    @property
    def maximum_flow_fraction_during_reheat(self):
        """field `Maximum Flow Fraction During Reheat`
        Used only when Reheat Coil Object Type = Coil:Heating:Water and Damper Heating Action = Reverse
        When autocalculating, the maximum flow fraction is set to the ratio of
        0.002032 m3/s-m2 (0.4 cfm/sqft) multiplied by the zone floor area and the
        Maximum Air Flow Rate.
        This optional field limits the maximum flow allowed in reheat mode.
        If this field and the previous field are left blank, the maximum flow will not be limited.
        At no time will the maximum flow rate calculated here exceed the value of
        Maximum Air Flow Rate.

        Args:
            value (float or "Autocalculate"): value for IDD Field `Maximum Flow Fraction During Reheat`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_flow_fraction_during_reheat` or None if not set
        """
        return self["Maximum Flow Fraction During Reheat"]

    @maximum_flow_fraction_during_reheat.setter
    def maximum_flow_fraction_during_reheat(self, value=None):
        """Corresponds to IDD field `Maximum Flow Fraction During Reheat`"""
        self["Maximum Flow Fraction During Reheat"] = value

    @property
    def maximum_reheat_air_temperature(self):
        """field `Maximum Reheat Air Temperature` Specifies the maximum
        allowable supply air temperature leaving the reheat coil. If left
        blank, there is no limit and no default. If unknown, 35C (95F) is
        recommended.

        Args:
            value (float): value for IDD Field `Maximum Reheat Air Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_reheat_air_temperature` or None if not set

        """
        return self["Maximum Reheat Air Temperature"]

    @maximum_reheat_air_temperature.setter
    def maximum_reheat_air_temperature(self, value=None):
        """Corresponds to IDD field `Maximum Reheat Air Temperature`"""
        self["Maximum Reheat Air Temperature"] = value

    @property
    def design_specification_outdoor_air_object_name_for_control(self):
        """field `Design Specification Outdoor Air Object Name for Control`
        When the name of a DesignSpecification:OutdoorAir object is entered, the terminal
        unit will increase flow as needed to meet this outdoor air requirement.
        If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will
        be computed based on the current number of occupants in the zone.
        At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate.
        If this field is blank, then the terminal unit will not be controlled for outdoor air flow.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for control. The field Design Specification Outdoor Air Object Name for Sizing
        (see below) is used to specify the design outdoor air flow rate.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name for Control`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_control` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name for Control"]

    @design_specification_outdoor_air_object_name_for_control.setter
    def design_specification_outdoor_air_object_name_for_control(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name for Control`"""
        self[
            "Design Specification Outdoor Air Object Name for Control"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def design_specification_outdoor_air_object_name_for_sizing(self):
        """field `Design Specification Outdoor Air Object Name for Sizing`
        This field is used only when Outdoor Air Method=DetailedSpecification.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for sizing. The field Design Specification Outdoor Air Object Name for Control
        (see above) is used to actively control the VAV terminal air flow rate.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name for Sizing`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_sizing` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name for Sizing"]

    @design_specification_outdoor_air_object_name_for_sizing.setter
    def design_specification_outdoor_air_object_name_for_sizing(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name for Sizing`"""
        self["Design Specification Outdoor Air Object Name for Sizing"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value




class HvactemplateZoneVavFanPowered(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:VAV:FanPowered`
        Zone terminal unit, fan powered variable volume, reheat optional.
        Referenced schedules must be defined elsewhere in the idf.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template vav system name',
                                       {'name': u'Template VAV System Name',
                                        'pyname': u'template_vav_system_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'primary supply air maximum flow rate',
                                       {'name': u'Primary Supply Air Maximum Flow Rate',
                                        'pyname': u'primary_supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'primary supply air minimum flow fraction',
                                       {'name': u'Primary Supply Air Minimum Flow Fraction',
                                        'pyname': u'primary_supply_air_minimum_flow_fraction',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'secondary supply air maximum flow rate',
                                       {'name': u'Secondary Supply Air Maximum Flow Rate',
                                        'pyname': u'secondary_supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'flow type',
                                       {'name': u'Flow Type',
                                        'pyname': u'flow_type',
                                        'default': u'Parallel',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Series',
                                                            u'Parallel',
                                                            u'SeriesFromPlenum',
                                                            u'ParallelFromPlenum'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'parallel fan on flow fraction',
                                       {'name': u'Parallel Fan On Flow Fraction',
                                        'pyname': u'parallel_fan_on_flow_fraction',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'reheat coil type',
                                       {'name': u'Reheat Coil Type',
                                        'pyname': u'reheat_coil_type',
                                        'default': u'Electric',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'reheat coil availability schedule name',
                                       {'name': u'Reheat Coil Availability Schedule Name',
                                        'pyname': u'reheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'fan total efficiency',
                                       {'name': u'Fan Total Efficiency',
                                        'pyname': u'fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'fan delta pressure',
                                       {'name': u'Fan Delta Pressure',
                                        'pyname': u'fan_delta_pressure',
                                        'default': 1000.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'fan motor efficiency',
                                       {'name': u'Fan Motor Efficiency',
                                        'pyname': u'fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone piu fan schedule name',
                                       {'name': u'Zone PIU Fan Schedule Name',
                                        'pyname': u'zone_piu_fan_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object Name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 31,
               'name': u'HVACTemplate:Zone:VAV:FanPowered',
               'pyname': u'HvactemplateZoneVavFanPowered',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone Name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_vav_system_name(self):
        """field `Template VAV System Name`
        Enter the name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV
        object serving this zone.

        Args:
            value (str): value for IDD Field `Template VAV System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_vav_system_name` or None if not set
        """
        return self["Template VAV System Name"]

    @template_vav_system_name.setter
    def template_vav_system_name(self, value=None):
        """Corresponds to IDD field `Template VAV System Name`"""
        self["Template VAV System Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def primary_supply_air_maximum_flow_rate(self):
        """field `Primary Supply Air Maximum Flow Rate` This field may be set
        to "autosize".  If a value is entered, it will be multiplied by the
        Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Primary Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `primary_supply_air_maximum_flow_rate` or None if not set

        """
        return self["Primary Supply Air Maximum Flow Rate"]

    @primary_supply_air_maximum_flow_rate.setter
    def primary_supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Primary Supply Air Maximum Flow Rate`"""
        self["Primary Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def primary_supply_air_minimum_flow_fraction(self):
        """field `Primary Supply Air Minimum Flow Fraction`

        Args:
            value (float or "Autosize"): value for IDD Field `Primary Supply Air Minimum Flow Fraction`
                Default value: "autosize"
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `primary_supply_air_minimum_flow_fraction` or None if not set

        """
        return self["Primary Supply Air Minimum Flow Fraction"]

    @primary_supply_air_minimum_flow_fraction.setter
    def primary_supply_air_minimum_flow_fraction(self, value="autosize"):
        """Corresponds to IDD field `Primary Supply Air Minimum Flow
        Fraction`"""
        self["Primary Supply Air Minimum Flow Fraction"] = value

    @property
    def secondary_supply_air_maximum_flow_rate(self):
        """field `Secondary Supply Air Maximum Flow Rate` This field may be set
        to "autosize".  If a value is entered, it will be multiplied by the
        Supply Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Secondary Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `secondary_supply_air_maximum_flow_rate` or None if not set

        """
        return self["Secondary Supply Air Maximum Flow Rate"]

    @secondary_supply_air_maximum_flow_rate.setter
    def secondary_supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Secondary Supply Air Maximum Flow Rate`"""
        self["Secondary Supply Air Maximum Flow Rate"] = value

    @property
    def flow_type(self):
        """field `Flow Type`

        Args:
            value (str): value for IDD Field `Flow Type`
                Default value: Parallel

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `flow_type` or None if not set

        """
        return self["Flow Type"]

    @flow_type.setter
    def flow_type(self, value="Parallel"):
        """Corresponds to IDD field `Flow Type`"""
        self["Flow Type"] = value

    @property
    def parallel_fan_on_flow_fraction(self):
        """field `Parallel Fan On Flow Fraction` The fraction of the primary
        air flow at which fan turns on Applicable only to Parallel Flow Type.

        Args:
            value (float or "Autosize"): value for IDD Field `Parallel Fan On Flow Fraction`
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `parallel_fan_on_flow_fraction` or None if not set

        """
        return self["Parallel Fan On Flow Fraction"]

    @parallel_fan_on_flow_fraction.setter
    def parallel_fan_on_flow_fraction(self, value="autosize"):
        """Corresponds to IDD field `Parallel Fan On Flow Fraction`"""
        self["Parallel Fan On Flow Fraction"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def reheat_coil_type(self):
        """field `Reheat Coil Type`

        Args:
            value (str): value for IDD Field `Reheat Coil Type`
                Default value: Electric

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_type` or None if not set

        """
        return self["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="Electric"):
        """Corresponds to IDD field `Reheat Coil Type`"""
        self["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """field `Reheat Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Reheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set

        """
        return self["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Reheat Coil Availability Schedule Name`"""
        self["Reheat Coil Availability Schedule Name"] = value

    @property
    def fan_total_efficiency(self):
        """field `Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `fan_total_efficiency` or None if not set

        """
        return self["Fan Total Efficiency"]

    @fan_total_efficiency.setter
    def fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Fan Total Efficiency`"""
        self["Fan Total Efficiency"] = value

    @property
    def fan_delta_pressure(self):
        """field `Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `fan_delta_pressure` or None if not set

        """
        return self["Fan Delta Pressure"]

    @fan_delta_pressure.setter
    def fan_delta_pressure(self, value=1000.0):
        """Corresponds to IDD field `Fan Delta Pressure`"""
        self["Fan Delta Pressure"] = value

    @property
    def fan_motor_efficiency(self):
        """field `Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `fan_motor_efficiency` or None if not set

        """
        return self["Fan Motor Efficiency"]

    @fan_motor_efficiency.setter
    def fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Fan Motor Efficiency`"""
        self["Fan Motor Efficiency"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value

    @property
    def zone_piu_fan_schedule_name(self):
        """field `Zone PIU Fan Schedule Name`
        This is the operating schedule for the zone PIU fan.
        For a parallel PIU, the fan operates only when the primary air flow is below the
        Parallel Fan On Flow Fraction and the Zone PIU Fan Schedule is on, or it is
        activated by an availability manager.
        For a series PIU, the zone fan operates whenever the Zone PIU Fan Schedule is on, or it
        is activated by an availability manager.
        If this field is left blank, the System Availability Schedule for the
        HVACTemplate:System serving this zone will be used.

        Args:
            value (str): value for IDD Field `Zone PIU Fan Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_piu_fan_schedule_name` or None if not set
        """
        return self["Zone PIU Fan Schedule Name"]

    @zone_piu_fan_schedule_name.setter
    def zone_piu_fan_schedule_name(self, value=None):
        """Corresponds to IDD field `Zone PIU Fan Schedule Name`"""
        self["Zone PIU Fan Schedule Name"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object Name`

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set

        """
        return self["Design Specification Outdoor Air Object Name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name`"""
        self["Design Specification Outdoor Air Object Name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set

        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value




class HvactemplateZoneVavHeatAndCool(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:VAV:HeatAndCool`
        VAV system with VAV for both heating and cooling and optional rehaert coil.
        For heating, this unit increases airflow first, then activates reheat coil.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template vav system name',
                                       {'name': u'Template VAV System Name',
                                        'pyname': u'template_vav_system_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply air maximum flow rate',
                                       {'name': u'Supply Air Maximum Flow Rate',
                                        'pyname': u'supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'constant minimum air flow fraction',
                                       {'name': u'Constant Minimum Air Flow Fraction',
                                        'pyname': u'constant_minimum_air_flow_fraction',
                                        'default': 0.2,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'design specification outdoor air object name for sizing',
                                       {'name': u'Design Specification Outdoor Air Object Name for Sizing',
                                        'pyname': u'design_specification_outdoor_air_object_name_for_sizing',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'reheat coil type',
                                       {'name': u'Reheat Coil Type',
                                        'pyname': u'reheat_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'reheat coil availability schedule name',
                                       {'name': u'Reheat Coil Availability Schedule Name',
                                        'pyname': u'reheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'maximum reheat air temperature',
                                       {'name': u'Maximum Reheat Air Temperature',
                                        'pyname': u'maximum_reheat_air_temperature',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 27,
               'name': u'HVACTemplate:Zone:VAV:HeatAndCool',
               'pyname': u'HvactemplateZoneVavHeatAndCool',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_vav_system_name(self):
        """field `Template VAV System Name`
        Name of a HVACTemplate:System:VAV or HVACTemplate:System:PackagedVAV
        object serving this zone

        Args:
            value (str): value for IDD Field `Template VAV System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_vav_system_name` or None if not set
        """
        return self["Template VAV System Name"]

    @template_vav_system_name.setter
    def template_vav_system_name(self, value=None):
        """Corresponds to IDD field `Template VAV System Name`"""
        self["Template VAV System Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """field `Supply Air Maximum Flow Rate` This field may be set to
        "autosize".  If a value is entered, it will be multiplied by the Supply
        Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set

        """
        return self["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Maximum Flow Rate`"""
        self["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def constant_minimum_air_flow_fraction(self):
        """field `Constant Minimum Air Flow Fraction`
        This field is used if the field Zone Minimum Air Flow Input Method is Constant
        If the field Zone Minimum Air Flow Input Method is Scheduled, then this field
        is optional. If a value is entered, then it is used for sizing normal-action reheat coils.
        If both this field and the following field are entered, the larger result is used.

        Args:
            value (float): value for IDD Field `Constant Minimum Air Flow Fraction`
                Default value: 0.2
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `constant_minimum_air_flow_fraction` or None if not set
        """
        return self["Constant Minimum Air Flow Fraction"]

    @constant_minimum_air_flow_fraction.setter
    def constant_minimum_air_flow_fraction(self, value=0.2):
        """Corresponds to IDD field `Constant Minimum Air Flow Fraction`"""
        self["Constant Minimum Air Flow Fraction"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name_for_sizing(self):
        """field `Design Specification Outdoor Air Object Name for Sizing`
        This field is used only when Outdoor Air Method=DetailedSpecification.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for sizing. The field Design Specification Outdoor Air Object Name for Control
        (see above) is used to actively control the VAV terminal air flow rate.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name for Sizing`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_sizing` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name for Sizing"]

    @design_specification_outdoor_air_object_name_for_sizing.setter
    def design_specification_outdoor_air_object_name_for_sizing(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name for Sizing`"""
        self["Design Specification Outdoor Air Object Name for Sizing"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def reheat_coil_type(self):
        """field `Reheat Coil Type`

        Args:
            value (str): value for IDD Field `Reheat Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_type` or None if not set

        """
        return self["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="None"):
        """Corresponds to IDD field `Reheat Coil Type`"""
        self["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """field `Reheat Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Reheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set

        """
        return self["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Reheat Coil Availability Schedule Name`"""
        self["Reheat Coil Availability Schedule Name"] = value

    @property
    def maximum_reheat_air_temperature(self):
        """field `Maximum Reheat Air Temperature` Specifies the maximum
        allowable supply air temperature leaving the reheat coil. If left
        blank, there is no limit and no default. If unknown, 35C (95F) is
        recommended.

        Args:
            value (float): value for IDD Field `Maximum Reheat Air Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_reheat_air_temperature` or None if not set

        """
        return self["Maximum Reheat Air Temperature"]

    @maximum_reheat_air_temperature.setter
    def maximum_reheat_air_temperature(self, value=None):
        """Corresponds to IDD field `Maximum Reheat Air Temperature`"""
        self["Maximum Reheat Air Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Heating Coil Design Setpoint
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value




class HvactemplateZoneConstantVolume(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:ConstantVolume`
        Zone terminal unit, constant volume, reheat optional.
        Referenced schedules must be defined elsewhere in the idf.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template constant volume system name',
                                       {'name': u'Template Constant Volume System Name',
                                        'pyname': u'template_constant_volume_system_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply air maximum flow rate',
                                       {'name': u'Supply Air Maximum Flow Rate',
                                        'pyname': u'supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'design specification outdoor air object name',
                                       {'name': u'Design Specification Outdoor Air Object name',
                                        'pyname': u'design_specification_outdoor_air_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'reheat coil type',
                                       {'name': u'Reheat Coil Type',
                                        'pyname': u'reheat_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'reheat coil availability schedule name',
                                       {'name': u'Reheat Coil Availability Schedule Name',
                                        'pyname': u'reheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'maximum reheat air temperature',
                                       {'name': u'Maximum Reheat Air Temperature',
                                        'pyname': u'maximum_reheat_air_temperature',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 24,
               'name': u'HVACTemplate:Zone:ConstantVolume',
               'pyname': u'HvactemplateZoneConstantVolume',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_constant_volume_system_name(self):
        """field `Template Constant Volume System Name`
        Name of a HVACTemplate:System:ConstantVolume object serving this zone

        Args:
            value (str): value for IDD Field `Template Constant Volume System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_constant_volume_system_name` or None if not set
        """
        return self["Template Constant Volume System Name"]

    @template_constant_volume_system_name.setter
    def template_constant_volume_system_name(self, value=None):
        """Corresponds to IDD field `Template Constant Volume System Name`"""
        self["Template Constant Volume System Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """field `Supply Air Maximum Flow Rate` This field may be set to
        "autosize".  If a value is entered, it will be multiplied by the Supply
        Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set

        """
        return self["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Maximum Flow Rate`"""
        self["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name(self):
        """field `Design Specification Outdoor Air Object name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name` or None if not set
        """
        return self["Design Specification Outdoor Air Object name"]

    @design_specification_outdoor_air_object_name.setter
    def design_specification_outdoor_air_object_name(self, value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        name`"""
        self["Design Specification Outdoor Air Object name"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def reheat_coil_type(self):
        """field `Reheat Coil Type`

        Args:
            value (str): value for IDD Field `Reheat Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_type` or None if not set

        """
        return self["Reheat Coil Type"]

    @reheat_coil_type.setter
    def reheat_coil_type(self, value="None"):
        """Corresponds to IDD field `Reheat Coil Type`"""
        self["Reheat Coil Type"] = value

    @property
    def reheat_coil_availability_schedule_name(self):
        """field `Reheat Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Reheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `reheat_coil_availability_schedule_name` or None if not set

        """
        return self["Reheat Coil Availability Schedule Name"]

    @reheat_coil_availability_schedule_name.setter
    def reheat_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Reheat Coil Availability Schedule Name`"""
        self["Reheat Coil Availability Schedule Name"] = value

    @property
    def maximum_reheat_air_temperature(self):
        """field `Maximum Reheat Air Temperature` Specifies the maximum
        allowable supply air temperature leaving the reheat coil. If left
        blank, there is no limit and no default. If unknown, 35C (95F) is
        recommended.

        Args:
            value (float): value for IDD Field `Maximum Reheat Air Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_reheat_air_temperature` or None if not set

        """
        return self["Maximum Reheat Air Temperature"]

    @maximum_reheat_air_temperature.setter
    def maximum_reheat_air_temperature(self, value=None):
        """Corresponds to IDD field `Maximum Reheat Air Temperature`"""
        self["Maximum Reheat Air Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum runs
        through only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:VAV Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value




class HvactemplateZoneDualDuct(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Zone:DualDuct`
        Zone terminal unit, dual-duct, constant or variable volume.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'zone name',
                                       {'name': u'Zone Name',
                                        'pyname': u'zone_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template dual duct system name',
                                       {'name': u'Template Dual Duct System Name',
                                        'pyname': u'template_dual_duct_system_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'template thermostat name',
                                       {'name': u'Template Thermostat Name',
                                        'pyname': u'template_thermostat_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply air maximum flow rate',
                                       {'name': u'Supply Air Maximum Flow Rate',
                                        'pyname': u'supply_air_maximum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'zone heating sizing factor',
                                       {'name': u'Zone Heating Sizing Factor',
                                        'pyname': u'zone_heating_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone cooling sizing factor',
                                       {'name': u'Zone Cooling Sizing Factor',
                                        'pyname': u'zone_cooling_sizing_factor',
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'zone minimum air flow fraction',
                                       {'name': u'Zone Minimum Air Flow Fraction',
                                        'pyname': u'zone_minimum_air_flow_fraction',
                                        'default': 0.2,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'outdoor air method',
                                       {'name': u'Outdoor Air Method',
                                        'pyname': u'outdoor_air_method',
                                        'default': u'Flow/Person',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Flow/Person',
                                                            u'Flow/Zone',
                                                            u'Flow/Area',
                                                            u'Sum',
                                                            u'Maximum',
                                                            u'DetailedSpecification'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'outdoor air flow rate per person',
                                       {'name': u'Outdoor Air Flow Rate per Person',
                                        'pyname': u'outdoor_air_flow_rate_per_person',
                                        'default': 0.00944,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'outdoor air flow rate per zone floor area',
                                       {'name': u'Outdoor Air Flow Rate per Zone Floor Area',
                                        'pyname': u'outdoor_air_flow_rate_per_zone_floor_area',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s-m2'}),
                                      (u'outdoor air flow rate per zone',
                                       {'name': u'Outdoor Air Flow Rate per Zone',
                                        'pyname': u'outdoor_air_flow_rate_per_zone',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'design specification outdoor air object name for sizing',
                                       {'name': u'Design Specification Outdoor Air Object Name for Sizing',
                                        'pyname': u'design_specification_outdoor_air_object_name_for_sizing',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification zone air distribution object name',
                                       {'name': u'Design Specification Zone Air Distribution Object Name',
                                        'pyname': u'design_specification_zone_air_distribution_object_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'design specification outdoor air object name for control',
                                       {'name': u'Design Specification Outdoor Air Object Name for Control',
                                        'pyname': u'design_specification_outdoor_air_object_name_for_control',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cold supply plenum name',
                                       {'name': u'Cold Supply Plenum Name',
                                        'pyname': u'cold_supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'hot supply plenum name',
                                       {'name': u'Hot Supply Plenum Name',
                                        'pyname': u'hot_supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating type',
                                       {'name': u'Baseboard Heating Type',
                                        'pyname': u'baseboard_heating_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'baseboard heating availability schedule name',
                                       {'name': u'Baseboard Heating Availability Schedule Name',
                                        'pyname': u'baseboard_heating_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'baseboard heating capacity',
                                       {'name': u'Baseboard Heating Capacity',
                                        'pyname': u'baseboard_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'zone cooling design supply air temperature input method',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone cooling design supply air temperature',
                                       {'name': u'Zone Cooling Design Supply Air Temperature',
                                        'pyname': u'zone_cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone cooling design supply air temperature difference',
                                       {'name': u'Zone Cooling Design Supply Air Temperature Difference',
                                        'pyname': u'zone_cooling_design_supply_air_temperature_difference',
                                        'default': 11.11,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'}),
                                      (u'zone heating design supply air temperature input method',
                                       {'name': u'Zone Heating Design Supply Air Temperature Input Method',
                                        'pyname': u'zone_heating_design_supply_air_temperature_input_method',
                                        'default': u'SystemSupplyAirTemperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SupplyAirTemperature',
                                                            u'TemperatureDifference',
                                                            u'SystemSupplyAirTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'zone heating design supply air temperature',
                                       {'name': u'Zone Heating Design Supply Air Temperature',
                                        'pyname': u'zone_heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'zone heating design supply air temperature difference',
                                       {'name': u'Zone Heating Design Supply Air Temperature Difference',
                                        'pyname': u'zone_heating_design_supply_air_temperature_difference',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'deltaC'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 26,
               'name': u'HVACTemplate:Zone:DualDuct',
               'pyname': u'HvactemplateZoneDualDuct',
               'required-object': False,
               'unique-object': False}

    @property
    def zone_name(self):
        """field `Zone Name` Zone name must match a building zone name.

        Args:
            value (str): value for IDD Field `Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name` or None if not set

        """
        return self["Zone Name"]

    @zone_name.setter
    def zone_name(self, value=None):
        """Corresponds to IDD field `Zone Name`"""
        self["Zone Name"] = value

    @property
    def template_dual_duct_system_name(self):
        """field `Template Dual Duct System Name`
        Name of a HVACTemplate:System:DualDuct object serving this zone

        Args:
            value (str): value for IDD Field `Template Dual Duct System Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_dual_duct_system_name` or None if not set
        """
        return self["Template Dual Duct System Name"]

    @template_dual_duct_system_name.setter
    def template_dual_duct_system_name(self, value=None):
        """Corresponds to IDD field `Template Dual Duct System Name`"""
        self["Template Dual Duct System Name"] = value

    @property
    def template_thermostat_name(self):
        """field `Template Thermostat Name`
        Enter the name of a HVACTemplate:Thermostat object.
        If blank, then it is assumed that standard thermostat objects
        have been defined for this zone.

        Args:
            value (str): value for IDD Field `Template Thermostat Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_thermostat_name` or None if not set
        """
        return self["Template Thermostat Name"]

    @template_thermostat_name.setter
    def template_thermostat_name(self, value=None):
        """Corresponds to IDD field `Template Thermostat Name`"""
        self["Template Thermostat Name"] = value

    @property
    def supply_air_maximum_flow_rate(self):
        """field `Supply Air Maximum Flow Rate` This field may be set to
        "autosize".  If a value is entered, it will be multiplied by the Supply
        Air Sizing Factor and by zone multipliers.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Air Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_air_maximum_flow_rate` or None if not set

        """
        return self["Supply Air Maximum Flow Rate"]

    @supply_air_maximum_flow_rate.setter
    def supply_air_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Air Maximum Flow Rate`"""
        self["Supply Air Maximum Flow Rate"] = value

    @property
    def zone_heating_sizing_factor(self):
        """field `Zone Heating Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Heating Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_sizing_factor` or None if not set
        """
        return self["Zone Heating Sizing Factor"]

    @zone_heating_sizing_factor.setter
    def zone_heating_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Heating Sizing Factor`"""
        self["Zone Heating Sizing Factor"] = value

    @property
    def zone_cooling_sizing_factor(self):
        """field `Zone Cooling Sizing Factor`
        If blank, value from Sizing:Parameters will be used.

        Args:
            value (float): value for IDD Field `Zone Cooling Sizing Factor`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_sizing_factor` or None if not set
        """
        return self["Zone Cooling Sizing Factor"]

    @zone_cooling_sizing_factor.setter
    def zone_cooling_sizing_factor(self, value=None):
        """Corresponds to IDD field `Zone Cooling Sizing Factor`"""
        self["Zone Cooling Sizing Factor"] = value

    @property
    def zone_minimum_air_flow_fraction(self):
        """field `Zone Minimum Air Flow Fraction` This field is the Zone
        Minimum Air Flow Fraction specified as a fraction of the maximum air
        flow rate. This field is ignored if the system serving this zone is
        constant volume.

        Args:
            value (float): value for IDD Field `Zone Minimum Air Flow Fraction`
                Default value: 0.2
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_minimum_air_flow_fraction` or None if not set

        """
        return self["Zone Minimum Air Flow Fraction"]

    @zone_minimum_air_flow_fraction.setter
    def zone_minimum_air_flow_fraction(self, value=0.2):
        """Corresponds to IDD field `Zone Minimum Air Flow Fraction`"""
        self["Zone Minimum Air Flow Fraction"] = value

    @property
    def outdoor_air_method(self):
        """field `Outdoor Air Method`
        Flow/Person, Flow/Zone, Flow/Area, Sum, and Maximum use the values in the next three
        fields: Outdoor Air Flow Rate per Person, Outdoor Air Flow Rate per Zone Floor Area,
        and Outdoor Air Flow Rate per Zone.
        DetailedSpecification ignores these three Outdoor Air Flow Rate fields and instead
        references design specification objects named in the fields
        Design Specification Outdoor Air Object Name and Design Specification Zone Air
        Distribution Object Name.

        Args:
            value (str): value for IDD Field `Outdoor Air Method`
                Default value: Flow/Person

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `outdoor_air_method` or None if not set
        """
        return self["Outdoor Air Method"]

    @outdoor_air_method.setter
    def outdoor_air_method(self, value="Flow/Person"):
        """Corresponds to IDD field `Outdoor Air Method`"""
        self["Outdoor Air Method"] = value

    @property
    def outdoor_air_flow_rate_per_person(self):
        """field `Outdoor Air Flow Rate per Person`
        Default 0.00944 is 20 cfm per person
        This input is used if the field Outdoor Air Method is
        Flow/Person, Sum, or Maximum

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Person`
                Units: m3/s
                Default value: 0.00944

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_person` or None if not set
        """
        return self["Outdoor Air Flow Rate per Person"]

    @outdoor_air_flow_rate_per_person.setter
    def outdoor_air_flow_rate_per_person(self, value=0.00944):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Person`"""
        self["Outdoor Air Flow Rate per Person"] = value

    @property
    def outdoor_air_flow_rate_per_zone_floor_area(self):
        """field `Outdoor Air Flow Rate per Zone Floor Area` This input is used
        if the field Outdoor Air Method is Flow/Area, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone Floor Area`
                Units: m3/s-m2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone_floor_area` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone Floor Area"]

    @outdoor_air_flow_rate_per_zone_floor_area.setter
    def outdoor_air_flow_rate_per_zone_floor_area(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone Floor
        Area`"""
        self["Outdoor Air Flow Rate per Zone Floor Area"] = value

    @property
    def outdoor_air_flow_rate_per_zone(self):
        """field `Outdoor Air Flow Rate per Zone` This input is used if the
        field Outdoor Air Method is Flow/Zone, Sum, or Maximum.

        Args:
            value (float): value for IDD Field `Outdoor Air Flow Rate per Zone`
                Units: m3/s

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `outdoor_air_flow_rate_per_zone` or None if not set

        """
        return self["Outdoor Air Flow Rate per Zone"]

    @outdoor_air_flow_rate_per_zone.setter
    def outdoor_air_flow_rate_per_zone(self, value=None):
        """Corresponds to IDD field `Outdoor Air Flow Rate per Zone`"""
        self["Outdoor Air Flow Rate per Zone"] = value

    @property
    def design_specification_outdoor_air_object_name_for_sizing(self):
        """field `Design Specification Outdoor Air Object Name for Sizing`
        This field is used only when Outdoor Air Method=DetailedSpecification.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for sizing. The field Design Specification Outdoor Air Object Name for Control
        (see above) is used to actively control the VAV terminal air flow rate.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name for Sizing`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_sizing` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name for Sizing"]

    @design_specification_outdoor_air_object_name_for_sizing.setter
    def design_specification_outdoor_air_object_name_for_sizing(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name for Sizing`"""
        self["Design Specification Outdoor Air Object Name for Sizing"] = value

    @property
    def design_specification_zone_air_distribution_object_name(self):
        """field `Design Specification Zone Air Distribution Object Name`
        This field is used only when Outdoor Air Method=DetailedSpecification.

        Args:
            value (str): value for IDD Field `Design Specification Zone Air Distribution Object Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_zone_air_distribution_object_name` or None if not set
        """
        return self["Design Specification Zone Air Distribution Object Name"]

    @design_specification_zone_air_distribution_object_name.setter
    def design_specification_zone_air_distribution_object_name(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Zone Air Distribution
        Object Name`"""
        self["Design Specification Zone Air Distribution Object Name"] = value

    @property
    def design_specification_outdoor_air_object_name_for_control(self):
        """field `Design Specification Outdoor Air Object Name for Control`
        When the name of a DesignSpecification:OutdoorAir object is entered, the terminal
        unit will increase flow as needed to meet this outdoor air requirement.
        If Outdoor Air Flow per Person is non-zero, then the outdoor air requirement will
        be computed based on the current number of occupants in the zone.
        At no time will the supply air flow rate exceed the value for Maximum Air Flow Rate.
        If this field is blank, then the terminal unit will not be controlled for outdoor air flow.
        Note that this field is used only for specifying the design outdoor air flow rate used
        for control. The field Design Specification Outdoor Air Object Name for Sizing
        (see below) is used to specify the design outdoor air flow rate.

        Args:
            value (str): value for IDD Field `Design Specification Outdoor Air Object Name for Control`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `design_specification_outdoor_air_object_name_for_control` or None if not set
        """
        return self["Design Specification Outdoor Air Object Name for Control"]

    @design_specification_outdoor_air_object_name_for_control.setter
    def design_specification_outdoor_air_object_name_for_control(
            self,
            value=None):
        """Corresponds to IDD field `Design Specification Outdoor Air Object
        Name for Control`"""
        self[
            "Design Specification Outdoor Air Object Name for Control"] = value

    @property
    def cold_supply_plenum_name(self):
        """field `Cold Supply Plenum Name` Plenum zone name.  Cold supply
        plenum that serves only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Cold Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cold_supply_plenum_name` or None if not set

        """
        return self["Cold Supply Plenum Name"]

    @cold_supply_plenum_name.setter
    def cold_supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Cold Supply Plenum Name`"""
        self["Cold Supply Plenum Name"] = value

    @property
    def hot_supply_plenum_name(self):
        """field `Hot Supply Plenum Name` Plenum zone name.  Hot supply plenum
        that serves only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Hot Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_supply_plenum_name` or None if not set

        """
        return self["Hot Supply Plenum Name"]

    @hot_supply_plenum_name.setter
    def hot_supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Hot Supply Plenum Name`"""
        self["Hot Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum that
        serves only this zone. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def baseboard_heating_type(self):
        """field `Baseboard Heating Type`

        Args:
            value (str): value for IDD Field `Baseboard Heating Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_type` or None if not set

        """
        return self["Baseboard Heating Type"]

    @baseboard_heating_type.setter
    def baseboard_heating_type(self, value="None"):
        """Corresponds to IDD field `Baseboard Heating Type`"""
        self["Baseboard Heating Type"] = value

    @property
    def baseboard_heating_availability_schedule_name(self):
        """field `Baseboard Heating Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Baseboard Heating Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `baseboard_heating_availability_schedule_name` or None if not set

        """
        return self["Baseboard Heating Availability Schedule Name"]

    @baseboard_heating_availability_schedule_name.setter
    def baseboard_heating_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Baseboard Heating Availability Schedule
        Name`"""
        self["Baseboard Heating Availability Schedule Name"] = value

    @property
    def baseboard_heating_capacity(self):
        """field `Baseboard Heating Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Baseboard Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `baseboard_heating_capacity` or None if not set

        """
        return self["Baseboard Heating Capacity"]

    @baseboard_heating_capacity.setter
    def baseboard_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Baseboard Heating Capacity`"""
        self["Baseboard Heating Capacity"] = value

    @property
    def zone_cooling_design_supply_air_temperature_input_method(self):
        """field `Zone Cooling Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Cooling Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Cooling Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Cooling Coil Design Setpoint

        Args:
            value (str): value for IDD Field `Zone Cooling Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_cooling_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Input Method"]

    @zone_cooling_design_supply_air_temperature_input_method.setter
    def zone_cooling_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Input Method`"""
        self["Zone Cooling Design Supply Air Temperature Input Method"] = value

    @property
    def zone_cooling_design_supply_air_temperature(self):
        """field `Zone Cooling Design Supply Air Temperature`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature"]

    @zone_cooling_design_supply_air_temperature.setter
    def zone_cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Zone Cooling Design Supply Air
        Temperature`"""
        self["Zone Cooling Design Supply Air Temperature"] = value

    @property
    def zone_cooling_design_supply_air_temperature_difference(self):
        """field `Zone Cooling Design Supply Air Temperature Difference`
        Zone Cooling Design Supply Air Temperature is only used when Zone Cooling Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be subtracted from the zone temperature
        at peak load to calculate the Zone Cooling Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Cooling Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 11.11

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_cooling_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Cooling Design Supply Air Temperature Difference"]

    @zone_cooling_design_supply_air_temperature_difference.setter
    def zone_cooling_design_supply_air_temperature_difference(
            self,
            value=11.11):
        """Corresponds to IDD field `Zone Cooling Design Supply Air Temperature
        Difference`"""
        self["Zone Cooling Design Supply Air Temperature Difference"] = value

    @property
    def zone_heating_design_supply_air_temperature_input_method(self):
        """field `Zone Heating Design Supply Air Temperature Input Method`
        SupplyAirTemperature = use the value from Zone Heating Design Supply Air Temperature
        TemperatureDifference = use the value from Zone Heating Design Supply Air Temperature Difference
        SystemSupplyAirTemperature = use the value from HVACTemplate:System:DualDuct Heating Coil Design Setpoint

        Args:
            value (str): value for IDD Field `Zone Heating Design Supply Air Temperature Input Method`
                Default value: SystemSupplyAirTemperature

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_heating_design_supply_air_temperature_input_method` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Input Method"]

    @zone_heating_design_supply_air_temperature_input_method.setter
    def zone_heating_design_supply_air_temperature_input_method(
            self,
            value="SystemSupplyAirTemperature"):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Input Method`"""
        self["Zone Heating Design Supply Air Temperature Input Method"] = value

    @property
    def zone_heating_design_supply_air_temperature(self):
        """field `Zone Heating Design Supply Air Temperature`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = SupplyAirTemperature

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature"]

    @zone_heating_design_supply_air_temperature.setter
    def zone_heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air
        Temperature`"""
        self["Zone Heating Design Supply Air Temperature"] = value

    @property
    def zone_heating_design_supply_air_temperature_difference(self):
        """field `Zone Heating Design Supply Air Temperature Difference`
        Zone Heating Design Supply Air Temperature is only used when Zone Heating Design
        Supply Air Temperature Input Method = TemperatureDifference
        The absolute value of this field will be added to the zone temperature
        at peak load to calculate the Zone Heating Design Supply Air Temperature.

        Args:
            value (float): value for IDD Field `Zone Heating Design Supply Air Temperature Difference`
                Units: deltaC
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `zone_heating_design_supply_air_temperature_difference` or None if not set
        """
        return self["Zone Heating Design Supply Air Temperature Difference"]

    @zone_heating_design_supply_air_temperature_difference.setter
    def zone_heating_design_supply_air_temperature_difference(
            self,
            value=30.0):
        """Corresponds to IDD field `Zone Heating Design Supply Air Temperature
        Difference`"""
        self["Zone Heating Design Supply Air Temperature Difference"] = value




class HvactemplateSystemVrf(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:VRF`
        Variable refrigerant flow (VRF) heat pump condensing unit. Serves one or more VRF zone
        terminal units (HVACTemplate:Zone:VRF).
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'gross rated total cooling capacity',
                                       {'name': u'Gross Rated Total Cooling Capacity',
                                        'pyname': u'gross_rated_total_cooling_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'gross rated cooling cop',
                                       {'name': u'Gross Rated Cooling COP',
                                        'pyname': u'gross_rated_cooling_cop',
                                        'default': 3.3,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'minimum outdoor temperature in cooling mode',
                                       {'name': u'Minimum Outdoor Temperature in Cooling Mode',
                                        'pyname': u'minimum_outdoor_temperature_in_cooling_mode',
                                        'default': -6.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'maximum outdoor temperature in cooling mode',
                                       {'name': u'Maximum Outdoor Temperature in Cooling Mode',
                                        'pyname': u'maximum_outdoor_temperature_in_cooling_mode',
                                        'default': 43.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'gross rated heating capacity',
                                       {'name': u'Gross Rated Heating Capacity',
                                        'pyname': u'gross_rated_heating_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'rated heating capacity sizing ratio',
                                       {'name': u'Rated Heating Capacity Sizing Ratio',
                                        'pyname': u'rated_heating_capacity_sizing_ratio',
                                        'default': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 1.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'gross rated heating cop',
                                       {'name': u'Gross Rated Heating COP',
                                        'pyname': u'gross_rated_heating_cop',
                                        'default': 3.4,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'minimum outdoor temperature in heating mode',
                                       {'name': u'Minimum Outdoor Temperature in Heating Mode',
                                        'pyname': u'minimum_outdoor_temperature_in_heating_mode',
                                        'default': -20.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'maximum outdoor temperature in heating mode',
                                       {'name': u'Maximum Outdoor Temperature in Heating Mode',
                                        'pyname': u'maximum_outdoor_temperature_in_heating_mode',
                                        'default': 16.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'minimum heat pump part-load ratio',
                                       {'name': u'Minimum Heat Pump Part-Load Ratio',
                                        'pyname': u'minimum_heat_pump_partload_ratio',
                                        'default': 0.15,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'dimensionless'}),
                                      (u'zone name for master thermostat location',
                                       {'name': u'Zone Name for Master Thermostat Location',
                                        'pyname': u'zone_name_for_master_thermostat_location',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'master thermostat priority control type',
                                       {'name': u'Master Thermostat Priority Control Type',
                                        'pyname': u'master_thermostat_priority_control_type',
                                        'default': u'MasterThermostatPriority',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'LoadPriority',
                                                            u'ZonePriority',
                                                            u'ThermostatOffsetPriority',
                                                            u'MasterThermostatPriority',
                                                            u'Scheduled'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'thermostat priority schedule name',
                                       {'name': u'Thermostat Priority Schedule Name',
                                        'pyname': u'thermostat_priority_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'alpha'}),
                                      (u'heat pump waste heat recovery',
                                       {'name': u'Heat Pump Waste Heat Recovery',
                                        'pyname': u'heat_pump_waste_heat_recovery',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'No',
                                                            u'Yes'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'equivalent piping length used for piping correction factor in cooling mode',
                                       {'name': u'Equivalent Piping Length used for Piping Correction Factor in Cooling Mode',
                                        'pyname': u'equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm'}),
                                      (u'vertical height used for piping correction factor',
                                       {'name': u'Vertical Height used for Piping Correction Factor',
                                        'pyname': u'vertical_height_used_for_piping_correction_factor',
                                        'default': 10.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm'}),
                                      (u'equivalent piping length used for piping correction factor in heating mode',
                                       {'name': u'Equivalent Piping Length used for Piping Correction Factor in Heating Mode',
                                        'pyname': u'equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode',
                                        'default': 30.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm'}),
                                      (u'crankcase heater power per compressor',
                                       {'name': u'Crankcase Heater Power per Compressor',
                                        'pyname': u'crankcase_heater_power_per_compressor',
                                        'default': 33.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'number of compressors',
                                       {'name': u'Number of Compressors',
                                        'pyname': u'number_of_compressors',
                                        'default': 2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'integer',
                                        'unit': u'dimensionless'}),
                                      (u'ratio of compressor size to total compressor capacity',
                                       {'name': u'Ratio of Compressor Size to Total Compressor Capacity',
                                        'pyname': u'ratio_of_compressor_size_to_total_compressor_capacity',
                                        'default': 0.5,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/W'}),
                                      (u'maximum outdoor dry-bulb temperature for crankcase heater',
                                       {'name': u'Maximum Outdoor Dry-bulb Temperature for Crankcase Heater',
                                        'pyname': u'maximum_outdoor_drybulb_temperature_for_crankcase_heater',
                                        'default': 5.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'defrost strategy',
                                       {'name': u'Defrost Strategy',
                                        'pyname': u'defrost_strategy',
                                        'default': u'Resistive',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ReverseCycle',
                                                            u'Resistive'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'defrost control',
                                       {'name': u'Defrost Control',
                                        'pyname': u'defrost_control',
                                        'default': u'Timed',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Timed',
                                                            u'OnDemand'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'defrost time period fraction',
                                       {'name': u'Defrost Time Period Fraction',
                                        'pyname': u'defrost_time_period_fraction',
                                        'default': 0.058333,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'dimensionless'}),
                                      (u'resistive defrost heater capacity',
                                       {'name': u'Resistive Defrost Heater Capacity',
                                        'pyname': u'resistive_defrost_heater_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor dry-bulb temperature for defrost operation',
                                       {'name': u'Maximum Outdoor Dry-bulb Temperature for Defrost Operation',
                                        'pyname': u'maximum_outdoor_drybulb_temperature_for_defrost_operation',
                                        'default': 5.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'condenser type',
                                       {'name': u'Condenser Type',
                                        'pyname': u'condenser_type',
                                        'default': u'AirCooled',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'AirCooled',
                                                            u'EvaporativelyCooled',
                                                            u'WaterCooled'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'water condenser volume flow rate',
                                       {'name': u'Water Condenser Volume Flow Rate',
                                        'pyname': u'water_condenser_volume_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'evaporative condenser effectiveness',
                                       {'name': u'Evaporative Condenser Effectiveness',
                                        'pyname': u'evaporative_condenser_effectiveness',
                                        'default': 0.9,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'dimensionless'}),
                                      (u'evaporative condenser air flow rate',
                                       {'name': u'Evaporative Condenser Air Flow Rate',
                                        'pyname': u'evaporative_condenser_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'evaporative condenser pump rated power consumption',
                                       {'name': u'Evaporative Condenser Pump Rated Power Consumption',
                                        'pyname': u'evaporative_condenser_pump_rated_power_consumption',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'basin heater capacity',
                                       {'name': u'Basin Heater Capacity',
                                        'pyname': u'basin_heater_capacity',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W/K'}),
                                      (u'basin heater setpoint temperature',
                                       {'name': u'Basin Heater Setpoint Temperature',
                                        'pyname': u'basin_heater_setpoint_temperature',
                                        'default': 2.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 2.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'basin heater operating schedule name',
                                       {'name': u'Basin Heater Operating Schedule Name',
                                        'pyname': u'basin_heater_operating_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'fuel type',
                                       {'name': u'Fuel Type',
                                        'pyname': u'fuel_type',
                                        'default': u'Electricity',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electricity',
                                                            u'NaturalGas',
                                                            u'PropaneGas',
                                                            u'Diesel',
                                                            u'Gasoline',
                                                            u'FuelOil#1',
                                                            u'FuelOil#2',
                                                            u'OtherFuel1',
                                                            u'OtherFuel2'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'minimum outdoor temperature in heat recovery mode',
                                       {'name': u'Minimum Outdoor Temperature in Heat Recovery Mode',
                                        'pyname': u'minimum_outdoor_temperature_in_heat_recovery_mode',
                                        'default': -15.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'maximum outdoor temperature in heat recovery mode',
                                       {'name': u'Maximum Outdoor Temperature in Heat Recovery Mode',
                                        'pyname': u'maximum_outdoor_temperature_in_heat_recovery_mode',
                                        'default': 45.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 39,
               'name': u'HVACTemplate:System:VRF',
               'pyname': u'HvactemplateSystemVrf',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` Availability schedule name
        for this system. Schedule value > 0 means the system is available. If
        this field is blank, the system is always available.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def gross_rated_total_cooling_capacity(self):
        """field `Gross Rated Total Cooling Capacity` Enter the total cooling
        capacity in watts at rated conditions or set to autosize. Total cooling
        capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Total Cooling Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gross_rated_total_cooling_capacity` or None if not set

        """
        return self["Gross Rated Total Cooling Capacity"]

    @gross_rated_total_cooling_capacity.setter
    def gross_rated_total_cooling_capacity(self, value="autosize"):
        """Corresponds to IDD field `Gross Rated Total Cooling Capacity`"""
        self["Gross Rated Total Cooling Capacity"] = value

    @property
    def gross_rated_cooling_cop(self):
        """field `Gross Rated Cooling COP` Enter the coefficient of performance
        at rated conditions or leave blank to use default. COP includes
        compressor and condenser fan electrical energy input COP does not
        include supply fan heat or supply fan electric power input.

        Args:
            value (float): value for IDD Field `Gross Rated Cooling COP`
                Units: W/W
                Default value: 3.3

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gross_rated_cooling_cop` or None if not set

        """
        return self["Gross Rated Cooling COP"]

    @gross_rated_cooling_cop.setter
    def gross_rated_cooling_cop(self, value=3.3):
        """Corresponds to IDD field `Gross Rated Cooling COP`"""
        self["Gross Rated Cooling COP"] = value

    @property
    def minimum_outdoor_temperature_in_cooling_mode(self):
        """field `Minimum Outdoor Temperature in Cooling Mode` Enter the
        minimum outdoor temperature allowed for cooling operation. Cooling is
        disabled below this temperature.

        Args:
            value (float): value for IDD Field `Minimum Outdoor Temperature in Cooling Mode`
                Units: C
                Default value: -6.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_temperature_in_cooling_mode` or None if not set

        """
        return self["Minimum Outdoor Temperature in Cooling Mode"]

    @minimum_outdoor_temperature_in_cooling_mode.setter
    def minimum_outdoor_temperature_in_cooling_mode(self, value=-6.0):
        """Corresponds to IDD field `Minimum Outdoor Temperature in Cooling
        Mode`"""
        self["Minimum Outdoor Temperature in Cooling Mode"] = value

    @property
    def maximum_outdoor_temperature_in_cooling_mode(self):
        """field `Maximum Outdoor Temperature in Cooling Mode` Enter the
        maximum outdoor temperature allowed for cooling operation. Cooling is
        disabled above this temperature.

        Args:
            value (float): value for IDD Field `Maximum Outdoor Temperature in Cooling Mode`
                Units: C
                Default value: 43.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_temperature_in_cooling_mode` or None if not set

        """
        return self["Maximum Outdoor Temperature in Cooling Mode"]

    @maximum_outdoor_temperature_in_cooling_mode.setter
    def maximum_outdoor_temperature_in_cooling_mode(self, value=43.0):
        """Corresponds to IDD field `Maximum Outdoor Temperature in Cooling
        Mode`"""
        self["Maximum Outdoor Temperature in Cooling Mode"] = value

    @property
    def gross_rated_heating_capacity(self):
        """field `Gross Rated Heating Capacity` Enter the heating capacity in
        watts at rated conditions or set to autosize. Heating capacity not
        accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Gross Rated Heating Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gross_rated_heating_capacity` or None if not set

        """
        return self["Gross Rated Heating Capacity"]

    @gross_rated_heating_capacity.setter
    def gross_rated_heating_capacity(self, value="autosize"):
        """Corresponds to IDD field `Gross Rated Heating Capacity`"""
        self["Gross Rated Heating Capacity"] = value

    @property
    def rated_heating_capacity_sizing_ratio(self):
        """field `Rated Heating Capacity Sizing Ratio`
        If the Gross Rated Heating Capacity is autosized, the heating capacity is sized
        to be equal to the cooling capacity multiplied by this sizing ratio. The zone
        terminal unit heating coils are also sized using this ratio unless the sizing
        ratio input in the ZoneHVAC:TerminalUnit:VariableRefrigerantFlow object is entered.

        Args:
            value (float): value for IDD Field `Rated Heating Capacity Sizing Ratio`
                Units: W/W
                Default value: 1.0
                value >= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `rated_heating_capacity_sizing_ratio` or None if not set
        """
        return self["Rated Heating Capacity Sizing Ratio"]

    @rated_heating_capacity_sizing_ratio.setter
    def rated_heating_capacity_sizing_ratio(self, value=1.0):
        """Corresponds to IDD field `Rated Heating Capacity Sizing Ratio`"""
        self["Rated Heating Capacity Sizing Ratio"] = value

    @property
    def gross_rated_heating_cop(self):
        """field `Gross Rated Heating COP` COP includes compressor and
        condenser fan electrical energy input COP does not include supply fan
        heat or supply fan electrical energy input.

        Args:
            value (float): value for IDD Field `Gross Rated Heating COP`
                Units: W/W
                Default value: 3.4

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gross_rated_heating_cop` or None if not set

        """
        return self["Gross Rated Heating COP"]

    @gross_rated_heating_cop.setter
    def gross_rated_heating_cop(self, value=3.4):
        """Corresponds to IDD field `Gross Rated Heating COP`"""
        self["Gross Rated Heating COP"] = value

    @property
    def minimum_outdoor_temperature_in_heating_mode(self):
        """field `Minimum Outdoor Temperature in Heating Mode` Enter the
        minimum outdoor temperature allowed for heating operation.

        Args:
            value (float): value for IDD Field `Minimum Outdoor Temperature in Heating Mode`
                Units: C
                Default value: -20.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_temperature_in_heating_mode` or None if not set

        """
        return self["Minimum Outdoor Temperature in Heating Mode"]

    @minimum_outdoor_temperature_in_heating_mode.setter
    def minimum_outdoor_temperature_in_heating_mode(self, value=-20.0):
        """Corresponds to IDD field `Minimum Outdoor Temperature in Heating
        Mode`"""
        self["Minimum Outdoor Temperature in Heating Mode"] = value

    @property
    def maximum_outdoor_temperature_in_heating_mode(self):
        """field `Maximum Outdoor Temperature in Heating Mode` Enter the
        maximum outdoor temperature allowed for heating operation.

        Args:
            value (float): value for IDD Field `Maximum Outdoor Temperature in Heating Mode`
                Units: C
                Default value: 16.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_temperature_in_heating_mode` or None if not set

        """
        return self["Maximum Outdoor Temperature in Heating Mode"]

    @maximum_outdoor_temperature_in_heating_mode.setter
    def maximum_outdoor_temperature_in_heating_mode(self, value=16.0):
        """Corresponds to IDD field `Maximum Outdoor Temperature in Heating
        Mode`"""
        self["Maximum Outdoor Temperature in Heating Mode"] = value

    @property
    def minimum_heat_pump_partload_ratio(self):
        """field `Minimum Heat Pump Part-Load Ratio`
        Enter the minimum heat pump part-load ratio (PLR). When the cooling or heating PLR is
        below this value, the heat pump compressor will cycle to meet the cooling or heating
        demand.

        Args:
            value (float): value for IDD Field `Minimum Heat Pump Part-Load Ratio`
                Units: dimensionless
                Default value: 0.15

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_heat_pump_partload_ratio` or None if not set
        """
        return self["Minimum Heat Pump Part-Load Ratio"]

    @minimum_heat_pump_partload_ratio.setter
    def minimum_heat_pump_partload_ratio(self, value=0.15):
        """  Corresponds to IDD field `Minimum Heat Pump Part-Load Ratio`

        """
        self["Minimum Heat Pump Part-Load Ratio"] = value

    @property
    def zone_name_for_master_thermostat_location(self):
        """field `Zone Name for Master Thermostat Location` Enter the name of
        the zone where the master thermostat is located.

        Args:
            value (str): value for IDD Field `Zone Name for Master Thermostat Location`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `zone_name_for_master_thermostat_location` or None if not set

        """
        return self["Zone Name for Master Thermostat Location"]

    @zone_name_for_master_thermostat_location.setter
    def zone_name_for_master_thermostat_location(self, value=None):
        """Corresponds to IDD field `Zone Name for Master Thermostat
        Location`"""
        self["Zone Name for Master Thermostat Location"] = value

    @property
    def master_thermostat_priority_control_type(self):
        """field `Master Thermostat Priority Control Type` Choose a thermostat
        control logic scheme. If these control types fail to control zone
        temperature within a reasonable limit, consider using multiple VRF
        systems.

        Args:
            value (str): value for IDD Field `Master Thermostat Priority Control Type`
                Default value: MasterThermostatPriority

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `master_thermostat_priority_control_type` or None if not set

        """
        return self["Master Thermostat Priority Control Type"]

    @master_thermostat_priority_control_type.setter
    def master_thermostat_priority_control_type(
            self,
            value="MasterThermostatPriority"):
        """Corresponds to IDD field `Master Thermostat Priority Control
        Type`"""
        self["Master Thermostat Priority Control Type"] = value

    @property
    def thermostat_priority_schedule_name(self):
        """field `Thermostat Priority Schedule Name` this field is required if
        Master Thermostat Priority Control Type is Scheduled. Schedule values
        of 0 denote cooling, 1 for heating, and all other values disable the
        system.

        Args:
            value (str): value for IDD Field `Thermostat Priority Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `thermostat_priority_schedule_name` or None if not set

        """
        return self["Thermostat Priority Schedule Name"]

    @thermostat_priority_schedule_name.setter
    def thermostat_priority_schedule_name(self, value=None):
        """Corresponds to IDD field `Thermostat Priority Schedule Name`"""
        self["Thermostat Priority Schedule Name"] = value

    @property
    def heat_pump_waste_heat_recovery(self):
        """field `Heat Pump Waste Heat Recovery` This field is reserved for
        future use. The only valid choice is No.

        Args:
            value (str): value for IDD Field `Heat Pump Waste Heat Recovery`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_waste_heat_recovery` or None if not set

        """
        return self["Heat Pump Waste Heat Recovery"]

    @heat_pump_waste_heat_recovery.setter
    def heat_pump_waste_heat_recovery(self, value="No"):
        """Corresponds to IDD field `Heat Pump Waste Heat Recovery`"""
        self["Heat Pump Waste Heat Recovery"] = value

    @property
    def equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode(
            self):
        """field `Equivalent Piping Length used for Piping Correction Factor in
        Cooling Mode` Enter the equivalent length of the farthest terminal unit
        from the condenser.

        Args:
            value (float): value for IDD Field `Equivalent Piping Length used for Piping Correction Factor in Cooling Mode`
                Units: m
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode` or None if not set

        """
        return self[
            "Equivalent Piping Length used for Piping Correction Factor in Cooling Mode"]

    @equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode.setter
    def equivalent_piping_length_used_for_piping_correction_factor_in_cooling_mode(
            self,
            value=30.0):
        """Corresponds to IDD field `Equivalent Piping Length used for Piping
        Correction Factor in Cooling Mode`"""
        self[
            "Equivalent Piping Length used for Piping Correction Factor in Cooling Mode"] = value

    @property
    def vertical_height_used_for_piping_correction_factor(self):
        """field `Vertical Height used for Piping Correction Factor` Enter the
        height difference between the highest and lowest terminal unit.

        Args:
            value (float): value for IDD Field `Vertical Height used for Piping Correction Factor`
                Units: m
                Default value: 10.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `vertical_height_used_for_piping_correction_factor` or None if not set

        """
        return self["Vertical Height used for Piping Correction Factor"]

    @vertical_height_used_for_piping_correction_factor.setter
    def vertical_height_used_for_piping_correction_factor(self, value=10.0):
        """Corresponds to IDD field `Vertical Height used for Piping Correction
        Factor`"""
        self["Vertical Height used for Piping Correction Factor"] = value

    @property
    def equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode(
            self):
        """field `Equivalent Piping Length used for Piping Correction Factor in
        Heating Mode` Enter the equivalent length of the farthest terminal unit
        from the condenser.

        Args:
            value (float): value for IDD Field `Equivalent Piping Length used for Piping Correction Factor in Heating Mode`
                Units: m
                Default value: 30.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode` or None if not set

        """
        return self[
            "Equivalent Piping Length used for Piping Correction Factor in Heating Mode"]

    @equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode.setter
    def equivalent_piping_length_used_for_piping_correction_factor_in_heating_mode(
            self,
            value=30.0):
        """Corresponds to IDD field `Equivalent Piping Length used for Piping
        Correction Factor in Heating Mode`"""
        self[
            "Equivalent Piping Length used for Piping Correction Factor in Heating Mode"] = value

    @property
    def crankcase_heater_power_per_compressor(self):
        """field `Crankcase Heater Power per Compressor` Enter the value of the
        resistive heater located in the compressor(s). This heater is used to
        warm the refrigerant and oil when the compressor is off.

        Args:
            value (float): value for IDD Field `Crankcase Heater Power per Compressor`
                Units: W
                Default value: 33.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `crankcase_heater_power_per_compressor` or None if not set

        """
        return self["Crankcase Heater Power per Compressor"]

    @crankcase_heater_power_per_compressor.setter
    def crankcase_heater_power_per_compressor(self, value=33.0):
        """Corresponds to IDD field `Crankcase Heater Power per Compressor`"""
        self["Crankcase Heater Power per Compressor"] = value

    @property
    def number_of_compressors(self):
        """field `Number of Compressors` Enter the total number of compressor.
        This input is used only for crankcase heater calculations.

        Args:
            value (int): value for IDD Field `Number of Compressors`
                Units: dimensionless
                Default value: 2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            int: the value of `number_of_compressors` or None if not set

        """
        return self["Number of Compressors"]

    @number_of_compressors.setter
    def number_of_compressors(self, value=2):
        """Corresponds to IDD field `Number of Compressors`"""
        self["Number of Compressors"] = value

    @property
    def ratio_of_compressor_size_to_total_compressor_capacity(self):
        """field `Ratio of Compressor Size to Total Compressor Capacity` Enter
        the ratio of the first stage compressor to total compressor capacity.
        All other compressors are assumed to be equally sized. This inputs is
        used only for crankcase heater calculations.

        Args:
            value (float): value for IDD Field `Ratio of Compressor Size to Total Compressor Capacity`
                Units: W/W
                Default value: 0.5

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `ratio_of_compressor_size_to_total_compressor_capacity` or None if not set

        """
        return self["Ratio of Compressor Size to Total Compressor Capacity"]

    @ratio_of_compressor_size_to_total_compressor_capacity.setter
    def ratio_of_compressor_size_to_total_compressor_capacity(self, value=0.5):
        """Corresponds to IDD field `Ratio of Compressor Size to Total
        Compressor Capacity`"""
        self["Ratio of Compressor Size to Total Compressor Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater(self):
        """field `Maximum Outdoor Dry-bulb Temperature for Crankcase Heater`
        Enter the maximum outdoor temperature above which the crankcase heaters are disabled.

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-bulb Temperature for Crankcase Heater`
                Units: C
                Default value: 5.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_crankcase_heater` or None if not set
        """
        return self[
            "Maximum Outdoor Dry-bulb Temperature for Crankcase Heater"]

    @maximum_outdoor_drybulb_temperature_for_crankcase_heater.setter
    def maximum_outdoor_drybulb_temperature_for_crankcase_heater(
            self,
            value=5.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-bulb Temperature for Crankcase Heater`

        """
        self[
            "Maximum Outdoor Dry-bulb Temperature for Crankcase Heater"] = value

    @property
    def defrost_strategy(self):
        """field `Defrost Strategy` Select a defrost strategy. Reverse cycle
        reverses the operating mode from heating to cooling to melt frost
        formation on the condenser coil. The resistive strategy uses a resitive
        heater to melt the frost.

        Args:
            value (str): value for IDD Field `Defrost Strategy`
                Default value: Resistive

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `defrost_strategy` or None if not set

        """
        return self["Defrost Strategy"]

    @defrost_strategy.setter
    def defrost_strategy(self, value="Resistive"):
        """Corresponds to IDD field `Defrost Strategy`"""
        self["Defrost Strategy"] = value

    @property
    def defrost_control(self):
        """field `Defrost Control` Choose a defrost control type. Either use a
        fixed Timed defrost period or select OnDemand to defrost only when
        necessary.

        Args:
            value (str): value for IDD Field `Defrost Control`
                Default value: Timed

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `defrost_control` or None if not set

        """
        return self["Defrost Control"]

    @defrost_control.setter
    def defrost_control(self, value="Timed"):
        """Corresponds to IDD field `Defrost Control`"""
        self["Defrost Control"] = value

    @property
    def defrost_time_period_fraction(self):
        """field `Defrost Time Period Fraction` Fraction of time in defrost
        mode. Only applicable if timed defrost control is specified.

        Args:
            value (float): value for IDD Field `Defrost Time Period Fraction`
                Units: dimensionless
                Default value: 0.058333

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `defrost_time_period_fraction` or None if not set

        """
        return self["Defrost Time Period Fraction"]

    @defrost_time_period_fraction.setter
    def defrost_time_period_fraction(self, value=0.058333):
        """Corresponds to IDD field `Defrost Time Period Fraction`"""
        self["Defrost Time Period Fraction"] = value

    @property
    def resistive_defrost_heater_capacity(self):
        """field `Resistive Defrost Heater Capacity` Enter the size of the
        resistive defrost heating element. Only applicable if resistive defrost
        strategy is specified.

        Args:
            value (float or "Autosize"): value for IDD Field `Resistive Defrost Heater Capacity`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `resistive_defrost_heater_capacity` or None if not set

        """
        return self["Resistive Defrost Heater Capacity"]

    @resistive_defrost_heater_capacity.setter
    def resistive_defrost_heater_capacity(self, value="autosize"):
        """Corresponds to IDD field `Resistive Defrost Heater Capacity`"""
        self["Resistive Defrost Heater Capacity"] = value

    @property
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(self):
        """field `Maximum Outdoor Dry-bulb Temperature for Defrost Operation`
        Enter the maximum outdoor temperature above which the crankcase heaters are disabled.

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry-bulb Temperature for Defrost Operation`
                Units: C
                Default value: 5.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_drybulb_temperature_for_defrost_operation` or None if not set
        """
        return self[
            "Maximum Outdoor Dry-bulb Temperature for Defrost Operation"]

    @maximum_outdoor_drybulb_temperature_for_defrost_operation.setter
    def maximum_outdoor_drybulb_temperature_for_defrost_operation(
            self,
            value=5.0):
        """  Corresponds to IDD field `Maximum Outdoor Dry-bulb Temperature for Defrost Operation`

        """
        self[
            "Maximum Outdoor Dry-bulb Temperature for Defrost Operation"] = value

    @property
    def condenser_type(self):
        """field `Condenser Type` Select either an air cooled or evaporatively
        cooled condenser.

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: AirCooled

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="AirCooled"):
        """Corresponds to IDD field `Condenser Type`"""
        self["Condenser Type"] = value

    @property
    def water_condenser_volume_flow_rate(self):
        """field `Water Condenser Volume Flow Rate`
        Only used when Condenser Type = WaterCooled.

        Args:
            value (float or "Autosize"): value for IDD Field `Water Condenser Volume Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `water_condenser_volume_flow_rate` or None if not set
        """
        return self["Water Condenser Volume Flow Rate"]

    @water_condenser_volume_flow_rate.setter
    def water_condenser_volume_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Water Condenser Volume Flow Rate`"""
        self["Water Condenser Volume Flow Rate"] = value

    @property
    def evaporative_condenser_effectiveness(self):
        """field `Evaporative Condenser Effectiveness`
        Enter the effectiveness of the evaporatively cooled condenser.
        This field is only used when the Condenser Type = EvaporativelyCooled.

        Args:
            value (float): value for IDD Field `Evaporative Condenser Effectiveness`
                Units: dimensionless
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `evaporative_condenser_effectiveness` or None if not set
        """
        return self["Evaporative Condenser Effectiveness"]

    @evaporative_condenser_effectiveness.setter
    def evaporative_condenser_effectiveness(self, value=0.9):
        """Corresponds to IDD field `Evaporative Condenser Effectiveness`"""
        self["Evaporative Condenser Effectiveness"] = value

    @property
    def evaporative_condenser_air_flow_rate(self):
        """field `Evaporative Condenser Air Flow Rate`
        Used to calculate evaporative condenser water use.
        This field is only used when the Condenser Type = EvaporativelyCooled.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `evaporative_condenser_air_flow_rate` or None if not set
        """
        return self["Evaporative Condenser Air Flow Rate"]

    @evaporative_condenser_air_flow_rate.setter
    def evaporative_condenser_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Evaporative Condenser Air Flow Rate`"""
        self["Evaporative Condenser Air Flow Rate"] = value

    @property
    def evaporative_condenser_pump_rated_power_consumption(self):
        """field `Evaporative Condenser Pump Rated Power Consumption`
        Rated power consumed by the evaporative condenser's water pump.
        This field is only used when the Condenser Type = EvaporativelyCooled.

        Args:
            value (float or "Autosize"): value for IDD Field `Evaporative Condenser Pump Rated Power Consumption`
                Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `evaporative_condenser_pump_rated_power_consumption` or None if not set
        """
        return self["Evaporative Condenser Pump Rated Power Consumption"]

    @evaporative_condenser_pump_rated_power_consumption.setter
    def evaporative_condenser_pump_rated_power_consumption(self, value=None):
        """Corresponds to IDD field `Evaporative Condenser Pump Rated Power
        Consumption`"""
        self["Evaporative Condenser Pump Rated Power Consumption"] = value

    @property
    def basin_heater_capacity(self):
        """field `Basin Heater Capacity`
        This field is only used for Condenser Type = EvaporativelyCooled and for periods
        when the basin heater is available (field Basin Heater Operating Schedule Name).
        For this situation, the heater maintains the basin water temperature at the basin heater
        setpoint temperature when the outdoor air temperature falls below the setpoint temperature.
        The basin heater only operates when the DX coil is off.

        Args:
            value (float): value for IDD Field `Basin Heater Capacity`
                Units: W/K

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `basin_heater_capacity` or None if not set
        """
        return self["Basin Heater Capacity"]

    @basin_heater_capacity.setter
    def basin_heater_capacity(self, value=None):
        """Corresponds to IDD field `Basin Heater Capacity`"""
        self["Basin Heater Capacity"] = value

    @property
    def basin_heater_setpoint_temperature(self):
        """field `Basin Heater Setpoint Temperature`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Enter the outdoor dry-bulb temperature when the basin heater turns on.

        Args:
            value (float): value for IDD Field `Basin Heater Setpoint Temperature`
                Units: C
                Default value: 2.0
                value >= 2.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `basin_heater_setpoint_temperature` or None if not set
        """
        return self["Basin Heater Setpoint Temperature"]

    @basin_heater_setpoint_temperature.setter
    def basin_heater_setpoint_temperature(self, value=2.0):
        """Corresponds to IDD field `Basin Heater Setpoint Temperature`"""
        self["Basin Heater Setpoint Temperature"] = value

    @property
    def basin_heater_operating_schedule_name(self):
        """field `Basin Heater Operating Schedule Name`
        This field is only used for Condenser Type = EvaporativelyCooled.
        Schedule values greater than 0 allow the basin heater to operate whenever the outdoor
        air dry-bulb temperature is below the basin heater setpoint temperature.
        If a schedule name is not entered, the basin heater is allowed to operate
        throughout the entire simulation.

        Args:
            value (str): value for IDD Field `Basin Heater Operating Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `basin_heater_operating_schedule_name` or None if not set
        """
        return self["Basin Heater Operating Schedule Name"]

    @basin_heater_operating_schedule_name.setter
    def basin_heater_operating_schedule_name(self, value=None):
        """Corresponds to IDD field `Basin Heater Operating Schedule Name`"""
        self["Basin Heater Operating Schedule Name"] = value

    @property
    def fuel_type(self):
        """field `Fuel Type`

        Args:
            value (str): value for IDD Field `Fuel Type`
                Default value: Electricity

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `fuel_type` or None if not set

        """
        return self["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value="Electricity"):
        """Corresponds to IDD field `Fuel Type`"""
        self["Fuel Type"] = value

    @property
    def minimum_outdoor_temperature_in_heat_recovery_mode(self):
        """field `Minimum Outdoor Temperature in Heat Recovery Mode` The
        minimum outdoor temperature below which heat recovery mode will not
        operate.

        Args:
            value (float): value for IDD Field `Minimum Outdoor Temperature in Heat Recovery Mode`
                Units: C
                Default value: -15.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_temperature_in_heat_recovery_mode` or None if not set

        """
        return self["Minimum Outdoor Temperature in Heat Recovery Mode"]

    @minimum_outdoor_temperature_in_heat_recovery_mode.setter
    def minimum_outdoor_temperature_in_heat_recovery_mode(self, value=-15.0):
        """Corresponds to IDD field `Minimum Outdoor Temperature in Heat
        Recovery Mode`"""
        self["Minimum Outdoor Temperature in Heat Recovery Mode"] = value

    @property
    def maximum_outdoor_temperature_in_heat_recovery_mode(self):
        """field `Maximum Outdoor Temperature in Heat Recovery Mode` The
        maximum outdoor temperature above which heat recovery mode will not
        operate.

        Args:
            value (float): value for IDD Field `Maximum Outdoor Temperature in Heat Recovery Mode`
                Units: C
                Default value: 45.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_temperature_in_heat_recovery_mode` or None if not set

        """
        return self["Maximum Outdoor Temperature in Heat Recovery Mode"]

    @maximum_outdoor_temperature_in_heat_recovery_mode.setter
    def maximum_outdoor_temperature_in_heat_recovery_mode(self, value=45.0):
        """Corresponds to IDD field `Maximum Outdoor Temperature in Heat
        Recovery Mode`"""
        self["Maximum Outdoor Temperature in Heat Recovery Mode"] = value




class HvactemplateSystemUnitary(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:Unitary`
        Unitary furnace with air conditioner
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'control zone or thermostat location name',
                                       {'name': u'Control Zone or Thermostat Location Name',
                                        'pyname': u'control_zone_or_thermostat_location_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan maximum flow rate',
                                       {'name': u'Supply Fan Maximum Flow Rate',
                                        'pyname': u'supply_fan_maximum_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan operating mode schedule name',
                                       {'name': u'Supply Fan Operating Mode Schedule Name',
                                        'pyname': u'supply_fan_operating_mode_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 600.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'SingleSpeedDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeedDX',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling design supply air temperature',
                                       {'name': u'Cooling Design Supply Air Temperature',
                                        'pyname': u'cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil gross rated total capacity',
                                       {'name': u'Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'cooling coil gross rated sensible heat ratio',
                                       {'name': u'Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil gross rated cop',
                                       {'name': u'Cooling Coil Gross Rated COP',
                                        'pyname': u'cooling_coil_gross_rated_cop',
                                        'default': 3.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'required-field': True,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'HotWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating design supply air temperature',
                                       {'name': u'Heating Design Supply Air Temperature',
                                        'pyname': u'heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil capacity',
                                       {'name': u'Heating Coil Capacity',
                                        'pyname': u'heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor air flow rate',
                                       {'name': u'Maximum Outdoor Air Flow Rate',
                                        'pyname': u'maximum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air flow rate',
                                       {'name': u'Minimum Outdoor Air Flow Rate',
                                        'pyname': u'minimum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air schedule name',
                                       {'name': u'Minimum Outdoor Air Schedule Name',
                                        'pyname': u'minimum_outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'economizer type',
                                       {'name': u'Economizer Type',
                                        'pyname': u'economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedDryBulb',
                                                            u'FixedEnthalpy',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy',
                                                            u'FixedDewPointAndDryBulb',
                                                            u'ElectronicEnthalpy',
                                                            u'DifferentialDryBulbAndEnthalpy',
                                                            u'NoEconomizer'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer lockout',
                                       {'name': u'Economizer Lockout',
                                        'pyname': u'economizer_lockout',
                                        'default': u'NoLockout',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLockout',
                                                            u'LockoutWithHeating',
                                                            u'LockoutWithCompressor'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer upper temperature limit',
                                       {'name': u'Economizer Upper Temperature Limit',
                                        'pyname': u'economizer_upper_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer lower temperature limit',
                                       {'name': u'Economizer Lower Temperature Limit',
                                        'pyname': u'economizer_lower_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer upper enthalpy limit',
                                       {'name': u'Economizer Upper Enthalpy Limit',
                                        'pyname': u'economizer_upper_enthalpy_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'J/kg'}),
                                      (u'economizer maximum limit dewpoint temperature',
                                       {'name': u'Economizer Maximum Limit Dewpoint Temperature',
                                        'pyname': u'economizer_maximum_limit_dewpoint_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'BlowThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control',
                                       {'name': u'Night Cycle Control',
                                        'pyname': u'night_cycle_control',
                                        'default': u'StayOff',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'StayOff',
                                                            u'CycleOnAny',
                                                            u'CycleOnControlZone'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control zone name',
                                       {'name': u'Night Cycle Control Zone Name',
                                        'pyname': u'night_cycle_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'CoolReheatHeatingCoil',
                                                            u'CoolReheatDesuperheater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control zone name',
                                       {'name': u'Dehumidification Control Zone Name',
                                        'pyname': u'dehumidification_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'dehumidification setpoint',
                                       {'name': u'Dehumidification Setpoint',
                                        'pyname': u'dehumidification_setpoint',
                                        'default': 60.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier control zone name',
                                       {'name': u'Humidifier Control Zone Name',
                                        'pyname': u'humidifier_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier setpoint',
                                       {'name': u'Humidifier Setpoint',
                                        'pyname': u'humidifier_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'return fan',
                                       {'name': u'Return Fan',
                                        'pyname': u'return_fan',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan total efficiency',
                                       {'name': u'Return Fan Total Efficiency',
                                        'pyname': u'return_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan delta pressure',
                                       {'name': u'Return Fan Delta Pressure',
                                        'pyname': u'return_fan_delta_pressure',
                                        'default': 500.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'return fan motor efficiency',
                                       {'name': u'Return Fan Motor Efficiency',
                                        'pyname': u'return_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan motor in air stream fraction',
                                       {'name': u'Return Fan Motor in Air Stream Fraction',
                                        'pyname': u'return_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 52,
               'name': u'HVACTemplate:System:Unitary',
               'pyname': u'HvactemplateSystemUnitary',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on;
        Unitary System always on.  Schedule is used in availability manager and
        fan scheduling. Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def control_zone_or_thermostat_location_name(self):
        """field `Control Zone or Thermostat Location Name`

        Args:
            value (str): value for IDD Field `Control Zone or Thermostat Location Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `control_zone_or_thermostat_location_name` or None if not set

        """
        return self["Control Zone or Thermostat Location Name"]

    @control_zone_or_thermostat_location_name.setter
    def control_zone_or_thermostat_location_name(self, value=None):
        """Corresponds to IDD field `Control Zone or Thermostat Location
        Name`"""
        self["Control Zone or Thermostat Location Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """field `Supply Fan Maximum Flow Rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Fan Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Fan Maximum Flow Rate`"""
        self["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """field `Supply Fan Operating Mode Schedule Name` Refers to a schedule
        to specify unitary supply fan operating mode. Schedule values of 0
        indicate cycling fan (auto) Schedule values of 1 indicate continuous
        fan (on) If this field is left blank, a schedule of always zero
        (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `Supply Fan Operating Mode Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set

        """
        return self["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """Corresponds to IDD field `Supply Fan Operating Mode Schedule
        Name`"""
        self["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: SingleSpeedDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_design_supply_air_temperature(self):
        """field `Cooling Design Supply Air Temperature` Used for sizing.

        Args:
            value (float): value for IDD Field `Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_design_supply_air_temperature` or None if not set

        """
        return self["Cooling Design Supply Air Temperature"]

    @cooling_design_supply_air_temperature.setter
    def cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Cooling Design Supply Air Temperature`"""
        self["Cooling Design Supply Air Temperature"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """field `Cooling Coil Gross Rated Total Capacity` Total cooling
        capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set

        """
        return self["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Total
        Capacity`"""
        self["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `Cooling Coil Gross Rated Sensible Heat Ratio` Gross SHR.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """field `Cooling Coil Gross Rated COP` Gross cooling capacity divided
        by power input to the compressor and outdoor fan, does not include
        supply air fan heat or supply air fan electric power.

        Args:
            value (float): value for IDD Field `Cooling Coil Gross Rated COP`
                Units: W/W
                Default value: 3.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set

        """
        return self["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling Coil Gross Rated COP`"""
        self["Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value=None):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_design_supply_air_temperature(self):
        """field `Heating Design Supply Air Temperature` Used for sizing.

        Args:
            value (float): value for IDD Field `Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_design_supply_air_temperature` or None if not set

        """
        return self["Heating Design Supply Air Temperature"]

    @heating_design_supply_air_temperature.setter
    def heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Heating Design Supply Air Temperature`"""
        self["Heating Design Supply Air Temperature"] = value

    @property
    def heating_coil_capacity(self):
        """field `Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_capacity` or None if not set

        """
        return self["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heating Coil Capacity`"""
        self["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """field `Maximum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set

        """
        return self["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Outdoor Air Flow Rate`"""
        self["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set

        """
        return self["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Minimum Outdoor Air Flow Rate`"""
        self["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """field `Minimum Outdoor Air Schedule Name` Schedule values multiply
        the minimum outdoor air flow rate If blank, always one.

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set

        """
        return self["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Air Schedule Name`"""
        self["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """field `Economizer Type`

        Args:
            value (str): value for IDD Field `Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_type` or None if not set

        """
        return self["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Economizer Type`"""
        self["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """field `Economizer Lockout`

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Default value: NoLockout

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_lockout` or None if not set

        """
        return self["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """Corresponds to IDD field `Economizer Lockout`"""
        self["Economizer Lockout"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """field `Economizer Upper Temperature Limit` Outdoor temperature above
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set

        """
        return self["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Temperature Limit`"""
        self["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """field `Economizer Lower Temperature Limit` Outdoor temperature below
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Lower Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set

        """
        return self["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Lower Temperature Limit`"""
        self["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """field `Economizer Upper Enthalpy Limit` Outdoor enthalpy above which
        economizer is disabled and heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Enthalpy Limit`
                Units: J/kg

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set

        """
        return self["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Enthalpy Limit`"""
        self["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """field `Economizer Maximum Limit Dewpoint Temperature` Enter the
        maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dewpoint Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set

        """
        return self["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Dewpoint
        Temperature`"""
        self["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: BlowThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="BlowThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def night_cycle_control(self):
        """field `Night Cycle Control`

        Args:
            value (str): value for IDD Field `Night Cycle Control`
                Default value: StayOff

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control` or None if not set

        """
        return self["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """Corresponds to IDD field `Night Cycle Control`"""
        self["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """field `Night Cycle Control Zone Name` Applicable only if Night Cycle
        Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `Night Cycle Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set

        """
        return self["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """Corresponds to IDD field `Night Cycle Control Zone Name`"""
        self["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness` Applicable only if Heat
        Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        None = meet sensible cooling load only
        CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint, reheat with main heating coil.
        CoolReheatDesuperheater = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint, reheat with desuperheater coil.

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """field `Dehumidification Control Zone Name`

        This field is not currently used - the thermostat control zone is also the dehumidification control zone

        Args:
            value (str): value for IDD Field `Dehumidification Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set

        """
        return self["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """Corresponds to IDD field `Dehumidification Control Zone Name`"""
        self["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_setpoint(self):
        """field `Dehumidification Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Dehumidification Setpoint`
                Units: percent
                Default value: 60.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set

        """
        return self["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0):
        """Corresponds to IDD field `Dehumidification Setpoint`"""
        self["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """field `Humidifier Control Zone Name` Zone name where humidistat is
        located.

        Args:
            value (str): value for IDD Field `Humidifier Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set

        """
        return self["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """Corresponds to IDD field `Humidifier Control Zone Name`"""
        self["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """field `Humidifier Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Humidifier Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_setpoint` or None if not set

        """
        return self["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidifier Setpoint`"""
        self["Humidifier Setpoint"] = value

    @property
    def return_fan(self):
        """field `Return Fan` Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `Return Fan`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan` or None if not set

        """
        return self["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """Corresponds to IDD field `Return Fan`"""
        self["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """field `Return Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set

        """
        return self["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Return Fan Total Efficiency`"""
        self["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """field `Return Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Return Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set

        """
        return self["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0):
        """Corresponds to IDD field `Return Fan Delta Pressure`"""
        self["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """field `Return Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set

        """
        return self["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Return Fan Motor Efficiency`"""
        self["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """field `Return Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Return Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Return Fan Motor in Air Stream
        Fraction`"""
        self["Return Fan Motor in Air Stream Fraction"] = value




class HvactemplateSystemUnitaryHeatPumpAirToAir(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:UnitaryHeatPump:AirToAir`
        Unitary furnace with electric air-to-air heat pump
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'control zone or thermostat location name',
                                       {'name': u'Control Zone or Thermostat Location Name',
                                        'pyname': u'control_zone_or_thermostat_location_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling supply air flow rate',
                                       {'name': u'Cooling Supply Air Flow Rate',
                                        'pyname': u'cooling_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'heating supply air flow rate',
                                       {'name': u'Heating Supply Air Flow Rate',
                                        'pyname': u'heating_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'no load supply air flow rate',
                                       {'name': u'No Load Supply Air Flow Rate',
                                        'pyname': u'no_load_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan operating mode schedule name',
                                       {'name': u'Supply Fan Operating Mode Schedule Name',
                                        'pyname': u'supply_fan_operating_mode_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'BlowThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 600.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'SingleSpeedDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeedDX'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling design supply air temperature',
                                       {'name': u'Cooling Design Supply Air Temperature',
                                        'pyname': u'cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil gross rated total capacity',
                                       {'name': u'Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'cooling coil gross rated sensible heat ratio',
                                       {'name': u'Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil gross rated cop',
                                       {'name': u'Cooling Coil Gross Rated COP',
                                        'pyname': u'cooling_coil_gross_rated_cop',
                                        'default': 3.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heat pump heating coil type',
                                       {'name': u'Heat Pump Heating Coil Type',
                                        'pyname': u'heat_pump_heating_coil_type',
                                        'default': u'SingleSpeedDXHeatPump',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeedDXHeatPump'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump heating coil availability schedule name',
                                       {'name': u'Heat Pump Heating Coil Availability Schedule Name',
                                        'pyname': u'heat_pump_heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating design supply air temperature',
                                       {'name': u'Heating Design Supply Air Temperature',
                                        'pyname': u'heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heat pump heating coil gross rated capacity',
                                       {'name': u'Heat Pump Heating Coil Gross Rated Capacity',
                                        'pyname': u'heat_pump_heating_coil_gross_rated_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'heat pump heating coil rated cop',
                                       {'name': u'Heat Pump Heating Coil Rated COP',
                                        'pyname': u'heat_pump_heating_coil_rated_cop',
                                        'default': 2.75,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heat pump heating minimum outdoor dry-bulb temperature',
                                       {'name': u'Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'heat_pump_heating_minimum_outdoor_drybulb_temperature',
                                        'default': -8.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': -20.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'heat pump defrost maximum outdoor dry-bulb temperature',
                                       {'name': u'Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'heat_pump_defrost_maximum_outdoor_drybulb_temperature',
                                        'default': 5.0,
                                        'maximum': 7.22,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'heat pump defrost strategy',
                                       {'name': u'Heat Pump Defrost Strategy',
                                        'pyname': u'heat_pump_defrost_strategy',
                                        'default': u'ReverseCycle',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ReverseCycle',
                                                            u'Resistive'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump defrost control',
                                       {'name': u'Heat Pump Defrost Control',
                                        'pyname': u'heat_pump_defrost_control',
                                        'default': u'Timed',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Timed',
                                                            u'OnDemand'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump defrost time period fraction',
                                       {'name': u'Heat Pump Defrost Time Period Fraction',
                                        'pyname': u'heat_pump_defrost_time_period_fraction',
                                        'default': 0.058333,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'supplemental heating coil type',
                                       {'name': u'Supplemental Heating Coil Type',
                                        'pyname': u'supplemental_heating_coil_type',
                                        'default': u'Electric',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'HotWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supplemental heating coil availability schedule name',
                                       {'name': u'Supplemental Heating Coil Availability Schedule Name',
                                        'pyname': u'supplemental_heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supplemental heating coil capacity',
                                       {'name': u'Supplemental Heating Coil Capacity',
                                        'pyname': u'supplemental_heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'supplemental heating coil maximum outdoor dry-bulb temperature',
                                       {'name': u'Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'supplemental_heating_coil_maximum_outdoor_drybulb_temperature',
                                        'default': 21.0,
                                        'maximum': 21.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supplemental gas heating coil efficiency',
                                       {'name': u'Supplemental Gas Heating Coil Efficiency',
                                        'pyname': u'supplemental_gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supplemental gas heating coil parasitic electric load',
                                       {'name': u'Supplemental Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'supplemental_gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor air flow rate',
                                       {'name': u'Maximum Outdoor Air Flow Rate',
                                        'pyname': u'maximum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air flow rate',
                                       {'name': u'Minimum Outdoor Air Flow Rate',
                                        'pyname': u'minimum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air schedule name',
                                       {'name': u'Minimum Outdoor Air Schedule Name',
                                        'pyname': u'minimum_outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'economizer type',
                                       {'name': u'Economizer Type',
                                        'pyname': u'economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedDryBulb',
                                                            u'FixedEnthalpy',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy',
                                                            u'FixedDewPointAndDryBulb',
                                                            u'ElectronicEnthalpy',
                                                            u'DifferentialDryBulbAndEnthalpy',
                                                            u'NoEconomizer'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer lockout',
                                       {'name': u'Economizer Lockout',
                                        'pyname': u'economizer_lockout',
                                        'default': u'NoLockout',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLockout',
                                                            u'LockoutWithHeating',
                                                            u'LockoutWithCompressor'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer maximum limit dry-bulb temperature',
                                       {'name': u'Economizer Maximum Limit Dry-Bulb Temperature',
                                        'pyname': u'economizer_maximum_limit_drybulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'economizer maximum limit enthalpy',
                                       {'name': u'Economizer Maximum Limit Enthalpy',
                                        'pyname': u'economizer_maximum_limit_enthalpy',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'J/kg'}),
                                      (u'economizer maximum limit dewpoint temperature',
                                       {'name': u'Economizer Maximum Limit Dewpoint Temperature',
                                        'pyname': u'economizer_maximum_limit_dewpoint_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'economizer minimum limit dry-bulb temperature',
                                       {'name': u'Economizer Minimum Limit Dry-Bulb Temperature',
                                        'pyname': u'economizer_minimum_limit_drybulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'night cycle control',
                                       {'name': u'Night Cycle Control',
                                        'pyname': u'night_cycle_control',
                                        'default': u'StayOff',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'StayOff',
                                                            u'CycleOnAny',
                                                            u'CycleOnControlZone'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control zone name',
                                       {'name': u'Night Cycle Control Zone Name',
                                        'pyname': u'night_cycle_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier control zone name',
                                       {'name': u'Humidifier Control Zone Name',
                                        'pyname': u'humidifier_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier setpoint',
                                       {'name': u'Humidifier Setpoint',
                                        'pyname': u'humidifier_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'return fan',
                                       {'name': u'Return Fan',
                                        'pyname': u'return_fan',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan total efficiency',
                                       {'name': u'Return Fan Total Efficiency',
                                        'pyname': u'return_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan delta pressure',
                                       {'name': u'Return Fan Delta Pressure',
                                        'pyname': u'return_fan_delta_pressure',
                                        'default': 500.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'return fan motor efficiency',
                                       {'name': u'Return Fan Motor Efficiency',
                                        'pyname': u'return_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan motor in air stream fraction',
                                       {'name': u'Return Fan Motor in Air Stream Fraction',
                                        'pyname': u'return_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 61,
               'name': u'HVACTemplate:System:UnitaryHeatPump:AirToAir',
               'pyname': u'HvactemplateSystemUnitaryHeatPumpAirToAir',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on;
        Unitary System always on.  Schedule is used in availability manager and
        fan scheduling. Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def control_zone_or_thermostat_location_name(self):
        """field `Control Zone or Thermostat Location Name`

        Args:
            value (str): value for IDD Field `Control Zone or Thermostat Location Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `control_zone_or_thermostat_location_name` or None if not set

        """
        return self["Control Zone or Thermostat Location Name"]

    @control_zone_or_thermostat_location_name.setter
    def control_zone_or_thermostat_location_name(self, value=None):
        """Corresponds to IDD field `Control Zone or Thermostat Location
        Name`"""
        self["Control Zone or Thermostat Location Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """field `Cooling Supply Air Flow Rate`
        Supply air flow rate during cooling operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set
        """
        return self["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Cooling Supply Air Flow Rate`"""
        self["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """field `Heating Supply Air Flow Rate`
        Supply air flow rate during heating operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set
        """
        return self["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Heating Supply Air Flow Rate`"""
        self["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """field `No Load Supply Air Flow Rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is Continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `No Load Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `No Load Supply Air Flow Rate`"""
        self["No Load Supply Air Flow Rate"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """field `Supply Fan Operating Mode Schedule Name` Refers to a schedule
        to specify unitary supply fan operating mode. Schedule values of 0
        indicate cycling fan (auto) Schedule values of 1 indicate continuous
        fan (on) If this field is left blank, a schedule of always zero
        (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `Supply Fan Operating Mode Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set

        """
        return self["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """Corresponds to IDD field `Supply Fan Operating Mode Schedule
        Name`"""
        self["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: BlowThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="BlowThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: SingleSpeedDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_design_supply_air_temperature(self):
        """field `Cooling Design Supply Air Temperature` Used for sizing.

        Args:
            value (float): value for IDD Field `Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_design_supply_air_temperature` or None if not set

        """
        return self["Cooling Design Supply Air Temperature"]

    @cooling_design_supply_air_temperature.setter
    def cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Cooling Design Supply Air Temperature`"""
        self["Cooling Design Supply Air Temperature"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """field `Cooling Coil Gross Rated Total Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Total
        Capacity`"""
        self["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `Cooling Coil Gross Rated Sensible Heat Ratio` Rated sensible
        heat ratio (gross sensible capacity/gross total capacity) Sensible and
        total capacities do not include effect of supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """field `Cooling Coil Gross Rated COP` Gross cooling capacity divided
        by power input to the compressor and outdoor fan, does not include
        supply fan heat or supply fan electric power input.

        Args:
            value (float): value for IDD Field `Cooling Coil Gross Rated COP`
                Units: W/W
                Default value: 3.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set

        """
        return self["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling Coil Gross Rated COP`"""
        self["Cooling Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_coil_type(self):
        """field `Heat Pump Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heat Pump Heating Coil Type`
                Default value: SingleSpeedDXHeatPump

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_heating_coil_type` or None if not set

        """
        return self["Heat Pump Heating Coil Type"]

    @heat_pump_heating_coil_type.setter
    def heat_pump_heating_coil_type(self, value="SingleSpeedDXHeatPump"):
        """Corresponds to IDD field `Heat Pump Heating Coil Type`"""
        self["Heat Pump Heating Coil Type"] = value

    @property
    def heat_pump_heating_coil_availability_schedule_name(self):
        """field `Heat Pump Heating Coil Availability Schedule Name` If blank,
        always on.

        Args:
            value (str): value for IDD Field `Heat Pump Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heat Pump Heating Coil Availability Schedule Name"]

    @heat_pump_heating_coil_availability_schedule_name.setter
    def heat_pump_heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heat Pump Heating Coil Availability
        Schedule Name`"""
        self["Heat Pump Heating Coil Availability Schedule Name"] = value

    @property
    def heating_design_supply_air_temperature(self):
        """field `Heating Design Supply Air Temperature` Used for sizing.

        Args:
            value (float): value for IDD Field `Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_design_supply_air_temperature` or None if not set

        """
        return self["Heating Design Supply Air Temperature"]

    @heating_design_supply_air_temperature.setter
    def heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Heating Design Supply Air Temperature`"""
        self["Heating Design Supply Air Temperature"] = value

    @property
    def heat_pump_heating_coil_gross_rated_capacity(self):
        """field `Heat Pump Heating Coil Gross Rated Capacity`
        Rated heating capacity excluding the effect of supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Heat Pump Heating Coil Gross Rated Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_capacity` or None if not set
        """
        return self["Heat Pump Heating Coil Gross Rated Capacity"]

    @heat_pump_heating_coil_gross_rated_capacity.setter
    def heat_pump_heating_coil_gross_rated_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heat Pump Heating Coil Gross Rated
        Capacity`"""
        self["Heat Pump Heating Coil Gross Rated Capacity"] = value

    @property
    def heat_pump_heating_coil_rated_cop(self):
        """field `Heat Pump Heating Coil Rated COP`
        Heat Pump Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy.
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float): value for IDD Field `Heat Pump Heating Coil Rated COP`
                Units: W/W
                Default value: 2.75

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_rated_cop` or None if not set
        """
        return self["Heat Pump Heating Coil Rated COP"]

    @heat_pump_heating_coil_rated_cop.setter
    def heat_pump_heating_coil_rated_cop(self, value=2.75):
        """Corresponds to IDD field `Heat Pump Heating Coil Rated COP`"""
        self["Heat Pump Heating Coil Rated COP"] = value

    @property
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self):
        """field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`

        Args:
            value (float): value for IDD Field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: -8.0
                value >= -20.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_minimum_outdoor_drybulb_temperature` or None if not set
        """
        return self["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"]

    @heat_pump_heating_minimum_outdoor_drybulb_temperature.setter
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(
            self,
            value=-
            8.0):
        """  Corresponds to IDD field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`

        """
        self["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self):
        """field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`

        Args:
            value (float): value for IDD Field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: 5.0
                value <= 7.22

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_defrost_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"]

    @heat_pump_defrost_maximum_outdoor_drybulb_temperature.setter
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self, value=5.0):
        """  Corresponds to IDD field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`

        """
        self["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_strategy(self):
        """field `Heat Pump Defrost Strategy`

        Args:
            value (str): value for IDD Field `Heat Pump Defrost Strategy`
                Default value: ReverseCycle

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_defrost_strategy` or None if not set

        """
        return self["Heat Pump Defrost Strategy"]

    @heat_pump_defrost_strategy.setter
    def heat_pump_defrost_strategy(self, value="ReverseCycle"):
        """Corresponds to IDD field `Heat Pump Defrost Strategy`"""
        self["Heat Pump Defrost Strategy"] = value

    @property
    def heat_pump_defrost_control(self):
        """field `Heat Pump Defrost Control`

        Args:
            value (str): value for IDD Field `Heat Pump Defrost Control`
                Default value: Timed

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_defrost_control` or None if not set

        """
        return self["Heat Pump Defrost Control"]

    @heat_pump_defrost_control.setter
    def heat_pump_defrost_control(self, value="Timed"):
        """Corresponds to IDD field `Heat Pump Defrost Control`"""
        self["Heat Pump Defrost Control"] = value

    @property
    def heat_pump_defrost_time_period_fraction(self):
        """field `Heat Pump Defrost Time Period Fraction` Fraction of time in
        defrost mode only applicable if Timed defrost control is specified.

        Args:
            value (float): value for IDD Field `Heat Pump Defrost Time Period Fraction`
                Default value: 0.058333

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_defrost_time_period_fraction` or None if not set

        """
        return self["Heat Pump Defrost Time Period Fraction"]

    @heat_pump_defrost_time_period_fraction.setter
    def heat_pump_defrost_time_period_fraction(self, value=0.058333):
        """Corresponds to IDD field `Heat Pump Defrost Time Period Fraction`"""
        self["Heat Pump Defrost Time Period Fraction"] = value

    @property
    def supplemental_heating_coil_type(self):
        """field `Supplemental Heating Coil Type`

        Args:
            value (str): value for IDD Field `Supplemental Heating Coil Type`
                Default value: Electric

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_coil_type` or None if not set

        """
        return self["Supplemental Heating Coil Type"]

    @supplemental_heating_coil_type.setter
    def supplemental_heating_coil_type(self, value="Electric"):
        """Corresponds to IDD field `Supplemental Heating Coil Type`"""
        self["Supplemental Heating Coil Type"] = value

    @property
    def supplemental_heating_coil_availability_schedule_name(self):
        """field `Supplemental Heating Coil Availability Schedule Name` If
        blank, always on.

        Args:
            value (str): value for IDD Field `Supplemental Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_coil_availability_schedule_name` or None if not set

        """
        return self["Supplemental Heating Coil Availability Schedule Name"]

    @supplemental_heating_coil_availability_schedule_name.setter
    def supplemental_heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Supplemental Heating Coil Availability
        Schedule Name`"""
        self["Supplemental Heating Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_coil_capacity(self):
        """field `Supplemental Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Supplemental Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_heating_coil_capacity` or None if not set

        """
        return self["Supplemental Heating Coil Capacity"]

    @supplemental_heating_coil_capacity.setter
    def supplemental_heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Supplemental Heating Coil Capacity`"""
        self["Supplemental Heating Coil Capacity"] = value

    @property
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(self):
        """field `Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature`
        Supplemental heater will not operate when outdoor temperature exceeds this value.

        Args:
            value (float): value for IDD Field `Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: 21.0
                value <= 21.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_heating_coil_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self[
            "Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"]

    @supplemental_heating_coil_maximum_outdoor_drybulb_temperature.setter
    def supplemental_heating_coil_maximum_outdoor_drybulb_temperature(
            self,
            value=21.0):
        """  Corresponds to IDD field `Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature`

        """
        self[
            "Supplemental Heating Coil Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def supplemental_gas_heating_coil_efficiency(self):
        """field `Supplemental Gas Heating Coil Efficiency` Applies only if
        Supplemental Heating Coil Type is Gas.

        Args:
            value (float): value for IDD Field `Supplemental Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_gas_heating_coil_efficiency` or None if not set

        """
        return self["Supplemental Gas Heating Coil Efficiency"]

    @supplemental_gas_heating_coil_efficiency.setter
    def supplemental_gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Supplemental Gas Heating Coil
        Efficiency`"""
        self["Supplemental Gas Heating Coil Efficiency"] = value

    @property
    def supplemental_gas_heating_coil_parasitic_electric_load(self):
        """field `Supplemental Gas Heating Coil Parasitic Electric Load`
        Applies only if Supplemental Heating Coil Type is Gas.

        Args:
            value (float): value for IDD Field `Supplemental Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Supplemental Gas Heating Coil Parasitic Electric Load"]

    @supplemental_gas_heating_coil_parasitic_electric_load.setter
    def supplemental_gas_heating_coil_parasitic_electric_load(
            self,
            value=None):
        """Corresponds to IDD field `Supplemental Gas Heating Coil Parasitic
        Electric Load`"""
        self["Supplemental Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """field `Maximum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set

        """
        return self["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Outdoor Air Flow Rate`"""
        self["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set

        """
        return self["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Minimum Outdoor Air Flow Rate`"""
        self["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """field `Minimum Outdoor Air Schedule Name` Schedule values multiply
        the minimum outdoor air flow rate If blank, multiplier is always one.

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set

        """
        return self["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Air Schedule Name`"""
        self["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """field `Economizer Type`

        Args:
            value (str): value for IDD Field `Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_type` or None if not set

        """
        return self["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Economizer Type`"""
        self["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """field `Economizer Lockout`

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Default value: NoLockout

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_lockout` or None if not set

        """
        return self["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """Corresponds to IDD field `Economizer Lockout`"""
        self["Economizer Lockout"] = value

    @property
    def economizer_maximum_limit_drybulb_temperature(self):
        """field `Economizer Maximum Limit Dry-Bulb Temperature`
        Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dry-Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_drybulb_temperature` or None if not set
        """
        return self["Economizer Maximum Limit Dry-Bulb Temperature"]

    @economizer_maximum_limit_drybulb_temperature.setter
    def economizer_maximum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD field `Economizer Maximum Limit Dry-Bulb Temperature`

        """
        self["Economizer Maximum Limit Dry-Bulb Temperature"] = value

    @property
    def economizer_maximum_limit_enthalpy(self):
        """field `Economizer Maximum Limit Enthalpy` Enter the maximum outdoor
        enthalpy limit for FixedEnthalpy economizer control type. No input or
        blank input means this limit is not operative Limit is applied
        regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Enthalpy`
                Units: J/kg

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_enthalpy` or None if not set

        """
        return self["Economizer Maximum Limit Enthalpy"]

    @economizer_maximum_limit_enthalpy.setter
    def economizer_maximum_limit_enthalpy(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Enthalpy`"""
        self["Economizer Maximum Limit Enthalpy"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """field `Economizer Maximum Limit Dewpoint Temperature` Enter the
        maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dewpoint Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set

        """
        return self["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Dewpoint
        Temperature`"""
        self["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def economizer_minimum_limit_drybulb_temperature(self):
        """field `Economizer Minimum Limit Dry-Bulb Temperature`
        Enter the minimum outdoor dry-bulb temperature limit for economizer control.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Minimum Limit Dry-Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_minimum_limit_drybulb_temperature` or None if not set
        """
        return self["Economizer Minimum Limit Dry-Bulb Temperature"]

    @economizer_minimum_limit_drybulb_temperature.setter
    def economizer_minimum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD field `Economizer Minimum Limit Dry-Bulb Temperature`

        """
        self["Economizer Minimum Limit Dry-Bulb Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def night_cycle_control(self):
        """field `Night Cycle Control`

        Args:
            value (str): value for IDD Field `Night Cycle Control`
                Default value: StayOff

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control` or None if not set

        """
        return self["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """Corresponds to IDD field `Night Cycle Control`"""
        self["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """field `Night Cycle Control Zone Name` Applicable only if Night Cycle
        Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `Night Cycle Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set

        """
        return self["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """Corresponds to IDD field `Night Cycle Control Zone Name`"""
        self["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness` Applicable only if Heat
        Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """field `Humidifier Control Zone Name` Zone name where humidistat is
        located.

        Args:
            value (str): value for IDD Field `Humidifier Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set

        """
        return self["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """Corresponds to IDD field `Humidifier Control Zone Name`"""
        self["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """field `Humidifier Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Humidifier Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_setpoint` or None if not set

        """
        return self["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidifier Setpoint`"""
        self["Humidifier Setpoint"] = value

    @property
    def return_fan(self):
        """field `Return Fan` Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `Return Fan`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan` or None if not set

        """
        return self["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """Corresponds to IDD field `Return Fan`"""
        self["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """field `Return Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set

        """
        return self["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Return Fan Total Efficiency`"""
        self["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """field `Return Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Return Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set

        """
        return self["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0):
        """Corresponds to IDD field `Return Fan Delta Pressure`"""
        self["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """field `Return Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set

        """
        return self["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Return Fan Motor Efficiency`"""
        self["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """field `Return Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Return Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Return Fan Motor in Air Stream
        Fraction`"""
        self["Return Fan Motor in Air Stream Fraction"] = value




class HvactemplateSystemUnitarySystem(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:UnitarySystem`
        Unitary HVAC system with optional cooling and heating. Supports DX and chilled water,
        cooling, gas, electric, and hot water heating, air-to-air and water-to-air heat pumps.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'control type',
                                       {'name': u'Control Type',
                                        'pyname': u'control_type',
                                        'default': u'Load',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Load',
                                                            u'SetPoint'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'control zone or thermostat location name',
                                       {'name': u'Control Zone or Thermostat Location Name',
                                        'pyname': u'control_zone_or_thermostat_location_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling supply air flow rate',
                                       {'name': u'Cooling Supply Air Flow Rate',
                                        'pyname': u'cooling_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'heating supply air flow rate',
                                       {'name': u'Heating Supply Air Flow Rate',
                                        'pyname': u'heating_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'no load supply air flow rate',
                                       {'name': u'No Load Supply Air Flow Rate',
                                        'pyname': u'no_load_supply_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan operating mode schedule name',
                                       {'name': u'Supply Fan Operating Mode Schedule Name',
                                        'pyname': u'supply_fan_operating_mode_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'BlowThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 600.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'SingleSpeedDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeedDX',
                                                            u'TwoSpeedDX',
                                                            u'MultiSpeedDX',
                                                            u'TwoStageDX',
                                                            u'TwoStageHumidityControlDX',
                                                            u'HeatExchangerAssistedDX',
                                                            u'SingleSpeedDXWaterCooled',
                                                            u'ChilledWater',
                                                            u'ChilledWaterDetailedFlatModel',
                                                            u'HeatExchangerAssistedChilledWater',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'number of speeds for cooling',
                                       {'name': u'Number of Speeds for Cooling',
                                        'pyname': u'number_of_speeds_for_cooling',
                                        'default': 1,
                                        'maximum': 4,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0,
                                        'autocalculatable': False,
                                        'type': u'integer'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling design supply air temperature',
                                       {'name': u'Cooling Design Supply Air Temperature',
                                        'pyname': u'cooling_design_supply_air_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'dx cooling coil gross rated total capacity',
                                       {'name': u'DX Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'dx_cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'dx cooling coil gross rated sensible heat ratio',
                                       {'name': u'DX Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'dx_cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'dx cooling coil gross rated cop',
                                       {'name': u'DX Cooling Coil Gross Rated COP',
                                        'pyname': u'dx_cooling_coil_gross_rated_cop',
                                        'default': 3.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'Gas',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'HotWater',
                                                            u'SingleSpeedDXHeatPumpAirSource',
                                                            u'MultiSpeedDXHeatPumpAirSource',
                                                            u'SingleSpeedDXHeatPumpWaterSource',
                                                            u'MultiStageElectric',
                                                            u'MultiStageGas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'number of speeds or stages for heating',
                                       {'name': u'Number of Speeds or Stages for Heating',
                                        'pyname': u'number_of_speeds_or_stages_for_heating',
                                        'default': 1,
                                        'maximum': 4,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0,
                                        'autocalculatable': False,
                                        'type': u'integer'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating design supply air temperature',
                                       {'name': u'Heating Design Supply Air Temperature',
                                        'pyname': u'heating_design_supply_air_temperature',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil gross rated capacity',
                                       {'name': u'Heating Coil Gross Rated Capacity',
                                        'pyname': u'heating_coil_gross_rated_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'heat pump heating coil gross rated cop',
                                       {'name': u'Heat Pump Heating Coil Gross Rated COP',
                                        'pyname': u'heat_pump_heating_coil_gross_rated_cop',
                                        'default': 2.75,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heat pump heating minimum outdoor dry-bulb temperature',
                                       {'name': u'Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'heat_pump_heating_minimum_outdoor_drybulb_temperature',
                                        'default': -8.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': -20.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'heat pump defrost maximum outdoor dry-bulb temperature',
                                       {'name': u'Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'heat_pump_defrost_maximum_outdoor_drybulb_temperature',
                                        'default': 5.0,
                                        'maximum': 7.22,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'heat pump defrost strategy',
                                       {'name': u'Heat Pump Defrost Strategy',
                                        'pyname': u'heat_pump_defrost_strategy',
                                        'default': u'ReverseCycle',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ReverseCycle',
                                                            u'Resistive'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump defrost control',
                                       {'name': u'Heat Pump Defrost Control',
                                        'pyname': u'heat_pump_defrost_control',
                                        'default': u'Timed',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Timed',
                                                            u'OnDemand'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat pump defrost time period fraction',
                                       {'name': u'Heat Pump Defrost Time Period Fraction',
                                        'pyname': u'heat_pump_defrost_time_period_fraction',
                                        'default': 0.058333,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'supplemental heating or reheat coil type',
                                       {'name': u'Supplemental Heating or Reheat Coil Type',
                                        'pyname': u'supplemental_heating_or_reheat_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'HotWater',
                                                            u'DesuperHeater',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supplemental heating or reheat coil availability schedule name',
                                       {'name': u'Supplemental Heating or Reheat Coil Availability Schedule Name',
                                        'pyname': u'supplemental_heating_or_reheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supplemental heating or reheat coil capacity',
                                       {'name': u'Supplemental Heating or Reheat Coil Capacity',
                                        'pyname': u'supplemental_heating_or_reheat_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'supplemental heating or reheat coil maximum outdoor dry-bulb temperature',
                                       {'name': u'Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature',
                                        'pyname': u'supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature',
                                        'default': 21.0,
                                        'maximum': 21.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supplemental gas heating or reheat coil efficiency',
                                       {'name': u'Supplemental Gas Heating or Reheat Coil Efficiency',
                                        'pyname': u'supplemental_gas_heating_or_reheat_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supplemental gas heating or reheat coil parasitic electric load',
                                       {'name': u'Supplemental Gas Heating or Reheat Coil Parasitic Electric Load',
                                        'pyname': u'supplemental_gas_heating_or_reheat_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor air flow rate',
                                       {'name': u'Maximum Outdoor Air Flow Rate',
                                        'pyname': u'maximum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air flow rate',
                                       {'name': u'Minimum Outdoor Air Flow Rate',
                                        'pyname': u'minimum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air schedule name',
                                       {'name': u'Minimum Outdoor Air Schedule Name',
                                        'pyname': u'minimum_outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'economizer type',
                                       {'name': u'Economizer Type',
                                        'pyname': u'economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedDryBulb',
                                                            u'FixedEnthalpy',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy',
                                                            u'FixedDewPointAndDryBulb',
                                                            u'ElectronicEnthalpy',
                                                            u'DifferentialDryBulbAndEnthalpy',
                                                            u'NoEconomizer'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer lockout',
                                       {'name': u'Economizer Lockout',
                                        'pyname': u'economizer_lockout',
                                        'default': u'NoLockout',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLockout',
                                                            u'LockoutWithHeating',
                                                            u'LockoutWithCompressor'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer maximum limit dry-bulb temperature',
                                       {'name': u'Economizer Maximum Limit Dry-Bulb Temperature',
                                        'pyname': u'economizer_maximum_limit_drybulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'economizer maximum limit enthalpy',
                                       {'name': u'Economizer Maximum Limit Enthalpy',
                                        'pyname': u'economizer_maximum_limit_enthalpy',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'J/kg'}),
                                      (u'economizer maximum limit dewpoint temperature',
                                       {'name': u'Economizer Maximum Limit Dewpoint Temperature',
                                        'pyname': u'economizer_maximum_limit_dewpoint_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'economizer minimum limit dry-bulb temperature',
                                       {'name': u'Economizer Minimum Limit Dry-Bulb Temperature',
                                        'pyname': u'economizer_minimum_limit_drybulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'heat recovery heat exchanger type',
                                       {'name': u'Heat Recovery Heat Exchanger Type',
                                        'pyname': u'heat_recovery_heat_exchanger_type',
                                        'default': u'Plate',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Plate',
                                                            u'Rotary'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat recovery frost control type',
                                       {'name': u'Heat Recovery Frost Control Type',
                                        'pyname': u'heat_recovery_frost_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ExhaustAirRecirculation',
                                                            u'ExhaustOnly',
                                                            u'MinimumExhaustTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'CoolReheat',
                                                            u'Multimode'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control zone name',
                                       {'name': u'Dehumidification Control Zone Name',
                                        'pyname': u'dehumidification_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'dehumidification relative humidity setpoint',
                                       {'name': u'Dehumidification Relative Humidity Setpoint',
                                        'pyname': u'dehumidification_relative_humidity_setpoint',
                                        'default': 60.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'dehumidification relative humidity setpoint schedule name',
                                       {'name': u'Dehumidification Relative Humidity Setpoint Schedule Name',
                                        'pyname': u'dehumidification_relative_humidity_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier control zone name',
                                       {'name': u'Humidifier Control Zone Name',
                                        'pyname': u'humidifier_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier relative humidity setpoint',
                                       {'name': u'Humidifier Relative Humidity Setpoint',
                                        'pyname': u'humidifier_relative_humidity_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'humidifier relative humidity setpoint schedule name',
                                       {'name': u'Humidifier Relative Humidity Setpoint Schedule Name',
                                        'pyname': u'humidifier_relative_humidity_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'sizing option',
                                       {'name': u'Sizing Option',
                                        'pyname': u'sizing_option',
                                        'default': u'NonCoincident',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Coincident',
                                                            u'NonCoincident'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan',
                                       {'name': u'Return Fan',
                                        'pyname': u'return_fan',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan total efficiency',
                                       {'name': u'Return Fan Total Efficiency',
                                        'pyname': u'return_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan delta pressure',
                                       {'name': u'Return Fan Delta Pressure',
                                        'pyname': u'return_fan_delta_pressure',
                                        'default': 300.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'return fan motor efficiency',
                                       {'name': u'Return Fan Motor Efficiency',
                                        'pyname': u'return_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan motor in air stream fraction',
                                       {'name': u'Return Fan Motor in Air Stream Fraction',
                                        'pyname': u'return_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 72,
               'name': u'HVACTemplate:System:UnitarySystem',
               'pyname': u'HvactemplateSystemUnitarySystem',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always
        available. Also see Supply Fan Operating Mode Schedule Name field.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def control_type(self):
        """field `Control Type` Load control requires a Controlling Zone name.
        SetPoint control requires set points at coil outlet nodes. The user
        must add appropriate SetpointManager objects to the idf file.

        Args:
            value (str): value for IDD Field `Control Type`
                Default value: Load

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `control_type` or None if not set

        """
        return self["Control Type"]

    @control_type.setter
    def control_type(self, value="Load"):
        """Corresponds to IDD field `Control Type`"""
        self["Control Type"] = value

    @property
    def control_zone_or_thermostat_location_name(self):
        """field `Control Zone or Thermostat Location Name` This field is
        required if Control Type is Load.

        Args:
            value (str): value for IDD Field `Control Zone or Thermostat Location Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `control_zone_or_thermostat_location_name` or None if not set

        """
        return self["Control Zone or Thermostat Location Name"]

    @control_zone_or_thermostat_location_name.setter
    def control_zone_or_thermostat_location_name(self, value=None):
        """Corresponds to IDD field `Control Zone or Thermostat Location
        Name`"""
        self["Control Zone or Thermostat Location Name"] = value

    @property
    def cooling_supply_air_flow_rate(self):
        """field `Cooling Supply Air Flow Rate`
        Supply air flow rate during cooling operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_supply_air_flow_rate` or None if not set
        """
        return self["Cooling Supply Air Flow Rate"]

    @cooling_supply_air_flow_rate.setter
    def cooling_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Cooling Supply Air Flow Rate`"""
        self["Cooling Supply Air Flow Rate"] = value

    @property
    def heating_supply_air_flow_rate(self):
        """field `Heating Supply Air Flow Rate`
        Supply air flow rate during heating operation
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_supply_air_flow_rate` or None if not set
        """
        return self["Heating Supply Air Flow Rate"]

    @heating_supply_air_flow_rate.setter
    def heating_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Heating Supply Air Flow Rate`"""
        self["Heating Supply Air Flow Rate"] = value

    @property
    def no_load_supply_air_flow_rate(self):
        """field `No Load Supply Air Flow Rate`
        Supply air flow rate when no cooling or heating is needed
        Only used when heat pump fan operating mode is Continuous. This air flow rate
        is used when no heating or cooling is required and the DX coil compressor is off.
        If this field is left blank or zero, the supply air flow rate from the previous on cycle
        (either cooling or heating) is used.
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `No Load Supply Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `no_load_supply_air_flow_rate` or None if not set
        """
        return self["No Load Supply Air Flow Rate"]

    @no_load_supply_air_flow_rate.setter
    def no_load_supply_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `No Load Supply Air Flow Rate`"""
        self["No Load Supply Air Flow Rate"] = value

    @property
    def supply_fan_operating_mode_schedule_name(self):
        """field `Supply Fan Operating Mode Schedule Name` Refers to a schedule
        to specify unitary supply fan operating mode. Schedule values of 0
        indicate cycling fan (auto) Schedule values of 1 indicate continuous
        fan (on) If this field is left blank, a schedule of always zero
        (cycling fan) will be used.

        Args:
            value (str): value for IDD Field `Supply Fan Operating Mode Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_operating_mode_schedule_name` or None if not set

        """
        return self["Supply Fan Operating Mode Schedule Name"]

    @supply_fan_operating_mode_schedule_name.setter
    def supply_fan_operating_mode_schedule_name(self, value=None):
        """Corresponds to IDD field `Supply Fan Operating Mode Schedule
        Name`"""
        self["Supply Fan Operating Mode Schedule Name"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: BlowThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="BlowThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: SingleSpeedDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="SingleSpeedDX"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def number_of_speeds_for_cooling(self):
        """field `Number of Speeds for Cooling`
        Used only for Cooling Coil Type = MultiSpeedDX.

        Args:
            value (int): value for IDD Field `Number of Speeds for Cooling`
                Default value: 1
                value <= 4

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            int: the value of `number_of_speeds_for_cooling` or None if not set
        """
        return self["Number of Speeds for Cooling"]

    @number_of_speeds_for_cooling.setter
    def number_of_speeds_for_cooling(self, value=1):
        """Corresponds to IDD field `Number of Speeds for Cooling`"""
        self["Number of Speeds for Cooling"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_design_supply_air_temperature(self):
        """field `Cooling Design Supply Air Temperature` Used for sizing.

        Args:
            value (float): value for IDD Field `Cooling Design Supply Air Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_design_supply_air_temperature` or None if not set

        """
        return self["Cooling Design Supply Air Temperature"]

    @cooling_design_supply_air_temperature.setter
    def cooling_design_supply_air_temperature(self, value=12.8):
        """Corresponds to IDD field `Cooling Design Supply Air Temperature`"""
        self["Cooling Design Supply Air Temperature"] = value

    @property
    def dx_cooling_coil_gross_rated_total_capacity(self):
        """field `DX Cooling Coil Gross Rated Total Capacity`
        Total cooling capacity not accounting for the effect of supply air fan heat
        Rating point: air entering the cooling coil at 26.7 C dry-bulb/19.4 C wet-bulb, and
        air entering the outdoor condenser coil at 35 C dry-bulb/23.9 C wet-bulb

        Args:
            value (float or "Autosize"): value for IDD Field `DX Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_total_capacity` or None if not set
        """
        return self["DX Cooling Coil Gross Rated Total Capacity"]

    @dx_cooling_coil_gross_rated_total_capacity.setter
    def dx_cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `DX Cooling Coil Gross Rated Total
        Capacity`"""
        self["DX Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `DX Cooling Coil Gross Rated Sensible Heat Ratio` Rated
        sensible heat ratio (gross sensible capacity/gross total capacity)
        Sensible and total capacities do not include effect of supply fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `DX Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["DX Cooling Coil Gross Rated Sensible Heat Ratio"]

    @dx_cooling_coil_gross_rated_sensible_heat_ratio.setter
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(
            self,
            value="autosize"):
        """Corresponds to IDD field `DX Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["DX Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def dx_cooling_coil_gross_rated_cop(self):
        """field `DX Cooling Coil Gross Rated COP` Gross cooling capacity
        divided by power input to the compressor and outdoor fan, does not
        include supply fan heat or supply fan electric power input.

        Args:
            value (float): value for IDD Field `DX Cooling Coil Gross Rated COP`
                Units: W/W
                Default value: 3.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_cop` or None if not set

        """
        return self["DX Cooling Coil Gross Rated COP"]

    @dx_cooling_coil_gross_rated_cop.setter
    def dx_cooling_coil_gross_rated_cop(self, value=3.0):
        """Corresponds to IDD field `DX Cooling Coil Gross Rated COP`"""
        self["DX Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: Gas

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="Gas"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def number_of_speeds_or_stages_for_heating(self):
        """field `Number of Speeds or Stages for Heating`
        Used only for Heating Coil Type = MultiSpeedDXHeatPumpAirSource),
        MultiStageElectric, or MultiStageGas.

        Args:
            value (int): value for IDD Field `Number of Speeds or Stages for Heating`
                Default value: 1
                value <= 4

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            int: the value of `number_of_speeds_or_stages_for_heating` or None if not set
        """
        return self["Number of Speeds or Stages for Heating"]

    @number_of_speeds_or_stages_for_heating.setter
    def number_of_speeds_or_stages_for_heating(self, value=1):
        """Corresponds to IDD field `Number of Speeds or Stages for Heating`"""
        self["Number of Speeds or Stages for Heating"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_design_supply_air_temperature(self):
        """field `Heating Design Supply Air Temperature` Used for sizing.

        Args:
            value (float): value for IDD Field `Heating Design Supply Air Temperature`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_design_supply_air_temperature` or None if not set

        """
        return self["Heating Design Supply Air Temperature"]

    @heating_design_supply_air_temperature.setter
    def heating_design_supply_air_temperature(self, value=50.0):
        """Corresponds to IDD field `Heating Design Supply Air Temperature`"""
        self["Heating Design Supply Air Temperature"] = value

    @property
    def heating_coil_gross_rated_capacity(self):
        """field `Heating Coil Gross Rated Capacity`
        Rated heating capacity excluding the effect of supply air fan heat
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Coil Gross Rated Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_gross_rated_capacity` or None if not set
        """
        return self["Heating Coil Gross Rated Capacity"]

    @heating_coil_gross_rated_capacity.setter
    def heating_coil_gross_rated_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heating Coil Gross Rated Capacity`"""
        self["Heating Coil Gross Rated Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def heat_pump_heating_coil_gross_rated_cop(self):
        """field `Heat Pump Heating Coil Gross Rated COP`
        Heating Coil Rated Capacity divided by power input to the compressor and outdoor fan,
        does not include supply air fan heat or supply air fan electrical energy.
        Rating point outdoor dry-bulb temp 8.33 C, outdoor wet-bulb temp 6.11 C
        Rating point heating coil entering air dry-bulb 21.11 C, coil entering wet-bulb 15.55 C
        Applies only to DX coils

        Args:
            value (float): value for IDD Field `Heat Pump Heating Coil Gross Rated COP`
                Units: W/W
                Default value: 2.75

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_coil_gross_rated_cop` or None if not set
        """
        return self["Heat Pump Heating Coil Gross Rated COP"]

    @heat_pump_heating_coil_gross_rated_cop.setter
    def heat_pump_heating_coil_gross_rated_cop(self, value=2.75):
        """Corresponds to IDD field `Heat Pump Heating Coil Gross Rated COP`"""
        self["Heat Pump Heating Coil Gross Rated COP"] = value

    @property
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(self):
        """field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`

        Args:
            value (float): value for IDD Field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: -8.0
                value >= -20.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_heating_minimum_outdoor_drybulb_temperature` or None if not set
        """
        return self["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"]

    @heat_pump_heating_minimum_outdoor_drybulb_temperature.setter
    def heat_pump_heating_minimum_outdoor_drybulb_temperature(
            self,
            value=-
            8.0):
        """  Corresponds to IDD field `Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature`

        """
        self["Heat Pump Heating Minimum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self):
        """field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`

        Args:
            value (float): value for IDD Field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: 5.0
                value <= 7.22

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_defrost_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"]

    @heat_pump_defrost_maximum_outdoor_drybulb_temperature.setter
    def heat_pump_defrost_maximum_outdoor_drybulb_temperature(self, value=5.0):
        """  Corresponds to IDD field `Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature`

        """
        self["Heat Pump Defrost Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def heat_pump_defrost_strategy(self):
        """field `Heat Pump Defrost Strategy`

        Args:
            value (str): value for IDD Field `Heat Pump Defrost Strategy`
                Default value: ReverseCycle

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_defrost_strategy` or None if not set

        """
        return self["Heat Pump Defrost Strategy"]

    @heat_pump_defrost_strategy.setter
    def heat_pump_defrost_strategy(self, value="ReverseCycle"):
        """Corresponds to IDD field `Heat Pump Defrost Strategy`"""
        self["Heat Pump Defrost Strategy"] = value

    @property
    def heat_pump_defrost_control(self):
        """field `Heat Pump Defrost Control`

        Args:
            value (str): value for IDD Field `Heat Pump Defrost Control`
                Default value: Timed

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_pump_defrost_control` or None if not set

        """
        return self["Heat Pump Defrost Control"]

    @heat_pump_defrost_control.setter
    def heat_pump_defrost_control(self, value="Timed"):
        """Corresponds to IDD field `Heat Pump Defrost Control`"""
        self["Heat Pump Defrost Control"] = value

    @property
    def heat_pump_defrost_time_period_fraction(self):
        """field `Heat Pump Defrost Time Period Fraction` Fraction of time in
        defrost mode only applicable if Timed defrost control is specified.

        Args:
            value (float): value for IDD Field `Heat Pump Defrost Time Period Fraction`
                Default value: 0.058333

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_pump_defrost_time_period_fraction` or None if not set

        """
        return self["Heat Pump Defrost Time Period Fraction"]

    @heat_pump_defrost_time_period_fraction.setter
    def heat_pump_defrost_time_period_fraction(self, value=0.058333):
        """Corresponds to IDD field `Heat Pump Defrost Time Period Fraction`"""
        self["Heat Pump Defrost Time Period Fraction"] = value

    @property
    def supplemental_heating_or_reheat_coil_type(self):
        """field `Supplemental Heating or Reheat Coil Type`

        Args:
            value (str): value for IDD Field `Supplemental Heating or Reheat Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_or_reheat_coil_type` or None if not set

        """
        return self["Supplemental Heating or Reheat Coil Type"]

    @supplemental_heating_or_reheat_coil_type.setter
    def supplemental_heating_or_reheat_coil_type(self, value="None"):
        """Corresponds to IDD field `Supplemental Heating or Reheat Coil
        Type`"""
        self["Supplemental Heating or Reheat Coil Type"] = value

    @property
    def supplemental_heating_or_reheat_coil_availability_schedule_name(self):
        """field `Supplemental Heating or Reheat Coil Availability Schedule
        Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Supplemental Heating or Reheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supplemental_heating_or_reheat_coil_availability_schedule_name` or None if not set

        """
        return self[
            "Supplemental Heating or Reheat Coil Availability Schedule Name"]

    @supplemental_heating_or_reheat_coil_availability_schedule_name.setter
    def supplemental_heating_or_reheat_coil_availability_schedule_name(
            self,
            value=None):
        """Corresponds to IDD field `Supplemental Heating or Reheat Coil
        Availability Schedule Name`"""
        self[
            "Supplemental Heating or Reheat Coil Availability Schedule Name"] = value

    @property
    def supplemental_heating_or_reheat_coil_capacity(self):
        """field `Supplemental Heating or Reheat Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Supplemental Heating or Reheat Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_heating_or_reheat_coil_capacity` or None if not set

        """
        return self["Supplemental Heating or Reheat Coil Capacity"]

    @supplemental_heating_or_reheat_coil_capacity.setter
    def supplemental_heating_or_reheat_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Supplemental Heating or Reheat Coil
        Capacity`"""
        self["Supplemental Heating or Reheat Coil Capacity"] = value

    @property
    def supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature(
            self):
        """field `Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature`
        Supplemental heater will not operate when outdoor temperature exceeds this value.

        Args:
            value (float): value for IDD Field `Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature`
                Units: C
                Default value: 21.0
                value <= 21.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature` or None if not set
        """
        return self[
            "Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature"]

    @supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature.setter
    def supplemental_heating_or_reheat_coil_maximum_outdoor_drybulb_temperature(
            self,
            value=21.0):
        """  Corresponds to IDD field `Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature`

        """
        self[
            "Supplemental Heating or Reheat Coil Maximum Outdoor Dry-Bulb Temperature"] = value

    @property
    def supplemental_gas_heating_or_reheat_coil_efficiency(self):
        """field `Supplemental Gas Heating or Reheat Coil Efficiency` Applies
        only if Supplemental Heating Coil Type is Gas.

        Args:
            value (float): value for IDD Field `Supplemental Gas Heating or Reheat Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_gas_heating_or_reheat_coil_efficiency` or None if not set

        """
        return self["Supplemental Gas Heating or Reheat Coil Efficiency"]

    @supplemental_gas_heating_or_reheat_coil_efficiency.setter
    def supplemental_gas_heating_or_reheat_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Supplemental Gas Heating or Reheat Coil
        Efficiency`"""
        self["Supplemental Gas Heating or Reheat Coil Efficiency"] = value

    @property
    def supplemental_gas_heating_or_reheat_coil_parasitic_electric_load(self):
        """field `Supplemental Gas Heating or Reheat Coil Parasitic Electric
        Load` Applies only if Supplemental Heating Coil Type is Gas.

        Args:
            value (float): value for IDD Field `Supplemental Gas Heating or Reheat Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supplemental_gas_heating_or_reheat_coil_parasitic_electric_load` or None if not set

        """
        return self[
            "Supplemental Gas Heating or Reheat Coil Parasitic Electric Load"]

    @supplemental_gas_heating_or_reheat_coil_parasitic_electric_load.setter
    def supplemental_gas_heating_or_reheat_coil_parasitic_electric_load(
            self,
            value=None):
        """Corresponds to IDD field `Supplemental Gas Heating or Reheat Coil
        Parasitic Electric Load`"""
        self[
            "Supplemental Gas Heating or Reheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """field `Maximum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set

        """
        return self["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Outdoor Air Flow Rate`"""
        self["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set

        """
        return self["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Minimum Outdoor Air Flow Rate`"""
        self["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """field `Minimum Outdoor Air Schedule Name` Schedule values multiply
        the minimum outdoor air flow rate If blank, multiplier is always one.

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set

        """
        return self["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Air Schedule Name`"""
        self["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """field `Economizer Type`

        Args:
            value (str): value for IDD Field `Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_type` or None if not set

        """
        return self["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Economizer Type`"""
        self["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """field `Economizer Lockout`

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Default value: NoLockout

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_lockout` or None if not set

        """
        return self["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """Corresponds to IDD field `Economizer Lockout`"""
        self["Economizer Lockout"] = value

    @property
    def economizer_maximum_limit_drybulb_temperature(self):
        """field `Economizer Maximum Limit Dry-Bulb Temperature`
        Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dry-Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_drybulb_temperature` or None if not set
        """
        return self["Economizer Maximum Limit Dry-Bulb Temperature"]

    @economizer_maximum_limit_drybulb_temperature.setter
    def economizer_maximum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD field `Economizer Maximum Limit Dry-Bulb Temperature`

        """
        self["Economizer Maximum Limit Dry-Bulb Temperature"] = value

    @property
    def economizer_maximum_limit_enthalpy(self):
        """field `Economizer Maximum Limit Enthalpy` Enter the maximum outdoor
        enthalpy limit for FixedEnthalpy economizer control type. No input or
        blank input means this limit is not operative Limit is applied
        regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Enthalpy`
                Units: J/kg

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_enthalpy` or None if not set

        """
        return self["Economizer Maximum Limit Enthalpy"]

    @economizer_maximum_limit_enthalpy.setter
    def economizer_maximum_limit_enthalpy(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Enthalpy`"""
        self["Economizer Maximum Limit Enthalpy"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """field `Economizer Maximum Limit Dewpoint Temperature` Enter the
        maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dewpoint Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set

        """
        return self["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Dewpoint
        Temperature`"""
        self["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def economizer_minimum_limit_drybulb_temperature(self):
        """field `Economizer Minimum Limit Dry-Bulb Temperature`
        Enter the minimum outdoor dry-bulb temperature limit for economizer control.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Minimum Limit Dry-Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_minimum_limit_drybulb_temperature` or None if not set
        """
        return self["Economizer Minimum Limit Dry-Bulb Temperature"]

    @economizer_minimum_limit_drybulb_temperature.setter
    def economizer_minimum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD field `Economizer Minimum Limit Dry-Bulb Temperature`

        """
        self["Economizer Minimum Limit Dry-Bulb Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Return plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness` Applicable only if Heat
        Recovery Type is Enthalpy.

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """field `Heat Recovery Heat Exchanger Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Heat Exchanger Type`
                Default value: Plate

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set

        """
        return self["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """Corresponds to IDD field `Heat Recovery Heat Exchanger Type`"""
        self["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """field `Heat Recovery Frost Control Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Frost Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set

        """
        return self["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Frost Control Type`"""
        self["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint, reheat with reheat coil
        If no reheat coil specified, cold supply temps may occur.
        Multimode = activate enhanced dehumidification mode as needed and meet sensible load.
        Valid only for Cooling Coil Type = TwoStageHumidityControlDX

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """field `Dehumidification Control Zone Name` Zone name where
        humidistat is located.

        Args:
            value (str): value for IDD Field `Dehumidification Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set

        """
        return self["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """Corresponds to IDD field `Dehumidification Control Zone Name`"""
        self["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_relative_humidity_setpoint(self):
        """field `Dehumidification Relative Humidity Setpoint` Zone relative
        humidity setpoint in percent (0 to 100) Ignored if Dehumidification
        Relative Humidity Setpoint Schedule specified below.

        Args:
            value (float): value for IDD Field `Dehumidification Relative Humidity Setpoint`
                Units: percent
                Default value: 60.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_relative_humidity_setpoint` or None if not set

        """
        return self["Dehumidification Relative Humidity Setpoint"]

    @dehumidification_relative_humidity_setpoint.setter
    def dehumidification_relative_humidity_setpoint(self, value=60.0):
        """Corresponds to IDD field `Dehumidification Relative Humidity
        Setpoint`"""
        self["Dehumidification Relative Humidity Setpoint"] = value

    @property
    def dehumidification_relative_humidity_setpoint_schedule_name(self):
        """field `Dehumidification Relative Humidity Setpoint Schedule Name`
        Leave blank to use constant setpoint specified in Dehumidification
        Relative Humidity Setpoint above. Schedule values must be in percent
        relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `Dehumidification Relative Humidity Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_relative_humidity_setpoint_schedule_name` or None if not set

        """
        return self[
            "Dehumidification Relative Humidity Setpoint Schedule Name"]

    @dehumidification_relative_humidity_setpoint_schedule_name.setter
    def dehumidification_relative_humidity_setpoint_schedule_name(
            self,
            value=None):
        """Corresponds to IDD field `Dehumidification Relative Humidity
        Setpoint Schedule Name`"""
        self[
            "Dehumidification Relative Humidity Setpoint Schedule Name"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """field `Humidifier Control Zone Name` Zone name where humidistat is
        located.

        Args:
            value (str): value for IDD Field `Humidifier Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set

        """
        return self["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """Corresponds to IDD field `Humidifier Control Zone Name`"""
        self["Humidifier Control Zone Name"] = value

    @property
    def humidifier_relative_humidity_setpoint(self):
        """field `Humidifier Relative Humidity Setpoint` Zone relative humidity
        setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity
        Setpoint Schedule specified below.

        Args:
            value (float): value for IDD Field `Humidifier Relative Humidity Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_relative_humidity_setpoint` or None if not set

        """
        return self["Humidifier Relative Humidity Setpoint"]

    @humidifier_relative_humidity_setpoint.setter
    def humidifier_relative_humidity_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidifier Relative Humidity Setpoint`"""
        self["Humidifier Relative Humidity Setpoint"] = value

    @property
    def humidifier_relative_humidity_setpoint_schedule_name(self):
        """field `Humidifier Relative Humidity Setpoint Schedule Name` Leave
        blank to use constant setpoint specified in Humidifier Relative
        Humidity Setpoint above.Schedule values must be in percent relative
        humidity (0 to 100).

        Args:
            value (str): value for IDD Field `Humidifier Relative Humidity Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_relative_humidity_setpoint_schedule_name` or None if not set

        """
        return self["Humidifier Relative Humidity Setpoint Schedule Name"]

    @humidifier_relative_humidity_setpoint_schedule_name.setter
    def humidifier_relative_humidity_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Relative Humidity Setpoint
        Schedule Name`"""
        self["Humidifier Relative Humidity Setpoint Schedule Name"] = value

    @property
    def sizing_option(self):
        """field `Sizing Option` Select whether autosized system supply flow
        rate is the sum of Coincident or NonCoincident zone air flow rates.

        Args:
            value (str): value for IDD Field `Sizing Option`
                Default value: NonCoincident

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `sizing_option` or None if not set

        """
        return self["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """Corresponds to IDD field `Sizing Option`"""
        self["Sizing Option"] = value

    @property
    def return_fan(self):
        """field `Return Fan` Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `Return Fan`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan` or None if not set

        """
        return self["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """Corresponds to IDD field `Return Fan`"""
        self["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """field `Return Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set

        """
        return self["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Return Fan Total Efficiency`"""
        self["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """field `Return Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Return Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 300.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set

        """
        return self["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=300.0):
        """Corresponds to IDD field `Return Fan Delta Pressure`"""
        self["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """field `Return Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set

        """
        return self["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Return Fan Motor Efficiency`"""
        self["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """field `Return Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Return Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Return Fan Motor in Air Stream
        Fraction`"""
        self["Return Fan Motor in Air Stream Fraction"] = value




class HvactemplateSystemVav(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:VAV`
        Variable Air Volume (VAV) air loop with optional heating coil
        and optional preheat.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan maximum flow rate',
                                       {'name': u'Supply Fan Maximum Flow Rate',
                                        'pyname': u'supply_fan_maximum_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan minimum flow rate',
                                       {'name': u'Supply Fan Minimum Flow Rate',
                                        'pyname': u'supply_fan_minimum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 1000.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'ChilledWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ChilledWater',
                                                            u'ChilledWaterDetailedFlatModel'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint schedule name',
                                       {'name': u'Cooling Coil Setpoint Schedule Name',
                                        'pyname': u'cooling_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil design setpoint',
                                       {'name': u'Cooling Coil Design Setpoint',
                                        'pyname': u'cooling_coil_design_setpoint',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint schedule name',
                                       {'name': u'Heating Coil Setpoint Schedule Name',
                                        'pyname': u'heating_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil design setpoint',
                                       {'name': u'Heating Coil Design Setpoint',
                                        'pyname': u'heating_coil_design_setpoint',
                                        'default': 10.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'preheat coil type',
                                       {'name': u'Preheat Coil Type',
                                        'pyname': u'preheat_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'preheat coil availability schedule name',
                                       {'name': u'Preheat Coil Availability Schedule Name',
                                        'pyname': u'preheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'preheat coil setpoint schedule name',
                                       {'name': u'Preheat Coil Setpoint Schedule Name',
                                        'pyname': u'preheat_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'preheat coil design setpoint',
                                       {'name': u'Preheat Coil Design Setpoint',
                                        'pyname': u'preheat_coil_design_setpoint',
                                        'default': 7.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'gas preheat coil efficiency',
                                       {'name': u'Gas Preheat Coil Efficiency',
                                        'pyname': u'gas_preheat_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas preheat coil parasitic electric load',
                                       {'name': u'Gas Preheat Coil Parasitic Electric Load',
                                        'pyname': u'gas_preheat_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor air flow rate',
                                       {'name': u'Maximum Outdoor Air Flow Rate',
                                        'pyname': u'maximum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air flow rate',
                                       {'name': u'Minimum Outdoor Air Flow Rate',
                                        'pyname': u'minimum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air control type',
                                       {'name': u'Minimum Outdoor Air Control Type',
                                        'pyname': u'minimum_outdoor_air_control_type',
                                        'default': u'ProportionalMinimum',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedMinimum',
                                                            u'ProportionalMinimum'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'minimum outdoor air schedule name',
                                       {'name': u'Minimum Outdoor Air Schedule Name',
                                        'pyname': u'minimum_outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'economizer type',
                                       {'name': u'Economizer Type',
                                        'pyname': u'economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedDryBulb',
                                                            u'FixedEnthalpy',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy',
                                                            u'FixedDewPointAndDryBulb',
                                                            u'ElectronicEnthalpy',
                                                            u'DifferentialDryBulbAndEnthalpy',
                                                            u'NoEconomizer'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer lockout',
                                       {'name': u'Economizer Lockout',
                                        'pyname': u'economizer_lockout',
                                        'default': u'NoLockout',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLockout'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer upper temperature limit',
                                       {'name': u'Economizer Upper Temperature Limit',
                                        'pyname': u'economizer_upper_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer lower temperature limit',
                                       {'name': u'Economizer Lower Temperature Limit',
                                        'pyname': u'economizer_lower_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer upper enthalpy limit',
                                       {'name': u'Economizer Upper Enthalpy Limit',
                                        'pyname': u'economizer_upper_enthalpy_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'J/kg'}),
                                      (u'economizer maximum limit dewpoint temperature',
                                       {'name': u'Economizer Maximum Limit Dewpoint Temperature',
                                        'pyname': u'economizer_maximum_limit_dewpoint_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'DrawThrough',
                                                            u'BlowThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan part-load power coefficients',
                                       {'name': u'Supply Fan Part-Load Power Coefficients',
                                        'pyname': u'supply_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control',
                                       {'name': u'Night Cycle Control',
                                        'pyname': u'night_cycle_control',
                                        'default': u'StayOff',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'StayOff',
                                                            u'CycleOnAny',
                                                            u'CycleOnControlZone',
                                                            u'CycleOnAnyZoneFansOnly'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control zone name',
                                       {'name': u'Night Cycle Control Zone Name',
                                        'pyname': u'night_cycle_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil setpoint reset type',
                                       {'name': u'Cooling Coil Setpoint Reset Type',
                                        'pyname': u'cooling_coil_setpoint_reset_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Warmest',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'WarmestTemperatureFirst'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil setpoint reset type',
                                       {'name': u'Heating Coil Setpoint Reset Type',
                                        'pyname': u'heating_coil_setpoint_reset_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'OutdoorAirTemperatureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'CoolReheat'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control zone name',
                                       {'name': u'Dehumidification Control Zone Name',
                                        'pyname': u'dehumidification_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'dehumidification setpoint',
                                       {'name': u'Dehumidification Setpoint',
                                        'pyname': u'dehumidification_setpoint',
                                        'default': 60.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier control zone name',
                                       {'name': u'Humidifier Control Zone Name',
                                        'pyname': u'humidifier_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier setpoint',
                                       {'name': u'Humidifier Setpoint',
                                        'pyname': u'humidifier_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'sizing option',
                                       {'name': u'Sizing Option',
                                        'pyname': u'sizing_option',
                                        'default': u'NonCoincident',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Coincident',
                                                            u'NonCoincident'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan',
                                       {'name': u'Return Fan',
                                        'pyname': u'return_fan',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan total efficiency',
                                       {'name': u'Return Fan Total Efficiency',
                                        'pyname': u'return_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan delta pressure',
                                       {'name': u'Return Fan Delta Pressure',
                                        'pyname': u'return_fan_delta_pressure',
                                        'default': 500.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'return fan motor efficiency',
                                       {'name': u'Return Fan Motor Efficiency',
                                        'pyname': u'return_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan motor in air stream fraction',
                                       {'name': u'Return Fan Motor in Air Stream Fraction',
                                        'pyname': u'return_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan part-load power coefficients',
                                       {'name': u'Return Fan Part-Load Power Coefficients',
                                        'pyname': u'return_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 61,
               'name': u'HVACTemplate:System:VAV',
               'pyname': u'HvactemplateSystemVav',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on; VAV
        System always on.  Schedule is used in availability manager and fan
        scheduling. Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """field `Supply Fan Maximum Flow Rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Fan Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Fan Maximum Flow Rate`"""
        self["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_minimum_flow_rate(self):
        """field `Supply Fan Minimum Flow Rate` This field is only used to set
        a minimum part load on the VAV fan power curve. Autosize or zero is
        recommended.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Fan Minimum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_minimum_flow_rate` or None if not set

        """
        return self["Supply Fan Minimum Flow Rate"]

    @supply_fan_minimum_flow_rate.setter
    def supply_fan_minimum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Fan Minimum Flow Rate`"""
        self["Supply Fan Minimum Flow Rate"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=1000.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: ChilledWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """field `Cooling Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set

        """
        return self["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Setpoint Schedule Name`"""
        self["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """field `Cooling Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Cooling Coil Design Setpoint`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set

        """
        return self["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=12.8):
        """Corresponds to IDD field `Cooling Coil Design Setpoint`"""
        self["Cooling Coil Design Setpoint"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="None"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """field `Heating Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set

        """
        return self["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Setpoint Schedule Name`"""
        self["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """field `Heating Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Heating Coil Design Setpoint`
                Units: C
                Default value: 10.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set

        """
        return self["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=10.0):
        """Corresponds to IDD field `Heating Coil Design Setpoint`"""
        self["Heating Coil Design Setpoint"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def preheat_coil_type(self):
        """field `Preheat Coil Type`

        Args:
            value (str): value for IDD Field `Preheat Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_type` or None if not set

        """
        return self["Preheat Coil Type"]

    @preheat_coil_type.setter
    def preheat_coil_type(self, value="None"):
        """Corresponds to IDD field `Preheat Coil Type`"""
        self["Preheat Coil Type"] = value

    @property
    def preheat_coil_availability_schedule_name(self):
        """field `Preheat Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Preheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_availability_schedule_name` or None if not set

        """
        return self["Preheat Coil Availability Schedule Name"]

    @preheat_coil_availability_schedule_name.setter
    def preheat_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Preheat Coil Availability Schedule
        Name`"""
        self["Preheat Coil Availability Schedule Name"] = value

    @property
    def preheat_coil_setpoint_schedule_name(self):
        """field `Preheat Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Preheat Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_setpoint_schedule_name` or None if not set

        """
        return self["Preheat Coil Setpoint Schedule Name"]

    @preheat_coil_setpoint_schedule_name.setter
    def preheat_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Preheat Coil Setpoint Schedule Name`"""
        self["Preheat Coil Setpoint Schedule Name"] = value

    @property
    def preheat_coil_design_setpoint(self):
        """field `Preheat Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Preheat Coil Setpoint Schedule Name specified.

        Args:
            value (float): value for IDD Field `Preheat Coil Design Setpoint`
                Units: C
                Default value: 7.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `preheat_coil_design_setpoint` or None if not set

        """
        return self["Preheat Coil Design Setpoint"]

    @preheat_coil_design_setpoint.setter
    def preheat_coil_design_setpoint(self, value=7.2):
        """Corresponds to IDD field `Preheat Coil Design Setpoint`"""
        self["Preheat Coil Design Setpoint"] = value

    @property
    def gas_preheat_coil_efficiency(self):
        """field `Gas Preheat Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Preheat Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_preheat_coil_efficiency` or None if not set

        """
        return self["Gas Preheat Coil Efficiency"]

    @gas_preheat_coil_efficiency.setter
    def gas_preheat_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Preheat Coil Efficiency`"""
        self["Gas Preheat Coil Efficiency"] = value

    @property
    def gas_preheat_coil_parasitic_electric_load(self):
        """field `Gas Preheat Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Preheat Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_preheat_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Preheat Coil Parasitic Electric Load"]

    @gas_preheat_coil_parasitic_electric_load.setter
    def gas_preheat_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Preheat Coil Parasitic Electric
        Load`"""
        self["Gas Preheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """field `Maximum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set

        """
        return self["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Outdoor Air Flow Rate`"""
        self["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set

        """
        return self["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Minimum Outdoor Air Flow Rate`"""
        self["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_control_type(self):
        """field `Minimum Outdoor Air Control Type`

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Control Type`
                Default value: ProportionalMinimum

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_control_type` or None if not set

        """
        return self["Minimum Outdoor Air Control Type"]

    @minimum_outdoor_air_control_type.setter
    def minimum_outdoor_air_control_type(self, value="ProportionalMinimum"):
        """Corresponds to IDD field `Minimum Outdoor Air Control Type`"""
        self["Minimum Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """field `Minimum Outdoor Air Schedule Name` Schedule values multiply
        the Minimum Outdoor Air Flow Rate If blank, multiplier is always one.

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set

        """
        return self["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Air Schedule Name`"""
        self["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """field `Economizer Type`

        Args:
            value (str): value for IDD Field `Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_type` or None if not set

        """
        return self["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Economizer Type`"""
        self["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """field `Economizer Lockout`

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Default value: NoLockout

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_lockout` or None if not set

        """
        return self["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """Corresponds to IDD field `Economizer Lockout`"""
        self["Economizer Lockout"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """field `Economizer Upper Temperature Limit` Outdoor temperature above
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set

        """
        return self["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Temperature Limit`"""
        self["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """field `Economizer Lower Temperature Limit` Outdoor temperature below
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Lower Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set

        """
        return self["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Lower Temperature Limit`"""
        self["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """field `Economizer Upper Enthalpy Limit` Outdoor enthalpy above which
        economizer is disabled and heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Enthalpy Limit`
                Units: J/kg

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set

        """
        return self["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Enthalpy Limit`"""
        self["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """field `Economizer Maximum Limit Dewpoint Temperature` Enter the
        maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dewpoint Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set

        """
        return self["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Dewpoint
        Temperature`"""
        self["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def supply_fan_partload_power_coefficients(self):
        """field `Supply Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Supply Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_partload_power_coefficients` or None if not set
        """
        return self["Supply Fan Part-Load Power Coefficients"]

    @supply_fan_partload_power_coefficients.setter
    def supply_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD field `Supply Fan Part-Load Power Coefficients`

        """
        self["Supply Fan Part-Load Power Coefficients"] = value

    @property
    def night_cycle_control(self):
        """field `Night Cycle Control`

        Args:
            value (str): value for IDD Field `Night Cycle Control`
                Default value: StayOff

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control` or None if not set

        """
        return self["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """Corresponds to IDD field `Night Cycle Control`"""
        self["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """field `Night Cycle Control Zone Name` Applicable only if Night Cycle
        Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `Night Cycle Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set

        """
        return self["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """Corresponds to IDD field `Night Cycle Control Zone Name`"""
        self["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value

    @property
    def cooling_coil_setpoint_reset_type(self):
        """field `Cooling Coil Setpoint Reset Type`
        Overrides Cooling Coil Setpoint Schedule Name
        None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule
        Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate
        OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB,
        to the Cooling Design Setpoint at 26.7C)
        WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at
        min supply air flow rate

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Reset Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_reset_type` or None if not set
        """
        return self["Cooling Coil Setpoint Reset Type"]

    @cooling_coil_setpoint_reset_type.setter
    def cooling_coil_setpoint_reset_type(self, value="None"):
        """Corresponds to IDD field `Cooling Coil Setpoint Reset Type`"""
        self["Cooling Coil Setpoint Reset Type"] = value

    @property
    def heating_coil_setpoint_reset_type(self):
        """field `Heating Coil Setpoint Reset Type`
        Overrides Heating Coil Setpoint Schedule Name
        None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule
        OutdoorAirTemperatureReset = reset based on outdoor air temperature
        (Heating Design Setpoint at -6.7C ODB to Heating Desing Setpoint minus 5.2C at 10C ODB)
        min supply air flow rate

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Reset Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_reset_type` or None if not set
        """
        return self["Heating Coil Setpoint Reset Type"]

    @heating_coil_setpoint_reset_type.setter
    def heating_coil_setpoint_reset_type(self, value="None"):
        """Corresponds to IDD field `Heating Coil Setpoint Reset Type`"""
        self["Heating Coil Setpoint Reset Type"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """field `Dehumidification Control Zone Name` Zone name where
        humidistat is located.

        Args:
            value (str): value for IDD Field `Dehumidification Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set

        """
        return self["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """Corresponds to IDD field `Dehumidification Control Zone Name`"""
        self["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_setpoint(self):
        """field `Dehumidification Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Dehumidification Setpoint`
                Units: percent
                Default value: 60.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set

        """
        return self["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0):
        """Corresponds to IDD field `Dehumidification Setpoint`"""
        self["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """field `Humidifier Control Zone Name` Zone name where humidistat is
        located.

        Args:
            value (str): value for IDD Field `Humidifier Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set

        """
        return self["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """Corresponds to IDD field `Humidifier Control Zone Name`"""
        self["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """field `Humidifier Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Humidifier Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_setpoint` or None if not set

        """
        return self["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidifier Setpoint`"""
        self["Humidifier Setpoint"] = value

    @property
    def sizing_option(self):
        """field `Sizing Option` Select whether autosized system supply flow
        rate is the sum of Coincident or NonCoincident zone air flow rates.

        Args:
            value (str): value for IDD Field `Sizing Option`
                Default value: NonCoincident

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `sizing_option` or None if not set

        """
        return self["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """Corresponds to IDD field `Sizing Option`"""
        self["Sizing Option"] = value

    @property
    def return_fan(self):
        """field `Return Fan` Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `Return Fan`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan` or None if not set

        """
        return self["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """Corresponds to IDD field `Return Fan`"""
        self["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """field `Return Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set

        """
        return self["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Return Fan Total Efficiency`"""
        self["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """field `Return Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Return Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set

        """
        return self["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0):
        """Corresponds to IDD field `Return Fan Delta Pressure`"""
        self["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """field `Return Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set

        """
        return self["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Return Fan Motor Efficiency`"""
        self["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """field `Return Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Return Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Return Fan Motor in Air Stream
        Fraction`"""
        self["Return Fan Motor in Air Stream Fraction"] = value

    @property
    def return_fan_partload_power_coefficients(self):
        """field `Return Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Return Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan_partload_power_coefficients` or None if not set
        """
        return self["Return Fan Part-Load Power Coefficients"]

    @return_fan_partload_power_coefficients.setter
    def return_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD field `Return Fan Part-Load Power Coefficients`

        """
        self["Return Fan Part-Load Power Coefficients"] = value




class HvactemplateSystemPackagedVav(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:PackagedVAV`
        Packaged Variable Air Volume (PVAV) air loop with optional heating coil
        and optional preheat.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan maximum flow rate',
                                       {'name': u'Supply Fan Maximum Flow Rate',
                                        'pyname': u'supply_fan_maximum_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan minimum flow rate',
                                       {'name': u'Supply Fan Minimum Flow Rate',
                                        'pyname': u'supply_fan_minimum_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'DrawThrough',
                                                            u'BlowThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 1000.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'TwoSpeedDX',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'TwoSpeedDX',
                                                            u'TwoSpeedHumidControlDX'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint schedule name',
                                       {'name': u'Cooling Coil Setpoint Schedule Name',
                                        'pyname': u'cooling_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil design setpoint',
                                       {'name': u'Cooling Coil Design Setpoint',
                                        'pyname': u'cooling_coil_design_setpoint',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil gross rated total capacity',
                                       {'name': u'Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'cooling coil gross rated sensible heat ratio',
                                       {'name': u'Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil gross rated cop',
                                       {'name': u'Cooling Coil Gross Rated COP',
                                        'pyname': u'cooling_coil_gross_rated_cop',
                                        'default': 3.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint schedule name',
                                       {'name': u'Heating Coil Setpoint Schedule Name',
                                        'pyname': u'heating_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil design setpoint',
                                       {'name': u'Heating Coil Design Setpoint',
                                        'pyname': u'heating_coil_design_setpoint',
                                        'default': 10.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil capacity',
                                       {'name': u'Heating Coil Capacity',
                                        'pyname': u'heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor air flow rate',
                                       {'name': u'Maximum Outdoor Air Flow Rate',
                                        'pyname': u'maximum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air flow rate',
                                       {'name': u'Minimum Outdoor Air Flow Rate',
                                        'pyname': u'minimum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air control type',
                                       {'name': u'Minimum Outdoor Air Control Type',
                                        'pyname': u'minimum_outdoor_air_control_type',
                                        'default': u'ProportionalMinimum',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedMinimum',
                                                            u'ProportionalMinimum'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'minimum outdoor air schedule name',
                                       {'name': u'Minimum Outdoor Air Schedule Name',
                                        'pyname': u'minimum_outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'economizer type',
                                       {'name': u'Economizer Type',
                                        'pyname': u'economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedDryBulb',
                                                            u'FixedEnthalpy',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy',
                                                            u'FixedDewPointAndDryBulb',
                                                            u'ElectronicEnthalpy',
                                                            u'DifferentialDryBulbAndEnthalpy',
                                                            u'NoEconomizer'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer lockout',
                                       {'name': u'Economizer Lockout',
                                        'pyname': u'economizer_lockout',
                                        'default': u'NoLockout',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLockout',
                                                            u'LockoutWithHeating',
                                                            u'LockoutWithCompressor'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer maximum limit dry-bulb temperature',
                                       {'name': u'Economizer Maximum Limit Dry-Bulb Temperature',
                                        'pyname': u'economizer_maximum_limit_drybulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'economizer maximum limit enthalpy',
                                       {'name': u'Economizer Maximum Limit Enthalpy',
                                        'pyname': u'economizer_maximum_limit_enthalpy',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'J/kg'}),
                                      (u'economizer maximum limit dewpoint temperature',
                                       {'name': u'Economizer Maximum Limit Dewpoint Temperature',
                                        'pyname': u'economizer_maximum_limit_dewpoint_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'economizer minimum limit dry-bulb temperature',
                                       {'name': u'Economizer Minimum Limit Dry-Bulb Temperature',
                                        'pyname': u'economizer_minimum_limit_drybulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan part-load power coefficients',
                                       {'name': u'Supply Fan Part-Load Power Coefficients',
                                        'pyname': u'supply_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control',
                                       {'name': u'Night Cycle Control',
                                        'pyname': u'night_cycle_control',
                                        'default': u'StayOff',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'StayOff',
                                                            u'CycleOnAny',
                                                            u'CycleOnControlZone',
                                                            u'CycleOnAnyZoneFansOnly'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control zone name',
                                       {'name': u'Night Cycle Control Zone Name',
                                        'pyname': u'night_cycle_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cooling coil setpoint reset type',
                                       {'name': u'Cooling Coil Setpoint Reset Type',
                                        'pyname': u'cooling_coil_setpoint_reset_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Warmest',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'WarmestTemperatureFirst'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil setpoint reset type',
                                       {'name': u'Heating Coil Setpoint Reset Type',
                                        'pyname': u'heating_coil_setpoint_reset_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'OutdoorAirTemperatureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'CoolReheat'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control zone name',
                                       {'name': u'Dehumidification Control Zone Name',
                                        'pyname': u'dehumidification_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'dehumidification setpoint',
                                       {'name': u'Dehumidification Setpoint',
                                        'pyname': u'dehumidification_setpoint',
                                        'default': 60.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier control zone name',
                                       {'name': u'Humidifier Control Zone Name',
                                        'pyname': u'humidifier_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier setpoint',
                                       {'name': u'Humidifier Setpoint',
                                        'pyname': u'humidifier_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'sizing option',
                                       {'name': u'Sizing Option',
                                        'pyname': u'sizing_option',
                                        'default': u'NonCoincident',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Coincident',
                                                            u'NonCoincident'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan',
                                       {'name': u'Return Fan',
                                        'pyname': u'return_fan',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan total efficiency',
                                       {'name': u'Return Fan Total Efficiency',
                                        'pyname': u'return_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan delta pressure',
                                       {'name': u'Return Fan Delta Pressure',
                                        'pyname': u'return_fan_delta_pressure',
                                        'default': 500.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'return fan motor efficiency',
                                       {'name': u'Return Fan Motor Efficiency',
                                        'pyname': u'return_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan motor in air stream fraction',
                                       {'name': u'Return Fan Motor in Air Stream Fraction',
                                        'pyname': u'return_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan part-load power coefficients',
                                       {'name': u'Return Fan Part-Load Power Coefficients',
                                        'pyname': u'return_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 59,
               'name': u'HVACTemplate:System:PackagedVAV',
               'pyname': u'HvactemplateSystemPackagedVav',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on; PVAV
        System always on.  Schedule is used in availability manager and fan
        scheduling. Also see "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """field `Supply Fan Maximum Flow Rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Fan Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Fan Maximum Flow Rate`"""
        self["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_minimum_flow_rate(self):
        """field `Supply Fan Minimum Flow Rate` This field is only used to set
        a minimum part load on the VAV fan power curve. Autosize or zero is
        recommended.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Fan Minimum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_minimum_flow_rate` or None if not set

        """
        return self["Supply Fan Minimum Flow Rate"]

    @supply_fan_minimum_flow_rate.setter
    def supply_fan_minimum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Fan Minimum Flow Rate`"""
        self["Supply Fan Minimum Flow Rate"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=1000.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: TwoSpeedDX

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="TwoSpeedDX"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """field `Cooling Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set

        """
        return self["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Setpoint Schedule Name`"""
        self["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """field `Cooling Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Cooling Coil Design Setpoint`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set

        """
        return self["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=12.8):
        """Corresponds to IDD field `Cooling Coil Design Setpoint`"""
        self["Cooling Coil Design Setpoint"] = value

    @property
    def cooling_coil_gross_rated_total_capacity(self):
        """field `Cooling Coil Gross Rated Total Capacity` Total cooling
        capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_total_capacity` or None if not set

        """
        return self["Cooling Coil Gross Rated Total Capacity"]

    @cooling_coil_gross_rated_total_capacity.setter
    def cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Total
        Capacity`"""
        self["Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `Cooling Coil Gross Rated Sensible Heat Ratio` Gross SHR.

        Args:
            value (float or "Autosize"): value for IDD Field `Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["Cooling Coil Gross Rated Sensible Heat Ratio"]

    @cooling_coil_gross_rated_sensible_heat_ratio.setter
    def cooling_coil_gross_rated_sensible_heat_ratio(self, value="autosize"):
        """Corresponds to IDD field `Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def cooling_coil_gross_rated_cop(self):
        """field `Cooling Coil Gross Rated COP` Gross cooling capacity divided
        by power input to the compressor and outdoor fan, does not include
        supply fan heat or supply fan electric power input.

        Args:
            value (float): value for IDD Field `Cooling Coil Gross Rated COP`
                Units: W/W
                Default value: 3.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_gross_rated_cop` or None if not set

        """
        return self["Cooling Coil Gross Rated COP"]

    @cooling_coil_gross_rated_cop.setter
    def cooling_coil_gross_rated_cop(self, value=3.0):
        """Corresponds to IDD field `Cooling Coil Gross Rated COP`"""
        self["Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="None"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """field `Heating Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set

        """
        return self["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Setpoint Schedule Name`"""
        self["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """field `Heating Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Heating Coil Design Setpoint`
                Units: C
                Default value: 10.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set

        """
        return self["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=10.0):
        """Corresponds to IDD field `Heating Coil Design Setpoint`"""
        self["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_capacity(self):
        """field `Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_capacity` or None if not set

        """
        return self["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heating Coil Capacity`"""
        self["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """field `Maximum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set

        """
        return self["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Outdoor Air Flow Rate`"""
        self["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set

        """
        return self["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Minimum Outdoor Air Flow Rate`"""
        self["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_control_type(self):
        """field `Minimum Outdoor Air Control Type`

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Control Type`
                Default value: ProportionalMinimum

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_control_type` or None if not set

        """
        return self["Minimum Outdoor Air Control Type"]

    @minimum_outdoor_air_control_type.setter
    def minimum_outdoor_air_control_type(self, value="ProportionalMinimum"):
        """Corresponds to IDD field `Minimum Outdoor Air Control Type`"""
        self["Minimum Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """field `Minimum Outdoor Air Schedule Name` Schedule values multiply
        the Minimum Outdoor Air Flow Rate If blank, multiplier is always one.

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set

        """
        return self["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Air Schedule Name`"""
        self["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """field `Economizer Type`

        Args:
            value (str): value for IDD Field `Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_type` or None if not set

        """
        return self["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Economizer Type`"""
        self["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """field `Economizer Lockout`

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Default value: NoLockout

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_lockout` or None if not set

        """
        return self["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """Corresponds to IDD field `Economizer Lockout`"""
        self["Economizer Lockout"] = value

    @property
    def economizer_maximum_limit_drybulb_temperature(self):
        """field `Economizer Maximum Limit Dry-Bulb Temperature`
        Enter the maximum outdoor dry-bulb temperature limit for FixedDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dry-Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_drybulb_temperature` or None if not set
        """
        return self["Economizer Maximum Limit Dry-Bulb Temperature"]

    @economizer_maximum_limit_drybulb_temperature.setter
    def economizer_maximum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD field `Economizer Maximum Limit Dry-Bulb Temperature`

        """
        self["Economizer Maximum Limit Dry-Bulb Temperature"] = value

    @property
    def economizer_maximum_limit_enthalpy(self):
        """field `Economizer Maximum Limit Enthalpy` Enter the maximum outdoor
        enthalpy limit for FixedEnthalpy economizer control type. No input or
        blank input means this limit is not operative Limit is applied
        regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Enthalpy`
                Units: J/kg

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_enthalpy` or None if not set

        """
        return self["Economizer Maximum Limit Enthalpy"]

    @economizer_maximum_limit_enthalpy.setter
    def economizer_maximum_limit_enthalpy(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Enthalpy`"""
        self["Economizer Maximum Limit Enthalpy"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """field `Economizer Maximum Limit Dewpoint Temperature` Enter the
        maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dewpoint Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set

        """
        return self["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Dewpoint
        Temperature`"""
        self["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def economizer_minimum_limit_drybulb_temperature(self):
        """field `Economizer Minimum Limit Dry-Bulb Temperature`
        Enter the minimum outdoor dry-bulb temperature limit for economizer control.
        No input or blank input means this limit is not operative
        Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Minimum Limit Dry-Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_minimum_limit_drybulb_temperature` or None if not set
        """
        return self["Economizer Minimum Limit Dry-Bulb Temperature"]

    @economizer_minimum_limit_drybulb_temperature.setter
    def economizer_minimum_limit_drybulb_temperature(self, value=None):
        """  Corresponds to IDD field `Economizer Minimum Limit Dry-Bulb Temperature`

        """
        self["Economizer Minimum Limit Dry-Bulb Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def supply_fan_partload_power_coefficients(self):
        """field `Supply Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Supply Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_partload_power_coefficients` or None if not set
        """
        return self["Supply Fan Part-Load Power Coefficients"]

    @supply_fan_partload_power_coefficients.setter
    def supply_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD field `Supply Fan Part-Load Power Coefficients`

        """
        self["Supply Fan Part-Load Power Coefficients"] = value

    @property
    def night_cycle_control(self):
        """field `Night Cycle Control`

        Args:
            value (str): value for IDD Field `Night Cycle Control`
                Default value: StayOff

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control` or None if not set

        """
        return self["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """Corresponds to IDD field `Night Cycle Control`"""
        self["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """field `Night Cycle Control Zone Name` Applicable only if Night Cycle
        Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `Night Cycle Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set

        """
        return self["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """Corresponds to IDD field `Night Cycle Control Zone Name`"""
        self["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value

    @property
    def cooling_coil_setpoint_reset_type(self):
        """field `Cooling Coil Setpoint Reset Type`
        Overrides Cooling Coil Setpoint Schedule Name
        None = no reset, control to Cooling Coil Design Setpoint Temperature or Schedule
        Warmest = reset as warm as possible yet meet all zone cooling loads at max supply air flow rate
        OutdoorAirTemperatureReset = reset based on outdoor air temperature (18.0C at 15.6C ODB,
        to the Cooling Design Setpoint at 26.7C)
        WarmestTemperatureFirst = reset as warm as possible yet meet all zone cooling loads at
        min supply air flow rate

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Reset Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_reset_type` or None if not set
        """
        return self["Cooling Coil Setpoint Reset Type"]

    @cooling_coil_setpoint_reset_type.setter
    def cooling_coil_setpoint_reset_type(self, value="None"):
        """Corresponds to IDD field `Cooling Coil Setpoint Reset Type`"""
        self["Cooling Coil Setpoint Reset Type"] = value

    @property
    def heating_coil_setpoint_reset_type(self):
        """field `Heating Coil Setpoint Reset Type`
        Overrides Heating Coil Setpoint Schedule Name
        None = no reset, control to Heating Coil Design Setpoint Temperature or Schedule
        OutdoorAirTemperatureReset = reset based on outdoor air temperature
        (Heating Design Setpoint at -6.7C ODB to Heating Desing Setpoint minus 5.2C at 10C ODB)
        min supply air flow rate

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Reset Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_reset_type` or None if not set
        """
        return self["Heating Coil Setpoint Reset Type"]

    @heating_coil_setpoint_reset_type.setter
    def heating_coil_setpoint_reset_type(self, value="None"):
        """Corresponds to IDD field `Heating Coil Setpoint Reset Type`"""
        self["Heating Coil Setpoint Reset Type"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """field `Dehumidification Control Zone Name` Zone name where
        humidistat is located.

        Args:
            value (str): value for IDD Field `Dehumidification Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set

        """
        return self["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """Corresponds to IDD field `Dehumidification Control Zone Name`"""
        self["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_setpoint(self):
        """field `Dehumidification Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Dehumidification Setpoint`
                Units: percent
                Default value: 60.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set

        """
        return self["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=60.0):
        """Corresponds to IDD field `Dehumidification Setpoint`"""
        self["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """field `Humidifier Control Zone Name` Zone name where humidistat is
        located.

        Args:
            value (str): value for IDD Field `Humidifier Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set

        """
        return self["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """Corresponds to IDD field `Humidifier Control Zone Name`"""
        self["Humidifier Control Zone Name"] = value

    @property
    def humidifier_setpoint(self):
        """field `Humidifier Setpoint` Zone relative humidity setpoint in
        percent (0 to 100)

        Args:
            value (float): value for IDD Field `Humidifier Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_setpoint` or None if not set

        """
        return self["Humidifier Setpoint"]

    @humidifier_setpoint.setter
    def humidifier_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidifier Setpoint`"""
        self["Humidifier Setpoint"] = value

    @property
    def sizing_option(self):
        """field `Sizing Option` Select whether autosized system supply flow
        rate is the sum of Coincident or NonCoincident zone air flow rates.

        Args:
            value (str): value for IDD Field `Sizing Option`
                Default value: NonCoincident

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `sizing_option` or None if not set

        """
        return self["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """Corresponds to IDD field `Sizing Option`"""
        self["Sizing Option"] = value

    @property
    def return_fan(self):
        """field `Return Fan` Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `Return Fan`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan` or None if not set

        """
        return self["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """Corresponds to IDD field `Return Fan`"""
        self["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """field `Return Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set

        """
        return self["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Return Fan Total Efficiency`"""
        self["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """field `Return Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Return Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set

        """
        return self["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0):
        """Corresponds to IDD field `Return Fan Delta Pressure`"""
        self["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """field `Return Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set

        """
        return self["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Return Fan Motor Efficiency`"""
        self["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """field `Return Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Return Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Return Fan Motor in Air Stream
        Fraction`"""
        self["Return Fan Motor in Air Stream Fraction"] = value

    @property
    def return_fan_partload_power_coefficients(self):
        """field `Return Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Return Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan_partload_power_coefficients` or None if not set
        """
        return self["Return Fan Part-Load Power Coefficients"]

    @return_fan_partload_power_coefficients.setter
    def return_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD field `Return Fan Part-Load Power Coefficients`

        """
        self["Return Fan Part-Load Power Coefficients"] = value




class HvactemplateSystemConstantVolume(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:ConstantVolume`
        Constant Air Volume air loop with optional chilled water cooling coil,
        optional heating coil and optional preheat.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'supply fan maximum flow rate',
                                       {'name': u'Supply Fan Maximum Flow Rate',
                                        'pyname': u'supply_fan_maximum_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 600.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'DrawThrough',
                                                            u'BlowThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'ChilledWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ChilledWater',
                                                            u'ChilledWaterDetailedFlatModel',
                                                            u'HeatExchangerAssistedChilledWater',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint control type',
                                       {'name': u'Cooling Coil Setpoint Control Type',
                                        'pyname': u'cooling_coil_setpoint_control_type',
                                        'default': u'FixedSetpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedSetpoint',
                                                            u'Scheduled',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'Warmest',
                                                            u'ControlZone'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil control zone name',
                                       {'name': u'Cooling Coil Control Zone name',
                                        'pyname': u'cooling_coil_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil design setpoint temperature',
                                       {'name': u'Cooling Coil Design Setpoint Temperature',
                                        'pyname': u'cooling_coil_design_setpoint_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil setpoint schedule name',
                                       {'name': u'Cooling Coil Setpoint Schedule Name',
                                        'pyname': u'cooling_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint at outdoor dry-bulb low',
                                       {'name': u'Cooling Coil Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'cooling_coil_setpoint_at_outdoor_drybulb_low',
                                        'default': 15.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil reset outdoor dry-bulb low',
                                       {'name': u'Cooling Coil Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'cooling_coil_reset_outdoor_drybulb_low',
                                        'default': 15.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil setpoint at outdoor dry-bulb high',
                                       {'name': u'Cooling Coil Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'cooling_coil_setpoint_at_outdoor_drybulb_high',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil reset outdoor dry-bulb high',
                                       {'name': u'Cooling Coil Reset Outdoor Dry-Bulb High',
                                        'pyname': u'cooling_coil_reset_outdoor_drybulb_high',
                                        'default': 23.3,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'HotWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint control type',
                                       {'name': u'Heating Coil Setpoint Control Type',
                                        'pyname': u'heating_coil_setpoint_control_type',
                                        'default': u'FixedSetpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedSetpoint',
                                                            u'Scheduled',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'ControlZone'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil control zone name',
                                       {'name': u'Heating Coil Control Zone name',
                                        'pyname': u'heating_coil_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil design setpoint',
                                       {'name': u'Heating Coil Design Setpoint',
                                        'pyname': u'heating_coil_design_setpoint',
                                        'default': 10.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil setpoint schedule name',
                                       {'name': u'Heating Coil Setpoint Schedule Name',
                                        'pyname': u'heating_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint at outdoor dry-bulb low',
                                       {'name': u'Heating Coil Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'heating_coil_setpoint_at_outdoor_drybulb_low',
                                        'default': 15.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil reset outdoor dry-bulb low',
                                       {'name': u'Heating Coil Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'heating_coil_reset_outdoor_drybulb_low',
                                        'default': 7.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil setpoint at outdoor dry-bulb high',
                                       {'name': u'Heating Coil Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'heating_coil_setpoint_at_outdoor_drybulb_high',
                                        'default': 12.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil reset outdoor dry-bulb high',
                                       {'name': u'Heating Coil Reset Outdoor Dry-Bulb High',
                                        'pyname': u'heating_coil_reset_outdoor_drybulb_high',
                                        'default': 12.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil capacity',
                                       {'name': u'Heating Coil Capacity',
                                        'pyname': u'heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'preheat coil type',
                                       {'name': u'Preheat Coil Type',
                                        'pyname': u'preheat_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'preheat coil availability schedule name',
                                       {'name': u'Preheat Coil Availability Schedule Name',
                                        'pyname': u'preheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'preheat coil design setpoint',
                                       {'name': u'Preheat Coil Design Setpoint',
                                        'pyname': u'preheat_coil_design_setpoint',
                                        'default': 7.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'preheat coil setpoint schedule name',
                                       {'name': u'Preheat Coil Setpoint Schedule Name',
                                        'pyname': u'preheat_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'gas preheat coil efficiency',
                                       {'name': u'Gas Preheat Coil Efficiency',
                                        'pyname': u'gas_preheat_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas preheat coil parasitic electric load',
                                       {'name': u'Gas Preheat Coil Parasitic Electric Load',
                                        'pyname': u'gas_preheat_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor air flow rate',
                                       {'name': u'Maximum Outdoor Air Flow Rate',
                                        'pyname': u'maximum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air flow rate',
                                       {'name': u'Minimum Outdoor Air Flow Rate',
                                        'pyname': u'minimum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air schedule name',
                                       {'name': u'Minimum Outdoor Air Schedule Name',
                                        'pyname': u'minimum_outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'economizer type',
                                       {'name': u'Economizer Type',
                                        'pyname': u'economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedDryBulb',
                                                            u'FixedEnthalpy',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy',
                                                            u'FixedDewPointAndDryBulb',
                                                            u'ElectronicEnthalpy',
                                                            u'DifferentialDryBulbAndEnthalpy',
                                                            u'NoEconomizer'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer upper temperature limit',
                                       {'name': u'Economizer Upper Temperature Limit',
                                        'pyname': u'economizer_upper_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer lower temperature limit',
                                       {'name': u'Economizer Lower Temperature Limit',
                                        'pyname': u'economizer_lower_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer upper enthalpy limit',
                                       {'name': u'Economizer Upper Enthalpy Limit',
                                        'pyname': u'economizer_upper_enthalpy_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'J/kg'}),
                                      (u'economizer maximum limit dewpoint temperature',
                                       {'name': u'Economizer Maximum Limit Dewpoint Temperature',
                                        'pyname': u'economizer_maximum_limit_dewpoint_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'supply plenum name',
                                       {'name': u'Supply Plenum Name',
                                        'pyname': u'supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'night cycle control',
                                       {'name': u'Night Cycle Control',
                                        'pyname': u'night_cycle_control',
                                        'default': u'StayOff',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'StayOff',
                                                            u'CycleOnAny',
                                                            u'CycleOnControlZone',
                                                            u'CycleOnAnyZoneFansOnly'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control zone name',
                                       {'name': u'Night Cycle Control Zone Name',
                                        'pyname': u'night_cycle_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'heat recovery heat exchanger type',
                                       {'name': u'Heat Recovery Heat Exchanger Type',
                                        'pyname': u'heat_recovery_heat_exchanger_type',
                                        'default': u'Plate',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Plate',
                                                            u'Rotary'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat recovery frost control type',
                                       {'name': u'Heat Recovery Frost Control Type',
                                        'pyname': u'heat_recovery_frost_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ExhaustAirRecirculation',
                                                            u'ExhaustOnly',
                                                            u'MinimumExhaustTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'CoolReheat'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control zone name',
                                       {'name': u'Dehumidification Control Zone Name',
                                        'pyname': u'dehumidification_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'dehumidification relative humidity setpoint',
                                       {'name': u'Dehumidification Relative Humidity Setpoint',
                                        'pyname': u'dehumidification_relative_humidity_setpoint',
                                        'default': 60.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'dehumidification relative humidity setpoint schedule name',
                                       {'name': u'Dehumidification Relative Humidity Setpoint Schedule Name',
                                        'pyname': u'dehumidification_relative_humidity_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier control zone name',
                                       {'name': u'Humidifier Control Zone Name',
                                        'pyname': u'humidifier_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier relative humidity setpoint',
                                       {'name': u'Humidifier Relative Humidity Setpoint',
                                        'pyname': u'humidifier_relative_humidity_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'humidifier relative humidity setpoint schedule name',
                                       {'name': u'Humidifier Relative Humidity Setpoint Schedule Name',
                                        'pyname': u'humidifier_relative_humidity_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return fan',
                                       {'name': u'Return Fan',
                                        'pyname': u'return_fan',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan total efficiency',
                                       {'name': u'Return Fan Total Efficiency',
                                        'pyname': u'return_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan delta pressure',
                                       {'name': u'Return Fan Delta Pressure',
                                        'pyname': u'return_fan_delta_pressure',
                                        'default': 300.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'return fan motor efficiency',
                                       {'name': u'Return Fan Motor Efficiency',
                                        'pyname': u'return_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan motor in air stream fraction',
                                       {'name': u'Return Fan Motor in Air Stream Fraction',
                                        'pyname': u'return_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 70,
               'name': u'HVACTemplate:System:ConstantVolume',
               'pyname': u'HvactemplateSystemConstantVolume',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on;
        Schedule is used in availability manager and fan scheduling. Also see
        "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def supply_fan_maximum_flow_rate(self):
        """field `Supply Fan Maximum Flow Rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Fan Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_maximum_flow_rate` or None if not set
        """
        return self["Supply Fan Maximum Flow Rate"]

    @supply_fan_maximum_flow_rate.setter
    def supply_fan_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Fan Maximum Flow Rate`"""
        self["Supply Fan Maximum Flow Rate"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 600.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=600.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: ChilledWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_control_type(self):
        """field `Cooling Coil Setpoint Control Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Control Type`
                Default value: FixedSetpoint

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_control_type` or None if not set

        """
        return self["Cooling Coil Setpoint Control Type"]

    @cooling_coil_setpoint_control_type.setter
    def cooling_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """Corresponds to IDD field `Cooling Coil Setpoint Control Type`"""
        self["Cooling Coil Setpoint Control Type"] = value

    @property
    def cooling_coil_control_zone_name(self):
        """field `Cooling Coil Control Zone name`
        name of the HVACTemplate:ZoneConstantVolume object that
        contains the cooling thermostat when Cooling Coil Setpoint Control Type = ControlZone

        Args:
            value (str): value for IDD Field `Cooling Coil Control Zone name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_control_zone_name` or None if not set
        """
        return self["Cooling Coil Control Zone name"]

    @cooling_coil_control_zone_name.setter
    def cooling_coil_control_zone_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Control Zone name`"""
        self["Cooling Coil Control Zone name"] = value

    @property
    def cooling_coil_design_setpoint_temperature(self):
        """field `Cooling Coil Design Setpoint Temperature` Used for sizing and
        as constant setpoint if no Cooling Coil Setpoint Schedule Name is
        specified.

        Args:
            value (float): value for IDD Field `Cooling Coil Design Setpoint Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_design_setpoint_temperature` or None if not set

        """
        return self["Cooling Coil Design Setpoint Temperature"]

    @cooling_coil_design_setpoint_temperature.setter
    def cooling_coil_design_setpoint_temperature(self, value=12.8):
        """Corresponds to IDD field `Cooling Coil Design Setpoint
        Temperature`"""
        self["Cooling Coil Design Setpoint Temperature"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """field `Cooling Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set

        """
        return self["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Setpoint Schedule Name`"""
        self["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self):
        """field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"]

    @cooling_coil_setpoint_at_outdoor_drybulb_low.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self, value=15.6):
        """  Corresponds to IDD field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_low(self):
        """field `Cooling Coil Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `Cooling Coil Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Cooling Coil Reset Outdoor Dry-Bulb Low"]

    @cooling_coil_reset_outdoor_drybulb_low.setter
    def cooling_coil_reset_outdoor_drybulb_low(self, value=15.6):
        """  Corresponds to IDD field `Cooling Coil Reset Outdoor Dry-Bulb Low`

        """
        self["Cooling Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self):
        """field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Cooling Coil Setpoint at Outdoor Dry-Bulb High"]

    @cooling_coil_setpoint_at_outdoor_drybulb_high.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self, value=12.8):
        """  Corresponds to IDD field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`

        """
        self["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_high(self):
        """field `Cooling Coil Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 23.3

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Cooling Coil Reset Outdoor Dry-Bulb High"]

    @cooling_coil_reset_outdoor_drybulb_high.setter
    def cooling_coil_reset_outdoor_drybulb_high(self, value=23.3):
        """  Corresponds to IDD field `Cooling Coil Reset Outdoor Dry-Bulb High`

        """
        self["Cooling Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: HotWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_control_type(self):
        """field `Heating Coil Setpoint Control Type`

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Control Type`
                Default value: FixedSetpoint

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_control_type` or None if not set

        """
        return self["Heating Coil Setpoint Control Type"]

    @heating_coil_setpoint_control_type.setter
    def heating_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """Corresponds to IDD field `Heating Coil Setpoint Control Type`"""
        self["Heating Coil Setpoint Control Type"] = value

    @property
    def heating_coil_control_zone_name(self):
        """field `Heating Coil Control Zone name`
        name of the HVACTemplate:ZoneConstantVolume object that
        contains the heating thermostat

        Args:
            value (str): value for IDD Field `Heating Coil Control Zone name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_control_zone_name` or None if not set
        """
        return self["Heating Coil Control Zone name"]

    @heating_coil_control_zone_name.setter
    def heating_coil_control_zone_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Control Zone name`"""
        self["Heating Coil Control Zone name"] = value

    @property
    def heating_coil_design_setpoint(self):
        """field `Heating Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Heating Coil Design Setpoint`
                Units: C
                Default value: 10.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set

        """
        return self["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=10.0):
        """Corresponds to IDD field `Heating Coil Design Setpoint`"""
        self["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """field `Heating Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set

        """
        return self["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Setpoint Schedule Name`"""
        self["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_low(self):
        """field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Heating Coil Setpoint at Outdoor Dry-Bulb Low"]

    @heating_coil_setpoint_at_outdoor_drybulb_low.setter
    def heating_coil_setpoint_at_outdoor_drybulb_low(self, value=15.0):
        """  Corresponds to IDD field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_low(self):
        """field `Heating Coil Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `Heating Coil Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: 7.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Heating Coil Reset Outdoor Dry-Bulb Low"]

    @heating_coil_reset_outdoor_drybulb_low.setter
    def heating_coil_reset_outdoor_drybulb_low(self, value=7.8):
        """  Corresponds to IDD field `Heating Coil Reset Outdoor Dry-Bulb Low`

        """
        self["Heating Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_high(self):
        """field `Heating Coil Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Heating Coil Setpoint at Outdoor Dry-Bulb High"]

    @heating_coil_setpoint_at_outdoor_drybulb_high.setter
    def heating_coil_setpoint_at_outdoor_drybulb_high(self, value=12.2):
        """  Corresponds to IDD field `Heating Coil Setpoint at Outdoor Dry-Bulb High`

        """
        self["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_high(self):
        """field `Heating Coil Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Heating Coil Reset Outdoor Dry-Bulb High"]

    @heating_coil_reset_outdoor_drybulb_high.setter
    def heating_coil_reset_outdoor_drybulb_high(self, value=12.2):
        """  Corresponds to IDD field `Heating Coil Reset Outdoor Dry-Bulb High`

        """
        self["Heating Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_capacity(self):
        """field `Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_capacity` or None if not set

        """
        return self["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heating Coil Capacity`"""
        self["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def preheat_coil_type(self):
        """field `Preheat Coil Type`

        Args:
            value (str): value for IDD Field `Preheat Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_type` or None if not set

        """
        return self["Preheat Coil Type"]

    @preheat_coil_type.setter
    def preheat_coil_type(self, value="None"):
        """Corresponds to IDD field `Preheat Coil Type`"""
        self["Preheat Coil Type"] = value

    @property
    def preheat_coil_availability_schedule_name(self):
        """field `Preheat Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Preheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_availability_schedule_name` or None if not set

        """
        return self["Preheat Coil Availability Schedule Name"]

    @preheat_coil_availability_schedule_name.setter
    def preheat_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Preheat Coil Availability Schedule
        Name`"""
        self["Preheat Coil Availability Schedule Name"] = value

    @property
    def preheat_coil_design_setpoint(self):
        """field `Preheat Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Preheat Coil Setpoint Schedule Name specified.

        Args:
            value (float): value for IDD Field `Preheat Coil Design Setpoint`
                Units: C
                Default value: 7.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `preheat_coil_design_setpoint` or None if not set

        """
        return self["Preheat Coil Design Setpoint"]

    @preheat_coil_design_setpoint.setter
    def preheat_coil_design_setpoint(self, value=7.2):
        """Corresponds to IDD field `Preheat Coil Design Setpoint`"""
        self["Preheat Coil Design Setpoint"] = value

    @property
    def preheat_coil_setpoint_schedule_name(self):
        """field `Preheat Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Preheat Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_setpoint_schedule_name` or None if not set

        """
        return self["Preheat Coil Setpoint Schedule Name"]

    @preheat_coil_setpoint_schedule_name.setter
    def preheat_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Preheat Coil Setpoint Schedule Name`"""
        self["Preheat Coil Setpoint Schedule Name"] = value

    @property
    def gas_preheat_coil_efficiency(self):
        """field `Gas Preheat Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Preheat Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_preheat_coil_efficiency` or None if not set

        """
        return self["Gas Preheat Coil Efficiency"]

    @gas_preheat_coil_efficiency.setter
    def gas_preheat_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Preheat Coil Efficiency`"""
        self["Gas Preheat Coil Efficiency"] = value

    @property
    def gas_preheat_coil_parasitic_electric_load(self):
        """field `Gas Preheat Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Preheat Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_preheat_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Preheat Coil Parasitic Electric Load"]

    @gas_preheat_coil_parasitic_electric_load.setter
    def gas_preheat_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Preheat Coil Parasitic Electric
        Load`"""
        self["Gas Preheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """field `Maximum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set

        """
        return self["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Outdoor Air Flow Rate`"""
        self["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set

        """
        return self["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Minimum Outdoor Air Flow Rate`"""
        self["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """field `Minimum Outdoor Air Schedule Name` Schedule values multiply
        the Minimum Outdoor Air Flow Rate If blank, multiplier is always one.

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set

        """
        return self["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Air Schedule Name`"""
        self["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """field `Economizer Type`

        Args:
            value (str): value for IDD Field `Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_type` or None if not set

        """
        return self["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Economizer Type`"""
        self["Economizer Type"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """field `Economizer Upper Temperature Limit` Outdoor temperature above
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set

        """
        return self["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Temperature Limit`"""
        self["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """field `Economizer Lower Temperature Limit` Outdoor temperature below
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Lower Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set

        """
        return self["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Lower Temperature Limit`"""
        self["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """field `Economizer Upper Enthalpy Limit` Outdoor enthalpy above which
        economizer is disabled and heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Enthalpy Limit`
                Units: J/kg

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set

        """
        return self["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Enthalpy Limit`"""
        self["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """field `Economizer Maximum Limit Dewpoint Temperature` Enter the
        maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dewpoint Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set

        """
        return self["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Dewpoint
        Temperature`"""
        self["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def supply_plenum_name(self):
        """field `Supply Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_plenum_name` or None if not set

        """
        return self["Supply Plenum Name"]

    @supply_plenum_name.setter
    def supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Supply Plenum Name`"""
        self["Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def night_cycle_control(self):
        """field `Night Cycle Control`

        Args:
            value (str): value for IDD Field `Night Cycle Control`
                Default value: StayOff

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control` or None if not set

        """
        return self["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """Corresponds to IDD field `Night Cycle Control`"""
        self["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """field `Night Cycle Control Zone Name` Applicable only if Night Cycle
        Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `Night Cycle Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set

        """
        return self["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """Corresponds to IDD field `Night Cycle Control Zone Name`"""
        self["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """field `Heat Recovery Heat Exchanger Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Heat Exchanger Type`
                Default value: Plate

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set

        """
        return self["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """Corresponds to IDD field `Heat Recovery Heat Exchanger Type`"""
        self["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """field `Heat Recovery Frost Control Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Frost Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set

        """
        return self["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Frost Control Type`"""
        self["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """field `Dehumidification Control Zone Name` Zone name where
        humidistat is located.

        Args:
            value (str): value for IDD Field `Dehumidification Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set

        """
        return self["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """Corresponds to IDD field `Dehumidification Control Zone Name`"""
        self["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_relative_humidity_setpoint(self):
        """field `Dehumidification Relative Humidity Setpoint` Zone relative
        humidity setpoint in percent (0 to 100) Ignored if Dehumidification
        Relative Humidity Setpoint Schedule specified below.

        Args:
            value (float): value for IDD Field `Dehumidification Relative Humidity Setpoint`
                Units: percent
                Default value: 60.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_relative_humidity_setpoint` or None if not set

        """
        return self["Dehumidification Relative Humidity Setpoint"]

    @dehumidification_relative_humidity_setpoint.setter
    def dehumidification_relative_humidity_setpoint(self, value=60.0):
        """Corresponds to IDD field `Dehumidification Relative Humidity
        Setpoint`"""
        self["Dehumidification Relative Humidity Setpoint"] = value

    @property
    def dehumidification_relative_humidity_setpoint_schedule_name(self):
        """field `Dehumidification Relative Humidity Setpoint Schedule Name`
        Leave blank to use constant setpoint specified in Dehumidification
        Relative Humidity Setpoint above. Schedule values must be in percent
        relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `Dehumidification Relative Humidity Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_relative_humidity_setpoint_schedule_name` or None if not set

        """
        return self[
            "Dehumidification Relative Humidity Setpoint Schedule Name"]

    @dehumidification_relative_humidity_setpoint_schedule_name.setter
    def dehumidification_relative_humidity_setpoint_schedule_name(
            self,
            value=None):
        """Corresponds to IDD field `Dehumidification Relative Humidity
        Setpoint Schedule Name`"""
        self[
            "Dehumidification Relative Humidity Setpoint Schedule Name"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """field `Humidifier Control Zone Name` Zone name where humidistat is
        located.

        Args:
            value (str): value for IDD Field `Humidifier Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set

        """
        return self["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """Corresponds to IDD field `Humidifier Control Zone Name`"""
        self["Humidifier Control Zone Name"] = value

    @property
    def humidifier_relative_humidity_setpoint(self):
        """field `Humidifier Relative Humidity Setpoint` Zone relative humidity
        setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity
        Setpoint Schedule specified below.

        Args:
            value (float): value for IDD Field `Humidifier Relative Humidity Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_relative_humidity_setpoint` or None if not set

        """
        return self["Humidifier Relative Humidity Setpoint"]

    @humidifier_relative_humidity_setpoint.setter
    def humidifier_relative_humidity_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidifier Relative Humidity Setpoint`"""
        self["Humidifier Relative Humidity Setpoint"] = value

    @property
    def humidifier_relative_humidity_setpoint_schedule_name(self):
        """field `Humidifier Relative Humidity Setpoint Schedule Name` Leave
        blank to use constant setpoint specified in Humidifier Relative
        Humidity Setpoint above.Schedule values must be in percent relative
        humidity (0 to 100).

        Args:
            value (str): value for IDD Field `Humidifier Relative Humidity Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_relative_humidity_setpoint_schedule_name` or None if not set

        """
        return self["Humidifier Relative Humidity Setpoint Schedule Name"]

    @humidifier_relative_humidity_setpoint_schedule_name.setter
    def humidifier_relative_humidity_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Relative Humidity Setpoint
        Schedule Name`"""
        self["Humidifier Relative Humidity Setpoint Schedule Name"] = value

    @property
    def return_fan(self):
        """field `Return Fan` Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `Return Fan`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan` or None if not set

        """
        return self["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """Corresponds to IDD field `Return Fan`"""
        self["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """field `Return Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set

        """
        return self["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Return Fan Total Efficiency`"""
        self["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """field `Return Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Return Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 300.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set

        """
        return self["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=300.0):
        """Corresponds to IDD field `Return Fan Delta Pressure`"""
        self["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """field `Return Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set

        """
        return self["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Return Fan Motor Efficiency`"""
        self["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """field `Return Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Return Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Return Fan Motor in Air Stream
        Fraction`"""
        self["Return Fan Motor in Air Stream Fraction"] = value




class HvactemplateSystemDualDuct(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:DualDuct`
        Dual-duct constant volume or variable volume air loop
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'system configuration type',
                                       {'name': u'System Configuration Type',
                                        'pyname': u'system_configuration_type',
                                        'default': u'SingleFanConstantVolume',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleFanConstantVolume',
                                                            u'DualFanConstantVolume',
                                                            u'SingleFanVariableVolume',
                                                            u'DualFanVariableVolume'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'main supply fan maximum flow rate',
                                       {'name': u'Main Supply Fan Maximum Flow Rate',
                                        'pyname': u'main_supply_fan_maximum_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'main supply fan minimum flow fraction',
                                       {'name': u'Main Supply Fan Minimum Flow Fraction',
                                        'pyname': u'main_supply_fan_minimum_flow_fraction',
                                        'default': 0.2,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'main supply fan total efficiency',
                                       {'name': u'Main Supply Fan Total Efficiency',
                                        'pyname': u'main_supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'main supply fan delta pressure',
                                       {'name': u'Main Supply Fan Delta Pressure',
                                        'pyname': u'main_supply_fan_delta_pressure',
                                        'default': 1000.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'main supply fan motor efficiency',
                                       {'name': u'Main Supply Fan Motor Efficiency',
                                        'pyname': u'main_supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'main supply fan motor in air stream fraction',
                                       {'name': u'Main Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'main_supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'main supply fan part-load power coefficients',
                                       {'name': u'Main Supply Fan Part-Load Power Coefficients',
                                        'pyname': u'main_supply_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cold duct supply fan maximum flow rate',
                                       {'name': u'Cold Duct Supply Fan Maximum Flow Rate',
                                        'pyname': u'cold_duct_supply_fan_maximum_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'cold duct supply fan minimum flow fraction',
                                       {'name': u'Cold Duct Supply Fan Minimum Flow Fraction',
                                        'pyname': u'cold_duct_supply_fan_minimum_flow_fraction',
                                        'default': 0.2,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cold duct supply fan total efficiency',
                                       {'name': u'Cold Duct Supply Fan Total Efficiency',
                                        'pyname': u'cold_duct_supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cold duct supply fan delta pressure',
                                       {'name': u'Cold Duct Supply Fan Delta Pressure',
                                        'pyname': u'cold_duct_supply_fan_delta_pressure',
                                        'default': 1000.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'cold duct supply fan motor efficiency',
                                       {'name': u'Cold Duct Supply Fan Motor Efficiency',
                                        'pyname': u'cold_duct_supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cold duct supply fan motor in air stream fraction',
                                       {'name': u'Cold Duct Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'cold_duct_supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'cold duct supply fan part-load power coefficients',
                                       {'name': u'Cold Duct Supply Fan Part-Load Power Coefficients',
                                        'pyname': u'cold_duct_supply_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cold duct supply fan placement',
                                       {'name': u'Cold Duct Supply Fan Placement',
                                        'pyname': u'cold_duct_supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'hot duct supply fan maximum flow rate',
                                       {'name': u'Hot Duct Supply Fan Maximum Flow Rate',
                                        'pyname': u'hot_duct_supply_fan_maximum_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'hot duct supply fan minimum flow fraction',
                                       {'name': u'Hot Duct Supply Fan Minimum Flow Fraction',
                                        'pyname': u'hot_duct_supply_fan_minimum_flow_fraction',
                                        'default': 0.2,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'hot duct supply fan total efficiency',
                                       {'name': u'Hot Duct Supply Fan Total Efficiency',
                                        'pyname': u'hot_duct_supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'hot duct supply fan delta pressure',
                                       {'name': u'Hot Duct Supply Fan Delta Pressure',
                                        'pyname': u'hot_duct_supply_fan_delta_pressure',
                                        'default': 1000.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'hot duct supply fan motor efficiency',
                                       {'name': u'Hot Duct Supply Fan Motor Efficiency',
                                        'pyname': u'hot_duct_supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'hot duct supply fan motor in air stream fraction',
                                       {'name': u'Hot Duct Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'hot_duct_supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'hot duct supply fan part-load power coefficients',
                                       {'name': u'Hot Duct Supply Fan Part-Load Power Coefficients',
                                        'pyname': u'hot_duct_supply_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'hot duct supply fan placement',
                                       {'name': u'Hot Duct Supply Fan Placement',
                                        'pyname': u'hot_duct_supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'BlowThrough',
                                                            u'DrawThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'ChilledWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ChilledWater',
                                                            u'ChilledWaterDetailedFlatModel',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint control type',
                                       {'name': u'Cooling Coil Setpoint Control Type',
                                        'pyname': u'cooling_coil_setpoint_control_type',
                                        'default': u'FixedSetpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedSetpoint',
                                                            u'Scheduled',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'Warmest'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil design setpoint temperature',
                                       {'name': u'Cooling Coil Design Setpoint Temperature',
                                        'pyname': u'cooling_coil_design_setpoint_temperature',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil setpoint schedule name',
                                       {'name': u'Cooling Coil Setpoint Schedule Name',
                                        'pyname': u'cooling_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint at outdoor dry-bulb low',
                                       {'name': u'Cooling Coil Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'cooling_coil_setpoint_at_outdoor_drybulb_low',
                                        'default': 15.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil reset outdoor dry-bulb low',
                                       {'name': u'Cooling Coil Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'cooling_coil_reset_outdoor_drybulb_low',
                                        'default': 15.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil setpoint at outdoor dry-bulb high',
                                       {'name': u'Cooling Coil Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'cooling_coil_setpoint_at_outdoor_drybulb_high',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil reset outdoor dry-bulb high',
                                       {'name': u'Cooling Coil Reset Outdoor Dry-Bulb High',
                                        'pyname': u'cooling_coil_reset_outdoor_drybulb_high',
                                        'default': 23.3,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'HotWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint control type',
                                       {'name': u'Heating Coil Setpoint Control Type',
                                        'pyname': u'heating_coil_setpoint_control_type',
                                        'default': u'FixedSetpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedSetpoint',
                                                            u'Scheduled',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'Coldest'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil design setpoint',
                                       {'name': u'Heating Coil Design Setpoint',
                                        'pyname': u'heating_coil_design_setpoint',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil setpoint schedule name',
                                       {'name': u'Heating Coil Setpoint Schedule Name',
                                        'pyname': u'heating_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint at outdoor dry-bulb low',
                                       {'name': u'Heating Coil Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'heating_coil_setpoint_at_outdoor_drybulb_low',
                                        'default': 50.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil reset outdoor dry-bulb low',
                                       {'name': u'Heating Coil Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'heating_coil_reset_outdoor_drybulb_low',
                                        'default': 7.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil setpoint at outdoor dry-bulb high',
                                       {'name': u'Heating Coil Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'heating_coil_setpoint_at_outdoor_drybulb_high',
                                        'default': 20.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil reset outdoor dry-bulb high',
                                       {'name': u'Heating Coil Reset Outdoor Dry-Bulb High',
                                        'pyname': u'heating_coil_reset_outdoor_drybulb_high',
                                        'default': 12.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil capacity',
                                       {'name': u'Heating Coil Capacity',
                                        'pyname': u'heating_coil_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'preheat coil type',
                                       {'name': u'Preheat Coil Type',
                                        'pyname': u'preheat_coil_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'preheat coil availability schedule name',
                                       {'name': u'Preheat Coil Availability Schedule Name',
                                        'pyname': u'preheat_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'preheat coil design setpoint',
                                       {'name': u'Preheat Coil Design Setpoint',
                                        'pyname': u'preheat_coil_design_setpoint',
                                        'default': 7.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'preheat coil setpoint schedule name',
                                       {'name': u'Preheat Coil Setpoint Schedule Name',
                                        'pyname': u'preheat_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'gas preheat coil efficiency',
                                       {'name': u'Gas Preheat Coil Efficiency',
                                        'pyname': u'gas_preheat_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas preheat coil parasitic electric load',
                                       {'name': u'Gas Preheat Coil Parasitic Electric Load',
                                        'pyname': u'gas_preheat_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'maximum outdoor air flow rate',
                                       {'name': u'Maximum Outdoor Air Flow Rate',
                                        'pyname': u'maximum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air flow rate',
                                       {'name': u'Minimum Outdoor Air Flow Rate',
                                        'pyname': u'minimum_outdoor_air_flow_rate',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'minimum outdoor air control type',
                                       {'name': u'Minimum Outdoor Air Control Type',
                                        'pyname': u'minimum_outdoor_air_control_type',
                                        'default': u'ProportionalMinimum',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedMinimum',
                                                            u'ProportionalMinimum'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'minimum outdoor air schedule name',
                                       {'name': u'Minimum Outdoor Air Schedule Name',
                                        'pyname': u'minimum_outdoor_air_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'economizer type',
                                       {'name': u'Economizer Type',
                                        'pyname': u'economizer_type',
                                        'default': u'NoEconomizer',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedDryBulb',
                                                            u'FixedEnthalpy',
                                                            u'DifferentialDryBulb',
                                                            u'DifferentialEnthalpy',
                                                            u'FixedDewPointAndDryBulb',
                                                            u'ElectronicEnthalpy',
                                                            u'DifferentialDryBulbAndEnthalpy',
                                                            u'NoEconomizer'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer lockout',
                                       {'name': u'Economizer Lockout',
                                        'pyname': u'economizer_lockout',
                                        'default': u'NoLockout',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'NoLockout'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'economizer upper temperature limit',
                                       {'name': u'Economizer Upper Temperature Limit',
                                        'pyname': u'economizer_upper_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer lower temperature limit',
                                       {'name': u'Economizer Lower Temperature Limit',
                                        'pyname': u'economizer_lower_temperature_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'economizer upper enthalpy limit',
                                       {'name': u'Economizer Upper Enthalpy Limit',
                                        'pyname': u'economizer_upper_enthalpy_limit',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'J/kg'}),
                                      (u'economizer maximum limit dewpoint temperature',
                                       {'name': u'Economizer Maximum Limit Dewpoint Temperature',
                                        'pyname': u'economizer_maximum_limit_dewpoint_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'cold supply plenum name',
                                       {'name': u'Cold Supply Plenum Name',
                                        'pyname': u'cold_supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'hot supply plenum name',
                                       {'name': u'Hot Supply Plenum Name',
                                        'pyname': u'hot_supply_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'return plenum name',
                                       {'name': u'Return Plenum Name',
                                        'pyname': u'return_plenum_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'night cycle control',
                                       {'name': u'Night Cycle Control',
                                        'pyname': u'night_cycle_control',
                                        'default': u'StayOff',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'StayOff',
                                                            u'CycleOnAny',
                                                            u'CycleOnControlZone'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'night cycle control zone name',
                                       {'name': u'Night Cycle Control Zone Name',
                                        'pyname': u'night_cycle_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sensible heat recovery effectiveness',
                                       {'name': u'Sensible Heat Recovery Effectiveness',
                                        'pyname': u'sensible_heat_recovery_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'latent heat recovery effectiveness',
                                       {'name': u'Latent Heat Recovery Effectiveness',
                                        'pyname': u'latent_heat_recovery_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'heat recovery heat exchanger type',
                                       {'name': u'Heat Recovery Heat Exchanger Type',
                                        'pyname': u'heat_recovery_heat_exchanger_type',
                                        'default': u'Plate',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Plate',
                                                            u'Rotary'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat recovery frost control type',
                                       {'name': u'Heat Recovery Frost Control Type',
                                        'pyname': u'heat_recovery_frost_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ExhaustAirRecirculation',
                                                            u'ExhaustOnly',
                                                            u'MinimumExhaustTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'CoolReheat'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control zone name',
                                       {'name': u'Dehumidification Control Zone Name',
                                        'pyname': u'dehumidification_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'dehumidification relative humidity setpoint',
                                       {'name': u'Dehumidification Relative Humidity Setpoint',
                                        'pyname': u'dehumidification_relative_humidity_setpoint',
                                        'default': 60.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'dehumidification relative humidity setpoint schedule name',
                                       {'name': u'Dehumidification Relative Humidity Setpoint Schedule Name',
                                        'pyname': u'dehumidification_relative_humidity_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier control zone name',
                                       {'name': u'Humidifier Control Zone Name',
                                        'pyname': u'humidifier_control_zone_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier relative humidity setpoint',
                                       {'name': u'Humidifier Relative Humidity Setpoint',
                                        'pyname': u'humidifier_relative_humidity_setpoint',
                                        'default': 30.0,
                                        'maximum': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'percent'}),
                                      (u'humidifier relative humidity setpoint schedule name',
                                       {'name': u'Humidifier Relative Humidity Setpoint Schedule Name',
                                        'pyname': u'humidifier_relative_humidity_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'sizing option',
                                       {'name': u'Sizing Option',
                                        'pyname': u'sizing_option',
                                        'default': u'NonCoincident',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Coincident',
                                                            u'NonCoincident'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan',
                                       {'name': u'Return Fan',
                                        'pyname': u'return_fan',
                                        'default': u'No',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'return fan total efficiency',
                                       {'name': u'Return Fan Total Efficiency',
                                        'pyname': u'return_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan delta pressure',
                                       {'name': u'Return Fan Delta Pressure',
                                        'pyname': u'return_fan_delta_pressure',
                                        'default': 500.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'return fan motor efficiency',
                                       {'name': u'Return Fan Motor Efficiency',
                                        'pyname': u'return_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan motor in air stream fraction',
                                       {'name': u'Return Fan Motor in Air Stream Fraction',
                                        'pyname': u'return_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'return fan part-load power coefficients',
                                       {'name': u'Return Fan Part-Load Power Coefficients',
                                        'pyname': u'return_fan_partload_power_coefficients',
                                        'default': u'InletVaneDampers',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'InletVaneDampers',
                                                            u'OutletDampers',
                                                            u'VariableSpeedMotor',
                                                            u'ASHRAE90.1-2004AppendixG',
                                                            u'VariableSpeedMotorPressureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 91,
               'name': u'HVACTemplate:System:DualDuct',
               'pyname': u'HvactemplateSystemDualDuct',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on;
        Schedule is used in availability manager and fan scheduling. Also see
        "Night Cycle Control" field.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def system_configuration_type(self):
        """field `System Configuration Type`

        SingleFan - a single supply fan before the split to dual ducts
        DualFan - two supply fans, one each for the cold and hot ducts
        ConstantVolume - constant volume
        VariableVolume - variable volume

        Args:
            value (str): value for IDD Field `System Configuration Type`
                Default value: SingleFanConstantVolume

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_configuration_type` or None if not set

        """
        return self["System Configuration Type"]

    @system_configuration_type.setter
    def system_configuration_type(self, value="SingleFanConstantVolume"):
        """Corresponds to IDD field `System Configuration Type`"""
        self["System Configuration Type"] = value

    @property
    def main_supply_fan_maximum_flow_rate(self):
        """field `Main Supply Fan Maximum Flow Rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Main Supply Fan Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `main_supply_fan_maximum_flow_rate` or None if not set
        """
        return self["Main Supply Fan Maximum Flow Rate"]

    @main_supply_fan_maximum_flow_rate.setter
    def main_supply_fan_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Main Supply Fan Maximum Flow Rate`"""
        self["Main Supply Fan Maximum Flow Rate"] = value

    @property
    def main_supply_fan_minimum_flow_fraction(self):
        """field `Main Supply Fan Minimum Flow Fraction`

        Args:
            value (float): value for IDD Field `Main Supply Fan Minimum Flow Fraction`
                Default value: 0.2
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `main_supply_fan_minimum_flow_fraction` or None if not set

        """
        return self["Main Supply Fan Minimum Flow Fraction"]

    @main_supply_fan_minimum_flow_fraction.setter
    def main_supply_fan_minimum_flow_fraction(self, value=0.2):
        """Corresponds to IDD field `Main Supply Fan Minimum Flow Fraction`"""
        self["Main Supply Fan Minimum Flow Fraction"] = value

    @property
    def main_supply_fan_total_efficiency(self):
        """field `Main Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Main Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `main_supply_fan_total_efficiency` or None if not set

        """
        return self["Main Supply Fan Total Efficiency"]

    @main_supply_fan_total_efficiency.setter
    def main_supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Main Supply Fan Total Efficiency`"""
        self["Main Supply Fan Total Efficiency"] = value

    @property
    def main_supply_fan_delta_pressure(self):
        """field `Main Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Main Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `main_supply_fan_delta_pressure` or None if not set

        """
        return self["Main Supply Fan Delta Pressure"]

    @main_supply_fan_delta_pressure.setter
    def main_supply_fan_delta_pressure(self, value=1000.0):
        """Corresponds to IDD field `Main Supply Fan Delta Pressure`"""
        self["Main Supply Fan Delta Pressure"] = value

    @property
    def main_supply_fan_motor_efficiency(self):
        """field `Main Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Main Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `main_supply_fan_motor_efficiency` or None if not set

        """
        return self["Main Supply Fan Motor Efficiency"]

    @main_supply_fan_motor_efficiency.setter
    def main_supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Main Supply Fan Motor Efficiency`"""
        self["Main Supply Fan Motor Efficiency"] = value

    @property
    def main_supply_fan_motor_in_air_stream_fraction(self):
        """field `Main Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Main Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `main_supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Main Supply Fan Motor in Air Stream Fraction"]

    @main_supply_fan_motor_in_air_stream_fraction.setter
    def main_supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Main Supply Fan Motor in Air Stream
        Fraction`"""
        self["Main Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def main_supply_fan_partload_power_coefficients(self):
        """field `Main Supply Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Main Supply Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `main_supply_fan_partload_power_coefficients` or None if not set
        """
        return self["Main Supply Fan Part-Load Power Coefficients"]

    @main_supply_fan_partload_power_coefficients.setter
    def main_supply_fan_partload_power_coefficients(
            self,
            value="InletVaneDampers"):
        """  Corresponds to IDD field `Main Supply Fan Part-Load Power Coefficients`

        """
        self["Main Supply Fan Part-Load Power Coefficients"] = value

    @property
    def cold_duct_supply_fan_maximum_flow_rate(self):
        """field `Cold Duct Supply Fan Maximum Flow Rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Cold Duct Supply Fan Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cold_duct_supply_fan_maximum_flow_rate` or None if not set
        """
        return self["Cold Duct Supply Fan Maximum Flow Rate"]

    @cold_duct_supply_fan_maximum_flow_rate.setter
    def cold_duct_supply_fan_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Cold Duct Supply Fan Maximum Flow Rate`"""
        self["Cold Duct Supply Fan Maximum Flow Rate"] = value

    @property
    def cold_duct_supply_fan_minimum_flow_fraction(self):
        """field `Cold Duct Supply Fan Minimum Flow Fraction`

        Args:
            value (float): value for IDD Field `Cold Duct Supply Fan Minimum Flow Fraction`
                Default value: 0.2
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cold_duct_supply_fan_minimum_flow_fraction` or None if not set

        """
        return self["Cold Duct Supply Fan Minimum Flow Fraction"]

    @cold_duct_supply_fan_minimum_flow_fraction.setter
    def cold_duct_supply_fan_minimum_flow_fraction(self, value=0.2):
        """Corresponds to IDD field `Cold Duct Supply Fan Minimum Flow
        Fraction`"""
        self["Cold Duct Supply Fan Minimum Flow Fraction"] = value

    @property
    def cold_duct_supply_fan_total_efficiency(self):
        """field `Cold Duct Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Cold Duct Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cold_duct_supply_fan_total_efficiency` or None if not set

        """
        return self["Cold Duct Supply Fan Total Efficiency"]

    @cold_duct_supply_fan_total_efficiency.setter
    def cold_duct_supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Cold Duct Supply Fan Total Efficiency`"""
        self["Cold Duct Supply Fan Total Efficiency"] = value

    @property
    def cold_duct_supply_fan_delta_pressure(self):
        """field `Cold Duct Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Cold Duct Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cold_duct_supply_fan_delta_pressure` or None if not set

        """
        return self["Cold Duct Supply Fan Delta Pressure"]

    @cold_duct_supply_fan_delta_pressure.setter
    def cold_duct_supply_fan_delta_pressure(self, value=1000.0):
        """Corresponds to IDD field `Cold Duct Supply Fan Delta Pressure`"""
        self["Cold Duct Supply Fan Delta Pressure"] = value

    @property
    def cold_duct_supply_fan_motor_efficiency(self):
        """field `Cold Duct Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Cold Duct Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cold_duct_supply_fan_motor_efficiency` or None if not set

        """
        return self["Cold Duct Supply Fan Motor Efficiency"]

    @cold_duct_supply_fan_motor_efficiency.setter
    def cold_duct_supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Cold Duct Supply Fan Motor Efficiency`"""
        self["Cold Duct Supply Fan Motor Efficiency"] = value

    @property
    def cold_duct_supply_fan_motor_in_air_stream_fraction(self):
        """field `Cold Duct Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Cold Duct Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cold_duct_supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Cold Duct Supply Fan Motor in Air Stream Fraction"]

    @cold_duct_supply_fan_motor_in_air_stream_fraction.setter
    def cold_duct_supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Cold Duct Supply Fan Motor in Air Stream
        Fraction`"""
        self["Cold Duct Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def cold_duct_supply_fan_partload_power_coefficients(self):
        """field `Cold Duct Supply Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Cold Duct Supply Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cold_duct_supply_fan_partload_power_coefficients` or None if not set
        """
        return self["Cold Duct Supply Fan Part-Load Power Coefficients"]

    @cold_duct_supply_fan_partload_power_coefficients.setter
    def cold_duct_supply_fan_partload_power_coefficients(
            self,
            value="InletVaneDampers"):
        """  Corresponds to IDD field `Cold Duct Supply Fan Part-Load Power Coefficients`

        """
        self["Cold Duct Supply Fan Part-Load Power Coefficients"] = value

    @property
    def cold_duct_supply_fan_placement(self):
        """field `Cold Duct Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Cold Duct Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cold_duct_supply_fan_placement` or None if not set

        """
        return self["Cold Duct Supply Fan Placement"]

    @cold_duct_supply_fan_placement.setter
    def cold_duct_supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Cold Duct Supply Fan Placement`"""
        self["Cold Duct Supply Fan Placement"] = value

    @property
    def hot_duct_supply_fan_maximum_flow_rate(self):
        """field `Hot Duct Supply Fan Maximum Flow Rate`
        This field may be set to "autosize".  If a value is entered, it will *not* be
        multiplied by any sizing factor or by zone multipliers.  If using zone multipliers
        a value entered here must be large enough to serve the multiplied zones.

        Args:
            value (float or "Autosize"): value for IDD Field `Hot Duct Supply Fan Maximum Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_duct_supply_fan_maximum_flow_rate` or None if not set
        """
        return self["Hot Duct Supply Fan Maximum Flow Rate"]

    @hot_duct_supply_fan_maximum_flow_rate.setter
    def hot_duct_supply_fan_maximum_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Hot Duct Supply Fan Maximum Flow Rate`"""
        self["Hot Duct Supply Fan Maximum Flow Rate"] = value

    @property
    def hot_duct_supply_fan_minimum_flow_fraction(self):
        """field `Hot Duct Supply Fan Minimum Flow Fraction`

        Args:
            value (float): value for IDD Field `Hot Duct Supply Fan Minimum Flow Fraction`
                Default value: 0.2
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_duct_supply_fan_minimum_flow_fraction` or None if not set

        """
        return self["Hot Duct Supply Fan Minimum Flow Fraction"]

    @hot_duct_supply_fan_minimum_flow_fraction.setter
    def hot_duct_supply_fan_minimum_flow_fraction(self, value=0.2):
        """Corresponds to IDD field `Hot Duct Supply Fan Minimum Flow
        Fraction`"""
        self["Hot Duct Supply Fan Minimum Flow Fraction"] = value

    @property
    def hot_duct_supply_fan_total_efficiency(self):
        """field `Hot Duct Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Hot Duct Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_duct_supply_fan_total_efficiency` or None if not set

        """
        return self["Hot Duct Supply Fan Total Efficiency"]

    @hot_duct_supply_fan_total_efficiency.setter
    def hot_duct_supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Hot Duct Supply Fan Total Efficiency`"""
        self["Hot Duct Supply Fan Total Efficiency"] = value

    @property
    def hot_duct_supply_fan_delta_pressure(self):
        """field `Hot Duct Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Hot Duct Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_duct_supply_fan_delta_pressure` or None if not set

        """
        return self["Hot Duct Supply Fan Delta Pressure"]

    @hot_duct_supply_fan_delta_pressure.setter
    def hot_duct_supply_fan_delta_pressure(self, value=1000.0):
        """Corresponds to IDD field `Hot Duct Supply Fan Delta Pressure`"""
        self["Hot Duct Supply Fan Delta Pressure"] = value

    @property
    def hot_duct_supply_fan_motor_efficiency(self):
        """field `Hot Duct Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Hot Duct Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_duct_supply_fan_motor_efficiency` or None if not set

        """
        return self["Hot Duct Supply Fan Motor Efficiency"]

    @hot_duct_supply_fan_motor_efficiency.setter
    def hot_duct_supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Hot Duct Supply Fan Motor Efficiency`"""
        self["Hot Duct Supply Fan Motor Efficiency"] = value

    @property
    def hot_duct_supply_fan_motor_in_air_stream_fraction(self):
        """field `Hot Duct Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Hot Duct Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_duct_supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Hot Duct Supply Fan Motor in Air Stream Fraction"]

    @hot_duct_supply_fan_motor_in_air_stream_fraction.setter
    def hot_duct_supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Hot Duct Supply Fan Motor in Air Stream
        Fraction`"""
        self["Hot Duct Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def hot_duct_supply_fan_partload_power_coefficients(self):
        """field `Hot Duct Supply Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Hot Duct Supply Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_duct_supply_fan_partload_power_coefficients` or None if not set
        """
        return self["Hot Duct Supply Fan Part-Load Power Coefficients"]

    @hot_duct_supply_fan_partload_power_coefficients.setter
    def hot_duct_supply_fan_partload_power_coefficients(
            self,
            value="InletVaneDampers"):
        """  Corresponds to IDD field `Hot Duct Supply Fan Part-Load Power Coefficients`

        """
        self["Hot Duct Supply Fan Part-Load Power Coefficients"] = value

    @property
    def hot_duct_supply_fan_placement(self):
        """field `Hot Duct Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Hot Duct Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_duct_supply_fan_placement` or None if not set

        """
        return self["Hot Duct Supply Fan Placement"]

    @hot_duct_supply_fan_placement.setter
    def hot_duct_supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Hot Duct Supply Fan Placement`"""
        self["Hot Duct Supply Fan Placement"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: ChilledWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_control_type(self):
        """field `Cooling Coil Setpoint Control Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Control Type`
                Default value: FixedSetpoint

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_control_type` or None if not set

        """
        return self["Cooling Coil Setpoint Control Type"]

    @cooling_coil_setpoint_control_type.setter
    def cooling_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """Corresponds to IDD field `Cooling Coil Setpoint Control Type`"""
        self["Cooling Coil Setpoint Control Type"] = value

    @property
    def cooling_coil_design_setpoint_temperature(self):
        """field `Cooling Coil Design Setpoint Temperature` Used for sizing and
        as constant setpoint if no Cooling Coil Setpoint Schedule Name is
        specified.

        Args:
            value (float): value for IDD Field `Cooling Coil Design Setpoint Temperature`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_design_setpoint_temperature` or None if not set

        """
        return self["Cooling Coil Design Setpoint Temperature"]

    @cooling_coil_design_setpoint_temperature.setter
    def cooling_coil_design_setpoint_temperature(self, value=12.8):
        """Corresponds to IDD field `Cooling Coil Design Setpoint
        Temperature`"""
        self["Cooling Coil Design Setpoint Temperature"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """field `Cooling Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set

        """
        return self["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Setpoint Schedule Name`"""
        self["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self):
        """field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"]

    @cooling_coil_setpoint_at_outdoor_drybulb_low.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self, value=15.6):
        """  Corresponds to IDD field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_low(self):
        """field `Cooling Coil Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `Cooling Coil Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Cooling Coil Reset Outdoor Dry-Bulb Low"]

    @cooling_coil_reset_outdoor_drybulb_low.setter
    def cooling_coil_reset_outdoor_drybulb_low(self, value=15.6):
        """  Corresponds to IDD field `Cooling Coil Reset Outdoor Dry-Bulb Low`

        """
        self["Cooling Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self):
        """field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Cooling Coil Setpoint at Outdoor Dry-Bulb High"]

    @cooling_coil_setpoint_at_outdoor_drybulb_high.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self, value=12.8):
        """  Corresponds to IDD field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`

        """
        self["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_high(self):
        """field `Cooling Coil Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 23.3

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Cooling Coil Reset Outdoor Dry-Bulb High"]

    @cooling_coil_reset_outdoor_drybulb_high.setter
    def cooling_coil_reset_outdoor_drybulb_high(self, value=23.3):
        """  Corresponds to IDD field `Cooling Coil Reset Outdoor Dry-Bulb High`

        """
        self["Cooling Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: HotWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_control_type(self):
        """field `Heating Coil Setpoint Control Type`

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Control Type`
                Default value: FixedSetpoint

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_control_type` or None if not set

        """
        return self["Heating Coil Setpoint Control Type"]

    @heating_coil_setpoint_control_type.setter
    def heating_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """Corresponds to IDD field `Heating Coil Setpoint Control Type`"""
        self["Heating Coil Setpoint Control Type"] = value

    @property
    def heating_coil_design_setpoint(self):
        """field `Heating Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Heating Coil Design Setpoint`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set

        """
        return self["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=50.0):
        """Corresponds to IDD field `Heating Coil Design Setpoint`"""
        self["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """field `Heating Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set

        """
        return self["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Setpoint Schedule Name`"""
        self["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_low(self):
        """field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 50.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Heating Coil Setpoint at Outdoor Dry-Bulb Low"]

    @heating_coil_setpoint_at_outdoor_drybulb_low.setter
    def heating_coil_setpoint_at_outdoor_drybulb_low(self, value=50.0):
        """  Corresponds to IDD field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_low(self):
        """field `Heating Coil Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `Heating Coil Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: 7.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Heating Coil Reset Outdoor Dry-Bulb Low"]

    @heating_coil_reset_outdoor_drybulb_low.setter
    def heating_coil_reset_outdoor_drybulb_low(self, value=7.8):
        """  Corresponds to IDD field `Heating Coil Reset Outdoor Dry-Bulb Low`

        """
        self["Heating Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_high(self):
        """field `Heating Coil Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 20.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Heating Coil Setpoint at Outdoor Dry-Bulb High"]

    @heating_coil_setpoint_at_outdoor_drybulb_high.setter
    def heating_coil_setpoint_at_outdoor_drybulb_high(self, value=20.0):
        """  Corresponds to IDD field `Heating Coil Setpoint at Outdoor Dry-Bulb High`

        """
        self["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_high(self):
        """field `Heating Coil Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Heating Coil Reset Outdoor Dry-Bulb High"]

    @heating_coil_reset_outdoor_drybulb_high.setter
    def heating_coil_reset_outdoor_drybulb_high(self, value=12.2):
        """  Corresponds to IDD field `Heating Coil Reset Outdoor Dry-Bulb High`

        """
        self["Heating Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_capacity(self):
        """field `Heating Coil Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Heating Coil Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_capacity` or None if not set

        """
        return self["Heating Coil Capacity"]

    @heating_coil_capacity.setter
    def heating_coil_capacity(self, value="autosize"):
        """Corresponds to IDD field `Heating Coil Capacity`"""
        self["Heating Coil Capacity"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def preheat_coil_type(self):
        """field `Preheat Coil Type`

        Args:
            value (str): value for IDD Field `Preheat Coil Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_type` or None if not set

        """
        return self["Preheat Coil Type"]

    @preheat_coil_type.setter
    def preheat_coil_type(self, value="None"):
        """Corresponds to IDD field `Preheat Coil Type`"""
        self["Preheat Coil Type"] = value

    @property
    def preheat_coil_availability_schedule_name(self):
        """field `Preheat Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Preheat Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_availability_schedule_name` or None if not set

        """
        return self["Preheat Coil Availability Schedule Name"]

    @preheat_coil_availability_schedule_name.setter
    def preheat_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Preheat Coil Availability Schedule
        Name`"""
        self["Preheat Coil Availability Schedule Name"] = value

    @property
    def preheat_coil_design_setpoint(self):
        """field `Preheat Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Preheat Coil Setpoint Schedule Name specified.

        Args:
            value (float): value for IDD Field `Preheat Coil Design Setpoint`
                Units: C
                Default value: 7.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `preheat_coil_design_setpoint` or None if not set

        """
        return self["Preheat Coil Design Setpoint"]

    @preheat_coil_design_setpoint.setter
    def preheat_coil_design_setpoint(self, value=7.2):
        """Corresponds to IDD field `Preheat Coil Design Setpoint`"""
        self["Preheat Coil Design Setpoint"] = value

    @property
    def preheat_coil_setpoint_schedule_name(self):
        """field `Preheat Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Preheat Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `preheat_coil_setpoint_schedule_name` or None if not set

        """
        return self["Preheat Coil Setpoint Schedule Name"]

    @preheat_coil_setpoint_schedule_name.setter
    def preheat_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Preheat Coil Setpoint Schedule Name`"""
        self["Preheat Coil Setpoint Schedule Name"] = value

    @property
    def gas_preheat_coil_efficiency(self):
        """field `Gas Preheat Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Preheat Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_preheat_coil_efficiency` or None if not set

        """
        return self["Gas Preheat Coil Efficiency"]

    @gas_preheat_coil_efficiency.setter
    def gas_preheat_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Preheat Coil Efficiency`"""
        self["Gas Preheat Coil Efficiency"] = value

    @property
    def gas_preheat_coil_parasitic_electric_load(self):
        """field `Gas Preheat Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Preheat Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_preheat_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Preheat Coil Parasitic Electric Load"]

    @gas_preheat_coil_parasitic_electric_load.setter
    def gas_preheat_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Preheat Coil Parasitic Electric
        Load`"""
        self["Gas Preheat Coil Parasitic Electric Load"] = value

    @property
    def maximum_outdoor_air_flow_rate(self):
        """field `Maximum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Maximum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_air_flow_rate` or None if not set

        """
        return self["Maximum Outdoor Air Flow Rate"]

    @maximum_outdoor_air_flow_rate.setter
    def maximum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Maximum Outdoor Air Flow Rate`"""
        self["Maximum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_flow_rate(self):
        """field `Minimum Outdoor Air Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Minimum Outdoor Air Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_air_flow_rate` or None if not set

        """
        return self["Minimum Outdoor Air Flow Rate"]

    @minimum_outdoor_air_flow_rate.setter
    def minimum_outdoor_air_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Minimum Outdoor Air Flow Rate`"""
        self["Minimum Outdoor Air Flow Rate"] = value

    @property
    def minimum_outdoor_air_control_type(self):
        """field `Minimum Outdoor Air Control Type`

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Control Type`
                Default value: ProportionalMinimum

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_control_type` or None if not set

        """
        return self["Minimum Outdoor Air Control Type"]

    @minimum_outdoor_air_control_type.setter
    def minimum_outdoor_air_control_type(self, value="ProportionalMinimum"):
        """Corresponds to IDD field `Minimum Outdoor Air Control Type`"""
        self["Minimum Outdoor Air Control Type"] = value

    @property
    def minimum_outdoor_air_schedule_name(self):
        """field `Minimum Outdoor Air Schedule Name` Schedule values multiply
        the Minimum Outdoor Air Flow Rate If blank, multiplier is always one.

        Args:
            value (str): value for IDD Field `Minimum Outdoor Air Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `minimum_outdoor_air_schedule_name` or None if not set

        """
        return self["Minimum Outdoor Air Schedule Name"]

    @minimum_outdoor_air_schedule_name.setter
    def minimum_outdoor_air_schedule_name(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Air Schedule Name`"""
        self["Minimum Outdoor Air Schedule Name"] = value

    @property
    def economizer_type(self):
        """field `Economizer Type`

        Args:
            value (str): value for IDD Field `Economizer Type`
                Default value: NoEconomizer

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_type` or None if not set

        """
        return self["Economizer Type"]

    @economizer_type.setter
    def economizer_type(self, value="NoEconomizer"):
        """Corresponds to IDD field `Economizer Type`"""
        self["Economizer Type"] = value

    @property
    def economizer_lockout(self):
        """field `Economizer Lockout`

        Args:
            value (str): value for IDD Field `Economizer Lockout`
                Default value: NoLockout

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `economizer_lockout` or None if not set

        """
        return self["Economizer Lockout"]

    @economizer_lockout.setter
    def economizer_lockout(self, value="NoLockout"):
        """Corresponds to IDD field `Economizer Lockout`"""
        self["Economizer Lockout"] = value

    @property
    def economizer_upper_temperature_limit(self):
        """field `Economizer Upper Temperature Limit` Outdoor temperature above
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_temperature_limit` or None if not set

        """
        return self["Economizer Upper Temperature Limit"]

    @economizer_upper_temperature_limit.setter
    def economizer_upper_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Temperature Limit`"""
        self["Economizer Upper Temperature Limit"] = value

    @property
    def economizer_lower_temperature_limit(self):
        """field `Economizer Lower Temperature Limit` Outdoor temperature below
        which economizer is disabled and heat recovery is enabled (if
        available). Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Lower Temperature Limit`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_lower_temperature_limit` or None if not set

        """
        return self["Economizer Lower Temperature Limit"]

    @economizer_lower_temperature_limit.setter
    def economizer_lower_temperature_limit(self, value=None):
        """Corresponds to IDD field `Economizer Lower Temperature Limit`"""
        self["Economizer Lower Temperature Limit"] = value

    @property
    def economizer_upper_enthalpy_limit(self):
        """field `Economizer Upper Enthalpy Limit` Outdoor enthalpy above which
        economizer is disabled and heat recovery is enabled (if available).
        Blank means no limit.

        Args:
            value (float): value for IDD Field `Economizer Upper Enthalpy Limit`
                Units: J/kg

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_upper_enthalpy_limit` or None if not set

        """
        return self["Economizer Upper Enthalpy Limit"]

    @economizer_upper_enthalpy_limit.setter
    def economizer_upper_enthalpy_limit(self, value=None):
        """Corresponds to IDD field `Economizer Upper Enthalpy Limit`"""
        self["Economizer Upper Enthalpy Limit"] = value

    @property
    def economizer_maximum_limit_dewpoint_temperature(self):
        """field `Economizer Maximum Limit Dewpoint Temperature` Enter the
        maximum outdoor dewpoint temperature limit for FixedDewPointAndDryBulb
        economizer control type. No input or blank input means this limit is
        not operative. Limit is applied regardless of economizer control type.

        Args:
            value (float): value for IDD Field `Economizer Maximum Limit Dewpoint Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `economizer_maximum_limit_dewpoint_temperature` or None if not set

        """
        return self["Economizer Maximum Limit Dewpoint Temperature"]

    @economizer_maximum_limit_dewpoint_temperature.setter
    def economizer_maximum_limit_dewpoint_temperature(self, value=None):
        """Corresponds to IDD field `Economizer Maximum Limit Dewpoint
        Temperature`"""
        self["Economizer Maximum Limit Dewpoint Temperature"] = value

    @property
    def cold_supply_plenum_name(self):
        """field `Cold Supply Plenum Name` Plenum zone name.  Supply plenum
        serves the cold inlets of all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Cold Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cold_supply_plenum_name` or None if not set

        """
        return self["Cold Supply Plenum Name"]

    @cold_supply_plenum_name.setter
    def cold_supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Cold Supply Plenum Name`"""
        self["Cold Supply Plenum Name"] = value

    @property
    def hot_supply_plenum_name(self):
        """field `Hot Supply Plenum Name` Plenum zone name.  Supply plenum
        serves the hot inlets of all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Hot Supply Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_supply_plenum_name` or None if not set

        """
        return self["Hot Supply Plenum Name"]

    @hot_supply_plenum_name.setter
    def hot_supply_plenum_name(self, value=None):
        """Corresponds to IDD field `Hot Supply Plenum Name`"""
        self["Hot Supply Plenum Name"] = value

    @property
    def return_plenum_name(self):
        """field `Return Plenum Name` Plenum zone name.  Supply plenum serves
        all zones on this system. Blank if none.

        Args:
            value (str): value for IDD Field `Return Plenum Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_plenum_name` or None if not set

        """
        return self["Return Plenum Name"]

    @return_plenum_name.setter
    def return_plenum_name(self, value=None):
        """Corresponds to IDD field `Return Plenum Name`"""
        self["Return Plenum Name"] = value

    @property
    def night_cycle_control(self):
        """field `Night Cycle Control`

        Args:
            value (str): value for IDD Field `Night Cycle Control`
                Default value: StayOff

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control` or None if not set

        """
        return self["Night Cycle Control"]

    @night_cycle_control.setter
    def night_cycle_control(self, value="StayOff"):
        """Corresponds to IDD field `Night Cycle Control`"""
        self["Night Cycle Control"] = value

    @property
    def night_cycle_control_zone_name(self):
        """field `Night Cycle Control Zone Name` Applicable only if Night Cycle
        Control is Cycle On Control Zone.

        Args:
            value (str): value for IDD Field `Night Cycle Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `night_cycle_control_zone_name` or None if not set

        """
        return self["Night Cycle Control Zone Name"]

    @night_cycle_control_zone_name.setter
    def night_cycle_control_zone_name(self, value=None):
        """Corresponds to IDD field `Night Cycle Control Zone Name`"""
        self["Night Cycle Control Zone Name"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def sensible_heat_recovery_effectiveness(self):
        """field `Sensible Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Sensible Heat Recovery Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sensible_heat_recovery_effectiveness` or None if not set

        """
        return self["Sensible Heat Recovery Effectiveness"]

    @sensible_heat_recovery_effectiveness.setter
    def sensible_heat_recovery_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Sensible Heat Recovery Effectiveness`"""
        self["Sensible Heat Recovery Effectiveness"] = value

    @property
    def latent_heat_recovery_effectiveness(self):
        """field `Latent Heat Recovery Effectiveness`

        Args:
            value (float): value for IDD Field `Latent Heat Recovery Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `latent_heat_recovery_effectiveness` or None if not set

        """
        return self["Latent Heat Recovery Effectiveness"]

    @latent_heat_recovery_effectiveness.setter
    def latent_heat_recovery_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Latent Heat Recovery Effectiveness`"""
        self["Latent Heat Recovery Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """field `Heat Recovery Heat Exchanger Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Heat Exchanger Type`
                Default value: Plate

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set

        """
        return self["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """Corresponds to IDD field `Heat Recovery Heat Exchanger Type`"""
        self["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """field `Heat Recovery Frost Control Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Frost Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set

        """
        return self["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Frost Control Type`"""
        self["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        None = meet sensible load only
        CoolReheat = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint.

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def dehumidification_control_zone_name(self):
        """field `Dehumidification Control Zone Name` Zone name where
        humidistat is located.

        Args:
            value (str): value for IDD Field `Dehumidification Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_zone_name` or None if not set

        """
        return self["Dehumidification Control Zone Name"]

    @dehumidification_control_zone_name.setter
    def dehumidification_control_zone_name(self, value=None):
        """Corresponds to IDD field `Dehumidification Control Zone Name`"""
        self["Dehumidification Control Zone Name"] = value

    @property
    def dehumidification_relative_humidity_setpoint(self):
        """field `Dehumidification Relative Humidity Setpoint` Zone relative
        humidity setpoint in percent (0 to 100) Ignored if Dehumidification
        Relative Humidity Setpoint Schedule specified below.

        Args:
            value (float): value for IDD Field `Dehumidification Relative Humidity Setpoint`
                Units: percent
                Default value: 60.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_relative_humidity_setpoint` or None if not set

        """
        return self["Dehumidification Relative Humidity Setpoint"]

    @dehumidification_relative_humidity_setpoint.setter
    def dehumidification_relative_humidity_setpoint(self, value=60.0):
        """Corresponds to IDD field `Dehumidification Relative Humidity
        Setpoint`"""
        self["Dehumidification Relative Humidity Setpoint"] = value

    @property
    def dehumidification_relative_humidity_setpoint_schedule_name(self):
        """field `Dehumidification Relative Humidity Setpoint Schedule Name`
        Leave blank to use constant setpoint specified in Dehumidification
        Relative Humidity Setpoint above. Schedule values must be in percent
        relative humidity (0 to 100).

        Args:
            value (str): value for IDD Field `Dehumidification Relative Humidity Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_relative_humidity_setpoint_schedule_name` or None if not set

        """
        return self[
            "Dehumidification Relative Humidity Setpoint Schedule Name"]

    @dehumidification_relative_humidity_setpoint_schedule_name.setter
    def dehumidification_relative_humidity_setpoint_schedule_name(
            self,
            value=None):
        """Corresponds to IDD field `Dehumidification Relative Humidity
        Setpoint Schedule Name`"""
        self[
            "Dehumidification Relative Humidity Setpoint Schedule Name"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_control_zone_name(self):
        """field `Humidifier Control Zone Name` Zone name where humidistat is
        located.

        Args:
            value (str): value for IDD Field `Humidifier Control Zone Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_control_zone_name` or None if not set

        """
        return self["Humidifier Control Zone Name"]

    @humidifier_control_zone_name.setter
    def humidifier_control_zone_name(self, value=None):
        """Corresponds to IDD field `Humidifier Control Zone Name`"""
        self["Humidifier Control Zone Name"] = value

    @property
    def humidifier_relative_humidity_setpoint(self):
        """field `Humidifier Relative Humidity Setpoint` Zone relative humidity
        setpoint in percent (0 to 100). Ignored if Humidifier Relative Humidity
        Setpoint Schedule specified below.

        Args:
            value (float): value for IDD Field `Humidifier Relative Humidity Setpoint`
                Units: percent
                Default value: 30.0
                value <= 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_relative_humidity_setpoint` or None if not set

        """
        return self["Humidifier Relative Humidity Setpoint"]

    @humidifier_relative_humidity_setpoint.setter
    def humidifier_relative_humidity_setpoint(self, value=30.0):
        """Corresponds to IDD field `Humidifier Relative Humidity Setpoint`"""
        self["Humidifier Relative Humidity Setpoint"] = value

    @property
    def humidifier_relative_humidity_setpoint_schedule_name(self):
        """field `Humidifier Relative Humidity Setpoint Schedule Name` Leave
        blank to use constant setpoint specified in Humidifier Relative
        Humidity Setpoint above.Schedule values must be in percent relative
        humidity (0 to 100).

        Args:
            value (str): value for IDD Field `Humidifier Relative Humidity Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_relative_humidity_setpoint_schedule_name` or None if not set

        """
        return self["Humidifier Relative Humidity Setpoint Schedule Name"]

    @humidifier_relative_humidity_setpoint_schedule_name.setter
    def humidifier_relative_humidity_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Relative Humidity Setpoint
        Schedule Name`"""
        self["Humidifier Relative Humidity Setpoint Schedule Name"] = value

    @property
    def sizing_option(self):
        """field `Sizing Option` Select whether autosized system supply flow
        rate is the sum of Coincident or NonCoincident zone air flow rates.

        Args:
            value (str): value for IDD Field `Sizing Option`
                Default value: NonCoincident

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `sizing_option` or None if not set

        """
        return self["Sizing Option"]

    @sizing_option.setter
    def sizing_option(self, value="NonCoincident"):
        """Corresponds to IDD field `Sizing Option`"""
        self["Sizing Option"] = value

    @property
    def return_fan(self):
        """field `Return Fan` Specifies if the system has a return fan.

        Args:
            value (str): value for IDD Field `Return Fan`
                Default value: No

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan` or None if not set

        """
        return self["Return Fan"]

    @return_fan.setter
    def return_fan(self, value="No"):
        """Corresponds to IDD field `Return Fan`"""
        self["Return Fan"] = value

    @property
    def return_fan_total_efficiency(self):
        """field `Return Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_total_efficiency` or None if not set

        """
        return self["Return Fan Total Efficiency"]

    @return_fan_total_efficiency.setter
    def return_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Return Fan Total Efficiency`"""
        self["Return Fan Total Efficiency"] = value

    @property
    def return_fan_delta_pressure(self):
        """field `Return Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Return Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 500.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_delta_pressure` or None if not set

        """
        return self["Return Fan Delta Pressure"]

    @return_fan_delta_pressure.setter
    def return_fan_delta_pressure(self, value=500.0):
        """Corresponds to IDD field `Return Fan Delta Pressure`"""
        self["Return Fan Delta Pressure"] = value

    @property
    def return_fan_motor_efficiency(self):
        """field `Return Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Return Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_efficiency` or None if not set

        """
        return self["Return Fan Motor Efficiency"]

    @return_fan_motor_efficiency.setter
    def return_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Return Fan Motor Efficiency`"""
        self["Return Fan Motor Efficiency"] = value

    @property
    def return_fan_motor_in_air_stream_fraction(self):
        """field `Return Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Return Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `return_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Return Fan Motor in Air Stream Fraction"]

    @return_fan_motor_in_air_stream_fraction.setter
    def return_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Return Fan Motor in Air Stream
        Fraction`"""
        self["Return Fan Motor in Air Stream Fraction"] = value

    @property
    def return_fan_partload_power_coefficients(self):
        """field `Return Fan Part-Load Power Coefficients`
        This field selects a predefined set of fan power coefficients.
        The ASHRAE 90.1-2004 Appendix G coefficients are from TABLE G3.1.3.15, Method 2.
        The other sets of coefficients are from the EnergyPlus Input
        Output Reference, Fan Coefficient Values table.

        Args:
            value (str): value for IDD Field `Return Fan Part-Load Power Coefficients`
                Default value: InletVaneDampers

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `return_fan_partload_power_coefficients` or None if not set
        """
        return self["Return Fan Part-Load Power Coefficients"]

    @return_fan_partload_power_coefficients.setter
    def return_fan_partload_power_coefficients(self, value="InletVaneDampers"):
        """  Corresponds to IDD field `Return Fan Part-Load Power Coefficients`

        """
        self["Return Fan Part-Load Power Coefficients"] = value




class HvactemplateSystemDedicatedOutdoorAir(DataObject):

    """ Corresponds to IDD object `HVACTemplate:System:DedicatedOutdoorAir`
        This object creates a dedicated outdoor air system that must be used with
        HVACTemplate:Zone:* objects for BaseboardHeat FanCoil PTAC PTHP WaterToAirHeatPump and VRF.
        Does not support HVACTemplate:Zone:VAV or other central multizone systems
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'system availability schedule name',
                                       {'name': u'System Availability Schedule Name',
                                        'pyname': u'system_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'air outlet type',
                                       {'name': u'Air Outlet Type',
                                        'pyname': u'air_outlet_type',
                                        'default': u'DirectIntoZone',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'DirectIntoZone'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply fan flow rate',
                                       {'name': u'Supply Fan Flow Rate',
                                        'pyname': u'supply_fan_flow_rate',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'm3/s'}),
                                      (u'supply fan total efficiency',
                                       {'name': u'Supply Fan Total Efficiency',
                                        'pyname': u'supply_fan_total_efficiency',
                                        'default': 0.7,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan delta pressure',
                                       {'name': u'Supply Fan Delta Pressure',
                                        'pyname': u'supply_fan_delta_pressure',
                                        'default': 1000.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'supply fan motor efficiency',
                                       {'name': u'Supply Fan Motor Efficiency',
                                        'pyname': u'supply_fan_motor_efficiency',
                                        'default': 0.9,
                                        'minimum>': 0.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan motor in air stream fraction',
                                       {'name': u'Supply Fan Motor in Air Stream Fraction',
                                        'pyname': u'supply_fan_motor_in_air_stream_fraction',
                                        'default': 1.0,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'supply fan placement',
                                       {'name': u'Supply Fan Placement',
                                        'pyname': u'supply_fan_placement',
                                        'default': u'DrawThrough',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'DrawThrough',
                                                            u'BlowThrough'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil type',
                                       {'name': u'Cooling Coil Type',
                                        'pyname': u'cooling_coil_type',
                                        'default': u'ChilledWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ChilledWater',
                                                            u'ChilledWaterDetailedFlatModel',
                                                            u'TwoSpeedDX',
                                                            u'TwoStageDX',
                                                            u'TwoStageHumidityControlDX',
                                                            u'HeatExchangerAssistedChilledWater',
                                                            u'HeatExchangerAssistedDX',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil availability schedule name',
                                       {'name': u'Cooling Coil Availability Schedule Name',
                                        'pyname': u'cooling_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint control type',
                                       {'name': u'Cooling Coil Setpoint Control Type',
                                        'pyname': u'cooling_coil_setpoint_control_type',
                                        'default': u'FixedSetpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedSetpoint',
                                                            u'Scheduled',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling coil design setpoint',
                                       {'name': u'Cooling Coil Design Setpoint',
                                        'pyname': u'cooling_coil_design_setpoint',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil setpoint schedule name',
                                       {'name': u'Cooling Coil Setpoint Schedule Name',
                                        'pyname': u'cooling_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'cooling coil setpoint at outdoor dry-bulb low',
                                       {'name': u'Cooling Coil Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'cooling_coil_setpoint_at_outdoor_drybulb_low',
                                        'default': 15.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil reset outdoor dry-bulb low',
                                       {'name': u'Cooling Coil Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'cooling_coil_reset_outdoor_drybulb_low',
                                        'default': 15.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil setpoint at outdoor dry-bulb high',
                                       {'name': u'Cooling Coil Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'cooling_coil_setpoint_at_outdoor_drybulb_high',
                                        'default': 12.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'cooling coil reset outdoor dry-bulb high',
                                       {'name': u'Cooling Coil Reset Outdoor Dry-Bulb High',
                                        'pyname': u'cooling_coil_reset_outdoor_drybulb_high',
                                        'default': 23.3,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'dx cooling coil gross rated total capacity',
                                       {'name': u'DX Cooling Coil Gross Rated Total Capacity',
                                        'pyname': u'dx_cooling_coil_gross_rated_total_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'dx cooling coil gross rated sensible heat ratio',
                                       {'name': u'DX Cooling Coil Gross Rated Sensible Heat Ratio',
                                        'pyname': u'dx_cooling_coil_gross_rated_sensible_heat_ratio',
                                        'default': 'autosize',
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.5,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'dx cooling coil gross rated cop',
                                       {'name': u'DX Cooling Coil Gross Rated COP',
                                        'pyname': u'dx_cooling_coil_gross_rated_cop',
                                        'default': 3.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'heating coil type',
                                       {'name': u'Heating Coil Type',
                                        'pyname': u'heating_coil_type',
                                        'default': u'HotWater',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'Electric',
                                                            u'Gas',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil availability schedule name',
                                       {'name': u'Heating Coil Availability Schedule Name',
                                        'pyname': u'heating_coil_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint control type',
                                       {'name': u'Heating Coil Setpoint Control Type',
                                        'pyname': u'heating_coil_setpoint_control_type',
                                        'default': u'FixedSetpoint',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'FixedSetpoint',
                                                            u'Scheduled',
                                                            u'OutdoorAirTemperatureReset',
                                                            u'None'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heating coil design setpoint',
                                       {'name': u'Heating Coil Design Setpoint',
                                        'pyname': u'heating_coil_design_setpoint',
                                        'default': 12.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil setpoint schedule name',
                                       {'name': u'Heating Coil Setpoint Schedule Name',
                                        'pyname': u'heating_coil_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'heating coil setpoint at outdoor dry-bulb low',
                                       {'name': u'Heating Coil Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'heating_coil_setpoint_at_outdoor_drybulb_low',
                                        'default': 15.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil reset outdoor dry-bulb low',
                                       {'name': u'Heating Coil Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'heating_coil_reset_outdoor_drybulb_low',
                                        'default': 7.8,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil setpoint at outdoor dry-bulb high',
                                       {'name': u'Heating Coil Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'heating_coil_setpoint_at_outdoor_drybulb_high',
                                        'default': 12.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'heating coil reset outdoor dry-bulb high',
                                       {'name': u'Heating Coil Reset Outdoor Dry-Bulb High',
                                        'pyname': u'heating_coil_reset_outdoor_drybulb_high',
                                        'default': 12.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'gas heating coil efficiency',
                                       {'name': u'Gas Heating Coil Efficiency',
                                        'pyname': u'gas_heating_coil_efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'gas heating coil parasitic electric load',
                                       {'name': u'Gas Heating Coil Parasitic Electric Load',
                                        'pyname': u'gas_heating_coil_parasitic_electric_load',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'heat recovery type',
                                       {'name': u'Heat Recovery Type',
                                        'pyname': u'heat_recovery_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'Sensible',
                                                            u'Enthalpy'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat recovery sensible effectiveness',
                                       {'name': u'Heat Recovery Sensible Effectiveness',
                                        'pyname': u'heat_recovery_sensible_effectiveness',
                                        'default': 0.7,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'heat recovery latent effectiveness',
                                       {'name': u'Heat Recovery Latent Effectiveness',
                                        'pyname': u'heat_recovery_latent_effectiveness',
                                        'default': 0.65,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'heat recovery heat exchanger type',
                                       {'name': u'Heat Recovery Heat Exchanger Type',
                                        'pyname': u'heat_recovery_heat_exchanger_type',
                                        'default': u'Plate',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Plate',
                                                            u'Rotary'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'heat recovery frost control type',
                                       {'name': u'Heat Recovery Frost Control Type',
                                        'pyname': u'heat_recovery_frost_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ExhaustAirRecirculation',
                                                            u'ExhaustOnly',
                                                            u'MinimumExhaustTemperature'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification control type',
                                       {'name': u'Dehumidification Control Type',
                                        'pyname': u'dehumidification_control_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'CoolReheatHeatingCoil',
                                                            u'CoolReheatDesuperheater',
                                                            u'Multimode'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'dehumidification setpoint',
                                       {'name': u'Dehumidification Setpoint',
                                        'pyname': u'dehumidification_setpoint',
                                        'default': 0.00924,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'kgWater/kgDryAir'}),
                                      (u'humidifier type',
                                       {'name': u'Humidifier Type',
                                        'pyname': u'humidifier_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'ElectricSteam'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'humidifier availability schedule name',
                                       {'name': u'Humidifier Availability Schedule Name',
                                        'pyname': u'humidifier_availability_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier rated capacity',
                                       {'name': u'Humidifier Rated Capacity',
                                        'pyname': u'humidifier_rated_capacity',
                                        'default': 1e-06,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'm3/s'}),
                                      (u'humidifier rated electric power',
                                       {'name': u'Humidifier Rated Electric Power',
                                        'pyname': u'humidifier_rated_electric_power',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'W'}),
                                      (u'humidifier constant setpoint',
                                       {'name': u'Humidifier Constant Setpoint',
                                        'pyname': u'humidifier_constant_setpoint',
                                        'default': 0.003,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'kgWater/kgDryAir'}),
                                      (u'dehumidification setpoint schedule name',
                                       {'name': u'Dehumidification Setpoint Schedule Name',
                                        'pyname': u'dehumidification_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'humidifier setpoint schedule name',
                                       {'name': u'Humidifier Setpoint Schedule Name',
                                        'pyname': u'humidifier_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 46,
               'name': u'HVACTemplate:System:DedicatedOutdoorAir',
               'pyname': u'HvactemplateSystemDedicatedOutdoorAir',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def system_availability_schedule_name(self):
        """field `System Availability Schedule Name` If blank, always on; DOAS
        System always on.  Schedule is used in availability manager and fan
        scheduling.

        Args:
            value (str): value for IDD Field `System Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `system_availability_schedule_name` or None if not set

        """
        return self["System Availability Schedule Name"]

    @system_availability_schedule_name.setter
    def system_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `System Availability Schedule Name`"""
        self["System Availability Schedule Name"] = value

    @property
    def air_outlet_type(self):
        """field `Air Outlet Type`

        Args:
            value (str): value for IDD Field `Air Outlet Type`
                Default value: DirectIntoZone

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `air_outlet_type` or None if not set

        """
        return self["Air Outlet Type"]

    @air_outlet_type.setter
    def air_outlet_type(self, value="DirectIntoZone"):
        """Corresponds to IDD field `Air Outlet Type`"""
        self["Air Outlet Type"] = value

    @property
    def supply_fan_flow_rate(self):
        """field `Supply Fan Flow Rate`

        Args:
            value (float or "Autosize"): value for IDD Field `Supply Fan Flow Rate`
                Units: m3/s
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_flow_rate` or None if not set

        """
        return self["Supply Fan Flow Rate"]

    @supply_fan_flow_rate.setter
    def supply_fan_flow_rate(self, value="autosize"):
        """Corresponds to IDD field `Supply Fan Flow Rate`"""
        self["Supply Fan Flow Rate"] = value

    @property
    def supply_fan_total_efficiency(self):
        """field `Supply Fan Total Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Total Efficiency`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_total_efficiency` or None if not set

        """
        return self["Supply Fan Total Efficiency"]

    @supply_fan_total_efficiency.setter
    def supply_fan_total_efficiency(self, value=0.7):
        """Corresponds to IDD field `Supply Fan Total Efficiency`"""
        self["Supply Fan Total Efficiency"] = value

    @property
    def supply_fan_delta_pressure(self):
        """field `Supply Fan Delta Pressure`

        Args:
            value (float): value for IDD Field `Supply Fan Delta Pressure`
                Units: Pa
                IP-Units: inH2O
                Default value: 1000.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_delta_pressure` or None if not set

        """
        return self["Supply Fan Delta Pressure"]

    @supply_fan_delta_pressure.setter
    def supply_fan_delta_pressure(self, value=1000.0):
        """Corresponds to IDD field `Supply Fan Delta Pressure`"""
        self["Supply Fan Delta Pressure"] = value

    @property
    def supply_fan_motor_efficiency(self):
        """field `Supply Fan Motor Efficiency`

        Args:
            value (float): value for IDD Field `Supply Fan Motor Efficiency`
                Default value: 0.9
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_efficiency` or None if not set

        """
        return self["Supply Fan Motor Efficiency"]

    @supply_fan_motor_efficiency.setter
    def supply_fan_motor_efficiency(self, value=0.9):
        """Corresponds to IDD field `Supply Fan Motor Efficiency`"""
        self["Supply Fan Motor Efficiency"] = value

    @property
    def supply_fan_motor_in_air_stream_fraction(self):
        """field `Supply Fan Motor in Air Stream Fraction`

        Args:
            value (float): value for IDD Field `Supply Fan Motor in Air Stream Fraction`
                Default value: 1.0
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `supply_fan_motor_in_air_stream_fraction` or None if not set

        """
        return self["Supply Fan Motor in Air Stream Fraction"]

    @supply_fan_motor_in_air_stream_fraction.setter
    def supply_fan_motor_in_air_stream_fraction(self, value=1.0):
        """Corresponds to IDD field `Supply Fan Motor in Air Stream
        Fraction`"""
        self["Supply Fan Motor in Air Stream Fraction"] = value

    @property
    def supply_fan_placement(self):
        """field `Supply Fan Placement`

        Args:
            value (str): value for IDD Field `Supply Fan Placement`
                Default value: DrawThrough

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_fan_placement` or None if not set

        """
        return self["Supply Fan Placement"]

    @supply_fan_placement.setter
    def supply_fan_placement(self, value="DrawThrough"):
        """Corresponds to IDD field `Supply Fan Placement`"""
        self["Supply Fan Placement"] = value

    @property
    def cooling_coil_type(self):
        """field `Cooling Coil Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Type`
                Default value: ChilledWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_type` or None if not set

        """
        return self["Cooling Coil Type"]

    @cooling_coil_type.setter
    def cooling_coil_type(self, value="ChilledWater"):
        """Corresponds to IDD field `Cooling Coil Type`"""
        self["Cooling Coil Type"] = value

    @property
    def cooling_coil_availability_schedule_name(self):
        """field `Cooling Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Cooling Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_availability_schedule_name` or None if not set

        """
        return self["Cooling Coil Availability Schedule Name"]

    @cooling_coil_availability_schedule_name.setter
    def cooling_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Availability Schedule
        Name`"""
        self["Cooling Coil Availability Schedule Name"] = value

    @property
    def cooling_coil_setpoint_control_type(self):
        """field `Cooling Coil Setpoint Control Type`

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Control Type`
                Default value: FixedSetpoint

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_control_type` or None if not set

        """
        return self["Cooling Coil Setpoint Control Type"]

    @cooling_coil_setpoint_control_type.setter
    def cooling_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """Corresponds to IDD field `Cooling Coil Setpoint Control Type`"""
        self["Cooling Coil Setpoint Control Type"] = value

    @property
    def cooling_coil_design_setpoint(self):
        """field `Cooling Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Cooling Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Cooling Coil Design Setpoint`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_design_setpoint` or None if not set

        """
        return self["Cooling Coil Design Setpoint"]

    @cooling_coil_design_setpoint.setter
    def cooling_coil_design_setpoint(self, value=12.8):
        """Corresponds to IDD field `Cooling Coil Design Setpoint`"""
        self["Cooling Coil Design Setpoint"] = value

    @property
    def cooling_coil_setpoint_schedule_name(self):
        """field `Cooling Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Cooling Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_coil_setpoint_schedule_name` or None if not set

        """
        return self["Cooling Coil Setpoint Schedule Name"]

    @cooling_coil_setpoint_schedule_name.setter
    def cooling_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Cooling Coil Setpoint Schedule Name`"""
        self["Cooling Coil Setpoint Schedule Name"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self):
        """field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"]

    @cooling_coil_setpoint_at_outdoor_drybulb_low.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_low(self, value=15.6):
        """  Corresponds to IDD field `Cooling Coil Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Cooling Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_low(self):
        """field `Cooling Coil Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults are 15.6C (60F) at 15.6C (60F) to 12.8C (55F) at 23.3C (74F)

        Args:
            value (float): value for IDD Field `Cooling Coil Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Cooling Coil Reset Outdoor Dry-Bulb Low"]

    @cooling_coil_reset_outdoor_drybulb_low.setter
    def cooling_coil_reset_outdoor_drybulb_low(self, value=15.6):
        """  Corresponds to IDD field `Cooling Coil Reset Outdoor Dry-Bulb Low`

        """
        self["Cooling Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self):
        """field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Cooling Coil Setpoint at Outdoor Dry-Bulb High"]

    @cooling_coil_setpoint_at_outdoor_drybulb_high.setter
    def cooling_coil_setpoint_at_outdoor_drybulb_high(self, value=12.8):
        """  Corresponds to IDD field `Cooling Coil Setpoint at Outdoor Dry-Bulb High`

        """
        self["Cooling Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def cooling_coil_reset_outdoor_drybulb_high(self):
        """field `Cooling Coil Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Cooling Coil Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 23.3

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `cooling_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Cooling Coil Reset Outdoor Dry-Bulb High"]

    @cooling_coil_reset_outdoor_drybulb_high.setter
    def cooling_coil_reset_outdoor_drybulb_high(self, value=23.3):
        """  Corresponds to IDD field `Cooling Coil Reset Outdoor Dry-Bulb High`

        """
        self["Cooling Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def dx_cooling_coil_gross_rated_total_capacity(self):
        """field `DX Cooling Coil Gross Rated Total Capacity` Total cooling
        capacity not accounting for the effect of supply air fan heat.

        Args:
            value (float or "Autosize"): value for IDD Field `DX Cooling Coil Gross Rated Total Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_total_capacity` or None if not set

        """
        return self["DX Cooling Coil Gross Rated Total Capacity"]

    @dx_cooling_coil_gross_rated_total_capacity.setter
    def dx_cooling_coil_gross_rated_total_capacity(self, value="autosize"):
        """Corresponds to IDD field `DX Cooling Coil Gross Rated Total
        Capacity`"""
        self["DX Cooling Coil Gross Rated Total Capacity"] = value

    @property
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(self):
        """field `DX Cooling Coil Gross Rated Sensible Heat Ratio` Gross SHR.

        Args:
            value (float or "Autosize"): value for IDD Field `DX Cooling Coil Gross Rated Sensible Heat Ratio`
                Default value: "autosize"
                value >= 0.5
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_sensible_heat_ratio` or None if not set

        """
        return self["DX Cooling Coil Gross Rated Sensible Heat Ratio"]

    @dx_cooling_coil_gross_rated_sensible_heat_ratio.setter
    def dx_cooling_coil_gross_rated_sensible_heat_ratio(
            self,
            value="autosize"):
        """Corresponds to IDD field `DX Cooling Coil Gross Rated Sensible Heat
        Ratio`"""
        self["DX Cooling Coil Gross Rated Sensible Heat Ratio"] = value

    @property
    def dx_cooling_coil_gross_rated_cop(self):
        """field `DX Cooling Coil Gross Rated COP` Gross cooling capacity
        divided by power input to the compressor and outdoor fan, does not
        include supply fan heat or supply fan electrical energy input.

        Args:
            value (float): value for IDD Field `DX Cooling Coil Gross Rated COP`
                Units: W/W
                Default value: 3.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dx_cooling_coil_gross_rated_cop` or None if not set

        """
        return self["DX Cooling Coil Gross Rated COP"]

    @dx_cooling_coil_gross_rated_cop.setter
    def dx_cooling_coil_gross_rated_cop(self, value=3.0):
        """Corresponds to IDD field `DX Cooling Coil Gross Rated COP`"""
        self["DX Cooling Coil Gross Rated COP"] = value

    @property
    def heating_coil_type(self):
        """field `Heating Coil Type`

        Args:
            value (str): value for IDD Field `Heating Coil Type`
                Default value: HotWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_type` or None if not set

        """
        return self["Heating Coil Type"]

    @heating_coil_type.setter
    def heating_coil_type(self, value="HotWater"):
        """Corresponds to IDD field `Heating Coil Type`"""
        self["Heating Coil Type"] = value

    @property
    def heating_coil_availability_schedule_name(self):
        """field `Heating Coil Availability Schedule Name` If blank, always on.

        Args:
            value (str): value for IDD Field `Heating Coil Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_availability_schedule_name` or None if not set

        """
        return self["Heating Coil Availability Schedule Name"]

    @heating_coil_availability_schedule_name.setter
    def heating_coil_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Availability Schedule
        Name`"""
        self["Heating Coil Availability Schedule Name"] = value

    @property
    def heating_coil_setpoint_control_type(self):
        """field `Heating Coil Setpoint Control Type` When selecting
        OutdoorAirTemperatureReset, the Heating Coil Design Setpoint may need
        to be changed.

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Control Type`
                Default value: FixedSetpoint

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_control_type` or None if not set

        """
        return self["Heating Coil Setpoint Control Type"]

    @heating_coil_setpoint_control_type.setter
    def heating_coil_setpoint_control_type(self, value="FixedSetpoint"):
        """Corresponds to IDD field `Heating Coil Setpoint Control Type`"""
        self["Heating Coil Setpoint Control Type"] = value

    @property
    def heating_coil_design_setpoint(self):
        """field `Heating Coil Design Setpoint` Used for sizing and as constant
        setpoint if no Heating Coil Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Heating Coil Design Setpoint`
                Units: C
                Default value: 12.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_design_setpoint` or None if not set

        """
        return self["Heating Coil Design Setpoint"]

    @heating_coil_design_setpoint.setter
    def heating_coil_design_setpoint(self, value=12.2):
        """Corresponds to IDD field `Heating Coil Design Setpoint`"""
        self["Heating Coil Design Setpoint"] = value

    @property
    def heating_coil_setpoint_schedule_name(self):
        """field `Heating Coil Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Heating Coil Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heating_coil_setpoint_schedule_name` or None if not set

        """
        return self["Heating Coil Setpoint Schedule Name"]

    @heating_coil_setpoint_schedule_name.setter
    def heating_coil_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Heating Coil Setpoint Schedule Name`"""
        self["Heating Coil Setpoint Schedule Name"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_low(self):
        """field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.
        Defaults 15.0C (59F) at 7.8C (46F) to 12.2C (54F) at 12.2C (54F)

        Args:
            value (float): value for IDD Field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Heating Coil Setpoint at Outdoor Dry-Bulb Low"]

    @heating_coil_setpoint_at_outdoor_drybulb_low.setter
    def heating_coil_setpoint_at_outdoor_drybulb_low(self, value=15.0):
        """  Corresponds to IDD field `Heating Coil Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Heating Coil Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_low(self):
        """field `Heating Coil Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: 7.8

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Heating Coil Reset Outdoor Dry-Bulb Low"]

    @heating_coil_reset_outdoor_drybulb_low.setter
    def heating_coil_reset_outdoor_drybulb_low(self, value=7.8):
        """  Corresponds to IDD field `Heating Coil Reset Outdoor Dry-Bulb Low`

        """
        self["Heating Coil Reset Outdoor Dry-Bulb Low"] = value

    @property
    def heating_coil_setpoint_at_outdoor_drybulb_high(self):
        """field `Heating Coil Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Heating Coil Setpoint at Outdoor Dry-Bulb High"]

    @heating_coil_setpoint_at_outdoor_drybulb_high.setter
    def heating_coil_setpoint_at_outdoor_drybulb_high(self, value=12.2):
        """  Corresponds to IDD field `Heating Coil Setpoint at Outdoor Dry-Bulb High`

        """
        self["Heating Coil Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def heating_coil_reset_outdoor_drybulb_high(self):
        """field `Heating Coil Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Heating Coil Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 12.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heating_coil_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Heating Coil Reset Outdoor Dry-Bulb High"]

    @heating_coil_reset_outdoor_drybulb_high.setter
    def heating_coil_reset_outdoor_drybulb_high(self, value=12.2):
        """  Corresponds to IDD field `Heating Coil Reset Outdoor Dry-Bulb High`

        """
        self["Heating Coil Reset Outdoor Dry-Bulb High"] = value

    @property
    def gas_heating_coil_efficiency(self):
        """field `Gas Heating Coil Efficiency`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_efficiency` or None if not set

        """
        return self["Gas Heating Coil Efficiency"]

    @gas_heating_coil_efficiency.setter
    def gas_heating_coil_efficiency(self, value=0.8):
        """Corresponds to IDD field `Gas Heating Coil Efficiency`"""
        self["Gas Heating Coil Efficiency"] = value

    @property
    def gas_heating_coil_parasitic_electric_load(self):
        """field `Gas Heating Coil Parasitic Electric Load`

        Args:
            value (float): value for IDD Field `Gas Heating Coil Parasitic Electric Load`
                Units: W
                IP-Units: W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `gas_heating_coil_parasitic_electric_load` or None if not set

        """
        return self["Gas Heating Coil Parasitic Electric Load"]

    @gas_heating_coil_parasitic_electric_load.setter
    def gas_heating_coil_parasitic_electric_load(self, value=None):
        """Corresponds to IDD field `Gas Heating Coil Parasitic Electric
        Load`"""
        self["Gas Heating Coil Parasitic Electric Load"] = value

    @property
    def heat_recovery_type(self):
        """field `Heat Recovery Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_type` or None if not set

        """
        return self["Heat Recovery Type"]

    @heat_recovery_type.setter
    def heat_recovery_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Type`"""
        self["Heat Recovery Type"] = value

    @property
    def heat_recovery_sensible_effectiveness(self):
        """field `Heat Recovery Sensible Effectiveness`

        Args:
            value (float): value for IDD Field `Heat Recovery Sensible Effectiveness`
                Default value: 0.7
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_recovery_sensible_effectiveness` or None if not set

        """
        return self["Heat Recovery Sensible Effectiveness"]

    @heat_recovery_sensible_effectiveness.setter
    def heat_recovery_sensible_effectiveness(self, value=0.7):
        """Corresponds to IDD field `Heat Recovery Sensible Effectiveness`"""
        self["Heat Recovery Sensible Effectiveness"] = value

    @property
    def heat_recovery_latent_effectiveness(self):
        """field `Heat Recovery Latent Effectiveness`

        Args:
            value (float): value for IDD Field `Heat Recovery Latent Effectiveness`
                Default value: 0.65
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `heat_recovery_latent_effectiveness` or None if not set

        """
        return self["Heat Recovery Latent Effectiveness"]

    @heat_recovery_latent_effectiveness.setter
    def heat_recovery_latent_effectiveness(self, value=0.65):
        """Corresponds to IDD field `Heat Recovery Latent Effectiveness`"""
        self["Heat Recovery Latent Effectiveness"] = value

    @property
    def heat_recovery_heat_exchanger_type(self):
        """field `Heat Recovery Heat Exchanger Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Heat Exchanger Type`
                Default value: Plate

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_heat_exchanger_type` or None if not set

        """
        return self["Heat Recovery Heat Exchanger Type"]

    @heat_recovery_heat_exchanger_type.setter
    def heat_recovery_heat_exchanger_type(self, value="Plate"):
        """Corresponds to IDD field `Heat Recovery Heat Exchanger Type`"""
        self["Heat Recovery Heat Exchanger Type"] = value

    @property
    def heat_recovery_frost_control_type(self):
        """field `Heat Recovery Frost Control Type`

        Args:
            value (str): value for IDD Field `Heat Recovery Frost Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `heat_recovery_frost_control_type` or None if not set

        """
        return self["Heat Recovery Frost Control Type"]

    @heat_recovery_frost_control_type.setter
    def heat_recovery_frost_control_type(self, value="None"):
        """Corresponds to IDD field `Heat Recovery Frost Control Type`"""
        self["Heat Recovery Frost Control Type"] = value

    @property
    def dehumidification_control_type(self):
        """field `Dehumidification Control Type`
        None = meet sensible load only
        CoolReheatHeatingCoil = cool beyond the dry-bulb setpoint, reheat with heating coil
        Valid for all cooling coil types.  If no heating coil specified, cold supply temps may occur.
        CoolReheatDesuperheater = cool beyond the dry-bulb setpoint
        as required to meet the humidity setpoint, reheat with desuperheater coil.
        Valid only for Cooling Coil Type = TwoSpeedDX, TwoStageDX, TwoStageHumidityControlDX, or HeatExchangerAssistedDX.
        Multimode = activate enhanced dehumidification mode as needed and meet sensible load.
        Valid only for Cooling Coil Type = TwoStageHumidityControlDX

        Args:
            value (str): value for IDD Field `Dehumidification Control Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_control_type` or None if not set
        """
        return self["Dehumidification Control Type"]

    @dehumidification_control_type.setter
    def dehumidification_control_type(self, value="None"):
        """Corresponds to IDD field `Dehumidification Control Type`"""
        self["Dehumidification Control Type"] = value

    @property
    def dehumidification_setpoint(self):
        """field `Dehumidification Setpoint`
        The supply air humidity ratio for dehumidification control.
        Default of 0.00924 kgWater/kgDryAir is equivalent to 12.8C (55F) dewpoint.
        Ignored if Dehumidification Setpoint Schedule specified below

        Args:
            value (float): value for IDD Field `Dehumidification Setpoint`
                Units: kgWater/kgDryAir
                Default value: 0.00924
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `dehumidification_setpoint` or None if not set
        """
        return self["Dehumidification Setpoint"]

    @dehumidification_setpoint.setter
    def dehumidification_setpoint(self, value=0.00924):
        """Corresponds to IDD field `Dehumidification Setpoint`"""
        self["Dehumidification Setpoint"] = value

    @property
    def humidifier_type(self):
        """field `Humidifier Type`

        Args:
            value (str): value for IDD Field `Humidifier Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_type` or None if not set

        """
        return self["Humidifier Type"]

    @humidifier_type.setter
    def humidifier_type(self, value="None"):
        """Corresponds to IDD field `Humidifier Type`"""
        self["Humidifier Type"] = value

    @property
    def humidifier_availability_schedule_name(self):
        """field `Humidifier Availability Schedule Name` If blank, always
        available.

        Args:
            value (str): value for IDD Field `Humidifier Availability Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_availability_schedule_name` or None if not set

        """
        return self["Humidifier Availability Schedule Name"]

    @humidifier_availability_schedule_name.setter
    def humidifier_availability_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Availability Schedule Name`"""
        self["Humidifier Availability Schedule Name"] = value

    @property
    def humidifier_rated_capacity(self):
        """field `Humidifier Rated Capacity` Moisture output rate at full rated
        power input. The humidifier does not currently autosize, so the default
        is very large to allow for adequate capacity.

        Args:
            value (float): value for IDD Field `Humidifier Rated Capacity`
                Units: m3/s
                IP-Units: gal/min
                Default value: 1e-06

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_capacity` or None if not set

        """
        return self["Humidifier Rated Capacity"]

    @humidifier_rated_capacity.setter
    def humidifier_rated_capacity(self, value=1e-06):
        """Corresponds to IDD field `Humidifier Rated Capacity`"""
        self["Humidifier Rated Capacity"] = value

    @property
    def humidifier_rated_electric_power(self):
        """field `Humidifier Rated Electric Power`
        Electric power input at rated capacity moisture output.
        Power consumption is proportional to moisture output with no part-load penalty.

        Args:
            value (float or "Autosize"): value for IDD Field `Humidifier Rated Electric Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_rated_electric_power` or None if not set
        """
        return self["Humidifier Rated Electric Power"]

    @humidifier_rated_electric_power.setter
    def humidifier_rated_electric_power(self, value="autosize"):
        """Corresponds to IDD field `Humidifier Rated Electric Power`"""
        self["Humidifier Rated Electric Power"] = value

    @property
    def humidifier_constant_setpoint(self):
        """field `Humidifier Constant Setpoint` The supply air humidity ratio
        for humidification control. Ignored if Humidifier Setpoint Schedule
        specified below.

        Args:
            value (float): value for IDD Field `Humidifier Constant Setpoint`
                Units: kgWater/kgDryAir
                Default value: 0.003
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `humidifier_constant_setpoint` or None if not set

        """
        return self["Humidifier Constant Setpoint"]

    @humidifier_constant_setpoint.setter
    def humidifier_constant_setpoint(self, value=0.003):
        """Corresponds to IDD field `Humidifier Constant Setpoint`"""
        self["Humidifier Constant Setpoint"] = value

    @property
    def dehumidification_setpoint_schedule_name(self):
        """field `Dehumidification Setpoint Schedule Name` Leave blank to use
        constant setpoint specified in Dehumidification Setpoint above.
        Schedule values must be in units of humidity ratio (kgWater/kgDryAir or
        lbWater/lbDryAir)

        Args:
            value (str): value for IDD Field `Dehumidification Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `dehumidification_setpoint_schedule_name` or None if not set

        """
        return self["Dehumidification Setpoint Schedule Name"]

    @dehumidification_setpoint_schedule_name.setter
    def dehumidification_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Dehumidification Setpoint Schedule
        Name`"""
        self["Dehumidification Setpoint Schedule Name"] = value

    @property
    def humidifier_setpoint_schedule_name(self):
        """field `Humidifier Setpoint Schedule Name` Leave blank to use
        constant setpoint specified in Humidifer Constant Setpoint above.
        Schedule values must be in units of humidity ratio (kgWater/kgDryAir or
        lbWater/lbDryAir)

        Args:
            value (str): value for IDD Field `Humidifier Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `humidifier_setpoint_schedule_name` or None if not set

        """
        return self["Humidifier Setpoint Schedule Name"]

    @humidifier_setpoint_schedule_name.setter
    def humidifier_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Humidifier Setpoint Schedule Name`"""
        self["Humidifier Setpoint Schedule Name"] = value




class HvactemplatePlantChilledWaterLoop(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:ChilledWaterLoop`
        Plant and condenser loops to serve all HVACTemplate
        chilled water coils, chillers, and towers.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'pump schedule name',
                                       {'name': u'Pump Schedule Name',
                                        'pyname': u'pump_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'pump control type',
                                       {'name': u'Pump Control Type',
                                        'pyname': u'pump_control_type',
                                        'default': u'Intermittent',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Intermittent',
                                                            u'Continuous'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chiller plant operation scheme type',
                                       {'name': u'Chiller Plant Operation Scheme Type',
                                        'pyname': u'chiller_plant_operation_scheme_type',
                                        'default': u'Default',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Default',
                                                            u'UserDefined'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chiller plant equipment operation schemes name',
                                       {'name': u'Chiller Plant Equipment Operation Schemes Name',
                                        'pyname': u'chiller_plant_equipment_operation_schemes_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'chilled water setpoint schedule name',
                                       {'name': u'Chilled Water Setpoint Schedule Name',
                                        'pyname': u'chilled_water_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'chilled water design setpoint',
                                       {'name': u'Chilled Water Design Setpoint',
                                        'pyname': u'chilled_water_design_setpoint',
                                        'default': 7.22,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'chilled water pump configuration',
                                       {'name': u'Chilled Water Pump Configuration',
                                        'pyname': u'chilled_water_pump_configuration',
                                        'default': u'ConstantPrimaryNoSecondary',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ConstantPrimaryNoSecondary',
                                                            u'VariablePrimaryNoSecondary',
                                                            u'ConstantPrimaryVariableSecondary'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'primary chilled water pump rated head',
                                       {'name': u'Primary Chilled Water Pump Rated Head',
                                        'pyname': u'primary_chilled_water_pump_rated_head',
                                        'default': 179352.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'secondary chilled water pump rated head',
                                       {'name': u'Secondary Chilled Water Pump Rated Head',
                                        'pyname': u'secondary_chilled_water_pump_rated_head',
                                        'default': 179352.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'condenser plant operation scheme type',
                                       {'name': u'Condenser Plant Operation Scheme Type',
                                        'pyname': u'condenser_plant_operation_scheme_type',
                                        'default': u'Default',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Default',
                                                            u'UserDefined'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'condenser equipment operation schemes name',
                                       {'name': u'Condenser Equipment Operation Schemes Name',
                                        'pyname': u'condenser_equipment_operation_schemes_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'condenser water temperature control type',
                                       {'name': u'Condenser Water Temperature Control Type',
                                        'pyname': u'condenser_water_temperature_control_type',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'OutdoorWetBulbTemperature',
                                                            u'SpecifiedSetpoint'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'condenser water setpoint schedule name',
                                       {'name': u'Condenser Water Setpoint Schedule Name',
                                        'pyname': u'condenser_water_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'condenser water design setpoint',
                                       {'name': u'Condenser Water Design Setpoint',
                                        'pyname': u'condenser_water_design_setpoint',
                                        'default': 29.4,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'condenser water pump rated head',
                                       {'name': u'Condenser Water Pump Rated Head',
                                        'pyname': u'condenser_water_pump_rated_head',
                                        'default': 179352.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'chilled water setpoint reset type',
                                       {'name': u'Chilled Water Setpoint Reset Type',
                                        'pyname': u'chilled_water_setpoint_reset_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'OutdoorAirTemperatureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chilled water setpoint at outdoor dry-bulb low',
                                       {'name': u'Chilled Water Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'chilled_water_setpoint_at_outdoor_drybulb_low',
                                        'default': 12.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'chilled water reset outdoor dry-bulb low',
                                       {'name': u'Chilled Water Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'chilled_water_reset_outdoor_drybulb_low',
                                        'default': 15.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'chilled water setpoint at outdoor dry-bulb high',
                                       {'name': u'Chilled Water Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'chilled_water_setpoint_at_outdoor_drybulb_high',
                                        'default': 6.7,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'chilled water reset outdoor dry-bulb high',
                                       {'name': u'Chilled Water Reset Outdoor Dry-Bulb High',
                                        'pyname': u'chilled_water_reset_outdoor_drybulb_high',
                                        'default': 26.7,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'chilled water primary pump type',
                                       {'name': u'Chilled Water Primary Pump Type',
                                        'pyname': u'chilled_water_primary_pump_type',
                                        'default': u'SinglePump',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SinglePump',
                                                            u'PumpPerChiller',
                                                            u'TwoHeaderedPumps',
                                                            u'ThreeHeaderedPumps',
                                                            u'FourHeaderedPumps',
                                                            u'FiveHeaderedPumps'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chilled water secondary pump type',
                                       {'name': u'Chilled Water Secondary Pump Type',
                                        'pyname': u'chilled_water_secondary_pump_type',
                                        'default': u'SinglePump',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SinglePump',
                                                            u'TwoHeaderedPumps',
                                                            u'ThreeHeaderedPumps',
                                                            u'FourHeaderedPumps',
                                                            u'FiveHeaderedPumps'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'condenser water pump type',
                                       {'name': u'Condenser Water Pump Type',
                                        'pyname': u'condenser_water_pump_type',
                                        'default': u'SinglePump',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SinglePump',
                                                            u'PumpPerTower',
                                                            u'TwoHeaderedPumps',
                                                            u'ThreeHeaderedPumps',
                                                            u'FourHeaderedPumps',
                                                            u'FiveHeaderedPumps'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chilled water supply side bypass pipe',
                                       {'name': u'Chilled Water Supply Side Bypass Pipe',
                                        'pyname': u'chilled_water_supply_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chilled water demand side bypass pipe',
                                       {'name': u'Chilled Water Demand Side Bypass Pipe',
                                        'pyname': u'chilled_water_demand_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'condenser water supply side bypass pipe',
                                       {'name': u'Condenser Water Supply Side Bypass Pipe',
                                        'pyname': u'condenser_water_supply_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'condenser water demand side bypass pipe',
                                       {'name': u'Condenser Water Demand Side Bypass Pipe',
                                        'pyname': u'condenser_water_demand_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'fluid type',
                                       {'name': u'Fluid Type',
                                        'pyname': u'fluid_type',
                                        'default': u'Water',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Water',
                                                            u'EthyleneGlycol30',
                                                            u'EthyleneGlycol40',
                                                            u'EthyleneGlycol50',
                                                            u'EthyleneGlycol60',
                                                            u'PropyleneGlycol30',
                                                            u'PropyleneGlycol40',
                                                            u'PropyleneGlycol50',
                                                            u'PropyleneGlycol60'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'loop design delta temperature',
                                       {'name': u'Loop Design Delta Temperature',
                                        'pyname': u'loop_design_delta_temperature',
                                        'default': 6.67,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'deltaC'}),
                                      (u'minimum outdoor dry bulb temperature',
                                       {'name': u'Minimum Outdoor Dry Bulb Temperature',
                                        'pyname': u'minimum_outdoor_dry_bulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'chilled water load distribution scheme',
                                       {'name': u'Chilled Water Load Distribution Scheme',
                                        'pyname': u'chilled_water_load_distribution_scheme',
                                        'default': u'SequentialLoad',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Optimal',
                                                            u'SequentialLoad',
                                                            u'UniformLoad',
                                                            u'UniformPLR',
                                                            u'SequentialUniformPLR',
                                                            u'Sequential',
                                                            u'Uniform'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'condenser water load distribution scheme',
                                       {'name': u'Condenser Water Load Distribution Scheme',
                                        'pyname': u'condenser_water_load_distribution_scheme',
                                        'default': u'SequentialLoad',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Optimal',
                                                            u'SequentialLoad',
                                                            u'UniformLoad',
                                                            u'UniformPLR',
                                                            u'SequentialUniformPLR',
                                                            u'Sequential',
                                                            u'Uniform'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 21,
               'name': u'HVACTemplate:Plant:ChilledWaterLoop',
               'pyname': u'HvactemplatePlantChilledWaterLoop',
               'required-object': False,
               'unique-object': True}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def pump_schedule_name(self):
        """field `Pump Schedule Name` If blank, always available Applies to
        both chilled water and condenser loop pumps.

        Args:
            value (str): value for IDD Field `Pump Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `pump_schedule_name` or None if not set

        """
        return self["Pump Schedule Name"]

    @pump_schedule_name.setter
    def pump_schedule_name(self, value=None):
        """Corresponds to IDD field `Pump Schedule Name`"""
        self["Pump Schedule Name"] = value

    @property
    def pump_control_type(self):
        """field `Pump Control Type` Applies to both chilled water and
        condenser loop pumps.

        Args:
            value (str): value for IDD Field `Pump Control Type`
                Default value: Intermittent

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `pump_control_type` or None if not set

        """
        return self["Pump Control Type"]

    @pump_control_type.setter
    def pump_control_type(self, value="Intermittent"):
        """Corresponds to IDD field `Pump Control Type`"""
        self["Pump Control Type"] = value

    @property
    def chiller_plant_operation_scheme_type(self):
        """field `Chiller Plant Operation Scheme Type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Chiller objects.

        Args:
            value (str): value for IDD Field `Chiller Plant Operation Scheme Type`
                Default value: Default

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chiller_plant_operation_scheme_type` or None if not set
        """
        return self["Chiller Plant Operation Scheme Type"]

    @chiller_plant_operation_scheme_type.setter
    def chiller_plant_operation_scheme_type(self, value="Default"):
        """Corresponds to IDD field `Chiller Plant Operation Scheme Type`"""
        self["Chiller Plant Operation Scheme Type"] = value

    @property
    def chiller_plant_equipment_operation_schemes_name(self):
        """field `Chiller Plant Equipment Operation Schemes Name`
        Name of a PlantEquipmentOperationSchemes object
        Ignored if Chiller Plant Operation Scheme Type = Default

        Args:
            value (str): value for IDD Field `Chiller Plant Equipment Operation Schemes Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chiller_plant_equipment_operation_schemes_name` or None if not set
        """
        return self["Chiller Plant Equipment Operation Schemes Name"]

    @chiller_plant_equipment_operation_schemes_name.setter
    def chiller_plant_equipment_operation_schemes_name(self, value=None):
        """Corresponds to IDD field `Chiller Plant Equipment Operation Schemes
        Name`"""
        self["Chiller Plant Equipment Operation Schemes Name"] = value

    @property
    def chilled_water_setpoint_schedule_name(self):
        """field `Chilled Water Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Chilled Water Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_setpoint_schedule_name` or None if not set

        """
        return self["Chilled Water Setpoint Schedule Name"]

    @chilled_water_setpoint_schedule_name.setter
    def chilled_water_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Chilled Water Setpoint Schedule Name`"""
        self["Chilled Water Setpoint Schedule Name"] = value

    @property
    def chilled_water_design_setpoint(self):
        """field `Chilled Water Design Setpoint` Used for sizing and as
        constant setpoint if no Chilled Water Setpoint Schedule Name is
        specified.

        Args:
            value (float): value for IDD Field `Chilled Water Design Setpoint`
                Units: C
                Default value: 7.22

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `chilled_water_design_setpoint` or None if not set

        """
        return self["Chilled Water Design Setpoint"]

    @chilled_water_design_setpoint.setter
    def chilled_water_design_setpoint(self, value=7.22):
        """Corresponds to IDD field `Chilled Water Design Setpoint`"""
        self["Chilled Water Design Setpoint"] = value

    @property
    def chilled_water_pump_configuration(self):
        """field `Chilled Water Pump Configuration`

        VariablePrimaryNoSecondary - variable flow to chillers and coils
        ConstantPrimaryNoSecondary - constant flow to chillers and coils, excess bypassed
        ConstantPrimaryVariableSecondary - constant flow to chillers, variable flow to coils
        VariablePrimaryConstantSecondary - currently unsupported - variable flow to chillers, constant flow to coils

        Args:
            value (str): value for IDD Field `Chilled Water Pump Configuration`
                Default value: ConstantPrimaryNoSecondary

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_pump_configuration` or None if not set

        """
        return self["Chilled Water Pump Configuration"]

    @chilled_water_pump_configuration.setter
    def chilled_water_pump_configuration(
            self,
            value="ConstantPrimaryNoSecondary"):
        """Corresponds to IDD field `Chilled Water Pump Configuration`"""
        self["Chilled Water Pump Configuration"] = value

    @property
    def primary_chilled_water_pump_rated_head(self):
        """field `Primary Chilled Water Pump Rated Head` default head is 60
        feet H2O.

        Args:
            value (float): value for IDD Field `Primary Chilled Water Pump Rated Head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `primary_chilled_water_pump_rated_head` or None if not set

        """
        return self["Primary Chilled Water Pump Rated Head"]

    @primary_chilled_water_pump_rated_head.setter
    def primary_chilled_water_pump_rated_head(self, value=179352.0):
        """Corresponds to IDD field `Primary Chilled Water Pump Rated Head`"""
        self["Primary Chilled Water Pump Rated Head"] = value

    @property
    def secondary_chilled_water_pump_rated_head(self):
        """field `Secondary Chilled Water Pump Rated Head` default head is 60
        feet H2O.

        Args:
            value (float): value for IDD Field `Secondary Chilled Water Pump Rated Head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `secondary_chilled_water_pump_rated_head` or None if not set

        """
        return self["Secondary Chilled Water Pump Rated Head"]

    @secondary_chilled_water_pump_rated_head.setter
    def secondary_chilled_water_pump_rated_head(self, value=179352.0):
        """Corresponds to IDD field `Secondary Chilled Water Pump Rated
        Head`"""
        self["Secondary Chilled Water Pump Rated Head"] = value

    @property
    def condenser_plant_operation_scheme_type(self):
        """field `Condenser Plant Operation Scheme Type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Tower objects.
        May be left blank if not serving any water cooled chillers

        Args:
            value (str): value for IDD Field `Condenser Plant Operation Scheme Type`
                Default value: Default

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_plant_operation_scheme_type` or None if not set
        """
        return self["Condenser Plant Operation Scheme Type"]

    @condenser_plant_operation_scheme_type.setter
    def condenser_plant_operation_scheme_type(self, value="Default"):
        """Corresponds to IDD field `Condenser Plant Operation Scheme Type`"""
        self["Condenser Plant Operation Scheme Type"] = value

    @property
    def condenser_equipment_operation_schemes_name(self):
        """field `Condenser Equipment Operation Schemes Name`
        Name of a CondenserEquipmentOperationSchemes object
        Ignored if Condenser Plant Operation Scheme Type = Default
        May be left blank if not serving any water cooled chillers

        Args:
            value (str): value for IDD Field `Condenser Equipment Operation Schemes Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_equipment_operation_schemes_name` or None if not set
        """
        return self["Condenser Equipment Operation Schemes Name"]

    @condenser_equipment_operation_schemes_name.setter
    def condenser_equipment_operation_schemes_name(self, value=None):
        """Corresponds to IDD field `Condenser Equipment Operation Schemes
        Name`"""
        self["Condenser Equipment Operation Schemes Name"] = value

    @property
    def condenser_water_temperature_control_type(self):
        """field `Condenser Water Temperature Control Type` May be left blank
        if not serving any water cooled chillers.

        Args:
            value (str): value for IDD Field `Condenser Water Temperature Control Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_water_temperature_control_type` or None if not set

        """
        return self["Condenser Water Temperature Control Type"]

    @condenser_water_temperature_control_type.setter
    def condenser_water_temperature_control_type(self, value=None):
        """Corresponds to IDD field `Condenser Water Temperature Control
        Type`"""
        self["Condenser Water Temperature Control Type"] = value

    @property
    def condenser_water_setpoint_schedule_name(self):
        """field `Condenser Water Setpoint Schedule Name` Leave blank if
        constant setpoint May be left blank if not serving any water cooled
        chillers.

        Args:
            value (str): value for IDD Field `Condenser Water Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_water_setpoint_schedule_name` or None if not set

        """
        return self["Condenser Water Setpoint Schedule Name"]

    @condenser_water_setpoint_schedule_name.setter
    def condenser_water_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Condenser Water Setpoint Schedule Name`"""
        self["Condenser Water Setpoint Schedule Name"] = value

    @property
    def condenser_water_design_setpoint(self):
        """field `Condenser Water Design Setpoint` Used for sizing and as
        constant setpoint if no Condenser Water Setpoint Schedule Name is
        specified. May be left blank if not serving any water cooled chillers.

        Args:
            value (float): value for IDD Field `Condenser Water Design Setpoint`
                Units: C
                Default value: 29.4

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `condenser_water_design_setpoint` or None if not set

        """
        return self["Condenser Water Design Setpoint"]

    @condenser_water_design_setpoint.setter
    def condenser_water_design_setpoint(self, value=29.4):
        """Corresponds to IDD field `Condenser Water Design Setpoint`"""
        self["Condenser Water Design Setpoint"] = value

    @property
    def condenser_water_pump_rated_head(self):
        """field `Condenser Water Pump Rated Head` May be left blank if not
        serving any water cooled chillers default head is 60 feet H2O.

        Args:
            value (float): value for IDD Field `Condenser Water Pump Rated Head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `condenser_water_pump_rated_head` or None if not set

        """
        return self["Condenser Water Pump Rated Head"]

    @condenser_water_pump_rated_head.setter
    def condenser_water_pump_rated_head(self, value=179352.0):
        """Corresponds to IDD field `Condenser Water Pump Rated Head`"""
        self["Condenser Water Pump Rated Head"] = value

    @property
    def chilled_water_setpoint_reset_type(self):
        """field `Chilled Water Setpoint Reset Type` Overrides Chilled Water
        Setpoint Schedule Name.

        Args:
            value (str): value for IDD Field `Chilled Water Setpoint Reset Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_setpoint_reset_type` or None if not set

        """
        return self["Chilled Water Setpoint Reset Type"]

    @chilled_water_setpoint_reset_type.setter
    def chilled_water_setpoint_reset_type(self, value="None"):
        """Corresponds to IDD field `Chilled Water Setpoint Reset Type`"""
        self["Chilled Water Setpoint Reset Type"] = value

    @property
    def chilled_water_setpoint_at_outdoor_drybulb_low(self):
        """field `Chilled Water Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Chilled Water Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 12.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `chilled_water_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Chilled Water Setpoint at Outdoor Dry-Bulb Low"]

    @chilled_water_setpoint_at_outdoor_drybulb_low.setter
    def chilled_water_setpoint_at_outdoor_drybulb_low(self, value=12.2):
        """  Corresponds to IDD field `Chilled Water Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Chilled Water Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def chilled_water_reset_outdoor_drybulb_low(self):
        """field `Chilled Water Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Chilled Water Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: 15.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `chilled_water_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Chilled Water Reset Outdoor Dry-Bulb Low"]

    @chilled_water_reset_outdoor_drybulb_low.setter
    def chilled_water_reset_outdoor_drybulb_low(self, value=15.6):
        """  Corresponds to IDD field `Chilled Water Reset Outdoor Dry-Bulb Low`

        """
        self["Chilled Water Reset Outdoor Dry-Bulb Low"] = value

    @property
    def chilled_water_setpoint_at_outdoor_drybulb_high(self):
        """field `Chilled Water Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Chilled Water Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 6.7

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `chilled_water_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Chilled Water Setpoint at Outdoor Dry-Bulb High"]

    @chilled_water_setpoint_at_outdoor_drybulb_high.setter
    def chilled_water_setpoint_at_outdoor_drybulb_high(self, value=6.7):
        """  Corresponds to IDD field `Chilled Water Setpoint at Outdoor Dry-Bulb High`

        """
        self["Chilled Water Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def chilled_water_reset_outdoor_drybulb_high(self):
        """field `Chilled Water Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Chilled Water Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 26.7

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `chilled_water_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Chilled Water Reset Outdoor Dry-Bulb High"]

    @chilled_water_reset_outdoor_drybulb_high.setter
    def chilled_water_reset_outdoor_drybulb_high(self, value=26.7):
        """  Corresponds to IDD field `Chilled Water Reset Outdoor Dry-Bulb High`

        """
        self["Chilled Water Reset Outdoor Dry-Bulb High"] = value

    @property
    def chilled_water_primary_pump_type(self):
        """field `Chilled Water Primary Pump Type` Describes the type of pump
        configuration used for the primary portion of the chilled water loop.

        Args:
            value (str): value for IDD Field `Chilled Water Primary Pump Type`
                Default value: SinglePump

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_primary_pump_type` or None if not set

        """
        return self["Chilled Water Primary Pump Type"]

    @chilled_water_primary_pump_type.setter
    def chilled_water_primary_pump_type(self, value="SinglePump"):
        """Corresponds to IDD field `Chilled Water Primary Pump Type`"""
        self["Chilled Water Primary Pump Type"] = value

    @property
    def chilled_water_secondary_pump_type(self):
        """field `Chilled Water Secondary Pump Type` Describes the type of pump
        configuration used for the secondary portion of the chilled water loop.

        Args:
            value (str): value for IDD Field `Chilled Water Secondary Pump Type`
                Default value: SinglePump

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_secondary_pump_type` or None if not set

        """
        return self["Chilled Water Secondary Pump Type"]

    @chilled_water_secondary_pump_type.setter
    def chilled_water_secondary_pump_type(self, value="SinglePump"):
        """Corresponds to IDD field `Chilled Water Secondary Pump Type`"""
        self["Chilled Water Secondary Pump Type"] = value

    @property
    def condenser_water_pump_type(self):
        """field `Condenser Water Pump Type` Describes the type of pump
        configuration used for the condenser water loop.

        Args:
            value (str): value for IDD Field `Condenser Water Pump Type`
                Default value: SinglePump

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_water_pump_type` or None if not set

        """
        return self["Condenser Water Pump Type"]

    @condenser_water_pump_type.setter
    def condenser_water_pump_type(self, value="SinglePump"):
        """Corresponds to IDD field `Condenser Water Pump Type`"""
        self["Condenser Water Pump Type"] = value

    @property
    def chilled_water_supply_side_bypass_pipe(self):
        """field `Chilled Water Supply Side Bypass Pipe` Determines if a supply
        side bypass pipe is present in the chilled water loop.

        Args:
            value (str): value for IDD Field `Chilled Water Supply Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_supply_side_bypass_pipe` or None if not set

        """
        return self["Chilled Water Supply Side Bypass Pipe"]

    @chilled_water_supply_side_bypass_pipe.setter
    def chilled_water_supply_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Chilled Water Supply Side Bypass Pipe`"""
        self["Chilled Water Supply Side Bypass Pipe"] = value

    @property
    def chilled_water_demand_side_bypass_pipe(self):
        """field `Chilled Water Demand Side Bypass Pipe` Determines if a demand
        side bypass pipe is present in the chilled water loop.

        Args:
            value (str): value for IDD Field `Chilled Water Demand Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_demand_side_bypass_pipe` or None if not set

        """
        return self["Chilled Water Demand Side Bypass Pipe"]

    @chilled_water_demand_side_bypass_pipe.setter
    def chilled_water_demand_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Chilled Water Demand Side Bypass Pipe`"""
        self["Chilled Water Demand Side Bypass Pipe"] = value

    @property
    def condenser_water_supply_side_bypass_pipe(self):
        """field `Condenser Water Supply Side Bypass Pipe` Determines if a
        supply side bypass pipe is present in the condenser water loop.

        Args:
            value (str): value for IDD Field `Condenser Water Supply Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_water_supply_side_bypass_pipe` or None if not set

        """
        return self["Condenser Water Supply Side Bypass Pipe"]

    @condenser_water_supply_side_bypass_pipe.setter
    def condenser_water_supply_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Condenser Water Supply Side Bypass
        Pipe`"""
        self["Condenser Water Supply Side Bypass Pipe"] = value

    @property
    def condenser_water_demand_side_bypass_pipe(self):
        """field `Condenser Water Demand Side Bypass Pipe` Determines if a
        demand side bypass pipe is present in the condenser water loop.

        Args:
            value (str): value for IDD Field `Condenser Water Demand Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_water_demand_side_bypass_pipe` or None if not set

        """
        return self["Condenser Water Demand Side Bypass Pipe"]

    @condenser_water_demand_side_bypass_pipe.setter
    def condenser_water_demand_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Condenser Water Demand Side Bypass
        Pipe`"""
        self["Condenser Water Demand Side Bypass Pipe"] = value

    @property
    def fluid_type(self):
        """field `Fluid Type`

        Args:
            value (str): value for IDD Field `Fluid Type`
                Default value: Water

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `fluid_type` or None if not set

        """
        return self["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """Corresponds to IDD field `Fluid Type`"""
        self["Fluid Type"] = value

    @property
    def loop_design_delta_temperature(self):
        """field `Loop Design Delta Temperature` The temperature difference
        used in sizing the loop flow rate.

        Args:
            value (float): value for IDD Field `Loop Design Delta Temperature`
                Units: deltaC
                Default value: 6.67

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `loop_design_delta_temperature` or None if not set

        """
        return self["Loop Design Delta Temperature"]

    @loop_design_delta_temperature.setter
    def loop_design_delta_temperature(self, value=6.67):
        """Corresponds to IDD field `Loop Design Delta Temperature`"""
        self["Loop Design Delta Temperature"] = value

    @property
    def minimum_outdoor_dry_bulb_temperature(self):
        """field `Minimum Outdoor Dry Bulb Temperature` The minimum outdoor dry
        bulb temperature that the chilled water loops operate. Leave blank for
        no limit.

        Args:
            value (float): value for IDD Field `Minimum Outdoor Dry Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_outdoor_dry_bulb_temperature` or None if not set

        """
        return self["Minimum Outdoor Dry Bulb Temperature"]

    @minimum_outdoor_dry_bulb_temperature.setter
    def minimum_outdoor_dry_bulb_temperature(self, value=None):
        """Corresponds to IDD field `Minimum Outdoor Dry Bulb Temperature`"""
        self["Minimum Outdoor Dry Bulb Temperature"] = value

    @property
    def chilled_water_load_distribution_scheme(self):
        """field `Chilled Water Load Distribution Scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `Chilled Water Load Distribution Scheme`
                Default value: SequentialLoad

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chilled_water_load_distribution_scheme` or None if not set
        """
        return self["Chilled Water Load Distribution Scheme"]

    @chilled_water_load_distribution_scheme.setter
    def chilled_water_load_distribution_scheme(self, value="SequentialLoad"):
        """Corresponds to IDD field `Chilled Water Load Distribution Scheme`"""
        self["Chilled Water Load Distribution Scheme"] = value

    @property
    def condenser_water_load_distribution_scheme(self):
        """field `Condenser Water Load Distribution Scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `Condenser Water Load Distribution Scheme`
                Default value: SequentialLoad

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_water_load_distribution_scheme` or None if not set
        """
        return self["Condenser Water Load Distribution Scheme"]

    @condenser_water_load_distribution_scheme.setter
    def condenser_water_load_distribution_scheme(self, value="SequentialLoad"):
        """Corresponds to IDD field `Condenser Water Load Distribution
        Scheme`"""
        self["Condenser Water Load Distribution Scheme"] = value




class HvactemplatePlantChiller(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:Chiller`
        This object adds a chiller to an HVACTemplate:Plant:ChilledWaterLoop.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chiller type',
                                       {'name': u'Chiller Type',
                                        'pyname': u'chiller_type',
                                        'required-field': True,
                                        'autosizable': False,
                                        'accepted-values': [u'DistrictChilledWater',
                                                            u'ElectricCentrifugalChiller',
                                                            u'ElectricScrewChiller',
                                                            u'ElectricReciprocatingChiller'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'capacity',
                                       {'name': u'Capacity',
                                        'pyname': u'capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'nominal cop',
                                       {'name': u'Nominal COP',
                                        'pyname': u'nominal_cop',
                                        'minimum>': 0.0,
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W/W'}),
                                      (u'condenser type',
                                       {'name': u'Condenser Type',
                                        'pyname': u'condenser_type',
                                        'default': u'WaterCooled',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'AirCooled',
                                                            u'WaterCooled',
                                                            u'EvaporativelyCooled'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'priority',
                                       {'name': u'Priority',
                                        'pyname': u'priority',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sizing factor',
                                       {'name': u'Sizing Factor',
                                        'pyname': u'sizing_factor',
                                        'default': 1.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'minimum part load ratio',
                                       {'name': u'Minimum Part Load Ratio',
                                        'pyname': u'minimum_part_load_ratio',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'maximum part load ratio',
                                       {'name': u'Maximum Part Load Ratio',
                                        'pyname': u'maximum_part_load_ratio',
                                        'default': 1.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'optimum part load ratio',
                                       {'name': u'Optimum Part Load Ratio',
                                        'pyname': u'optimum_part_load_ratio',
                                        'default': 1.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'minimum unloading ratio',
                                       {'name': u'Minimum Unloading Ratio',
                                        'pyname': u'minimum_unloading_ratio',
                                        'default': 0.25,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'leaving chilled water lower temperature limit',
                                       {'name': u'Leaving Chilled Water Lower Temperature Limit',
                                        'pyname': u'leaving_chilled_water_lower_temperature_limit',
                                        'default': 5.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 7,
               'name': u'HVACTemplate:Plant:Chiller',
               'pyname': u'HvactemplatePlantChiller',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def chiller_type(self):
        """field `Chiller Type`

        Args:
            value (str): value for IDD Field `Chiller Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chiller_type` or None if not set

        """
        return self["Chiller Type"]

    @chiller_type.setter
    def chiller_type(self, value=None):
        """Corresponds to IDD field `Chiller Type`"""
        self["Chiller Type"] = value

    @property
    def capacity(self):
        """field `Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `capacity` or None if not set

        """
        return self["Capacity"]

    @capacity.setter
    def capacity(self, value="autosize"):
        """Corresponds to IDD field `Capacity`"""
        self["Capacity"] = value

    @property
    def nominal_cop(self):
        """field `Nominal COP` Not applicable if Chiller Type is
        DistrictChilledWater Electric Reciprocating Chiller.

        Args:
            value (float): value for IDD Field `Nominal COP`
                Units: W/W

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `nominal_cop` or None if not set

        """
        return self["Nominal COP"]

    @nominal_cop.setter
    def nominal_cop(self, value=None):
        """Corresponds to IDD field `Nominal COP`"""
        self["Nominal COP"] = value

    @property
    def condenser_type(self):
        """field `Condenser Type` Not applicable if Chiller Type is
        DistrictChilledWater.

        Args:
            value (str): value for IDD Field `Condenser Type`
                Default value: WaterCooled

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `condenser_type` or None if not set

        """
        return self["Condenser Type"]

    @condenser_type.setter
    def condenser_type(self, value="WaterCooled"):
        """Corresponds to IDD field `Condenser Type`"""
        self["Condenser Type"] = value

    @property
    def priority(self):
        """field `Priority`
        If Chiller Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (str): value for IDD Field `Priority`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `priority` or None if not set
        """
        return self["Priority"]

    @priority.setter
    def priority(self, value=None):
        """Corresponds to IDD field `Priority`"""
        self["Priority"] = value

    @property
    def sizing_factor(self):
        """field `Sizing Factor` Multiplies the autosized capacity and flow
        rates.

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sizing_factor` or None if not set

        """
        return self["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """Corresponds to IDD field `Sizing Factor`"""
        self["Sizing Factor"] = value

    @property
    def minimum_part_load_ratio(self):
        """field `Minimum Part Load Ratio` Part load ratio below which the
        chiller starts cycling on/off to meet the load. Must be less than or
        equal to Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set

        """
        return self["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """Corresponds to IDD field `Minimum Part Load Ratio`"""
        self["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """field `Maximum Part Load Ratio` Maximum allowable part load ratio.
        Must be greater than or equal to Minimum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                Default value: 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set

        """
        return self["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.0):
        """Corresponds to IDD field `Maximum Part Load Ratio`"""
        self["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """field `Optimum Part Load Ratio` Optimum part load ratio where the
        chiller is most efficient. Must be greater than or equal to the Minimum
        Part Load Ratio and less than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                Default value: 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set

        """
        return self["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0):
        """Corresponds to IDD field `Optimum Part Load Ratio`"""
        self["Optimum Part Load Ratio"] = value

    @property
    def minimum_unloading_ratio(self):
        """field `Minimum Unloading Ratio` Part load ratio where the chiller
        can no longer unload and false loading begins. Minimum unloading ratio
        must be greater than or equal to the Minimum Part Load Ratio and less
        than or equal to the Maximum Part Load Ratio.

        Args:
            value (float): value for IDD Field `Minimum Unloading Ratio`
                Default value: 0.25

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_unloading_ratio` or None if not set

        """
        return self["Minimum Unloading Ratio"]

    @minimum_unloading_ratio.setter
    def minimum_unloading_ratio(self, value=0.25):
        """Corresponds to IDD field `Minimum Unloading Ratio`"""
        self["Minimum Unloading Ratio"] = value

    @property
    def leaving_chilled_water_lower_temperature_limit(self):
        """field `Leaving Chilled Water Lower Temperature Limit`

        Args:
            value (float): value for IDD Field `Leaving Chilled Water Lower Temperature Limit`
                Units: C
                Default value: 5.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `leaving_chilled_water_lower_temperature_limit` or None if not set

        """
        return self["Leaving Chilled Water Lower Temperature Limit"]

    @leaving_chilled_water_lower_temperature_limit.setter
    def leaving_chilled_water_lower_temperature_limit(self, value=5.0):
        """Corresponds to IDD field `Leaving Chilled Water Lower Temperature
        Limit`"""
        self["Leaving Chilled Water Lower Temperature Limit"] = value




class HvactemplatePlantChillerObjectReference(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:Chiller:ObjectReference`
        This object references a detailed chiller object and adds it to
        an HVACTemplate:Plant:ChilledWaterLoop. The user must create a complete
        detailed chiller object with all required curve or performance objects.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chiller object type',
                                       {'name': u'Chiller Object Type',
                                        'pyname': u'chiller_object_type',
                                        'default': u'Chiller:Electric:EIR',
                                        'required-field': True,
                                        'autosizable': False,
                                        'accepted-values': [u'Chiller:Electric:EIR',
                                                            u'Chiller:Electric:ReformulatedEIR'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'chiller name',
                                       {'name': u'Chiller Name',
                                        'pyname': u'chiller_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'priority',
                                       {'name': u'Priority',
                                        'pyname': u'priority',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 4,
               'name': u'HVACTemplate:Plant:Chiller:ObjectReference',
               'pyname': u'HvactemplatePlantChillerObjectReference',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name` The name of this object.

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def chiller_object_type(self):
        """field `Chiller Object Type`

        Args:
            value (str): value for IDD Field `Chiller Object Type`
                Default value: Chiller:Electric:EIR

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chiller_object_type` or None if not set

        """
        return self["Chiller Object Type"]

    @chiller_object_type.setter
    def chiller_object_type(self, value="Chiller:Electric:EIR"):
        """Corresponds to IDD field `Chiller Object Type`"""
        self["Chiller Object Type"] = value

    @property
    def chiller_name(self):
        """field `Chiller Name` The name of the detailed chiller object.

        Args:
            value (str): value for IDD Field `Chiller Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `chiller_name` or None if not set

        """
        return self["Chiller Name"]

    @chiller_name.setter
    def chiller_name(self, value=None):
        """Corresponds to IDD field `Chiller Name`"""
        self["Chiller Name"] = value

    @property
    def priority(self):
        """field `Priority`
        If Chiller Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (float): value for IDD Field `Priority`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `priority` or None if not set
        """
        return self["Priority"]

    @priority.setter
    def priority(self, value=None):
        """Corresponds to IDD field `Priority`"""
        self["Priority"] = value




class HvactemplatePlantTower(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:Tower`
        This object adds a cooling tower to an HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'tower type',
                                       {'name': u'Tower Type',
                                        'pyname': u'tower_type',
                                        'required-field': True,
                                        'autosizable': False,
                                        'accepted-values': [u'SingleSpeed',
                                                            u'TwoSpeed'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'high speed nominal capacity',
                                       {'name': u'High Speed Nominal Capacity',
                                        'pyname': u'high_speed_nominal_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'high speed fan power',
                                       {'name': u'High Speed Fan Power',
                                        'pyname': u'high_speed_fan_power',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'low speed nominal capacity',
                                       {'name': u'Low Speed Nominal Capacity',
                                        'pyname': u'low_speed_nominal_capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'low speed fan power',
                                       {'name': u'Low Speed Fan Power',
                                        'pyname': u'low_speed_fan_power',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'free convection capacity',
                                       {'name': u'Free Convection Capacity',
                                        'pyname': u'free_convection_capacity',
                                        'default': 'autosize',
                                        'required-field': False,
                                        'autosizable': True,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'priority',
                                       {'name': u'Priority',
                                        'pyname': u'priority',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sizing factor',
                                       {'name': u'Sizing Factor',
                                        'pyname': u'sizing_factor',
                                        'default': 1.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'template plant loop type',
                                       {'name': u'Template Plant Loop Type',
                                        'pyname': u'template_plant_loop_type',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ChilledWater',
                                                            u'MixedWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 9,
               'name': u'HVACTemplate:Plant:Tower',
               'pyname': u'HvactemplatePlantTower',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def tower_type(self):
        """field `Tower Type`

        Args:
            value (str): value for IDD Field `Tower Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `tower_type` or None if not set

        """
        return self["Tower Type"]

    @tower_type.setter
    def tower_type(self, value=None):
        """Corresponds to IDD field `Tower Type`"""
        self["Tower Type"] = value

    @property
    def high_speed_nominal_capacity(self):
        """field `High Speed Nominal Capacity`
        Applicable for tower type SingleSpeed and TwoSpeed
        Nominal tower capacity with entering water at 35C (95F), leaving water at
        29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F)
        dry-bulb temperature, with the tower fan operating at high speed. Design water
        flow rate assumed to be 5.382E-8 m3/s per watt(3 gpm/ton). Nominal tower capacity
        times (1.25) gives the actual tower heat rejection at these operating conditions.

        Args:
            value (float or "Autosize"): value for IDD Field `High Speed Nominal Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `high_speed_nominal_capacity` or None if not set
        """
        return self["High Speed Nominal Capacity"]

    @high_speed_nominal_capacity.setter
    def high_speed_nominal_capacity(self, value="autosize"):
        """Corresponds to IDD field `High Speed Nominal Capacity`"""
        self["High Speed Nominal Capacity"] = value

    @property
    def high_speed_fan_power(self):
        """field `High Speed Fan Power` Applicable for tower type SingleSpeed
        and TwoSpeed.

        Args:
            value (float or "Autosize"): value for IDD Field `High Speed Fan Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `high_speed_fan_power` or None if not set

        """
        return self["High Speed Fan Power"]

    @high_speed_fan_power.setter
    def high_speed_fan_power(self, value="autosize"):
        """Corresponds to IDD field `High Speed Fan Power`"""
        self["High Speed Fan Power"] = value

    @property
    def low_speed_nominal_capacity(self):
        """field `Low Speed Nominal Capacity`
        Applicable only for Tower Type TwoSpeed
        Nominal tower capacity with entering water at 35C (95F), leaving water at
        29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature and 35C (95F)
        dry-bulb temperature, with the tower fan operating at low speed. Design water flow
        rate assumed to be 5.382E-8 m3/s per watt of tower high-speed nominal capacity
        (3 gpm/ton). Nominal tower capacity times (1.25) gives the actual tower heat
        rejection at these operating conditions.

        Args:
            value (float or "Autosize"): value for IDD Field `Low Speed Nominal Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `low_speed_nominal_capacity` or None if not set
        """
        return self["Low Speed Nominal Capacity"]

    @low_speed_nominal_capacity.setter
    def low_speed_nominal_capacity(self, value="autosize"):
        """Corresponds to IDD field `Low Speed Nominal Capacity`"""
        self["Low Speed Nominal Capacity"] = value

    @property
    def low_speed_fan_power(self):
        """field `Low Speed Fan Power` Applicable only for Tower Type TwoSpeed.

        Args:
            value (float or "Autosize"): value for IDD Field `Low Speed Fan Power`
                Units: W
                IP-Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `low_speed_fan_power` or None if not set

        """
        return self["Low Speed Fan Power"]

    @low_speed_fan_power.setter
    def low_speed_fan_power(self, value="autosize"):
        """Corresponds to IDD field `Low Speed Fan Power`"""
        self["Low Speed Fan Power"] = value

    @property
    def free_convection_capacity(self):
        """field `Free Convection Capacity`
        Applicable for Tower Type SingleSpeed and TwoSpeed
        Tower capacity in free convection regime with entering water at 35C (95F),
        leaving water at 29.44C (85F), entering air at 25.56C (78F) wet-bulb temperature
        and 35C (95F) dry-bulb temperature. Design water flow rate assumed to be
        5.382E-8 m3/s per watt of tower high-speed nominal capacity (3 gpm/ton). Tower
        free convection capacity times (1.25) gives the actual tower heat rejection at
        these operating conditions.

        Args:
            value (float or "Autosize"): value for IDD Field `Free Convection Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `free_convection_capacity` or None if not set
        """
        return self["Free Convection Capacity"]

    @free_convection_capacity.setter
    def free_convection_capacity(self, value="autosize"):
        """Corresponds to IDD field `Free Convection Capacity`"""
        self["Free Convection Capacity"] = value

    @property
    def priority(self):
        """field `Priority`
        Applicable for all Tower Types
        If Condenser Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (str): value for IDD Field `Priority`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `priority` or None if not set
        """
        return self["Priority"]

    @priority.setter
    def priority(self, value=None):
        """Corresponds to IDD field `Priority`"""
        self["Priority"] = value

    @property
    def sizing_factor(self):
        """field `Sizing Factor` Multiplies the autosized capacity and flow
        rates.

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sizing_factor` or None if not set

        """
        return self["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """Corresponds to IDD field `Sizing Factor`"""
        self["Sizing Factor"] = value

    @property
    def template_plant_loop_type(self):
        """field `Template Plant Loop Type` Specifies if this tower serves a
        template chilled water loop or mixed water loop If left blank, will
        serve a chilled water loop if present, or a mixed water loop (if no
        chilled water loop is present).

        Args:
            value (str): value for IDD Field `Template Plant Loop Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_plant_loop_type` or None if not set

        """
        return self["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """Corresponds to IDD field `Template Plant Loop Type`"""
        self["Template Plant Loop Type"] = value




class HvactemplatePlantTowerObjectReference(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:Tower:ObjectReference`
        This object references a detailed cooling tower object and adds it to
        an HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop. The user must create a complete
        detailed cooling tower object with all required curve or performance objects.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling tower object type',
                                       {'name': u'Cooling Tower Object Type',
                                        'pyname': u'cooling_tower_object_type',
                                        'default': u'CoolingTower:SingleSpeed',
                                        'required-field': True,
                                        'autosizable': False,
                                        'accepted-values': [u'CoolingTower:SingleSpeed',
                                                            u'CoolingTower:TwoSpeed',
                                                            u'CoolingTower:VariableSpeed'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'cooling tower name',
                                       {'name': u'Cooling Tower Name',
                                        'pyname': u'cooling_tower_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'priority',
                                       {'name': u'Priority',
                                        'pyname': u'priority',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'template plant loop type',
                                       {'name': u'Template Plant Loop Type',
                                        'pyname': u'template_plant_loop_type',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'ChilledWater',
                                                            u'MixedWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 4,
               'name': u'HVACTemplate:Plant:Tower:ObjectReference',
               'pyname': u'HvactemplatePlantTowerObjectReference',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name` The name of this object.

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def cooling_tower_object_type(self):
        """field `Cooling Tower Object Type`

        Args:
            value (str): value for IDD Field `Cooling Tower Object Type`
                Default value: CoolingTower:SingleSpeed

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_tower_object_type` or None if not set

        """
        return self["Cooling Tower Object Type"]

    @cooling_tower_object_type.setter
    def cooling_tower_object_type(self, value="CoolingTower:SingleSpeed"):
        """Corresponds to IDD field `Cooling Tower Object Type`"""
        self["Cooling Tower Object Type"] = value

    @property
    def cooling_tower_name(self):
        """field `Cooling Tower Name` The name of the detailed cooling tower
        object.

        Args:
            value (str): value for IDD Field `Cooling Tower Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `cooling_tower_name` or None if not set

        """
        return self["Cooling Tower Name"]

    @cooling_tower_name.setter
    def cooling_tower_name(self, value=None):
        """Corresponds to IDD field `Cooling Tower Name`"""
        self["Cooling Tower Name"] = value

    @property
    def priority(self):
        """field `Priority`
        If Condenser Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:ChilledWaterLoop or MixedWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (float): value for IDD Field `Priority`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `priority` or None if not set
        """
        return self["Priority"]

    @priority.setter
    def priority(self, value=None):
        """Corresponds to IDD field `Priority`"""
        self["Priority"] = value

    @property
    def template_plant_loop_type(self):
        """field `Template Plant Loop Type` Specifies if this tower serves a
        template chilled water loop or mixed water loop If left blank, will
        serve a chilled water loop if present, or a mixed water loop (if no
        chilled water loop is present).

        Args:
            value (str): value for IDD Field `Template Plant Loop Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_plant_loop_type` or None if not set

        """
        return self["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """Corresponds to IDD field `Template Plant Loop Type`"""
        self["Template Plant Loop Type"] = value




class HvactemplatePlantHotWaterLoop(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:HotWaterLoop`
        Plant loop to serve all HVACTemplate
        hot water coils and boilers.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'pump schedule name',
                                       {'name': u'Pump Schedule Name',
                                        'pyname': u'pump_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'pump control type',
                                       {'name': u'Pump Control Type',
                                        'pyname': u'pump_control_type',
                                        'default': u'Intermittent',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Intermittent',
                                                            u'Continuous'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'hot water plant operation scheme type',
                                       {'name': u'Hot Water Plant Operation Scheme Type',
                                        'pyname': u'hot_water_plant_operation_scheme_type',
                                        'default': u'Default',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Default',
                                                            u'UserDefined'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'hot water plant equipment operation schemes name',
                                       {'name': u'Hot Water Plant Equipment Operation Schemes Name',
                                        'pyname': u'hot_water_plant_equipment_operation_schemes_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'hot water setpoint schedule name',
                                       {'name': u'Hot Water Setpoint Schedule Name',
                                        'pyname': u'hot_water_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'hot water design setpoint',
                                       {'name': u'Hot Water Design Setpoint',
                                        'pyname': u'hot_water_design_setpoint',
                                        'default': 82.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'hot water pump configuration',
                                       {'name': u'Hot Water Pump Configuration',
                                        'pyname': u'hot_water_pump_configuration',
                                        'default': u'ConstantFlow',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'VariableFlow',
                                                            u'ConstantFlow'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'hot water pump rated head',
                                       {'name': u'Hot Water Pump Rated Head',
                                        'pyname': u'hot_water_pump_rated_head',
                                        'default': 179352.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'hot water setpoint reset type',
                                       {'name': u'Hot Water Setpoint Reset Type',
                                        'pyname': u'hot_water_setpoint_reset_type',
                                        'default': u'None',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'None',
                                                            u'OutdoorAirTemperatureReset'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'hot water setpoint at outdoor dry-bulb low',
                                       {'name': u'Hot Water Setpoint at Outdoor Dry-Bulb Low',
                                        'pyname': u'hot_water_setpoint_at_outdoor_drybulb_low',
                                        'default': 82.2,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'hot water reset outdoor dry-bulb low',
                                       {'name': u'Hot Water Reset Outdoor Dry-Bulb Low',
                                        'pyname': u'hot_water_reset_outdoor_drybulb_low',
                                        'default': -6.7,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'hot water setpoint at outdoor dry-bulb high',
                                       {'name': u'Hot Water Setpoint at Outdoor Dry-Bulb High',
                                        'pyname': u'hot_water_setpoint_at_outdoor_drybulb_high',
                                        'default': 65.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'hot water reset outdoor dry-bulb high',
                                       {'name': u'Hot Water Reset Outdoor Dry-Bulb High',
                                        'pyname': u'hot_water_reset_outdoor_drybulb_high',
                                        'default': 10.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'hot water pump type',
                                       {'name': u'Hot Water Pump Type',
                                        'pyname': u'hot_water_pump_type',
                                        'default': u'SinglePump',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SinglePump',
                                                            u'PumpPerBoiler',
                                                            u'TwoHeaderedPumps',
                                                            u'ThreeHeaderedPumps',
                                                            u'FourHeaderedPumps',
                                                            u'FiveHeaderedPumps'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply side bypass pipe',
                                       {'name': u'Supply Side Bypass Pipe',
                                        'pyname': u'supply_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'demand side bypass pipe',
                                       {'name': u'Demand Side Bypass Pipe',
                                        'pyname': u'demand_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'fluid type',
                                       {'name': u'Fluid Type',
                                        'pyname': u'fluid_type',
                                        'default': u'Water',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Water',
                                                            u'EthyleneGlycol30',
                                                            u'EthyleneGlycol40',
                                                            u'EthyleneGlycol50',
                                                            u'EthyleneGlycol60',
                                                            u'PropyleneGlycol30',
                                                            u'PropyleneGlycol40',
                                                            u'PropyleneGlycol50',
                                                            u'PropyleneGlycol60'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'loop design delta temperature',
                                       {'name': u'Loop Design Delta Temperature',
                                        'pyname': u'loop_design_delta_temperature',
                                        'default': 11.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'deltaC'}),
                                      (u'maximum outdoor dry bulb temperature',
                                       {'name': u'Maximum Outdoor Dry Bulb Temperature',
                                        'pyname': u'maximum_outdoor_dry_bulb_temperature',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'load distribution scheme',
                                       {'name': u'Load Distribution Scheme',
                                        'pyname': u'load_distribution_scheme',
                                        'default': u'SequentialLoad',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Optimal',
                                                            u'SequentialLoad',
                                                            u'UniformLoad',
                                                            u'UniformPLR',
                                                            u'SequentialUniformPLR',
                                                            u'Sequential',
                                                            u'Uniform'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 14,
               'name': u'HVACTemplate:Plant:HotWaterLoop',
               'pyname': u'HvactemplatePlantHotWaterLoop',
               'required-object': False,
               'unique-object': True}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def pump_schedule_name(self):
        """field `Pump Schedule Name` If blank, always available.

        Args:
            value (str): value for IDD Field `Pump Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `pump_schedule_name` or None if not set

        """
        return self["Pump Schedule Name"]

    @pump_schedule_name.setter
    def pump_schedule_name(self, value=None):
        """Corresponds to IDD field `Pump Schedule Name`"""
        self["Pump Schedule Name"] = value

    @property
    def pump_control_type(self):
        """field `Pump Control Type`

        Args:
            value (str): value for IDD Field `Pump Control Type`
                Default value: Intermittent

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `pump_control_type` or None if not set

        """
        return self["Pump Control Type"]

    @pump_control_type.setter
    def pump_control_type(self, value="Intermittent"):
        """Corresponds to IDD field `Pump Control Type`"""
        self["Pump Control Type"] = value

    @property
    def hot_water_plant_operation_scheme_type(self):
        """field `Hot Water Plant Operation Scheme Type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Boiler objects.

        Args:
            value (str): value for IDD Field `Hot Water Plant Operation Scheme Type`
                Default value: Default

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_water_plant_operation_scheme_type` or None if not set
        """
        return self["Hot Water Plant Operation Scheme Type"]

    @hot_water_plant_operation_scheme_type.setter
    def hot_water_plant_operation_scheme_type(self, value="Default"):
        """Corresponds to IDD field `Hot Water Plant Operation Scheme Type`"""
        self["Hot Water Plant Operation Scheme Type"] = value

    @property
    def hot_water_plant_equipment_operation_schemes_name(self):
        """field `Hot Water Plant Equipment Operation Schemes Name`
        Name of a PlantEquipmentOperationSchemes object
        Ignored if Plant Operation Scheme Type = Default

        Args:
            value (str): value for IDD Field `Hot Water Plant Equipment Operation Schemes Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_water_plant_equipment_operation_schemes_name` or None if not set
        """
        return self["Hot Water Plant Equipment Operation Schemes Name"]

    @hot_water_plant_equipment_operation_schemes_name.setter
    def hot_water_plant_equipment_operation_schemes_name(self, value=None):
        """Corresponds to IDD field `Hot Water Plant Equipment Operation
        Schemes Name`"""
        self["Hot Water Plant Equipment Operation Schemes Name"] = value

    @property
    def hot_water_setpoint_schedule_name(self):
        """field `Hot Water Setpoint Schedule Name` Leave blank if constant
        setpoint.

        Args:
            value (str): value for IDD Field `Hot Water Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_water_setpoint_schedule_name` or None if not set

        """
        return self["Hot Water Setpoint Schedule Name"]

    @hot_water_setpoint_schedule_name.setter
    def hot_water_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Hot Water Setpoint Schedule Name`"""
        self["Hot Water Setpoint Schedule Name"] = value

    @property
    def hot_water_design_setpoint(self):
        """field `Hot Water Design Setpoint` Used for sizing and as constant
        setpoint if no Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `Hot Water Design Setpoint`
                Units: C
                Default value: 82.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_water_design_setpoint` or None if not set

        """
        return self["Hot Water Design Setpoint"]

    @hot_water_design_setpoint.setter
    def hot_water_design_setpoint(self, value=82.0):
        """Corresponds to IDD field `Hot Water Design Setpoint`"""
        self["Hot Water Design Setpoint"] = value

    @property
    def hot_water_pump_configuration(self):
        """field `Hot Water Pump Configuration`

        VariableFlow - variable flow to boilers and coils, excess bypassed
        ConstantFlow - constant flow to boilers and coils, excess bypassed

        Args:
            value (str): value for IDD Field `Hot Water Pump Configuration`
                Default value: ConstantFlow

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_water_pump_configuration` or None if not set

        """
        return self["Hot Water Pump Configuration"]

    @hot_water_pump_configuration.setter
    def hot_water_pump_configuration(self, value="ConstantFlow"):
        """Corresponds to IDD field `Hot Water Pump Configuration`"""
        self["Hot Water Pump Configuration"] = value

    @property
    def hot_water_pump_rated_head(self):
        """field `Hot Water Pump Rated Head` Default head is 60 feet H2O.

        Args:
            value (float): value for IDD Field `Hot Water Pump Rated Head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_water_pump_rated_head` or None if not set

        """
        return self["Hot Water Pump Rated Head"]

    @hot_water_pump_rated_head.setter
    def hot_water_pump_rated_head(self, value=179352.0):
        """Corresponds to IDD field `Hot Water Pump Rated Head`"""
        self["Hot Water Pump Rated Head"] = value

    @property
    def hot_water_setpoint_reset_type(self):
        """field `Hot Water Setpoint Reset Type` Overrides Hot Water Setpoint
        Schedule Name.

        Args:
            value (str): value for IDD Field `Hot Water Setpoint Reset Type`
                Default value: None

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_water_setpoint_reset_type` or None if not set

        """
        return self["Hot Water Setpoint Reset Type"]

    @hot_water_setpoint_reset_type.setter
    def hot_water_setpoint_reset_type(self, value="None"):
        """Corresponds to IDD field `Hot Water Setpoint Reset Type`"""
        self["Hot Water Setpoint Reset Type"] = value

    @property
    def hot_water_setpoint_at_outdoor_drybulb_low(self):
        """field `Hot Water Setpoint at Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Hot Water Setpoint at Outdoor Dry-Bulb Low`
                Units: C
                Default value: 82.2

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_water_setpoint_at_outdoor_drybulb_low` or None if not set
        """
        return self["Hot Water Setpoint at Outdoor Dry-Bulb Low"]

    @hot_water_setpoint_at_outdoor_drybulb_low.setter
    def hot_water_setpoint_at_outdoor_drybulb_low(self, value=82.2):
        """  Corresponds to IDD field `Hot Water Setpoint at Outdoor Dry-Bulb Low`

        """
        self["Hot Water Setpoint at Outdoor Dry-Bulb Low"] = value

    @property
    def hot_water_reset_outdoor_drybulb_low(self):
        """field `Hot Water Reset Outdoor Dry-Bulb Low`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Hot Water Reset Outdoor Dry-Bulb Low`
                Units: C
                Default value: -6.7

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_water_reset_outdoor_drybulb_low` or None if not set
        """
        return self["Hot Water Reset Outdoor Dry-Bulb Low"]

    @hot_water_reset_outdoor_drybulb_low.setter
    def hot_water_reset_outdoor_drybulb_low(self, value=-6.7):
        """  Corresponds to IDD field `Hot Water Reset Outdoor Dry-Bulb Low`

        """
        self["Hot Water Reset Outdoor Dry-Bulb Low"] = value

    @property
    def hot_water_setpoint_at_outdoor_drybulb_high(self):
        """field `Hot Water Setpoint at Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Hot Water Setpoint at Outdoor Dry-Bulb High`
                Units: C
                Default value: 65.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_water_setpoint_at_outdoor_drybulb_high` or None if not set
        """
        return self["Hot Water Setpoint at Outdoor Dry-Bulb High"]

    @hot_water_setpoint_at_outdoor_drybulb_high.setter
    def hot_water_setpoint_at_outdoor_drybulb_high(self, value=65.6):
        """  Corresponds to IDD field `Hot Water Setpoint at Outdoor Dry-Bulb High`

        """
        self["Hot Water Setpoint at Outdoor Dry-Bulb High"] = value

    @property
    def hot_water_reset_outdoor_drybulb_high(self):
        """field `Hot Water Reset Outdoor Dry-Bulb High`
        Applicable only for OutdoorAirTemperatureReset control.

        Args:
            value (float): value for IDD Field `Hot Water Reset Outdoor Dry-Bulb High`
                Units: C
                Default value: 10.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `hot_water_reset_outdoor_drybulb_high` or None if not set
        """
        return self["Hot Water Reset Outdoor Dry-Bulb High"]

    @hot_water_reset_outdoor_drybulb_high.setter
    def hot_water_reset_outdoor_drybulb_high(self, value=10.0):
        """  Corresponds to IDD field `Hot Water Reset Outdoor Dry-Bulb High`

        """
        self["Hot Water Reset Outdoor Dry-Bulb High"] = value

    @property
    def hot_water_pump_type(self):
        """field `Hot Water Pump Type` Describes the type of pump configuration
        used for the hot water loop.

        Args:
            value (str): value for IDD Field `Hot Water Pump Type`
                Default value: SinglePump

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `hot_water_pump_type` or None if not set

        """
        return self["Hot Water Pump Type"]

    @hot_water_pump_type.setter
    def hot_water_pump_type(self, value="SinglePump"):
        """Corresponds to IDD field `Hot Water Pump Type`"""
        self["Hot Water Pump Type"] = value

    @property
    def supply_side_bypass_pipe(self):
        """field `Supply Side Bypass Pipe` Determines if a supply side bypass
        pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `Supply Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_side_bypass_pipe` or None if not set

        """
        return self["Supply Side Bypass Pipe"]

    @supply_side_bypass_pipe.setter
    def supply_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Supply Side Bypass Pipe`"""
        self["Supply Side Bypass Pipe"] = value

    @property
    def demand_side_bypass_pipe(self):
        """field `Demand Side Bypass Pipe` Determines if a demand side bypass
        pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `Demand Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `demand_side_bypass_pipe` or None if not set

        """
        return self["Demand Side Bypass Pipe"]

    @demand_side_bypass_pipe.setter
    def demand_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Demand Side Bypass Pipe`"""
        self["Demand Side Bypass Pipe"] = value

    @property
    def fluid_type(self):
        """field `Fluid Type`

        Args:
            value (str): value for IDD Field `Fluid Type`
                Default value: Water

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `fluid_type` or None if not set

        """
        return self["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """Corresponds to IDD field `Fluid Type`"""
        self["Fluid Type"] = value

    @property
    def loop_design_delta_temperature(self):
        """field `Loop Design Delta Temperature` The temperature difference
        used in sizing the loop flow rate.

        Args:
            value (float): value for IDD Field `Loop Design Delta Temperature`
                Units: deltaC
                Default value: 11.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `loop_design_delta_temperature` or None if not set

        """
        return self["Loop Design Delta Temperature"]

    @loop_design_delta_temperature.setter
    def loop_design_delta_temperature(self, value=11.0):
        """Corresponds to IDD field `Loop Design Delta Temperature`"""
        self["Loop Design Delta Temperature"] = value

    @property
    def maximum_outdoor_dry_bulb_temperature(self):
        """field `Maximum Outdoor Dry Bulb Temperature` The maximum outdoor dry
        bulb temperature that the hot water loops operate. Leave blank for no
        limit.

        Args:
            value (float): value for IDD Field `Maximum Outdoor Dry Bulb Temperature`
                Units: C

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_outdoor_dry_bulb_temperature` or None if not set

        """
        return self["Maximum Outdoor Dry Bulb Temperature"]

    @maximum_outdoor_dry_bulb_temperature.setter
    def maximum_outdoor_dry_bulb_temperature(self, value=None):
        """Corresponds to IDD field `Maximum Outdoor Dry Bulb Temperature`"""
        self["Maximum Outdoor Dry Bulb Temperature"] = value

    @property
    def load_distribution_scheme(self):
        """field `Load Distribution Scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `Load Distribution Scheme`
                Default value: SequentialLoad

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `load_distribution_scheme` or None if not set
        """
        return self["Load Distribution Scheme"]

    @load_distribution_scheme.setter
    def load_distribution_scheme(self, value="SequentialLoad"):
        """Corresponds to IDD field `Load Distribution Scheme`"""
        self["Load Distribution Scheme"] = value




class HvactemplatePlantBoiler(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:Boiler`
        This object adds a boiler to an HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'boiler type',
                                       {'name': u'Boiler Type',
                                        'pyname': u'boiler_type',
                                        'required-field': True,
                                        'autosizable': False,
                                        'accepted-values': [u'DistrictHotWater',
                                                            u'HotWaterBoiler',
                                                            u'CondensingHotWaterBoiler'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'capacity',
                                       {'name': u'Capacity',
                                        'pyname': u'capacity',
                                        'default': 'autosize',
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': True,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'W'}),
                                      (u'efficiency',
                                       {'name': u'Efficiency',
                                        'pyname': u'efficiency',
                                        'default': 0.8,
                                        'maximum': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'fuel type',
                                       {'name': u'Fuel Type',
                                        'pyname': u'fuel_type',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Electricity',
                                                            u'NaturalGas',
                                                            u'PropaneGas',
                                                            u'FuelOil#1',
                                                            u'FuelOil#2',
                                                            u'Coal',
                                                            u'Diesel',
                                                            u'Gasoline',
                                                            u'OtherFuel1',
                                                            u'OtherFuel2'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'priority',
                                       {'name': u'Priority',
                                        'pyname': u'priority',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'sizing factor',
                                       {'name': u'Sizing Factor',
                                        'pyname': u'sizing_factor',
                                        'default': 1.0,
                                        'minimum>': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'minimum part load ratio',
                                       {'name': u'Minimum Part Load Ratio',
                                        'pyname': u'minimum_part_load_ratio',
                                        'default': 0.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'maximum part load ratio',
                                       {'name': u'Maximum Part Load Ratio',
                                        'pyname': u'maximum_part_load_ratio',
                                        'default': 1.1,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'optimum part load ratio',
                                       {'name': u'Optimum Part Load Ratio',
                                        'pyname': u'optimum_part_load_ratio',
                                        'default': 1.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': u'real'}),
                                      (u'water outlet upper temperature limit',
                                       {'name': u'Water Outlet Upper Temperature Limit',
                                        'pyname': u'water_outlet_upper_temperature_limit',
                                        'default': 100.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'real',
                                        'unit': u'C'}),
                                      (u'template plant loop type',
                                       {'name': u'Template Plant Loop Type',
                                        'pyname': u'template_plant_loop_type',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'MixedWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 7,
               'name': u'HVACTemplate:Plant:Boiler',
               'pyname': u'HvactemplatePlantBoiler',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def boiler_type(self):
        """field `Boiler Type`

        Args:
            value (str): value for IDD Field `Boiler Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `boiler_type` or None if not set

        """
        return self["Boiler Type"]

    @boiler_type.setter
    def boiler_type(self, value=None):
        """Corresponds to IDD field `Boiler Type`"""
        self["Boiler Type"] = value

    @property
    def capacity(self):
        """field `Capacity`

        Args:
            value (float or "Autosize"): value for IDD Field `Capacity`
                Units: W
                Default value: "autosize"

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `capacity` or None if not set

        """
        return self["Capacity"]

    @capacity.setter
    def capacity(self, value="autosize"):
        """Corresponds to IDD field `Capacity`"""
        self["Capacity"] = value

    @property
    def efficiency(self):
        """field `Efficiency` Not applicable  if Boiler Type is
        DistrictHotWater.

        Args:
            value (float): value for IDD Field `Efficiency`
                Default value: 0.8
                value <= 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `efficiency` or None if not set

        """
        return self["Efficiency"]

    @efficiency.setter
    def efficiency(self, value=0.8):
        """Corresponds to IDD field `Efficiency`"""
        self["Efficiency"] = value

    @property
    def fuel_type(self):
        """field `Fuel Type` Not applicable  if Boiler Type is
        DistrictHotWater.

        Args:
            value (str): value for IDD Field `Fuel Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `fuel_type` or None if not set

        """
        return self["Fuel Type"]

    @fuel_type.setter
    def fuel_type(self, value=None):
        """Corresponds to IDD field `Fuel Type`"""
        self["Fuel Type"] = value

    @property
    def priority(self):
        """field `Priority`
        If Hot Water Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:HotWaterLoop, then equipment
        operates in priority order, 1, 2, 3, etc.

        Args:
            value (str): value for IDD Field `Priority`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `priority` or None if not set
        """
        return self["Priority"]

    @priority.setter
    def priority(self, value=None):
        """Corresponds to IDD field `Priority`"""
        self["Priority"] = value

    @property
    def sizing_factor(self):
        """field `Sizing Factor` Multiplies the autosized capacity and flow
        rates.

        Args:
            value (float): value for IDD Field `Sizing Factor`
                Default value: 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `sizing_factor` or None if not set

        """
        return self["Sizing Factor"]

    @sizing_factor.setter
    def sizing_factor(self, value=1.0):
        """Corresponds to IDD field `Sizing Factor`"""
        self["Sizing Factor"] = value

    @property
    def minimum_part_load_ratio(self):
        """field `Minimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Minimum Part Load Ratio`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `minimum_part_load_ratio` or None if not set

        """
        return self["Minimum Part Load Ratio"]

    @minimum_part_load_ratio.setter
    def minimum_part_load_ratio(self, value=None):
        """Corresponds to IDD field `Minimum Part Load Ratio`"""
        self["Minimum Part Load Ratio"] = value

    @property
    def maximum_part_load_ratio(self):
        """field `Maximum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Maximum Part Load Ratio`
                Default value: 1.1

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `maximum_part_load_ratio` or None if not set

        """
        return self["Maximum Part Load Ratio"]

    @maximum_part_load_ratio.setter
    def maximum_part_load_ratio(self, value=1.1):
        """Corresponds to IDD field `Maximum Part Load Ratio`"""
        self["Maximum Part Load Ratio"] = value

    @property
    def optimum_part_load_ratio(self):
        """field `Optimum Part Load Ratio`

        Args:
            value (float): value for IDD Field `Optimum Part Load Ratio`
                Default value: 1.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `optimum_part_load_ratio` or None if not set

        """
        return self["Optimum Part Load Ratio"]

    @optimum_part_load_ratio.setter
    def optimum_part_load_ratio(self, value=1.0):
        """Corresponds to IDD field `Optimum Part Load Ratio`"""
        self["Optimum Part Load Ratio"] = value

    @property
    def water_outlet_upper_temperature_limit(self):
        """field `Water Outlet Upper Temperature Limit`

        Args:
            value (float): value for IDD Field `Water Outlet Upper Temperature Limit`
                Units: C
                Default value: 100.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `water_outlet_upper_temperature_limit` or None if not set

        """
        return self["Water Outlet Upper Temperature Limit"]

    @water_outlet_upper_temperature_limit.setter
    def water_outlet_upper_temperature_limit(self, value=100.0):
        """Corresponds to IDD field `Water Outlet Upper Temperature Limit`"""
        self["Water Outlet Upper Temperature Limit"] = value

    @property
    def template_plant_loop_type(self):
        """field `Template Plant Loop Type` Specifies if this boiler serves a
        template hot water loop or mixed water loop If left blank, will serve a
        hot water loop if present, or a mixed water loop (if no hot water loop
        is present).

        Args:
            value (str): value for IDD Field `Template Plant Loop Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_plant_loop_type` or None if not set

        """
        return self["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """Corresponds to IDD field `Template Plant Loop Type`"""
        self["Template Plant Loop Type"] = value




class HvactemplatePlantBoilerObjectReference(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:Boiler:ObjectReference`
        This object references a detailed boiler object and adds it to
        an HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop. The user must create a complete
        detailed boiler object with all required curve or performance objects.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'boiler object type',
                                       {'name': u'Boiler Object Type',
                                        'pyname': u'boiler_object_type',
                                        'default': u'Boiler:HotWater',
                                        'required-field': True,
                                        'autosizable': False,
                                        'accepted-values': [u'Boiler:HotWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'boiler name',
                                       {'name': u'Boiler Name',
                                        'pyname': u'boiler_name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'priority',
                                       {'name': u'Priority',
                                        'pyname': u'priority',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real'}),
                                      (u'template plant loop type',
                                       {'name': u'Template Plant Loop Type',
                                        'pyname': u'template_plant_loop_type',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'HotWater',
                                                            u'MixedWater'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 4,
               'name': u'HVACTemplate:Plant:Boiler:ObjectReference',
               'pyname': u'HvactemplatePlantBoilerObjectReference',
               'required-object': False,
               'unique-object': False}

    @property
    def name(self):
        """field `Name` The name of this object.

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def boiler_object_type(self):
        """field `Boiler Object Type`

        Args:
            value (str): value for IDD Field `Boiler Object Type`
                Default value: Boiler:HotWater

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `boiler_object_type` or None if not set

        """
        return self["Boiler Object Type"]

    @boiler_object_type.setter
    def boiler_object_type(self, value="Boiler:HotWater"):
        """Corresponds to IDD field `Boiler Object Type`"""
        self["Boiler Object Type"] = value

    @property
    def boiler_name(self):
        """field `Boiler Name` The name of the detailed boiler object.

        Args:
            value (str): value for IDD Field `Boiler Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `boiler_name` or None if not set

        """
        return self["Boiler Name"]

    @boiler_name.setter
    def boiler_name(self, value=None):
        """Corresponds to IDD field `Boiler Name`"""
        self["Boiler Name"] = value

    @property
    def priority(self):
        """field `Priority`
        If Hot Water Plant Operation Scheme Type=Default
        in HVACTemplate:Plant:HotWaterLoop or MixedWaterLoop, then equipment
        operates in Priority order, 1, 2, 3, etc.

        Args:
            value (float): value for IDD Field `Priority`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `priority` or None if not set
        """
        return self["Priority"]

    @priority.setter
    def priority(self, value=None):
        """Corresponds to IDD field `Priority`"""
        self["Priority"] = value

    @property
    def template_plant_loop_type(self):
        """field `Template Plant Loop Type` Specifies if this boiler serves a
        template hot water loop or mixed water loop If left blank, will serve a
        hot water loop if present, or a mixed water loop (if no hot water loop
        is present).

        Args:
            value (str): value for IDD Field `Template Plant Loop Type`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `template_plant_loop_type` or None if not set

        """
        return self["Template Plant Loop Type"]

    @template_plant_loop_type.setter
    def template_plant_loop_type(self, value=None):
        """Corresponds to IDD field `Template Plant Loop Type`"""
        self["Template Plant Loop Type"] = value




class HvactemplatePlantMixedWaterLoop(DataObject):

    """ Corresponds to IDD object `HVACTemplate:Plant:MixedWaterLoop`
        Central plant loop portion of a water source heat pump system.
    """
    _schema = {'extensible-fields': OrderedDict(),
               'fields': OrderedDict([(u'name',
                                       {'name': u'Name',
                                        'pyname': u'name',
                                        'required-field': True,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'pump schedule name',
                                       {'name': u'Pump Schedule Name',
                                        'pyname': u'pump_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'pump control type',
                                       {'name': u'Pump Control Type',
                                        'pyname': u'pump_control_type',
                                        'default': u'Intermittent',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Intermittent',
                                                            u'Continuous'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'operation scheme type',
                                       {'name': u'Operation Scheme Type',
                                        'pyname': u'operation_scheme_type',
                                        'default': u'Default',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Default',
                                                            u'UserDefined'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'equipment operation schemes name',
                                       {'name': u'Equipment Operation Schemes Name',
                                        'pyname': u'equipment_operation_schemes_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'high temperature setpoint schedule name',
                                       {'name': u'High Temperature Setpoint Schedule Name',
                                        'pyname': u'high_temperature_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'high temperature design setpoint',
                                       {'name': u'High Temperature Design Setpoint',
                                        'pyname': u'high_temperature_design_setpoint',
                                        'default': 33.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'low temperature setpoint schedule name',
                                       {'name': u'Low Temperature Setpoint Schedule Name',
                                        'pyname': u'low_temperature_setpoint_schedule_name',
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': u'object-list'}),
                                      (u'low temperature design setpoint',
                                       {'name': u'Low Temperature Design Setpoint',
                                        'pyname': u'low_temperature_design_setpoint',
                                        'default': 20.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'C'}),
                                      (u'water pump configuration',
                                       {'name': u'Water Pump Configuration',
                                        'pyname': u'water_pump_configuration',
                                        'default': u'ConstantFlow',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'VariableFlow',
                                                            u'ConstantFlow'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'water pump rated head',
                                       {'name': u'Water Pump Rated Head',
                                        'pyname': u'water_pump_rated_head',
                                        'default': 179352.0,
                                        'required-field': False,
                                        'autosizable': False,
                                        'minimum': 0.0,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'Pa'}),
                                      (u'water pump type',
                                       {'name': u'Water Pump Type',
                                        'pyname': u'water_pump_type',
                                        'default': u'SinglePump',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'SinglePump',
                                                            u'PumpPerTowerOrBoiler',
                                                            u'TwoHeaderedPumps',
                                                            u'ThreeHeaderedPumps',
                                                            u'FourHeaderedPumps',
                                                            u'FiveHeaderedPumps'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'supply side bypass pipe',
                                       {'name': u'Supply Side Bypass Pipe',
                                        'pyname': u'supply_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'demand side bypass pipe',
                                       {'name': u'Demand Side Bypass Pipe',
                                        'pyname': u'demand_side_bypass_pipe',
                                        'default': u'Yes',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Yes',
                                                            u'No'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'fluid type',
                                       {'name': u'Fluid Type',
                                        'pyname': u'fluid_type',
                                        'default': u'Water',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Water',
                                                            u'EthyleneGlycol30',
                                                            u'EthyleneGlycol40',
                                                            u'EthyleneGlycol50',
                                                            u'EthyleneGlycol60',
                                                            u'PropyleneGlycol30',
                                                            u'PropyleneGlycol40',
                                                            u'PropyleneGlycol50',
                                                            u'PropyleneGlycol60'],
                                        'autocalculatable': False,
                                        'type': 'alpha'}),
                                      (u'loop design delta temperature',
                                       {'name': u'Loop Design Delta Temperature',
                                        'pyname': u'loop_design_delta_temperature',
                                        'default': 5.6,
                                        'required-field': False,
                                        'autosizable': False,
                                        'autocalculatable': False,
                                        'type': 'real',
                                        'unit': u'deltaC'}),
                                      (u'load distribution scheme',
                                       {'name': u'Load Distribution Scheme',
                                        'pyname': u'load_distribution_scheme',
                                        'default': u'SequentialLoad',
                                        'required-field': False,
                                        'autosizable': False,
                                        'accepted-values': [u'Optimal',
                                                            u'SequentialLoad',
                                                            u'UniformLoad',
                                                            u'UniformPLR',
                                                            u'SequentialUniformPLR',
                                                            u'Sequential',
                                                            u'Uniform'],
                                        'autocalculatable': False,
                                        'type': 'alpha'})]),
               'format': None,
               'group': u'HVAC Templates',
               'min-fields': 11,
               'name': u'HVACTemplate:Plant:MixedWaterLoop',
               'pyname': u'HvactemplatePlantMixedWaterLoop',
               'required-object': False,
               'unique-object': True}

    @property
    def name(self):
        """field `Name`

        Args:
            value (str): value for IDD Field `Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `name` or None if not set

        """
        return self["Name"]

    @name.setter
    def name(self, value=None):
        """Corresponds to IDD field `Name`"""
        self["Name"] = value

    @property
    def pump_schedule_name(self):
        """field `Pump Schedule Name` If blank, always available Applies to
        both chilled water and condenser loop pumps.

        Args:
            value (str): value for IDD Field `Pump Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `pump_schedule_name` or None if not set

        """
        return self["Pump Schedule Name"]

    @pump_schedule_name.setter
    def pump_schedule_name(self, value=None):
        """Corresponds to IDD field `Pump Schedule Name`"""
        self["Pump Schedule Name"] = value

    @property
    def pump_control_type(self):
        """field `Pump Control Type` Applies to both chilled water and
        condenser loop pumps.

        Args:
            value (str): value for IDD Field `Pump Control Type`
                Default value: Intermittent

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `pump_control_type` or None if not set

        """
        return self["Pump Control Type"]

    @pump_control_type.setter
    def pump_control_type(self, value="Intermittent"):
        """Corresponds to IDD field `Pump Control Type`"""
        self["Pump Control Type"] = value

    @property
    def operation_scheme_type(self):
        """field `Operation Scheme Type`
        Default operation type makes all equipment available
        at all times operating in order of Priority specified
        in HVACTemplate:Plant:Boiler and HVACTemplate:Plant:Tower objects.

        Args:
            value (str): value for IDD Field `Operation Scheme Type`
                Default value: Default

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `operation_scheme_type` or None if not set
        """
        return self["Operation Scheme Type"]

    @operation_scheme_type.setter
    def operation_scheme_type(self, value="Default"):
        """Corresponds to IDD field `Operation Scheme Type`"""
        self["Operation Scheme Type"] = value

    @property
    def equipment_operation_schemes_name(self):
        """field `Equipment Operation Schemes Name`
        Name of a PlantEquipmentOperationSchemes object
        Ignored if Plant Operation Scheme Type = Default

        Args:
            value (str): value for IDD Field `Equipment Operation Schemes Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `equipment_operation_schemes_name` or None if not set
        """
        return self["Equipment Operation Schemes Name"]

    @equipment_operation_schemes_name.setter
    def equipment_operation_schemes_name(self, value=None):
        """Corresponds to IDD field `Equipment Operation Schemes Name`"""
        self["Equipment Operation Schemes Name"] = value

    @property
    def high_temperature_setpoint_schedule_name(self):
        """field `High Temperature Setpoint Schedule Name` Leave blank if
        constant setpoint.

        Args:
            value (str): value for IDD Field `High Temperature Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `high_temperature_setpoint_schedule_name` or None if not set

        """
        return self["High Temperature Setpoint Schedule Name"]

    @high_temperature_setpoint_schedule_name.setter
    def high_temperature_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `High Temperature Setpoint Schedule
        Name`"""
        self["High Temperature Setpoint Schedule Name"] = value

    @property
    def high_temperature_design_setpoint(self):
        """field `High Temperature Design Setpoint` Used for sizing and as
        constant setpoint if no Setpoint Schedule Name is specified.

        Args:
            value (float): value for IDD Field `High Temperature Design Setpoint`
                Units: C
                Default value: 33.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `high_temperature_design_setpoint` or None if not set

        """
        return self["High Temperature Design Setpoint"]

    @high_temperature_design_setpoint.setter
    def high_temperature_design_setpoint(self, value=33.0):
        """Corresponds to IDD field `High Temperature Design Setpoint`"""
        self["High Temperature Design Setpoint"] = value

    @property
    def low_temperature_setpoint_schedule_name(self):
        """field `Low Temperature Setpoint Schedule Name` Leave blank if
        constant setpoint May be left blank if not serving any water cooled
        chillers.

        Args:
            value (str): value for IDD Field `Low Temperature Setpoint Schedule Name`

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `low_temperature_setpoint_schedule_name` or None if not set

        """
        return self["Low Temperature Setpoint Schedule Name"]

    @low_temperature_setpoint_schedule_name.setter
    def low_temperature_setpoint_schedule_name(self, value=None):
        """Corresponds to IDD field `Low Temperature Setpoint Schedule Name`"""
        self["Low Temperature Setpoint Schedule Name"] = value

    @property
    def low_temperature_design_setpoint(self):
        """field `Low Temperature Design Setpoint` Used for sizing and as
        constant setpoint if no Condenser Water Setpoint Schedule Name is
        specified. May be left blank if not serving any water cooled chillers.

        Args:
            value (float): value for IDD Field `Low Temperature Design Setpoint`
                Units: C
                Default value: 20.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `low_temperature_design_setpoint` or None if not set

        """
        return self["Low Temperature Design Setpoint"]

    @low_temperature_design_setpoint.setter
    def low_temperature_design_setpoint(self, value=20.0):
        """Corresponds to IDD field `Low Temperature Design Setpoint`"""
        self["Low Temperature Design Setpoint"] = value

    @property
    def water_pump_configuration(self):
        """field `Water Pump Configuration`

        VariableFlow - variable flow to boilers and coils, excess bypassed
        ConstantFlow - constant flow to boilers and coils, excess bypassed

        Args:
            value (str): value for IDD Field `Water Pump Configuration`
                Default value: ConstantFlow

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `water_pump_configuration` or None if not set

        """
        return self["Water Pump Configuration"]

    @water_pump_configuration.setter
    def water_pump_configuration(self, value="ConstantFlow"):
        """Corresponds to IDD field `Water Pump Configuration`"""
        self["Water Pump Configuration"] = value

    @property
    def water_pump_rated_head(self):
        """field `Water Pump Rated Head` May be left blank if not serving any
        water cooled chillers default head is 60 feet H2O.

        Args:
            value (float): value for IDD Field `Water Pump Rated Head`
                Units: Pa
                IP-Units: ftH2O
                Default value: 179352.0

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `water_pump_rated_head` or None if not set

        """
        return self["Water Pump Rated Head"]

    @water_pump_rated_head.setter
    def water_pump_rated_head(self, value=179352.0):
        """Corresponds to IDD field `Water Pump Rated Head`"""
        self["Water Pump Rated Head"] = value

    @property
    def water_pump_type(self):
        """field `Water Pump Type` Describes the type of pump configuration
        used for the mixed water loop.

        Args:
            value (str): value for IDD Field `Water Pump Type`
                Default value: SinglePump

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `water_pump_type` or None if not set

        """
        return self["Water Pump Type"]

    @water_pump_type.setter
    def water_pump_type(self, value="SinglePump"):
        """Corresponds to IDD field `Water Pump Type`"""
        self["Water Pump Type"] = value

    @property
    def supply_side_bypass_pipe(self):
        """field `Supply Side Bypass Pipe` Determines if a supply side bypass
        pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `Supply Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `supply_side_bypass_pipe` or None if not set

        """
        return self["Supply Side Bypass Pipe"]

    @supply_side_bypass_pipe.setter
    def supply_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Supply Side Bypass Pipe`"""
        self["Supply Side Bypass Pipe"] = value

    @property
    def demand_side_bypass_pipe(self):
        """field `Demand Side Bypass Pipe` Determines if a demand side bypass
        pipe is present in the hot water loop.

        Args:
            value (str): value for IDD Field `Demand Side Bypass Pipe`
                Default value: Yes

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `demand_side_bypass_pipe` or None if not set

        """
        return self["Demand Side Bypass Pipe"]

    @demand_side_bypass_pipe.setter
    def demand_side_bypass_pipe(self, value="Yes"):
        """Corresponds to IDD field `Demand Side Bypass Pipe`"""
        self["Demand Side Bypass Pipe"] = value

    @property
    def fluid_type(self):
        """field `Fluid Type`

        Args:
            value (str): value for IDD Field `Fluid Type`
                Default value: Water

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `fluid_type` or None if not set

        """
        return self["Fluid Type"]

    @fluid_type.setter
    def fluid_type(self, value="Water"):
        """Corresponds to IDD field `Fluid Type`"""
        self["Fluid Type"] = value

    @property
    def loop_design_delta_temperature(self):
        """field `Loop Design Delta Temperature` The temperature difference
        used in sizing the loop flow rate.

        Args:
            value (float): value for IDD Field `Loop Design Delta Temperature`
                Units: deltaC
                Default value: 5.6

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            float: the value of `loop_design_delta_temperature` or None if not set

        """
        return self["Loop Design Delta Temperature"]

    @loop_design_delta_temperature.setter
    def loop_design_delta_temperature(self, value=5.6):
        """Corresponds to IDD field `Loop Design Delta Temperature`"""
        self["Loop Design Delta Temperature"] = value

    @property
    def load_distribution_scheme(self):
        """field `Load Distribution Scheme`
        Sequential=SequentialLoad, Uniform=UniformLoad, retained here for compatibility

        Args:
            value (str): value for IDD Field `Load Distribution Scheme`
                Default value: SequentialLoad

        Raises:
            ValueError: if `value` is not a valid value

        Returns:
            str: the value of `load_distribution_scheme` or None if not set
        """
        return self["Load Distribution Scheme"]

    @load_distribution_scheme.setter
    def load_distribution_scheme(self, value="SequentialLoad"):
        """Corresponds to IDD field `Load Distribution Scheme`"""
        self["Load Distribution Scheme"] = value


