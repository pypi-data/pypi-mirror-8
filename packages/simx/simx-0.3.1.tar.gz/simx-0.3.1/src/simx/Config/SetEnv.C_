// Copyright (c) 2012. Los Alamos National Security, LLC. 

// This material was produced under U.S. Government contract DE-AC52-06NA25396
// for Los Alamos National Laboratory (LANL), which is operated by Los Alamos 
// National Security, LLC for the U.S. Department of Energy. The U.S. Government 
// has rights to use, reproduce, and distribute this software.  

// NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, 
// EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  
// If software is modified to produce derivative works, such modified software should
// be clearly marked, so as not to confuse it with the version available from LANL.

// Additionally, this library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License v 2.1 as published by the 
// Free Software Foundation. Accordingly, this library is distributed in the hope that 
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE.txt for more details.

//--------------------------------------------------------------------------
//$Id: SetEnv.C,v 1.1.1.1 2011/08/18 22:19:44 nsanthi Exp $
//--------------------------------------------------------------------------
// File:    SetEnv.C
// Module:  Programs
// Author:  K. Bisset
// Created: March  1 1999
//
// This program allows exporting keys in a configuration file as
// environemnt variables.

// usage: eval `GetEnv <shell> <config file>` 

// where <shell> is sh or csh and <config file> is the configuration
// file to read.

// @@

//--------------------------------------------------------------------------

#include "SimCore/Config/Configuration.h"
#include "SimCore/Config/ConfigurationFileReader.h"
#include "SimCore/Global/main.h"

#include <stdlib.h>
#include <iostream>

using namespace Config;
using namespace std;

//--------------------------------------------------------------------------

void Global::ModuleMain(int argc, char* argv[])
{
  if (argc != 3)
  {
    exit(1);
  }
  
  ConfigurationFileReader reader(argv[2]);
  Configuration config(reader);
  string command;
  string eq;
  string eol;
  string quote;
  
  // set up differnt syntaxes
  // sh/bash expect "export key=value"
  if (strcmp(argv[1], "sh") == 0)
  {
    command = "export ";
    eq = "=";
    eol = "";
    quote = "'";
  }
  // csh/tcsh expect "setenv key value"
  else if (strcmp(argv[1], "csh") == 0)
  {
    command = "setenv ";
    eq = " ";
    eol = "";
    quote = "'";
  }
  else if (strcmp(argv[1], "perl") == 0)
  {
    command = "$CommonConfig{\"";
    eq = "\"} = ";
    eol = ";";
    quote = "\"";
  }
  else if (strcmp(argv[1], "config") == 0)
  {
    command = "";
    eq = "\t";
    eol = "";
    quote = "";
  }
  else if (strcmp(argv[1], "keys") == 0)
  {
    command = "";
    eq = " ";
    eol = "";
    quote = "";
  }
  else
  {
    exit(1);
  }

  Configuration::ConfigMapIterator iter;

  for (iter = config.GetConfiguration().begin(); 
       iter != config.GetConfiguration().end();
       iter++)
  {
    const string att = (*iter).first;
    const string val = (*iter).second;

    // Since the keys from CONFIG_DEFAULT_FILE are already included,
    // don't output this key
    if (att == "CONFIG_DEFAULT_FILE")
    {
      continue;
    }

    cout << command
	 << att
	 << eq
	 << quote
	 << ((strcmp(argv[1], "keys") == 0) ? "" : val.c_str())
	 << quote
	 << eol
	 << '\n' ;
  }
}

//--------------------------------------------------------------------------
//--------------------------------------------------------------------------
