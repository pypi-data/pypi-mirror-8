A readme on the various *Info* files and how they  relate to each other.


   Info.h   
   ======

This is the basic class (derives from Input class) to represent messages in simx. has functions to pack and unpack data, which must be defined unless packing just POD types/

readData() and readProfile() functions (inherited from input) are used if infos are to be created from an input file.

Further documentation from the source code is below.

/// base class to derive real Info classes from
///	- either both pack and unpack are overloaded, or neither (this is checked at register time)
///	- must have a default constructor and a copy constructor
///		- copy constructor should do DEEP copies, the object is only copied when necessary
///	- Plain Old Data can be un/packed using the functions provided
///	    with this Info (they don't need overloading), but all machines involved
///	    must have the same data type sizes
///	- the default getSize function returns (sizeof(derived
///	    Info Type)-sizeof(Info))  (to substract VMT size)
///	- if wished to be initiable from Input record, must have readData and readProfile overloaded
///	- it is made descendant of Input so that it can read input directly, and not through Input constructor

A pure virtual function

virtual const InfoHandler& getInfoHandler() const = 0

is provided. the InfoHandler is the object that processes the info. The method is implemented automatically (via templates) inside InfoHandler wrapper.



  Info.C 
  ======

  Implementation of Info.h. Definitions of pack, unpack, readData, readProfile etc. and other helper functions.


  InfoData.h
  ==========
  This is a struct that holds data from an input info file. Info objects are created from the  data that is read-in (via input streams)

  InfoData.C
  ==========
  Implementation file for InfoData.h


  InfoRecipient.h
  ===============

  An abstract base class, for anything capable of receiving an Info message of a particular type. The definition is simple enough that it is reproduced below.


template<class InfoClass>
class InfoRecipient
{
    public:
	/// method that handles the incoming Info
    virtual ~InfoRecipient() {}
	virtual void receive(boost::shared_ptr<InfoClass>) = 0;
};

Any object (usually a Service object) that wishes to receive an info of a certain type should inherit from this class and implement the receive method for that particular type of info.


 InfoHandler.h
 =============

 This file consists of three classes 

 -- InfoHandlerWrapper: This is a templated class inheriting from an Info class (templated on Infoclass) that impements the getInfoHandler() function (see Info.h above). This function returns an InfoHandler. 

 -- The InfoHandler class, an abstract base class for all InfoHandlers. Infohandlers 
    determine which method to call for a particular Info class. The pure virtual function
    
    virtual void 
    execute(boost::shared_ptr<Service>, boost::shared_ptr<Info>, bool=true) const = 0;	
    
    determines how to handle an Info.

 -- InfoHandlerDerived class, a templated class (templated on Infoclass) inheriting from InfoHandler (above). It implements the execute method.    


 InfoHandlerImpl.h
 =================

 This consists of the implementation of the member functions of all three classes (InfoHandlerWrapper, InfoHandler, InfoHandlerDervied) declared in InfoHandler.h. It is in a separate file to avoid circular dependency with InfoManager.h ( InfoHandlerImpl.h->InfoManager.h->InfoHandler.h, where -> indicates dependency.)

 There are mainly three functions of interest here:

 1. 
  template<class InfoClass>
  const InfoHandler& InfoHandlerWrapper<InfoClass>::getInfoHandler() const 
  {
    static const InfoHandler& ih = theInfoManager().getInfoHandler<InfoClass>();
    return ih;
  }

  This is the automatic template implementation of the pure virtual function
  getInfoHandler() declared in Info.h


2. 
  template<class InfoClass>
  boost::shared_ptr<Info> InfoHandlerDerived<InfoClass>::create(const Info& source) const
  {
    const InfoClass& src = dynamic_cast<const InfoClass&>(source);
    return boost::shared_ptr<Info>( new InfoHandlerWrapper<InfoClass>(src) );
  }

This function is invoked by InfoManager::createInfo().
Notice here, that what is actually being created is a new *InfoHandlerWrapper*, and not ra new Info. This is because all Infos are actually abstract classes (unless they implement their own versions of getInfoHandler() ). And this is the reason I was unable to simply export an Info class to python using boost::python (there are ways to export abstract classes though)


3.  template<class InfoClass>
  void InfoHandlerDerived<InfoClass>::execute(boost::shared_ptr<Service> baseService, boost::shared_ptr<Info> baseInfo, bool doError) const

    This is the function that calls the receive function of the service baseService. baseService is dynamic casted to an InfoRecipient<Info>, meaning a receive<Info> method should have been defined. If the cast fails, an error is thrown, unless bool is set to false;


 InfoManager.h
 =============

   Similar to the singletons EntityManager and ServiceManager, this class registers and creates Infos. 

   The two functions of interest here are the templated functions InfoManager::createInfo and InfoManager::registerInfo.

   1.   The createInfo method of InfoManager calls the create method of InfoHandlerDerived<InfoClass>. Recall that this returns an InfoHandlerWrapper<InfoClass>, and not an Infoclass

   2.   For the same reason as above, The registerInfo<InfoClass> method of InfoManager actually registers an InfoHandlerWrapper<InfoClass>, and not InfoClass.

   


   ( Following sections to be completed....)

 InfoManager.C
 =============
 Implementation of functions defined in InfoManager.h


   
   ControlInfoRecipient.h
 ControlInfoWrapper.C
 ControlInfoWrapper.h
 DassfEventInfo.h
 DassfEventInfoManager.h

 EventInfo.h
 ===========
   Time stamped message capsules which contains an Info object as the payload.

 EventInfo.C
 ===========
  
 EventInfoManager.C
 EventInfoManager.h
 
