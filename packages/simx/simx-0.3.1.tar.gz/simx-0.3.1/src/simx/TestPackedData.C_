// Copyright (c) 2012. Los Alamos National Security, LLC. 

// This material was produced under U.S. Government contract DE-AC52-06NA25396
// for Los Alamos National Laboratory (LANL), which is operated by Los Alamos 
// National Security, LLC for the U.S. Department of Energy. The U.S. Government 
// has rights to use, reproduce, and distribute this software.  

// NEITHER THE GOVERNMENT NOR LOS ALAMOS NATIONAL SECURITY, LLC MAKES ANY WARRANTY, 
// EXPRESS OR IMPLIED, OR ASSUMES ANY LIABILITY FOR THE USE OF THIS SOFTWARE.  
// If software is modified to produce derivative works, such modified software should
// be clearly marked, so as not to confuse it with the version available from LANL.

// Additionally, this library is free software; you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License v 2.1 as published by the 
// Free Software Foundation. Accordingly, this library is distributed in the hope that 
// it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of 
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See LICENSE.txt for more details.

//-------------------------------------------------------------------------
// File:    TestPackedData.C
// Module:  simx
// Author:  Lukas Kroc
// Created: Apr 7 2005
// Description:
// 	Implements unit tests of PackedData
//
// @@
//
//-------------------------------------------------------------------------

#include "simx/type.h"
#include "simx/TestPackedData.h"
#include "simx/writers.h"

#ifdef SIMX_USE_PRIME
    #include "ssf.h"
#endif

//-------------------------------------------------------------------------
//-------------------------------------------------------------------------

using namespace std;

namespace simx {

CPPUNIT_TEST_SUITE_REGISTRATION( TestPackedData );

TestPackedData::TestPackedData()
#ifdef SIMX_USE_PRIME
    :	fPackedData( new prime::ssf::ssf_compact )
#else
    :	fPackedData()
#endif
{
}

//-------------------------------------------------------------------------

void TestPackedData::testBasicType()
{
    ///==========================================================
    /// packing
    char	c1 = 1;
    fPackedData.add(c1);

    int		i1 = 2;
    fPackedData.add(i1);

    long	l1 = 3;
    fPackedData.add(l1);

    float	f1 = 4;
    fPackedData.add(f1);

    double	d1 = 5;
    fPackedData.add(d1);

    Time	t1 = 6;
    fPackedData.add(t1);
    
    long long	ll1 = 7;
    fPackedData.add(ll1);

    string	s1 = "test string";
    fPackedData.add(s1);

    ///==========================================================
    /// unpacking and testing
    char	c2;
    fPackedData.get(c2);
    CPPUNIT_ASSERT( c1==c2 );

    int		i2;
    fPackedData.get(i2);
    CPPUNIT_ASSERT( i1==i2 );
    
    long	l2;
    fPackedData.get(l2);
    CPPUNIT_ASSERT( l1==l2 );
    
    float	f2;
    fPackedData.get(f2);
    CPPUNIT_ASSERT( f1==f2 );	///< does == make sense here?
    
    double	d2;
    fPackedData.get(d2);
    CPPUNIT_ASSERT( d1==d2 );

    Time	t2;
    fPackedData.get(t2);
    CPPUNIT_ASSERT( t1==t2 );

    long long	ll2;
    fPackedData.get(ll2);
    CPPUNIT_ASSERT( ll1==ll2 );

    string	s2;
    fPackedData.get(s2);
    CPPUNIT_ASSERT( s1==s2 );

}
    
void TestPackedData::testContainerType()
{
    ///==========================================================
    /// packing

    vector<int>	vi1;	///< non-empty vector
	vi1.push_back(1);
	vi1.push_back(2);
    fPackedData.add(vi1);

    vector<float> vf1;	///< empty vector
    fPackedData.add(vf1);

    list<int> li1;	///< list
	li1.push_back(3);
    fPackedData.add(li1);    

    set<int> si1;	///< set
	si1.insert(4);
    fPackedData.add(si1);    

    map<int,float> mif1;	///< map
	mif1.insert(make_pair(4,3.141));
    fPackedData.add(mif1);    



    ///==========================================================
    /// unpacking and testing

    vector<int>	vi2;
    fPackedData.get(vi2);
    if( vi1!=vi2 )
    {
	cerr << vi1 << "\n" << vi2 << endl;
    }
    CPPUNIT_ASSERT( vi1==vi2 );
    
    vector<float> vf2;
    fPackedData.get(vf2);
    if( vf1!=vf2 )
    {
	cerr << vf1 << "\n" << vf2 << endl;
    }
    CPPUNIT_ASSERT( vf1==vf2 );

    list<int> li2;
    fPackedData.get(li2);
    if( li1!=li2 )
    {
	cerr << li1 << "\n" << li2 << endl;
    }
    CPPUNIT_ASSERT( li1==li2 );
    
    set<int> si2;
    fPackedData.get(si2);
    if( si1!=si2 )
    {
	cerr << si1 << "\n" << si2 << endl;
    }
    CPPUNIT_ASSERT( si1==si2 );
    
    map<int,float> mif2;
    fPackedData.get(mif2);
    if( mif1!=mif2 )
    {
	cerr << mif1 << "\n" << mif2 << endl;
    }
    CPPUNIT_ASSERT( mif1==mif2 );
}

} // namespace



