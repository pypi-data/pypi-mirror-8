[
{
    "pk": 1, 
    "model": "firmware.config", 
    "fields": {
        "version": "0.1", 
        "description": "Confine Firmware", 
        "image_name": "confine-firmware-%(node_name)s-%(arch)s.img.gz"
    }
},
{
    "pk": 1, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "id", 
        "value": "'%.4x' % node.id"
    }
},
{
    "pk": 2, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "local_ifname", 
        "value": "node.local_iface"
    }
},
{
    "pk": 3, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "mac_prefix16", 
        "value": "':'.join(re.findall('..', node.get_sliver_mac_prefix()[2:6]))"
    }
},
{
    "pk": 4, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "priv_ipv4_prefix24", 
        "value": "node.get_priv_ipv4_prefix().split('.0/24')[0]"
    }
},
{
    "pk": 5, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "public_ipv4_avail", 
        "value": "str(node.sliver_pub_ipv4_num)"
    }
},
{
    "pk": 6, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "rd_public_ipv4_proto", 
        "value": "'dhcp'"
    }
},
{
    "pk": 7, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "sl_public_ipv4_proto", 
        "value": "'dhcp'"
    }
},
{
    "pk": 8, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "rd_if_iso_parents", 
        "value": "' '.join(node.direct_ifaces.values_list('name', flat=True))"
    }
},
{
    "pk": 10, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "testbed testbed", 
        "config": 1, 
        "option": "mgmt_ipv6_prefix48", 
        "value": "MGMT_IPV6_PREFIX.split('::')[0]"
    }
},
{
    "pk": 13, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "tinc-net confine", 
        "config": 1, 
        "option": "enabled", 
        "value": "'1'"
    }
},
{
    "pk": 14, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "node node", 
        "config": 1, 
        "option": "state", 
        "value": "'prepared'"
    }
},
{
    "pk": 15, 
    "model": "firmware.configuci", 
    "fields": {
        "section": "server server", 
        "config": 1, 
        "option": "base_path", 
        "value": "'/api'"
    }
},
{
    "pk": 1, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": true, 
        "content": "self.config.render_uci(node, sections=['node node', 'server server', 'testbed testbed'])", 
        "mode": "", 
        "is_optional": false, 
        "path": "/etc/config/confine", 
        "config": 1
    }
},
{
    "pk": 2, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": true, 
        "content": "[ server.get_host(island=node.island) for server in node.tinc.connect_to ]", 
        "mode": "", 
        "is_optional": false, 
        "path": "[ \"/etc/tinc/confine/hosts/%s\" % server for server in node.tinc.connect_to ]", 
        "config": 1
    }
},
{
    "pk": 3, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 1, 
        "is_active": true, 
        "content": "node.tinc.generate_key(commit=True)", 
        "mode": "og-rw", 
        "is_optional": true, 
        "path": "/etc/tinc/confine/rsa_key.priv", 
        "config": 1
    }
},
{
    "pk": 4, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": true, 
        "content": "node.tinc.get_host()", 
        "mode": "", 
        "is_optional": false, 
        "path": "'/etc/tinc/confine/hosts/%s' % node.tinc.name", 
        "config": 1
    }
},
{
    "pk": 5, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": true, 
        "content": "node.tinc.get_config()", 
        "mode": "", 
        "is_optional": false, 
        "path": "/etc/tinc/confine/tinc.conf", 
        "config": 1
    }
},
{
    "pk": 6, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": false, 
        "content": "node.tinc.get_tinc_up()", 
        "mode": "+x", 
        "is_optional": false, 
        "path": "/etc/tinc/confine/tinc-up", 
        "config": 1
    }
},
{
    "pk": 7, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": false, 
        "content": "node.tinc.get_tinc_down()", 
        "mode": "+x", 
        "is_optional": false, 
        "path": "/etc/tinc/confine/tinc-down", 
        "config": 1
    }
},
{
    "pk": 8, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": false, 
        "content": "self.config.render_uci(node, sections=['tinc-net confine'])", 
        "mode": "", 
        "is_optional": false, 
        "path": "/etc/config/tinc", 
        "config": 1
    }
},
{
    "pk": 9, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": true, 
        "content": "node.generate_certificate(key=files[0].content, commit=True).strip()", 
        "mode": "", 
        "is_optional": true, 
        "path": "/etc/uhttpd.crt.pem", 
        "config": 1
    }
},
{
    "pk": 10, 
    "model": "firmware.configfile", 
    "fields": {
        "priority": 0, 
        "is_active": true, 
        "content": "files[0].content", 
        "mode": "og-rw", 
        "is_optional": true, 
        "path": "/etc/uhttpd.key.pem", 
        "config": 1
    }
},
{
    "pk": 1, 
    "model": "firmware.configfilehelptext", 
    "fields": {
        "help_text": "This file is the private key for the management overlay. \r\nNotice that the node public key will be automatically updated and your node may lose connectivity to the management network until the new image is installed.\r\n", 
        "config": 1, 
        "file": 3
    }
},
{
    "pk": 2, 
    "model": "firmware.configfilehelptext", 
    "fields": {
        "help_text": "This file contains the certificate for node authentication.\r\nPlease notice that this depends on the RSA keys generated for the tinc overlay, so you must also select the rsa_key.priv if you want a certificate. Also if there is any node.certificate it will be overwritten.", 
        "config": 1, 
        "file": 9
    }
},
{
    "pk": 3, 
    "model": "firmware.configfilehelptext", 
    "fields": {
        "help_text": "This file contains the node private key for uhttpd service.\r\nYou should also select /etc/tinc/confine/rsa_key.priv for generating this file.\r\n", 
        "config": 1, 
        "file": 10
    }
}
]
