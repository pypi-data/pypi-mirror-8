env:
  PATH: "${ROCK_PATH}/scripts:${ROCK_PATH}/bin:${ROCK_PATH}/venv/bin:${PATH}"
  PYTHONPATH: "${ROCK_PATH}:${PYTHONPATH}"
  ROCK_PIP_INSTALL: "install -r ./requirements.txt"
  ROCK_PIP_INSTALL_DEPLOYMENT: "--verbose install -r ./requirements.txt"
  ROCK_PYVENV: "./venv"
  ROCK_PYVENV_DEPLOYMENT: "./venv"

init: |
  if [[ "${ROCK_ARGS_HELP}" == "true" ]]; then
    echo 'Usage: rock --runtime=RUNTIME init [--force] [directory]'
    echo
    echo '  --help             show help message'
    echo '  --force            run init and overwrite existing files'
    exit
  fi

  export ROCK_PATH="${ROCK_ARG1:-${ROCK_PATH}}"

  if [[ ! -d "${ROCK_PATH}" ]]; then
    if [[ -e "${ROCK_PATH}" ]]; then
      die "${ROCK_PATH} exists and is not a directory"
    fi

    mkdir -p "${ROCK_PATH}"
  fi

  cd "${ROCK_PATH}"

  if [[ -n "$( ls -A )" && "${ROCK_ARGS_FORCE}" != "true" ]]; then
    die "${ROCK_PATH} is not empty (--force to run anyway)"
  fi

  cat << EOF > ./.rock.yml
  runtime: ${ROCK_RUNTIME}
  EOF

  cat << EOF > ./requirements.txt
  bottle
  EOF

  mkdir -p ./tests

build: |

  if [[ "${ROCK_ARGS_HELP}" == "true" ]]; then
    echo 'Usage: rock build [--deployment]'
    echo
    echo '  --help             show help message'
    echo '  --deployment       run build in deployment mode'
    exit
  fi

  if [[ "${ROCK_ARGS_DEPLOYMENT}" != "true" ]]; then
    if [[ ! -e "./venv/bin/python" ]]; then
      pyvenv ${ROCK_PYVENV}
      distribute-setup
      rm -f distribute-*.gz
      easy_install pip
    fi
    if [[ -f ./requirements.txt ]]; then
      pip ${ROCK_PIP_INSTALL}
    else
      warn 'no "requirements.txt" file found'
    fi
    if [[ "${ROCK_PIP_FREEZE}" != "false" ]]; then
      pip freeze > requirements.txt
    fi
  else
    if [[ ! -f ./requirements.txt ]]; then
      die 'no "requirements.txt" file found'
    fi
    if [[ ! -e ./venv/bin/python ]]; then
      pyvenv ${ROCK_PYVENV_DEPLOYMENT}
      distribute-setup
      rm -f distribute-*.gz
      easy_install --verbose pip
    fi
    pip ${ROCK_PIP_INSTALL_DEPLOYMENT}
  fi

test: |

  if [[ "${ROCK_ARGS_HELP}" == "true" ]]; then
    echo 'Usage: rock test'
    echo
    echo '  --help             show help message'
    exit
  fi

  python -m unittest discover ./tests

clean: |

  if [[ "${ROCK_ARGS_HELP}" == "true" ]]; then
    echo 'Usage: rock clean'
    echo
    echo '  --help             show help message'
    exit
  fi

  if [[ -d ./venv ]]; then
    rm -fr ./venv
  fi
