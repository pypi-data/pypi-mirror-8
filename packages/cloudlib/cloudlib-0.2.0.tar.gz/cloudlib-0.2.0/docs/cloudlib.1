.\" Man page generated from reStructuredText.
.
.TH "CLOUDLIB" "1" "April 26, 2014" "0.0.1" "cloudlib"
.SH NAME
cloudlib \- cloudlib Documentation
.
.nr rst2man-indent-level 0
.
.de1 rstReportMargin
\\$1 \\n[an-margin]
level \\n[rst2man-indent-level]
level margin: \\n[rst2man-indent\\n[rst2man-indent-level]]
-
\\n[rst2man-indent0]
\\n[rst2man-indent1]
\\n[rst2man-indent2]
..
.de1 INDENT
.\" .rstReportMargin pre:
. RS \\$1
. nr rst2man-indent\\n[rst2man-indent-level] \\n[an-margin]
. nr rst2man-indent-level +1
.\" .rstReportMargin post:
..
.de UNINDENT
. RE
.\" indent \\n[an-margin]
.\" old: \\n[rst2man-indent\\n[rst2man-indent-level]]
.nr rst2man-indent-level -1
.\" new: \\n[rst2man-indent\\n[rst2man-indent-level]]
.in \\n[rst2man-indent\\n[rst2man-indent-level]]u
..
.sp
Contents:
.SH CLOUDLIB PACKAGE
.SS Subpackages
.SS cloudlib.config_file package
.SS cloudlib.config_file.parse_ini module
.sp
Example Usage:
.sp
.nf
.ft C
>>> # In your shell create a file named .example.ini in your home folder
>>> # dd sections to the file IE:
>>> # [default]
>>> # key = value
.ft P
.fi
.sp
.nf
.ft C
>>> config = ConfigurationSetup(name=\(aqexample\(aq)
>>> default_args = config.config_args(section=\(aqdefault\(aq)
>>> print(default_args)
\&... {\(aqkey\(aq: \(aqvalue\(aq}
.ft P
.fi
.INDENT 0.0
.TP
.B class cloudlib.config_file.parse_ini.ConfigurationSetup(name, log_name=\(aqcloudlib.config_file.parse_ini\(aq)
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B check_perms(perms=\(aq0600, 0400\(aq)
Check and enforce the permissions of the config file.
.sp
Enforce permission on a provided configuration file. This will check
and see if the permission are set based on the permission octet as
set in the \fBperms\fP value. \fBperms\fP is a comma separated list
of acceptable perms in octal form. Defaults permissions to, 0600 and
0400.
.INDENT 7.0
.TP
.B Parameters
\fBperms\fP \-\- \fBstr\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B config_args(section=\(aqdefault\(aq)
Loop through the configuration file and set all of our values.
.INDENT 7.0
.TP
.B Note:
that anything can be set as a "section" in the argument file. If a
section does not exist an empty dict will be returned.
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
\fBsection\fP \-\- \fBstr\fP
.TP
.B Returns
\fBdict\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B load_config(path=None, home=False, ext=\(aqini\(aq)
Return the full path to a configuration file.
.sp
This will look for configuration files in the \fBfull_path\fP, in
the users home folder, or in a config directory in "/etc".  If you set
\fIhome=True\fP, the system will look for a "hidden" configuration file in
the executing users $HOME folder.
.INDENT 7.0
.TP
.B The precedence is as follows:
full_path/name.ini
/home/$USER/.name.ini
/etc/name/name.ini
.UNINDENT
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBpath\fP \-\- \fBstr\fP
.IP \(bu 2
\fBhome\fP \-\- \fBbol\fP
.IP \(bu 2
\fBext\fP \-\- \fBstr\fP
.UNINDENT
.TP
.B Returns
\fBstr\fP
.UNINDENT
.UNINDENT
.UNINDENT
.SS Module contents
.SS cloudlib.http package
.SS cloudlib.http.rest module
.sp
Example Usage:
.sp
.nf
.ft C
>>> make_req = MakeRequest()
>>> get_req = make_req.get(\(aqhttps://api.github.com/orgs/openstack\(aq)
.ft P
.fi
.INDENT 0.0
.TP
.B class cloudlib.http.rest.MakeRequest(config=None, log_name=\(aqcloudlib.http.rest\(aq)
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B delete(url, headers=None, kwargs=None)
Make a DELETE request.
.sp
To make a DELETE request pass, \fBurl\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- \fBstr\fP
.IP \(bu 2
\fBheaders\fP \-\- \fBdict\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B get(url, headers=None, kwargs=None)
Make a GET request.
.sp
To make a GET request pass, \fBurl\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- \fBstr\fP
.IP \(bu 2
\fBheaders\fP \-\- \fBdict\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B head(url, headers=None, kwargs=None)
Make a HEAD request.
.sp
To make a HEAD request pass, \fBurl\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- \fBstr\fP
.IP \(bu 2
\fBheaders\fP \-\- \fBdict\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B option(url, headers=None, kwargs=None)
Make a OPTION request.
.sp
To make a OPTION request pass, \fBurl\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- \fBstr\fP
.IP \(bu 2
\fBheaders\fP \-\- \fBdict\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B patch(url, headers=None, body=None, kwargs=None)
Make a PATCH request.
.sp
To make a PATCH request pass, \fBurl\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- \fBstr\fP
.IP \(bu 2
\fBheaders\fP \-\- \fBdict\fP
.IP \(bu 2
\fBbody\fP \-\- \fBobject\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B post(url, headers=None, body=None, kwargs=None)
Make a POST request.
.sp
To make a POST request pass, \fBurl\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- \fBstr\fP
.IP \(bu 2
\fBheaders\fP \-\- \fBdict\fP
.IP \(bu 2
\fBbody\fP \-\- \fBobject\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B put(url, headers=None, body=None, kwargs=None)
Make a PUT request.
.sp
To make a PUT request pass, \fBurl\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBurl\fP \-\- \fBstr\fP
.IP \(bu 2
\fBheaders\fP \-\- \fBdict\fP
.IP \(bu 2
\fBbody\fP \-\- \fBobject\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudlib.http.rest.html_encode(path)
Return an HTML encoded Path.
.INDENT 7.0
.TP
.B Parameters
\fBpath\fP \-\- \fBstr\fP
.TP
.B Returns
\fBstr\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudlib.http.rest.parse_url(url)
Return a clean URL. Remove the prefix for the Auth URL if Found.
.INDENT 7.0
.TP
.B Parameters
\fBurl\fP \-\- 
.TP
.B Return aurl
.UNINDENT
.UNINDENT
.SS Module contents
.SS cloudlib.logger package
.SS cloudlib.logger.logger module
.sp
Example Usage:
.sp
.nf
.ft C
>>> logger = LogSetup()
>>> logger.default_logger(name=\(aqtest_logger\(aq)
.ft P
.fi
.sp
.nf
.ft C
>>> # The following can be placed in any module that you like
>>> LOG = logging.getLogger(name=\(aqtest_logger\(aq)
>>> LOG.info(\(aqThis is a test message\(aq)
.ft P
.fi
.INDENT 0.0
.TP
.B class cloudlib.logger.logger.LogSetup(max_size=500, max_backup=5, debug_logging=False)
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B default_logger(name=\(aqcloudlib.logger.logger\(aq, enable_stream=False, enable_file=True)
Default Logger.
.sp
This is set to use a rotating File handler and a stream handler.
If you use this logger all logged output that is INFO and above will
be logged, unless debug_logging is set then everything is logged.
The logger will send the same data to a stdout as it does to the
specified log file.
.sp
You can disable the default handlers by setting either \fIenable_file\fP or
\fIenable_stream\fP to \fIFalse\fP
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBname\fP \-\- \fBstr\fP
.IP \(bu 2
\fBenable_stream\fP \-\- \fBbol\fP
.IP \(bu 2
\fBenable_file\fP \-\- \fBbol\fP
.UNINDENT
.TP
.B Returns
\fBobject\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B static return_logfile(filename, log_dir=\(aq/var/log\(aq)
Return a path for logging file.
.sp
If \fBlog_dir\fP exists and the userID is 0 the log file will be written
to the provided log directory. If the UserID is not 0 or log_dir does
not exist the log file will be written to the users home folder.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBfilename\fP \-\- \fBstr\fP
.IP \(bu 2
\fBlog_dir\fP \-\- \fBstr\fP
.UNINDENT
.TP
.B Returns
\fBstr\fP
.UNINDENT
.UNINDENT
.INDENT 7.0
.TP
.B set_handler(log, handler)
Set the logging level as well as the handlers.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBlog\fP \-\- \fBobject\fP
.IP \(bu 2
\fBhandler\fP \-\- \fBobject\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Module contents
.SS cloudlib.messaging package
.SS cloudlib.messaging.mail module
.sp
Example Usage:
.sp
.nf
.ft C
>>> config_dict = {
\&...     \(aqmail_url\(aq: \(aqsmtp.google.com\(aq,
\&...     \(aqmail_port\(aq: 587,
\&...     \(aqmail_key\(aq: \(aq/etc/ssl/mail.key\(aq,
\&...     \(aqmail_cert\(aq: \(aq/etc/ssl/mail.crt\(aq,
\&...     \(aqmail_username\(aq: \(aqUserName\(aq,
\&...     \(aqmail_password\(aq: \(aqPassW0rd\(aq
\&... }
.ft P
.fi
.sp
.nf
.ft C
>>> mail = Mailer(
\&...     config=config_dict,
\&... )
.ft P
.fi
.sp
.nf
.ft C
>>> mail.send(
\&...     send_to=\(aquser@somedomain.sufix\(aq,
\&...     from_who=\(aquser@someotherdomain.sufix\(aq,
\&...     message=\(aqthe quick brown fox jumped over the fence\(aq,
\&...     subject=\(aqSomething really interesting\(aq
\&... )
.ft P
.fi
.INDENT 0.0
.TP
.B class cloudlib.messaging.mail.Mailer(config, log_name=\(aqcloudlib.messaging.mail\(aq)
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B send(send_to, from_who, subject, message, reply_to=None)
Send Email.
.sp
To use this module pass in a message, send_to, from_who, and subject.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBsend_to\fP \-\- \fBstr\fP
.IP \(bu 2
\fBfrom_who\fP \-\- \fBstr\fP
.IP \(bu 2
\fBsubject\fP \-\- \fBstr\fP
.IP \(bu 2
\fBmessage\fP \-\- \fBstr\fP
.IP \(bu 2
\fBreply_to\fP \-\- \fBstr\fP
.UNINDENT
.UNINDENT
.UNINDENT
.UNINDENT
.SS Module contents
.SS cloudlib.tests package
.SS cloudlib.tests.test_config_file module
.INDENT 0.0
.TP
.B class cloudlib.tests.test_config_file.TestConfigFileIni(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B setUp()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_config_args_parse_default_section()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_config_args_parse_other_section()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_ext()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_find_config_fail()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_find_config_success()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_home()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_home_ext()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_not_found()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_path()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_path_ext()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_path_home_ext()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_path_strip_slash()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_perms()
.UNINDENT
.INDENT 7.0
.TP
.B test_sys_config_perms_fail()
.UNINDENT
.UNINDENT
.SS cloudlib.tests.test_http_rest module
.INDENT 0.0
.TP
.B class cloudlib.tests.test_http_rest.TestHttpMakeRequest(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B setUp()
.UNINDENT
.INDENT 7.0
.TP
.B test_custom_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_delete_request()
.UNINDENT
.INDENT 7.0
.TP
.B test_delete_request_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_delete_request_kwargs()
.UNINDENT
.INDENT 7.0
.TP
.B test_enable_debug()
.UNINDENT
.INDENT 7.0
.TP
.B test_get_request()
.UNINDENT
.INDENT 7.0
.TP
.B test_get_request_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_get_request_kwargs()
.UNINDENT
.INDENT 7.0
.TP
.B test_head_request()
.UNINDENT
.INDENT 7.0
.TP
.B test_head_request_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_head_request_kwargs()
.UNINDENT
.INDENT 7.0
.TP
.B test_html_encode_url()
.UNINDENT
.INDENT 7.0
.TP
.B test_option_request()
.UNINDENT
.INDENT 7.0
.TP
.B test_option_request_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_option_request_kwargs()
.UNINDENT
.INDENT 7.0
.TP
.B test_parse_url_double_slash_url()
.UNINDENT
.INDENT 7.0
.TP
.B test_parse_url_http_url()
.UNINDENT
.INDENT 7.0
.TP
.B test_parse_url_https_url()
.UNINDENT
.INDENT 7.0
.TP
.B test_patch_request()
.UNINDENT
.INDENT 7.0
.TP
.B test_patch_request_body()
.UNINDENT
.INDENT 7.0
.TP
.B test_patch_request_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_patch_request_kwargs()
.UNINDENT
.INDENT 7.0
.TP
.B test_post_request()
.UNINDENT
.INDENT 7.0
.TP
.B test_post_request_body()
.UNINDENT
.INDENT 7.0
.TP
.B test_post_request_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_post_request_kwargs()
.UNINDENT
.INDENT 7.0
.TP
.B test_put_request()
.UNINDENT
.INDENT 7.0
.TP
.B test_put_request_body()
.UNINDENT
.INDENT 7.0
.TP
.B test_put_request_headers()
.UNINDENT
.INDENT 7.0
.TP
.B test_put_request_kwargs()
.UNINDENT
.INDENT 7.0
.TP
.B test_report_error()
.UNINDENT
.INDENT 7.0
.TP
.B test_request_failure()
.UNINDENT
.INDENT 7.0
.TP
.B test_timeout_set()
.UNINDENT
.UNINDENT
.SS cloudlib.tests.test_logger_logger module
.INDENT 0.0
.TP
.B class cloudlib.tests.test_logger_logger.TestLogger(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B setUp()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_debug_logging()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_debug_logging_enabled()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_max_backup()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_max_size()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_override_backup()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_override_max_backup()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_override_max_size()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_return_logfile_not_root()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_return_logfile_not_root_new_log_dir()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_return_logfile_root()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_return_logfile_root_log_dir_not_found()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_return_logfile_root_new_log_dir()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.test_logger_logger.TestLoggerHandlers(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B setUp()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_default_logger()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_default_logger_new_formatter()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_enable_file()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_enable_stream()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_enable_stream_enable_file()
.UNINDENT
.INDENT 7.0
.TP
.B test_logger_set_handler()
.UNINDENT
.UNINDENT
.SS cloudlib.tests.test_messaging_mail module
.INDENT 0.0
.TP
.B class cloudlib.tests.test_messaging_mail.TestMessagingMail(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B setUp()
.UNINDENT
.INDENT 7.0
.TP
.B test_no_config()
.UNINDENT
.INDENT 7.0
.TP
.B test_no_missing_port()
.UNINDENT
.INDENT 7.0
.TP
.B test_no_missing_url()
.UNINDENT
.INDENT 7.0
.TP
.B test_no_missing_values()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_debug()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_login()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_login_debug()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_login_debug_ssl()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_login_ssl()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_send()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_send_reply()
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.test_messaging_mail.TestMessagingMailException(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B setUp()
.UNINDENT
.INDENT 7.0
.TP
.B test_smtp_send_exception()
.UNINDENT
.UNINDENT
.SS cloudlib.tests.test_utils_basic module
.INDENT 0.0
.TP
.B class cloudlib.tests.test_utils_basic.TestBasicUtils(methodName=\(aqrunTest\(aq)
Bases: \fBunittest.case.TestCase\fP
.INDENT 7.0
.TP
.B test_ensure_dict_update()
.UNINDENT
.INDENT 7.0
.TP
.B test_ensure_string_str()
.UNINDENT
.INDENT 7.0
.TP
.B test_ensure_string_unicode()
.UNINDENT
.INDENT 7.0
.TP
.B test_is_int_is_int()
.UNINDENT
.INDENT 7.0
.TP
.B test_is_int_is_str()
.UNINDENT
.UNINDENT
.SS Module contents
.INDENT 0.0
.TP
.B class cloudlib.tests.FakeHttp
Bases: \fBobject\fP
.sp
Setup a FAKE http request.
.INDENT 7.0
.TP
.B delete(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B get(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B head(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B option(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B patch(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B post(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B put(*args, **kwargs)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.FakeHttpResponse(*args, **kwargs)
Bases: \fBobject\fP
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.FakeSmtp(url, port)
Bases: \fBobject\fP
.sp
Setup a FAKE SMTP request.
.INDENT 7.0
.TP
.B login(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B quit(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B sendmail(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B set_debuglevel(*args, **kwargs)
.UNINDENT
.INDENT 7.0
.TP
.B starttls(key=None, cert=None)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.Handlers(filename=None, maxBytes=None, backupCount=None)
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B setFormatter(*args)
.UNINDENT
.INDENT 7.0
.TP
.B setLevel(*args)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.Logger(name=None)
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B addHandler(*args)
.UNINDENT
.INDENT 7.0
.TP
.B setLevel(*args)
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.ParseResult
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B fragment = \(aq\(aq
.UNINDENT
.INDENT 7.0
.TP
.B netloc = \(aqTEST.url\(aq
.UNINDENT
.INDENT 7.0
.TP
.B params = \(aq\(aq
.UNINDENT
.INDENT 7.0
.TP
.B path = \(aq/v2.0/tokens\(aq
.UNINDENT
.INDENT 7.0
.TP
.B query = \(aq\(aq
.UNINDENT
.INDENT 7.0
.TP
.B scheme = \(aqhttps\(aq
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B class cloudlib.tests.StatResult
Bases: \fBobject\fP
.INDENT 7.0
.TP
.B st_atime = 1396506114
.UNINDENT
.INDENT 7.0
.TP
.B st_ctime = 1396506114
.UNINDENT
.INDENT 7.0
.TP
.B st_dev = 16777220L
.UNINDENT
.INDENT 7.0
.TP
.B st_gid = 100
.UNINDENT
.INDENT 7.0
.TP
.B st_ino = 1698903
.UNINDENT
.INDENT 7.0
.TP
.B st_mode = 33152
.UNINDENT
.INDENT 7.0
.TP
.B st_mtime = 1396506114
.UNINDENT
.INDENT 7.0
.TP
.B st_nlink = 1
.UNINDENT
.INDENT 7.0
.TP
.B st_size = 2230944256
.UNINDENT
.INDENT 7.0
.TP
.B st_uid = 100
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudlib.tests.returnstring(fmt=None, datefmt=None)
.UNINDENT
.INDENT 0.0
.TP
.B cloudlib.tests.test_Exception_exception()
Raise Exception exception.
.UNINDENT
.SS cloudlib.utils package
.SS cloudlib.utils.basic module
.INDENT 0.0
.TP
.B cloudlib.utils.basic.dict_update(base_dict, update_dict)
Return a dictionary of arguments to be used with requests.
.sp
If \fBkwargs\fP is a dictionary it will be used to update the \(ga
\fIrequest_args\(ga\fP which is then returned.
.INDENT 7.0
.TP
.B Parameters
.INDENT 7.0
.IP \(bu 2
\fBrequest_kwargs\fP \-\- \fBdict\fP
.IP \(bu 2
\fBkwargs\fP \-\- \fBdict\fP
.UNINDENT
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudlib.utils.basic.ensure_string(obj)
Return String and if Unicode convert to string.
.INDENT 7.0
.TP
.B Parameters
\fBobj\fP \-\- \fBstr\fP || \fBunicode\fP
.TP
.B Returns
\fBstr\fP
.UNINDENT
.UNINDENT
.INDENT 0.0
.TP
.B cloudlib.utils.basic.is_int(value)
Return value as int if the value can be an int.
.INDENT 7.0
.TP
.B Parameters
\fBvalue\fP \-\- \fBstr\fP
.TP
.B Returns
\fBint\fP || \fBstr\fP
.UNINDENT
.UNINDENT
.SS Module contents
.SS cloudlib.info module
.SS Module contents
.INDENT 0.0
.TP
.B exception cloudlib.MessageFailure
Bases: \fBexceptions.Exception\fP
.sp
Raise this exception when an application fails processing a message.
.UNINDENT
.INDENT 0.0
.TP
.B exception cloudlib.MissingConfig
Bases: \fBexceptions.Exception\fP
.sp
Raise this exception when the config variable is required.
.UNINDENT
.INDENT 0.0
.TP
.B exception cloudlib.MissingConfigValue
Bases: \fBexceptions.Exception\fP
.sp
Raise this exception when the config a value is required.
.UNINDENT
.INDENT 0.0
.IP \(bu 2
\fIgenindex\fP
.IP \(bu 2
\fImodindex\fP
.IP \(bu 2
\fIsearch\fP
.UNINDENT
.SH AUTHOR
Kevin Carter
.SH COPYRIGHT
2014, Kevin Carter
.\" Generated by docutils manpage writer.
.
