{
  "SDL_GetPerformanceFrequency": "\nGet the count per second of the high resolution counter.\n", 
  "SDL_SetWindowTitle": "\nSet the title of a window, in UTF-8 format.\n\nSee also SDL_GetWindowTitle()\n", 
  "SDL_SetSurfaceRLE": "\nSets the RLE acceleration hint for a surface.\n\n:return: 0 on success, or -1 if the surface is not valid\n\nIf RLE is enabled, colorkey and alpha blending blits are much faster,\nbut the surface must be locked before directly accessing the pixels.\n", 
  "SDL_HapticRumbleStop": "\nStops the simple rumble on a haptic device.\n\n:param haptic: Haptic to stop the rumble on.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticRumbleSupported\n", 
  "SDL_SetTextureAlphaMod": "\nSet an additional alpha value used in render copy operations.\n\n:param texture: The texture to update.\n:param alpha: The alpha value multiplied into copy operations.\n:return: 0 on success, or -1 if the texture is not valid or alpha\n    modulation is not supported.\n\nSee also SDL_GetTextureAlphaMod()\n", 
  "SDL_UnionRect": "\nCalculate the union of two rectangles.\n", 
  "SDL_JoystickNumBalls": "\nGet the number of trackballs on a joystick.\n\nJoystick trackballs have only relative motion events associated with\nthem and their state cannot be polled.\n", 
  "SDL_GetSystemRAM": "\nThis function returns the amount of RAM configured in the system, in\nMB.\n", 
  "SDL_IsGameController": "\nIs the joystick on this index supported by the game controller\ninterface?\n", 
  "SDL_CreateTexture": "\nCreate a texture for a rendering context.\n\n:param renderer: The renderer.\n:param format: The format of the texture.\n:param access: One of the enumerated values in SDL_TextureAccess.\n:param w: The width of the texture in pixels.\n:param h: The height of the texture in pixels.\n:return: The created texture is returned, or 0 if no rendering context\n    was active, the format was unsupported, or the width or height\n    were out of range.\n\nSee also SDL_QueryTexture()\n", 
  "SDL_GetMouseState": "\nRetrieve the current state of the mouse.\n\nThe current button state is returned as a button bitmask, which can be\ntested using the SDL_BUTTON(X) macros, and x and y are set to the\nmouse cursor position relative to the focus window for the currently\nselected mouse. You can pass NULL for either x or y.\n", 
  "SDL_ShowCursor": "\nToggle whether or not the cursor is shown.\n\n:param toggle: 1 to show the cursor, 0 to hide it, -1 to query the\n    current state.\n:return: 1 if the cursor is shown, or 0 if the cursor is hidden.\n", 
  "SDLTest_Crc32Init": "\n/brief Initialize the CRC context\n\nNote: The function initializes the crc table required for all crc\ncalculations.\n\n/param crcContext pointer to context variable\n\n/returns 0 for OK, -1 on error\n", 
  "SDLTest_RandomSint8": "\nReturns a random Sint8\n\n:return: Generated signed integer\n", 
  "SDL_DestroyCond": "\nDestroy a condition variable.\n", 
  "SDL_MixAudioFormat": "\nThis works like SDL_MixAudio(), but you specify the audio format\ninstead of using the format of audio device 1. Thus it can be used\nwhen no audio device is open at all.\n", 
  "SDL_GL_GetSwapInterval": "\nGet the swap interval for the current OpenGL context.\n\n:return: 0 if there is no vertical retrace synchronization, 1 if the\n    buffer swap is synchronized with the vertical retrace, and -1 if\n    late swaps happen immediately instead of waiting for the next\n    retrace. If the system can't determine the swap interval, or there\n    isn't a valid current context, this will return 0 as a safe\n    default.\n\nSee also SDL_GL_SetSwapInterval()\n", 
  "SDL_LogSetOutputFunction": "\nThis function allows you to replace the default log output function\nwith one of your own.\n", 
  "SDL_GetMouseFocus": "\nGet the window which currently has mouse focus.\n", 
  "SDL_CreateSoftwareRenderer": "\nCreate a 2D software rendering context for a surface.\n\n:param surface: The surface where rendering is done.\n:return: A valid rendering context or NULL if there was an error.\n\nSee also SDL_CreateRenderer()\n", 
  "SDL_RenderSetClipRect": "\nSet the clip rectangle for the current target.\n\n:param renderer: The renderer for which clip rectangle should be set.\n:param rect: A pointer to the rectangle to set as the clip rectangle,\n    or NULL to disable clipping.\n:return: 0 on success, or -1 on error\n\nSee also SDL_RenderGetClipRect()\n", 
  "SDL_GetCurrentVideoDriver": "\nReturns the name of the currently initialized video driver.\n\n:return: The name of the current video driver or NULL if no driver has\n    been initialized\n\nSee also SDL_GetNumVideoDrivers()\n", 
  "SDLTest_Md5Init": "\n/brief initialize the context\n\n/param mdContext pointer to context variable\n\nNote: The function initializes the message-digest context mdContext.\nCall before each new use of the context - all fields are set to zero.\n", 
  "SDL_FreeWAV": "\nThis function frees data previously allocated with SDL_LoadWAV_RW()\n", 
  "SDL_CreateCursor": "\nCreate a cursor, using the specified bitmap data and mask (in MSB\nformat).\n\nThe cursor width must be a multiple of 8 bits.\n\nThe cursor is created in black and white according to the following:\ndata\n\nmask\n\nresulting pixel on screen\n\n0\n\n1\n\nWhite\n\n1\n\n1\n\nBlack\n\n0\n\n0\n\nTransparent\n\n1\n\n0\n\nInverted color if possible, black if not.\n\nSee also SDL_FreeCursor()\n", 
  "SDL_RenderTargetSupported": "\nDetermines whether a window supports the use of render targets.\n\n:param renderer: The renderer that will be checked\n:return: SDL_TRUE if supported, SDL_FALSE if not.\n", 
  "SDL_GetScancodeFromKey": "\nGet the scancode corresponding to the given key code according to the\ncurrent keyboard layout.\n\nSee SDL_Scancode for details.\n\nSee also SDL_GetScancodeName()\n", 
  "SDL_TLSGet": "\nGet the value associated with a thread local storage ID for the\ncurrent thread.\n\n:param id: The thread local storage ID\n:return: The value associated with the ID for the current thread, or\n    NULL if no value has been set.\n\nSee also SDL_TLSCreate()\n", 
  "SDL_SetTextInputRect": "\nSet the rectangle used to type Unicode text inputs. This is used as a\nhint for IME and on-screen keyboard placement.\n\nSee also SDL_StartTextInput()\n", 
  "SDL_VideoQuit": "\nShuts down the video subsystem.\n\nThis function closes all windows, and restores the original video\nmode.\n\nSee also SDL_VideoInit()\n", 
  "SDL_SetSurfaceBlendMode": "\nSet the blend mode used for blit operations.\n\n:param surface: The surface to update.\n:param blendMode: SDL_BlendMode to use for blit blending.\n:return: 0 on success, or -1 if the parameters are not valid.\n\nSee also SDL_GetSurfaceBlendMode()\n", 
  "SDL_ShowMessageBox": "\nCreate a modal message box.\n\n:param messageboxdata: The SDL_MessageBoxData structure with title,\n    text, etc.\n:param buttonid: The pointer to which user id of hit button should be\n    copied.\n:return: -1 on error, otherwise 0 and buttonid contains user id of\n    button hit or -1 if dialog was closed.\n\nThis function should be called on the thread that created the parent\nwindow, or on the main thread if the messagebox has no parent. It will\nblock execution of that thread until the user clicks a button or\ncloses the messagebox.\n", 
  "SDL_HideWindow": "\nHide a window.\n\nSee also SDL_ShowWindow()\n", 
  "SDL_GetRenderDrawColor": "\nGet the color used for drawing operations (Rect, Line and Clear).\n\n:param renderer: The renderer from which drawing color should be\n    queried.\n:param r: A pointer to the red value used to draw on the rendering\n    target.\n:param g: A pointer to the green value used to draw on the rendering\n    target.\n:param b: A pointer to the blue value used to draw on the rendering\n    target.\n:param a: A pointer to the alpha value used to draw on the rendering\n    target, usually SDL_ALPHA_OPAQUE (255).\n:return: 0 on success, or -1 on error\n", 
  "SDL_SetWindowData": "\nAssociate an arbitrary named pointer with a window.\n\n:param window: The window to associate with the pointer.\n:param name: The name of the pointer.\n:param userdata: The associated pointer.\n:return: The previous value associated with 'name'\n\nThe name is case-sensitive.\n\nSee also SDL_GetWindowData()\n", 
  "SDL_LogResetPriorities": "\nReset all priorities to default.\n\nThis is called in SDL_Quit().\n", 
  "SDL_GetDefaultCursor": "\nReturn the default cursor.\n", 
  "SDL_SetWindowSize": "\nSet the size of a window's client area.\n\n:param window: The window to resize.\n:param w: The width of the window, must be >0\n:param h: The height of the window, must be >0\n\nYou can't change the size of a fullscreen window, it automatically\nmatches the size of the display mode.\n\nSee also SDL_GetWindowSize()\n", 
  "SDL_GetWindowTitle": "\nGet the title of a window, in UTF-8 format.\n\nSee also SDL_SetWindowTitle()\n", 
  "SDL_GetWindowWMInfo": "\nThis function allows access to driver-dependent window information.\n\n:param window: The window about which information is being requested\n:param info: This structure must be initialized with the SDL version,\n    and is then filled in with information about the given window.\n:return: SDL_TRUE if the function is implemented and the version\n    member of the\n\nYou typically use this function like this: ::\n\n   SDL_SysWMinfo info;\n   SDL_VERSION(&info.version);\n   if ( SDL_GetWindowWMInfo(window, &info) ) { ... }\n   \n", 
  "SDL_FillRect": "\nPerforms a fast fill of the given rectangle with color.\n\nIf rect is NULL, the whole surface will be filled with color.\n\nThe color should be a pixel of the format used by the surface, and can\nbe generated by the SDL_MapRGB() function.\n\n:return: 0 on success, or -1 on error.\n", 
  "SDL_RenderSetLogicalSize": "\nSet device independent resolution for rendering.\n\n:param renderer: The renderer for which resolution should be set.\n:param w: The width of the logical resolution\n:param h: The height of the logical resolution\n\nThis function uses the viewport and scaling functionality to allow a\nfixed logical resolution for rendering, regardless of the actual\noutput resolution. If the actual output resolution doesn't have the\nsame aspect ratio the output rendering will be centered within the\noutput display.\n\nIf the output display is a window, mouse events in the window will be\nfiltered and scaled so they seem to arrive within the logical\nresolution.\n\nIf this function results in scaling or subpixel drawing by the\nrendering backend, it will be handled using the appropriate quality\nhints.\n\nSee also SDL_RenderGetLogicalSize()\n", 
  "SDL_LoadFunction": "\nGiven an object handle, this function looks up the address of the\nnamed function in the shared object and returns it. This address is no\nlonger valid after calling SDL_UnloadObject().\n", 
  "SDL_GetNumAudioDevices": "\nGet the number of available devices exposed by the current driver.\nOnly valid after a successfully initializing the audio subsystem.\nReturns -1 if an explicit list of devices can't be determined; this is\nnot an error. For example, if SDL is set up to talk to a remote audio\nserver, it can't list every one available on the Internet, but it will\nstill allow a specific host to be specified to SDL_OpenAudioDevice().\n\nIn many common cases, when this function returns a value <= 0, it can\nstill successfully open the default device (NULL for first argument of\nSDL_OpenAudioDevice()).\n", 
  "SDL_GL_CreateContext": "\nCreate an OpenGL context for use with an OpenGL window, and make it\ncurrent.\n\nSee also SDL_GL_DeleteContext()\n", 
  "SDL_HapticGetEffectStatus": "\nGets the status of the current effect on the haptic device.\n\nDevice must support the SDL_HAPTIC_STATUS feature.\n\n:param haptic: Haptic device to query the effect status on.\n:param effect: Identifier of the effect to query its status.\n:return: 0 if it isn't playing, 1 if it is playing or -1 on error.\n\nSee also SDL_HapticRunEffect\n", 
  "SDL_RenderFillRect": "\nFill a rectangle on the current rendering target with the drawing\ncolor.\n\n:param renderer: The renderer which should fill a rectangle.\n:param rect: A pointer to the destination rectangle, or NULL for the\n    entire rendering target.\n:return: 0 on success, or -1 on error\n", 
  "SDL_HapticNewEffect": "\nCreates a new haptic effect on the device.\n\n:param haptic: Haptic device to create the effect on.\n:param effect: Properties of the effect to create.\n:return: The id of the effect on success or -1 on error.\n\nSee also SDL_HapticUpdateEffect\n", 
  "SDL_GetThreadID": "\nGet the thread identifier for the specified thread.\n\nEquivalent to SDL_ThreadID() if the specified thread is NULL.\n", 
  "SDL_GetCPUCacheLineSize": "\nThis function returns the L1 cache line size of the CPU\n\nThis is useful for determining multi-threaded structure padding or\nSIMD prefetch sizes.\n", 
  "SDL_LogWarn": "\nLog a message with SDL_LOG_PRIORITY_WARN.\n", 
  "SDL_SetWindowDisplayMode": "\nSet the display mode used when a fullscreen window is visible.\n\nBy default the window's dimensions and the desktop format and refresh\nrate are used.\n\n:param window: The window for which the display mode should be set.\n:param mode: The mode to use, or NULL for the default mode.\n:return: 0 on success, or -1 if setting the display mode failed.\n\nSee also SDL_GetWindowDisplayMode()\n", 
  "SDL_GetTicks": "\nGet the number of milliseconds since the SDL library initialization.\n\nThis value wraps if the program runs for more than ~49 days.\n", 
  "SDL_AddEventWatch": "\nAdd a function which is called when an event is added to the queue.\n", 
  "SDL_LogError": "\nLog a message with SDL_LOG_PRIORITY_ERROR.\n", 
  "SDL_DetachThread": "\nA thread may be \"detached\" to signify that it should not remain until\nanother thread has called SDL_WaitThread() on it. Detaching a thread\nis useful for long-running threads that nothing needs to synchronize\nwith or further manage. When a detached thread is done, it simply goes\naway.\n\nThere is no way to recover the return code of a detached thread. If\nyou need this, don't detach the thread and instead use\nSDL_WaitThread().\n\nOnce a thread is detached, you should usually assume the SDL_Thread\nisn't safe to reference again, as it will become invalid immediately\nupon the detached thread's exit, instead of remaining until someone\nhas called SDL_WaitThread() to finally clean it up. As such, don't\ndetach the same thread more than once.\n\nIf a thread has already exited when passed to SDL_DetachThread(), it\nwill stop waiting for a call to SDL_WaitThread() and clean up\nimmediately. It is not safe to detach a thread that might be used with\nSDL_WaitThread().\n\nYou may not call SDL_WaitThread() on a thread that has been detached.\nUse either that function or this one, but not both, or behavior is\nundefined.\n\nIt is safe to pass NULL to this function; it is a no-op.\n", 
  "SDL_DestroyMutex": "\nDestroy a mutex.\n", 
  "SDL_GetWindowDisplayMode": "\nFill in information about the display mode used when a fullscreen\nwindow is visible.\n\nSee also SDL_SetWindowDisplayMode()\n", 
  "SDL_GetRenderDrawBlendMode": "\nGet the blend mode used for drawing operations.\n\n:param renderer: The renderer from which blend mode should be queried.\n:param blendMode: A pointer filled in with the current blend mode.\n:return: 0 on success, or -1 on error\n\nSee also SDL_SetRenderDrawBlendMode()\n", 
  "SDL_GameControllerGetStringForButton": "\nturn this button enum into a string mapping\n", 
  "SDL_ConvertSurface": "\nCreates a new surface of the specified format, and then copies and\nmaps the given surface to it so the blit of the converted surface will\nbe as fast as possible. If this function fails, it returns NULL.\n\nThe flags parameter is passed to SDL_CreateRGBSurface() and has those\nsemantics. You can also pass SDL_RLEACCEL in the flags parameter and\nSDL will try to RLE accelerate colorkey and alpha blits in the\nresulting surface.\n", 
  "SDL_GetPixelFormatName": "\nGet the human readable name of a pixel format.\n", 
  "SDL_SemWait": "\nThis function suspends the calling thread until the semaphore pointed\nto by sem has a positive count. It then atomically decreases the\nsemaphore count.\n", 
  "SDL_StartTextInput": "\nStart accepting Unicode text input events. This function will show the\non-screen keyboard if supported.\n\nSee also SDL_StopTextInput()\n", 
  "SDL_LockSurface": "\nSets up a surface for directly accessing the pixels.\n\nBetween calls to SDL_LockSurface() / SDL_UnlockSurface(), you can\nwrite to and read from surface->pixels, using the pixel format stored\nin surface->format. Once you are done accessing the surface, you\nshould use SDL_UnlockSurface() to release it.\n\nNot all surfaces require locking. If SDL_MUSTLOCK(surface) evaluates\nto 0, then you can read and write to the surface at any time, and the\npixel format of the surface will not change.\n\nNo operating system or library calls should be made between\nlock/unlock pairs, as critical system locks may be held during this\ntime.\n\nSDL_LockSurface() returns 0, or -1 if the surface couldn't be locked.\n\nSee also SDL_UnlockSurface()\n", 
  "SDL_EnclosePoints": "\nCalculate a minimal rectangle enclosing a set of points.\n\n:return: SDL_TRUE if any points were within the clipping rect\n", 
  "SDL_AtomicUnlock": "\nUnlock a spin lock by setting it to 0. Always returns immediately.\n\n:param lock: Points to the lock.\n", 
  "SDL_HapticOpenFromMouse": "\nTries to open a haptic device from the current mouse.\n\n:return: The haptic device identifier or NULL on error.\n\nSee also SDL_MouseIsHaptic\n", 
  "SDL_GetShapedWindowMode": "\nGet the shape parameters of a shaped window.\n\n:param window: The shaped window whose parameters should be retrieved.\n:param shape_mode: An empty shape-mode structure to fill, or NULL to\n    check whether the window has a shape.\n:return: 0 if the window has a shape and, provided shape_mode was not\n    NULL, shape_mode has been filled with the mode data,\n    SDL_NONSHAPEABLE_WINDOW if the SDL_Window given is not a shaped\n    window, or SDL_WINDOW_LACKS_SHAPE if the SDL_Window* given is a\n    shapeable window currently lacking a shape.\n\nSee also SDL_WindowShapeMode\n", 
  "SDL_JoystickGetBall": "\nGet the ball axis change since the last poll.\n\n:return: 0, or -1 if you passed it invalid parameters.\n\nThe ball indices start at index 0.\n", 
  "SDL_GetAssertionHandler": "\nGet the current assertion handler.\n\nThis returns the function pointer that is called when an assertion is\ntriggered. This is either the value last passed to\nSDL_SetAssertionHandler(), or if no application-specified function is\nset, is equivalent to calling SDL_GetDefaultAssertionHandler().\n\n:param puserdata: Pointer to a void*, which will store the \"userdata\"\n    pointer that was passed to SDL_SetAssertionHandler(). This value\n    will always be NULL for the default handler. If you don't care\n    about this data, it is safe to pass a NULL pointer to this\n    function to ignore it.\n:return: The SDL_AssertionHandler that is called when an assert\n    triggers.\n", 
  "SDLTest_RandomSint16": "\nReturns a random Sint16\n\n:return: Generated signed integer\n", 
  "SDL_GetScancodeName": "\nGet a human-readable name for a scancode.\n\n:return: A pointer to the name for the scancode. If the scancode\n    doesn't have a name, this function returns an empty string (\"\").\n\nSee also SDL_Scancode\n", 
  "SDL_UpperBlitScaled": "\nThis is the public scaled blit function, SDL_BlitScaled(), and it\nperforms rectangle validation and clipping before passing it to\nSDL_LowerBlitScaled()\n", 
  "SDL_LogGetOutputFunction": "\nGet the current log output function.\n", 
  "SDL_GameControllerEventState": "\nEnable/disable controller event polling.\n\nIf controller events are disabled, you must call\nSDL_GameControllerUpdate() yourself and check the state of the\ncontroller when you want controller information.\n\nThe state can be one of SDL_QUERY, SDL_ENABLE or SDL_IGNORE.\n", 
  "SDL_CreateThread": "\nCreate a thread.\n", 
  "SDL_OpenAudioDevice": "\nOpen a specific audio device. Passing in a device name of NULL\nrequests the most reasonable default (and is equivalent to calling\nSDL_OpenAudio()).\n\nThe device name is a UTF-8 string reported by\nSDL_GetAudioDeviceName(), but some drivers allow arbitrary and driver-\nspecific strings, such as a hostname/IP address for a remote audio\nserver, or a filename in the diskaudio driver.\n\n:return: 0 on error, a valid device ID that is >= 2 on success.\n\nSDL_OpenAudio(), unlike this function, always acts on device ID 1.\n", 
  "SDL_EnableScreenSaver": "\nAllow the screen to be blanked by a screensaver.\n\nSee also SDL_IsScreenSaverEnabled()\n", 
  "SDL_GetNumVideoDisplays": "\nReturns the number of available video displays.\n\nSee also SDL_GetDisplayBounds()\n", 
  "SDL_RenderClear": "\nClear the current rendering target with the drawing color.\n\nThis function clears the entire rendering target, ignoring the\nviewport.\n\n:return: 0 on success, or -1 on error\n", 
  "SDL_GetDefaultAssertionHandler": "\nGet the default assertion handler.\n\nThis returns the function pointer that is called by default when an\nassertion is triggered. This is an internal function provided by SDL,\nthat is used for assertions when SDL_SetAssertionHandler() hasn't been\nused to provide a different function.\n\n:return: The default SDL_AssertionHandler that is called when an\n    assert triggers.\n", 
  "SDL_HapticOpen": "\nOpens a Haptic device for usage.\n\nThe index passed as an argument refers to the N'th Haptic device on\nthis system.\n\nWhen opening a haptic device, its gain will be set to maximum and\nautocenter will be disabled. To modify these values use\nSDL_HapticSetGain() and SDL_HapticSetAutocenter().\n\n:param device_index: Index of the device to open.\n:return: Device identifier or NULL on error.\n\nSee also SDL_HapticIndex\n", 
  "SDL_GetKeyboardFocus": "\nGet the window which currently has keyboard focus.\n", 
  "SDLTest_Random": "\nInitialize random number generator based on current system time.\n\nNote: ...RandomInit() or ...RandomInitTime() must have been called\nbefore using this function.\n\n:param rndContext: pointer to context structure\n:return: A random number (32bit unsigned integer)\n", 
  "SDL_HasSSE3": "\nThis function returns true if the CPU has SSE3 features.\n", 
  "SDL_CreateRenderer": "\nCreate a 2D rendering context for a window.\n\n:param window: The window where rendering is displayed.\n:param index: The index of the rendering driver to initialize, or -1\n    to initialize the first one supporting the requested flags.\n:param flags: SDL_RendererFlags.\n:return: A valid rendering context or NULL if there was an error.\n\nSee also SDL_CreateSoftwareRenderer()\n", 
  "SDL_LoadBMP_RW": "\nLoad a surface from a seekable SDL data stream (memory or file).\n\nIf freesrc is non-zero, the stream will be closed after being read.\n\nThe new surface should be freed with SDL_FreeSurface().\n\n:return: the new surface, or NULL if there was an error.\n", 
  "SDL_HapticNumEffectsPlaying": "\nReturns the number of effects a haptic device can play at the same\ntime.\n\nThis is not supported on all platforms, but will always return a\nvalue. Added here for the sake of completeness.\n\n:param haptic: The haptic device to query maximum playing effects.\n:return: The number of effects the haptic device can play at the same\n    time or -1 on error.\n\nSee also SDL_HapticNumEffects\n", 
  "SDL_HapticEffectSupported": "\nChecks to see if effect is supported by haptic.\n\n:param haptic: Haptic device to check on.\n:param effect: Effect to check to see if it is supported.\n:return: SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1\n    on error.\n\nSee also SDL_HapticQuery\n", 
  "SDL_JoystickNumButtons": "\nGet the number of buttons on a joystick.\n", 
  "SDL_UpdateTexture": "\nUpdate the given texture rectangle with new pixel data.\n\n:param texture: The texture to update\n:param rect: A pointer to the rectangle of pixels to update, or NULL\n    to update the entire texture.\n:param pixels: The raw pixel data.\n:param pitch: The number of bytes between rows of pixel data.\n:return: 0 on success, or -1 if the texture is not valid.\n\nThis is a fairly slow function.\n", 
  "SDL_GetPowerInfo": "\nGet the current power supply details.\n\n:param secs: Seconds of battery life left. You can pass a NULL here if\n    you don't care. Will return -1 if we can't determine a value, or\n    we're not running on a battery.\n:param pct: Percentage of battery life left, between 0 and 100. You\n    can pass a NULL here if you don't care. Will return -1 if we can't\n    determine a value, or we're not running on a battery.\n:return: The state of the battery (if any).\n", 
  "SDL_CondBroadcast": "\nRestart all threads that are waiting on the condition variable.\n\n:return: 0 or -1 on error.\n", 
  "SDL_GameControllerGetButton": "\nGet the current state of a button on a game controller.\n\nThe button indices start at index 0.\n", 
  "SDL_GameControllerGetAxis": "\nGet the current state of an axis control on a game controller.\n\nThe state is a value ranging from -32768 to 32767.\n\nThe axis indices start at index 0.\n", 
  "SDL_GetScancodeFromName": "\nGet a scancode from a human-readable name.\n\n:return: scancode, or SDL_SCANCODE_UNKNOWN if the name wasn't\n    recognized\n\nSee also SDL_Scancode\n", 
  "SDL_GameControllerGetBindForAxis": "\nGet the SDL joystick layer binding for this controller button mapping\n", 
  "SDLTest_RandomUint64": "\nReturns random Uint64.\n\n:return: Generated integer\n", 
  "SDL_RenderGetScale": "\nGet the drawing scale for the current target.\n\n:param renderer: The renderer from which drawing scale should be\n    queried.\n:param scaleX: A pointer filled in with the horizontal scaling factor\n:param scaleY: A pointer filled in with the vertical scaling factor\n\nSee also SDL_RenderSetScale()\n", 
  "SDL_LogMessage": "\nLog a message with the specified category and priority.\n", 
  "SDL_LogCritical": "\nLog a message with SDL_LOG_PRIORITY_CRITICAL.\n", 
  "SDL_SoftStretch": "\nPerform a fast, low quality, stretch blit between two surfaces of the\nsame pixel format.\n\nThis function uses a static buffer, and is not thread-safe.\n", 
  "SDL_GetRenderTarget": "\nGet the current render target or NULL for the default render target.\n\n:return: The current render target\n\nSee also SDL_SetRenderTarget()\n", 
  "SDL_UpperBlit": "\nThis is the public blit function, SDL_BlitSurface(), and it performs\nrectangle validation and clipping before passing it to SDL_LowerBlit()\n", 
  "SDLTest_Log": "\nPrints given message with a timestamp in the TEST category and INFO\npriority.\n\n:param fmt: Message to be logged\n", 
  "SDL_FreeFormat": "\nFree an SDL_PixelFormat structure.\n", 
  "SDL_IsShapedWindow": "\nReturn whether the given window is a shaped window.\n\n:param window: The window to query for being shaped.\n:return: SDL_TRUE if the window is a window that can be shaped,\n    SDL_FALSE if the window is unshaped or NULL.\n\nSee also SDL_CreateShapedWindow\n", 
  "SDL_DestroySemaphore": "\nDestroy a semaphore.\n", 
  "SDLTest_RandomUint16": "\nReturns a random Uint16\n\n:return: Generated integer\n", 
  "SDL_IsScreenKeyboardShown": "\nReturns whether the screen keyboard is shown for given window.\n\n:param window: The window for which screen keyboard should be queried.\n:return: SDL_TRUE if screen keyboard is shown else SDL_FALSE.\n\nSee also SDL_HasScreenKeyboardSupport()\n", 
  "SDL_HasScreenKeyboardSupport": "\nReturns whether the platform has some screen keyboard support.\n\n:return: SDL_TRUE if some keyboard support is available else\n    SDL_FALSE.\n\nNot all screen keyboard functions are supported on all platforms.\n\nSee also SDL_IsScreenKeyboardShown()\n", 
  "SDL_ConvertPixels": "\nCopy a block of pixels of one format to another format.\n\n:return: 0 on success, or -1 if there was an error\n", 
  "SDL_SetWindowBordered": "\nSet the border state of a window.\n\nThis will add or remove the window's SDL_WINDOW_BORDERLESS flag and\nadd or remove the border from the actual window. This is a no-op if\nthe window's border already matches the requested state.\n\n:param window: The window of which to change the border state.\n:param bordered: SDL_FALSE to remove border, SDL_TRUE to add border.\n\nYou can't change the border state of a fullscreen window.\n\nSee also SDL_GetWindowFlags()\n", 
  "SDL_GameControllerGetAxisFromString": "\nturn this string into a axis mapping\n", 
  "SDL_RenderFillRects": "\nFill some number of rectangles on the current rendering target with\nthe drawing color.\n\n:param renderer: The renderer which should fill multiple rectangles.\n:param rects: A pointer to an array of destination rectangles.\n:param count: The number of rectangles.\n:return: 0 on success, or -1 on error\n", 
  "SDLTest_RandomAsciiStringWithMaximumLength": "\nGenerates random null-terminated string. The maximum length for the\nstring is defined by the maxLength parameter. String can contain ASCII\ncharacters from 32 to 126.\n\nNote: Returned string needs to be deallocated.\n\n:param maxLength: The maximum length of the generated string.\n:return: Newly allocated random string; or NULL if maxLength was\n    invalid or string could not be allocated.\n", 
  "SDL_FreePalette": "\nFree a palette created with SDL_AllocPalette().\n\nSee also SDL_AllocPalette()\n", 
  "SDL_RenderGetLogicalSize": "\nGet device independent resolution for rendering.\n\n:param renderer: The renderer from which resolution should be queried.\n:param w: A pointer filled with the width of the logical resolution\n:param h: A pointer filled with the height of the logical resolution\n\nSee also SDL_RenderSetLogicalSize()\n", 
  "SDL_AllocPalette": "\nCreate a palette structure with the specified number of color entries.\n\n:return: A new palette, or NULL if there wasn't enough memory.\n\nThe palette entries are initialized to white.\n\nSee also SDL_FreePalette()\n", 
  "SDLTest_CommonCreateState": "\nParse command line parameters and create common state.\n\n:param argv: Array of command line parameters\n:param flags: Flags indicating which subsystem to initialize (i.e.\n    SDL_INIT_VIDEO | SDL_INIT_AUDIO)\n:return: Returns a newly allocated common state object.\n", 
  "SDL_LoadObject": "\nThis function dynamically loads a shared object and returns a pointer\nto the object handle (or NULL if there was an error). The 'sofile'\nparameter is a system dependent name of the object file.\n", 
  "SDL_GameControllerAddMappingsFromRW": "\nTo count the number of game controllers in the system for the\nfollowing: int nJoysticks = SDL_NumJoysticks(); int nGameControllers =\n0; for ( int i = 0; i < nJoysticks; i++ ) { if (\nSDL_IsGameController(i) ) { nGameControllers++; } }\n\nUsing the SDL_HINT_GAMECONTROLLERCONFIG hint or the\nSDL_GameControllerAddMapping you can add support for controllers SDL\nis unaware of or cause an existing controller to have a different\nbinding. The format is: guid,name,mappings\n\nWhere GUID is the string value from SDL_JoystickGetGUIDString(), name\nis the human readable string for the device and mappings are\ncontroller mappings to joystick ones. Under Windows there is a\nreserved GUID of \"xinput\" that covers any XInput devices. The mapping\nformat for joystick is: bX - a joystick button, index X hX.Y - hat X\nwith value Y aX - axis X of the joystick Buttons can be used as a\ncontroller axis and vice versa.\n\nThis string shows an example of a valid mapping for a controller\n\"341a3608000000000000504944564944,Afterglow PS3 Controller,a:b1,b:b2,y\n:b3,x:b0,start:b9,guide:b12,back:b8,dpup:h0.1,dpleft:h0.8,dpdown:h0.4,\ndpright:h0.2,leftshoulder:b4,rightshoulder:b5,leftstick:b10,rightstick\n:b11,leftx:a0,lefty:a1,rightx:a2,righty:a3,lefttrigger:b6,righttrigger\n:b7\", Load a set of mappings from a seekable SDL data stream (memory\nor file), filtered by the current SDL_GetPlatform() A community\nsourced database of controllers is available at https://raw.github.com\n/gabomdq/SDL_GameControllerDB/master/gamecontrollerdb.txt\n\nIf freerw is non-zero, the stream will be closed after being read.\n\n:return: number of mappings added, -1 on error\n", 
  "SDL_JoystickGetDeviceGUID": "\nReturn the GUID for the joystick at this index\n", 
  "SDL_LogVerbose": "\nLog a message with SDL_LOG_PRIORITY_VERBOSE.\n", 
  "SDLTest_Crc32Done": "\n/brief clean up CRC context\n\n/param crcContext pointer to context variable\n\n/returns 0 for OK, -1 on error\n", 
  "SDL_GetDisplayMode": "\nFill in information about a specific display mode.\n\nThe display modes are sorted in this priority: bits per pixel -> more\ncolors to fewer colors\n\nwidth -> largest to smallest\n\nheight -> largest to smallest\n\nrefresh rate -> highest to lowest\n\nSee also SDL_GetNumDisplayModes()\n", 
  "SDL_LowerBlitScaled": "\nThis is a semi-private blit function and it performs low-level surface\nscaled blitting only.\n", 
  "SDL_JoystickNumHats": "\nGet the number of POV hats on a joystick.\n", 
  "SDL_JoystickOpen": "\nOpen a joystick for use. The index passed as an argument refers tothe\nN'th joystick on the system. This index is the value which will\nidentify this joystick in future joystick events.\n\n:return: A joystick identifier, or NULL if an error occurred.\n", 
  "SDL_MasksToPixelFormatEnum": "\nConvert a bpp and RGBA masks to an enumerated pixel format.\n\n:return: The pixel format, or\n\nSee also SDL_PixelFormatEnumToMasks()\n", 
  "SDL_LogMessageV": "\nLog a message with the specified category and priority.\n", 
  "SDL_GetTouchDevice": "\nGet the touch ID with the given index, or 0 if the index is invalid.\n", 
  "SDL_RenderDrawPoints": "\nDraw multiple points on the current rendering target.\n\n:param renderer: The renderer which should draw multiple points.\n:param points: The points to draw\n:param count: The number of points to draw\n:return: 0 on success, or -1 on error\n", 
  "SDL_GetRendererInfo": "\nGet information about a rendering context.\n", 
  "SDL_LockTexture": "\nLock a portion of the texture for write-only pixel access.\n\n:param texture: The texture to lock for access, which was created with\n    SDL_TEXTUREACCESS_STREAMING.\n:param rect: A pointer to the rectangle to lock for access. If the\n    rect is NULL, the entire texture will be locked.\n:param pixels: This is filled in with a pointer to the locked pixels,\n    appropriately offset by the locked area.\n:param pitch: This is filled in with the pitch of the locked pixels.\n:return: 0 on success, or -1 if the texture is not valid or was not\n    created with\n\nSee also SDL_UnlockTexture()\n", 
  "SDL_AtomicSetPtr": "\nSet a pointer to a value atomically.\n\n:return: The previous value of the pointer.\n", 
  "SDL_GetKeyFromName": "\nGet a key code from a human-readable name.\n\n:return: key code, or SDLK_UNKNOWN if the name wasn't recognized\n\nSee also SDL_Keycode\n", 
  "SDL_GetRevision": "\nGet the code revision of SDL that is linked against your program.\n\nReturns an arbitrary string (a hash value) uniquely identifying the\nexact revision of the SDL library in use, and is only useful in\ncomparing against other revisions. It is NOT an incrementing number.\n", 
  "SDL_JoystickGetAttached": "\nReturns SDL_TRUE if the joystick has been opened and currently\nconnected, or SDL_FALSE if it has not.\n", 
  "SDL_HasAltiVec": "\nThis function returns true if the CPU has AltiVec features.\n", 
  "SDL_SetRenderDrawColor": "\nSet the color used for drawing operations (Rect, Line and Clear).\n\n:param renderer: The renderer for which drawing color should be set.\n:param r: The red value used to draw on the rendering target.\n:param g: The green value used to draw on the rendering target.\n:param b: The blue value used to draw on the rendering target.\n:param a: The alpha value used to draw on the rendering target,\n    usually SDL_ALPHA_OPAQUE (255).\n:return: 0 on success, or -1 on error\n", 
  "SDL_GetAssertionReport": "\nGet a list of all assertion failures.\n\nGet all assertions triggered since last call to\nSDL_ResetAssertionReport(), or the start of the program.\n\nThe proper way to examine this data looks something like this:\n\nconst SDL_assert_data *item = SDL_GetAssertionReport(); while (item) {\nprintf(\"'%s', %s (%s:%d), triggered %u times, always ignore: %s.\\n\",\nitem->condition, item->function, item->filename, item->linenum,\nitem->trigger_count, item->always_ignore ? \"yes\" : \"no\"); item =\nitem->next; }\n\n:return: List of all assertions.\n\nSee also SDL_ResetAssertionReport\n", 
  "SDL_GetWindowBrightness": "\nGet the brightness (gamma correction) for a window.\n\n:return: The last brightness value passed to\n\nSee also SDL_SetWindowBrightness()\n", 
  "SDLTest_RandomIntegerInRange": "\nReturns integer in range [min, max] (inclusive). Min and max values\ncan be negative values. If Max in smaller tham min, then the values\nare swapped. Min and max are the same value, that value will be\nreturned.\n\n:param min: Minimum inclusive value of returned random number\n:param max: Maximum inclusive value of returned random number\n:return: Generated random integer in range\n", 
  "SDL_HapticRunEffect": "\nRuns the haptic effect on its associated haptic device.\n\nIf iterations are SDL_HAPTIC_INFINITY, it'll run the effect over and\nover repeating the envelope (attack and fade) every time. If you only\nwant the effect to last forever, set SDL_HAPTIC_INFINITY in the\neffect's length parameter.\n\n:param haptic: Haptic device to run the effect on.\n:param effect: Identifier of the haptic effect to run.\n:param iterations: Number of iterations to run the effect. Use\n    SDL_HAPTIC_INFINITY for infinity.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticStopEffect\n", 
  "SDLTest_DrawCharacter": "\nDraw a string in the currently set font.\n\n:param renderer: The renderer to draw on.\n:param x: The X coordinate of the upper left corner of the character.\n:param y: The Y coordinate of the upper left corner of the character.\n:param c: The character to draw.\n:return: Returns 0 on success, -1 on failure.\n", 
  "SDL_RenderSetScale": "\nSet the drawing scale for rendering on the current target.\n\n:param renderer: The renderer for which the drawing scale should be\n    set.\n:param scaleX: The horizontal scaling factor\n:param scaleY: The vertical scaling factor\n\nThe drawing coordinates are scaled by the x/y scaling factors before\nthey are used by the renderer. This allows resolution independent\ndrawing with a single coordinate system.\n\nIf this results in scaling or subpixel drawing by the rendering\nbackend, it will be handled using the appropriate quality hints. For\nbest results use integer scaling factors.\n\nSee also SDL_RenderGetScale()\n", 
  "SDL_RenderCopy": "\nCopy a portion of the texture to the current rendering target.\n\n:param renderer: The renderer which should copy parts of a texture.\n:param texture: The source texture.\n:param srcrect: A pointer to the source rectangle, or NULL for the\n    entire texture.\n:param dstrect: A pointer to the destination rectangle, or NULL for\n    the entire rendering target.\n:return: 0 on success, or -1 on error\n", 
  "SDLTest_RandomUint32BoundaryValue": "\nReturns a random boundary value for Uint32 within the given\nboundaries. Boundaries are inclusive, see the usage examples below. If\nvalidDomain is true, the function will only return valid boundaries,\notherwise non-valid boundaries are also possible. If boundary1 >\nboundary2, the values are swapped\n\nUsage examples: RandomUint32BoundaryValue(10, 20, SDL_TRUE) returns\n10, 11, 19 or 20 RandomUint32BoundaryValue(1, 20, SDL_FALSE) returns 0\nor 21 RandomUint32BoundaryValue(0, 99, SDL_FALSE) returns 100\nRandomUint32BoundaryValue(0, 0xFFFFFFFF, SDL_FALSE) returns 0 (with\nerror set)\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or 0\n    with error set\n", 
  "SDL_GameControllerAddMapping": "\nAdd or update an existing mapping configuration\n\n:return: 1 if mapping is added, 0 if updated, -1 on error\n", 
  "SDLTest_GetFuzzerInvocationCount": "\nReturns the invocation count for the fuzzer since last ...FuzzerInit.\n", 
  "SDL_GetDisplayName": "\nGet the name of a display in UTF-8 encoding.\n\n:return: The name of a display, or NULL for an invalid display index.\n\nSee also SDL_GetNumVideoDisplays()\n", 
  "SDL_FreeCursor": "\nFrees a cursor created with SDL_CreateCursor().\n\nSee also SDL_CreateCursor()\n", 
  "SDL_HapticRumbleSupported": "\nChecks to see if rumble is supported on a haptic device.\n\n:param haptic: Haptic device to check to see if it supports rumble.\n:return: SDL_TRUE if effect is supported, SDL_FALSE if it isn't or -1\n    on error.\n\nSee also SDL_HapticRumbleInit\n", 
  "SDL_GameControllerGetBindForButton": "\nGet the SDL joystick layer binding for this controller button mapping\n", 
  "SDL_HasEvent": "\nChecks to see if certain event types are in the event queue.\n", 
  "SDL_SetColorKey": "\nSets the color key (transparent pixel) in a blittable surface.\n\n:param surface: The surface to update\n:param flag: Non-zero to enable colorkey and 0 to disable colorkey\n:param key: The transparent pixel in the native surface format\n:return: 0 on success, or -1 if the surface is not valid\n\nYou can pass SDL_RLEACCEL to enable RLE accelerated blits.\n", 
  "SDL_AtomicAdd": "\nAdd to an atomic variable.\n\n:return: The previous value of the atomic variable.\n\nThis same style can be used for any number operation\n", 
  "SDL_RenderDrawPoint": "\nDraw a point on the current rendering target.\n\n:param renderer: The renderer which should draw a point.\n:param x: The x coordinate of the point.\n:param y: The y coordinate of the point.\n:return: 0 on success, or -1 on error\n", 
  "SDLTest_LogAssertSummary": "\nLogs summary of all assertions (total, pass, fail) since last reset as\nINFO or ERROR.\n", 
  "SDL_GetRelativeMouseState": "\nRetrieve the relative state of the mouse.\n\nThe current button state is returned as a button bitmask, which can be\ntested using the SDL_BUTTON(X) macros, and x and y are set to the\nmouse deltas since the last call to SDL_GetRelativeMouseState().\n", 
  "SDL_SetModState": "\nSet the current key modifier state for the keyboard.\n\nThis does not change the keyboard state, only the key modifier flags.\n", 
  "SDL_AtomicCAS": "\nSet an atomic variable to a new value if it is currently an old value.\n\n:return: SDL_TRUE if the atomic variable was set, SDL_FALSE otherwise.\n\nIf you don't know what this function is for, you shouldn't use it!\n", 
  "SDL_GetKeyboardState": "\nGet a snapshot of the current state of the keyboard.\n\n:param numkeys: if non-NULL, receives the length of the returned\n    array.\n:return: An array of key states. Indexes into this array are obtained\n    by using\n\nExample:::\n\n   const Uint8 *state = SDL_GetKeyboardState(NULL);\n   if ( state[SDL_SCANCODE_RETURN] )   {\n       printf(\"<RETURN> is pressed.\\n\");\n   }\n   \n", 
  "SDL_GetCPUCount": "\nThis function returns the number of CPU cores available.\n", 
  "SDL_MixAudio": "\nThis takes two audio buffers of the playing audio format and mixes\nthem, performing addition, volume adjustment, and overflow clipping.\nThe volume ranges from 0 - 128, and should be set to SDL_MIX_MAXVOLUME\nfor full audio volume. Note this does not change hardware volume. This\nis provided for convenience  you can mix your own audio data.\n", 
  "SDL_HapticStopEffect": "\nStops the haptic effect on its associated haptic device.\n\n:param haptic: Haptic device to stop the effect on.\n:param effect: Identifier of the effect to stop.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticRunEffect\n", 
  "SDL_SetEventFilter": "\nSets up a filter to process all events before they change internal\nstate and are posted to the internal event queue.\n\nThe filter is prototyped as: ::\n\n       int SDL_EventFilter(void *userdata, SDL_Event * event);\n   \n\nIf the filter returns 1, then the event will be added to the internal\nqueue. If it returns 0, then the event will be dropped from the queue,\nbut the internal state will still be updated. This allows selective\nfiltering of dynamically arriving events.\n\nBe very careful of what you do in the event filter function, as it may\nrun in a different thread!\n\nThere is one caveat when dealing with the SDL_QuitEvent event type.\nThe event filter is only called when the window manager desires to\nclose the application window. If the event filter returns 1, then the\nwindow will be closed, otherwise the window will remain open if\npossible.\n\nIf the quit event is generated by an interrupt signal, it will bypass\nthe internal queue and be delivered to the application at the next\nevent poll.\n", 
  "SDL_SaveAllDollarTemplates": "\nSave all currently loaded Dollar Gesture templates.\n", 
  "SDL_SetClipboardText": "\nPut UTF-8 text into the clipboard.\n\nSee also SDL_GetClipboardText()\n", 
  "SDL_GetBasePath": "\nGet the path where the application resides.\n\nGet the \"base path\". This is the directory where the application was\nrun from, which is probably the installation directory, and may or may\nnot be the process's current working directory.\n\nThis returns an absolute path in UTF-8 encoding, and is guaranteed to\nend with a path separator ('\\' on Windows, '/' most other places).\n\nThe pointer returned by this function is owned by you. Please call\nSDL_free() on the pointer when you are done with it, or it will be a\nmemory leak. This is not necessarily a fast call, though, so you\nshould call this once near startup and save the string if you need it.\n\nSome platforms can't determine the application's path, and on other\nplatforms, this might be meaningless. In such cases, this function\nwill return NULL.\n\n:return: String of base dir in UTF-8 encoding, or NULL on error.\n\nSee also SDL_GetPrefPath\n", 
  "SDL_SetHintWithPriority": "\nSet a hint with a specific priority.\n\nThe priority controls the behavior when setting a hint that already\nhas a value. Hints will replace existing hints of their priority and\nlower. Environment variables are considered to have override priority.\n\n:return: SDL_TRUE if the hint was set, SDL_FALSE otherwise\n", 
  "SDL_GetWindowGammaRamp": "\nGet the gamma ramp for a window.\n\n:param window: The window from which the gamma ramp should be queried.\n:param red: A pointer to a 256 element array of 16-bit quantities to\n    hold the translation table for the red channel, or NULL.\n:param green: A pointer to a 256 element array of 16-bit quantities to\n    hold the translation table for the green channel, or NULL.\n:param blue: A pointer to a 256 element array of 16-bit quantities to\n    hold the translation table for the blue channel, or NULL.\n:return: 0 on success, or -1 if gamma ramps are unsupported.\n\nSee also SDL_SetWindowGammaRamp()\n", 
  "SDL_GetCurrentAudioDriver": "\nThis function returns the name of the current audio driver, or NULL if\nno driver has been initialized.\n", 
  "SDLTest_RandomSint8BoundaryValue": "\nReturns a random boundary value for Sint8 within the given boundaries.\nBoundaries are inclusive, see the usage examples below. If validDomain\nis true, the function will only return valid boundaries, otherwise\nnon-valid boundaries are also possible. If boundary1 > boundary2, the\nvalues are swapped\n\nUsage examples: RandomSint8BoundaryValue(-10, 20, SDL_TRUE) returns\n-11, -10, 19 or 20 RandomSint8BoundaryValue(-100, -10, SDL_FALSE)\nreturns -101 or -9 RandomSint8BoundaryValue(SINT8_MIN, 99, SDL_FALSE)\nreturns 100 RandomSint8BoundaryValue(SINT8_MIN, SINT8_MAX, SDL_FALSE)\nreturns SINT8_MIN (== error value) with error set\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or\n    SINT8_MIN with error set\n", 
  "SDL_LogInfo": "\nLog a message with SDL_LOG_PRIORITY_INFO.\n", 
  "SDL_GL_UnbindTexture": "\nUnbind a texture from the current OpenGL/ES/ES2 context.\n\n:param texture: The SDL texture to unbind\n:return: 0 on success, or -1 if the operation is not supported\n", 
  "SDL_ShowWindow": "\nShow a window.\n\nSee also SDL_HideWindow()\n", 
  "SDLTest_RandomInitTime": "\nInitialize random number generator based on current system time.\n\n:param rndContext: pointer to context structure\n", 
  "SDL_GetClipRect": "\nGets the clipping rectangle for the destination surface in a blit.\n\nrect must be a pointer to a valid rectangle which will be filled with\nthe correct values.\n", 
  "SDL_RenderCopyEx": "\nCopy a portion of the source texture to the current rendering target,\nrotating it by angle around the given center.\n\n:param renderer: The renderer which should copy parts of a texture.\n:param texture: The source texture.\n:param srcrect: A pointer to the source rectangle, or NULL for the\n    entire texture.\n:param dstrect: A pointer to the destination rectangle, or NULL for\n    the entire rendering target.\n:param angle: An angle in degrees that indicates the rotation that\n    will be applied to dstrect\n:param center: A pointer to a point indicating the point around which\n    dstrect will be rotated (if NULL, rotation will be done aroud\n    dstrect.w/2, dstrect.h/2)\n:param flip: An SDL_RendererFlip value stating which flipping actions\n    should be performed on the texture\n:return: 0 on success, or -1 on error\n", 
  "SDLTest_DrawString": "\nDraw a string in the currently set font.\n\n:param renderer: The renderer to draw on.\n:param x: The X coordinate of the upper left corner of the string.\n:param y: The Y coordinate of the upper left corner of the string.\n:param s: The string to draw.\n:return: Returns 0 on success, -1 on failure.\n", 
  "SDL_GetNumVideoDrivers": "\nGet the number of video drivers compiled into SDL.\n\nSee also SDL_GetVideoDriver()\n", 
  "SDL_SetThreadPriority": "\nSet the priority for the current thread\n", 
  "SDL_SetSurfacePalette": "\nSet the palette used by a surface.\n\n:return: 0, or -1 if the surface format doesn't use a palette.\n\nA single palette can be shared with many surfaces.\n", 
  "SDL_TLSCreate": "\nCreate an identifier that is globally visible to all threads but\nrefers to data that is thread-specific.\n\n:return: The newly created thread local storage identifier, or 0 on\n    error\n::\n\n   static SDL_SpinLock tls_lock;\n   static SDL_TLSID thread_local_storage;\n\n  \n\n   void SetMyThreadData(void *value)\n   {\n       if (!thread_local_storage) {\n           SDL_AtomicLock(&tls_lock);\n           if (!thread_local_storage) {\n               thread_local_storage = SDL_TLSCreate();\n           }\n           SDL_AtomicUnLock(&tls_lock);\n       }\n       SDL_TLSSet(thread_local_storage, value);\n   }\n   \n   void *GetMyThreadData(void)\n   {\n       return SDL_TLSGet(thread_local_storage);\n   }\n   \n\nSee also SDL_TLSGet()\n", 
  "SDL_EventState": "\nThis function allows you to set the state of processing certain\nevents.If state is set to SDL_IGNORE, that event will be automatically\ndropped from the event queue and will not event be filtered.\n\nIf state is set to SDL_ENABLE, that event will be processed normally.\n\nIf state is set to SDL_QUERY, SDL_EventState() will return the current\nprocessing state of the specified event.\n", 
  "SDL_GetNumDisplayModes": "\nReturns the number of available display modes.\n\nSee also SDL_GetDisplayMode()\n", 
  "SDL_LogDebug": "\nLog a message with SDL_LOG_PRIORITY_DEBUG.\n", 
  "SDL_AddTimer": "\nAdd a new timer to the pool of timers already running.\n\n:return: A timer ID, or NULL when an error occurs.\n", 
  "SDL_GameControllerClose": "\nClose a controller previously opened with SDL_GameControllerOpen().\n", 
  "SDL_AtomicSet": "\nSet an atomic variable to a value.\n\n:return: The previous value of the atomic variable.\n", 
  "SDL_GetSurfaceBlendMode": "\nGet the blend mode used for blit operations.\n\n:param surface: The surface to query.\n:param blendMode: A pointer filled in with the current blend mode.\n:return: 0 on success, or -1 if the surface is not valid.\n\nSee also SDL_SetSurfaceBlendMode()\n", 
  "SDL_MinimizeWindow": "\nMinimize a window to an iconic representation.\n\nSee also SDL_RestoreWindow()\n", 
  "SDL_CondWait": "\nWait on the condition variable, unlocking the provided mutex.\n\nThe mutex must be locked before entering this function!\n\nThe mutex is re-locked once the condition variable is signaled.\n\n:return: 0 when it is signaled, or -1 on error.\n", 
  "SDL_AtomicCASPtr": "\nSet a pointer to a new value if it is currently an old value.\n\n:return: SDL_TRUE if the pointer was set, SDL_FALSE otherwise.\n\nIf you don't know what this function is for, you shouldn't use it!\n", 
  "SDLTest_RandomFloat": "\n:return: random float.\n", 
  "SDL_UnloadObject": "\nUnload a shared object from memory.\n", 
  "SDL_GetWindowMaximumSize": "\nGet the maximum size of a window's client area.\n\n:param window: The window to query.\n:param w: Pointer to variable for storing the maximum width, may be\n    NULL\n:param h: Pointer to variable for storing the maximum height, may be\n    NULL\n\nSee also SDL_GetWindowMinimumSize()\n", 
  "SDL_GetSurfaceColorMod": "\nGet the additional color value used in blit operations.\n\n:param surface: The surface to query.\n:param r: A pointer filled in with the current red color value.\n:param g: A pointer filled in with the current green color value.\n:param b: A pointer filled in with the current blue color value.\n:return: 0 on success, or -1 if the surface is not valid.\n\nSee also SDL_SetSurfaceColorMod()\n", 
  "SDL_AtomicGetPtr": "\nGet the value of a pointer atomically.\n", 
  "SDL_CreateWindowFrom": "\nCreate an SDL window from an existing native window.\n\n:param data: A pointer to driver-dependent window creation data\n:return: The id of the window created, or zero if window creation\n    failed.\n\nSee also SDL_DestroyWindow()\n", 
  "SDL_RecordGesture": "\nBegin Recording a gesture on the specified touch, or all touches (-1)\n", 
  "SDL_HasClipboardText": "\nReturns a flag indicating whether the clipboard exists and contains a\ntext string that is non-empty.\n\nSee also SDL_GetClipboardText()\n", 
  "SDL_PushEvent": "\nAdd an event to the event queue.\n\n:return: 1 on success, 0 if the event was filtered, or -1 if the event\n    queue was full or there was some other error.\n", 
  "SDL_GameControllerNameForIndex": "\nGet the implementation dependent name of a game controller. This can\nbe called before any controllers are opened. If no name can be found,\nthis function returns NULL.\n", 
  "SDL_DestroyRenderer": "\nDestroy the rendering context for a window and free associated\ntextures.\n\nSee also SDL_CreateRenderer()\n", 
  "SDL_Quit": "\nThis function cleans up all initialized subsystems. You should call it\nupon all exit conditions.\n", 
  "SDLTest_RandomDouble": "\n:return: random double.\n", 
  "SDL_GetRelativeMouseMode": "\nQuery whether relative mouse mode is enabled.\n\nSee also SDL_SetRelativeMouseMode()\n", 
  "SDL_ShowSimpleMessageBox": "\nCreate a simple modal message box.\n\n:param flags: SDL_MessageBoxFlags\n:param title: UTF-8 title text\n:param message: UTF-8 message text\n:param window: The parent window, or NULL for no parent\n:return: 0 on success, -1 on error\n\nSee also SDL_ShowMessageBox\n", 
  "SDL_OpenAudio": "\nThis function opens the audio device with the desired parameters, and\nreturns 0 if successful, placing the actual hardware parameters in the\nstructure pointed to by obtained. If obtained is NULL, the audio data\npassed to the callback function will be guaranteed to be in the\nrequested format, and will be automatically converted to the hardware\naudio format if necessary. This function returns -1 if it failed to\nopen the audio device, or couldn't set up the audio thread.\n\nWhen filling in the desired audio spec structure,desired->freq should\nbe the desired audio frequency in samples-per- second.\n\ndesired->format should be the desired audio format.\n\ndesired->samples is the desired size of the audio buffer, in samples.\nThis number should be a power of two, and may be adjusted by the audio\ndriver to a value more suitable for the hardware. Good values seem to\nrange between 512 and 8096 inclusive, depending on the application and\nCPU speed. Smaller values yield faster response time, but can lead to\nunderflow if the application is doing heavy processing and cannot fill\nthe audio buffer in time. A stereo sample consists of both right and\nleft channels in LR ordering. Note that the number of samples is\ndirectly related to time by the following formula:::\n\nms = (samples*1000)/freq\n\ndesired->size is the size in bytes of the audio buffer, and is\ncalculated by SDL_OpenAudio().\n\ndesired->silence is the value used to set the buffer to silence, and\nis calculated by SDL_OpenAudio().\n\ndesired->callback should be set to a function that will be called when\nthe audio device is ready for more data. It is passed a pointer to the\naudio buffer, and the length in bytes of the audio buffer. This\nfunction usually runs in a separate thread, and so you should protect\ndata structures that it accesses by calling SDL_LockAudio() and\nSDL_UnlockAudio() in your code.\n\ndesired->userdata is passed as the first parameter to your callback\nfunction.\n\nThe audio device starts out playing silence when it's opened, and\nshould be enabled for playing by calling SDL_PauseAudio(0) when you\nare ready for your audio callback function to be called. Since the\naudio driver may modify the requested size of the audio buffer, you\nshould allocate any local mixing buffers after you open the audio\ndevice.\n", 
  "SDL_RenderSetViewport": "\nSet the drawing area for rendering on the current target.\n\n:param renderer: The renderer for which the drawing area should be\n    set.\n:param rect: The rectangle representing the drawing area, or NULL to\n    set the viewport to the entire target.\n\nThe x,y of the viewport rect represents the origin for rendering.\n\n:return: 0 on success, or -1 on error\n\nIf the window associated with the renderer is resized, the viewport is\nautomatically reset.\n\nSee also SDL_RenderGetViewport()\n", 
  "SDL_HapticPause": "\nPauses a haptic device.\n\nDevice must support the SDL_HAPTIC_PAUSE feature. Call\nSDL_HapticUnpause() to resume playback.\n\nDo not modify the effects nor add new ones while the device is paused.\nThat can cause all sorts of weird errors.\n\n:param haptic: Haptic device to pause.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticUnpause\n", 
  "SDL_SetTextureBlendMode": "\nSet the blend mode used for texture copy operations.\n\n:param texture: The texture to update.\n:param blendMode: SDL_BlendMode to use for texture blending.\n:return: 0 on success, or -1 if the texture is not valid or the blend\n    mode is not supported.\n\nIf the blend mode is not supported, the closest supported mode is\nchosen.\n\nSee also SDL_GetTextureBlendMode()\n", 
  "SDL_MapRGB": "\nMaps an RGB triple to an opaque pixel value for a given pixel format.\n\nSee also SDL_MapRGBA\n", 
  "SDL_GetWindowGrab": "\nGet a window's input grab mode.\n\n:return: This returns SDL_TRUE if input is grabbed, and SDL_FALSE\n    otherwise.\n\nSee also SDL_SetWindowGrab()\n", 
  "SDL_IntersectRectAndLine": "\nCalculate the intersection of a rectangle and line segment.\n\n:return: SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n", 
  "SDL_JoystickIsHaptic": "\nChecks to see if a joystick has haptic features.\n\n:param joystick: Joystick to test for haptic capabilities.\n:return: 1 if the joystick is haptic, 0 if it isn't or -1 if an error\n    ocurred.\n\nSee also SDL_HapticOpenFromJoystick\n", 
  "SDL_GetKeyName": "\nGet a human-readable name for a key.\n\n:return: A pointer to a UTF-8 string that stays valid at least until\n    the next call to this function. If you need it around any longer,\n    you must copy it. If the key doesn't have a name, this function\n    returns an empty string (\"\").\n\nSee also SDL_Key\n", 
  "SDLTest_RunSuites": "\nExecute a test suite using the given run seed and execution key.\n\n:param testSuites: Suites containing the test case.\n:param userRunSeed: Custom run seed provided by user, or NULL to\n    autogenerate one.\n:param userExecKey: Custom execution key provided by user, or 0 to\n    autogenerate one.\n:param filter: Filter specification. NULL disables. Case sensitive.\n:param testIterations: Number of iterations to run each test case.\n:return: Test run result; 0 when all tests passed, 1 if any tests\n    failed.\n", 
  "SDL_main": "\nThe prototype for the application's main() function\n", 
  "SDL_LogSetPriority": "\nSet the priority of a particular log category.\n", 
  "SDL_SaveDollarTemplate": "\nSave a currently loaded Dollar Gesture template.\n", 
  "SDLTest_CommonQuit": "\nClose test window.\n\n:param state: The common state used to create test window.\n", 
  "SDL_DisableScreenSaver": "\nPrevent the screen from being blanked by a screensaver.\n\nSee also SDL_IsScreenSaverEnabled()\n", 
  "SDL_GetModState": "\nGet the current key modifier state for the keyboard.\n", 
  "SDL_CreateRGBSurface": "\nAllocate and free an RGB surface.\n\nIf the depth is 4 or 8 bits, an empty palette is allocated for the\nsurface. If the depth is greater than 8 bits, the pixel format is set\nusing the flags '[RGB]mask'.\n\nIf the function runs out of memory, it will return NULL.\n\n:param flags: The flags are obsolete and should be set to 0.\n:param width: The width in pixels of the surface to create.\n:param height: The height in pixels of the surface to create.\n:param depth: The depth in bits of the surface to create.\n:param Rmask: The red mask of the surface to create.\n:param Gmask: The green mask of the surface to create.\n:param Bmask: The blue mask of the surface to create.\n:param Amask: The alpha mask of the surface to create.\n", 
  "SDLTest_RandomUint8BoundaryValue": "\nReturns a random boundary value for Uint8 within the given boundaries.\nBoundaries are inclusive, see the usage examples below. If validDomain\nis true, the function will only return valid boundaries, otherwise\nnon-valid boundaries are also possible. If boundary1 > boundary2, the\nvalues are swapped\n\nUsage examples: RandomUint8BoundaryValue(10, 20, SDL_TRUE) returns 10,\n11, 19 or 20 RandomUint8BoundaryValue(1, 20, SDL_FALSE) returns 0 or\n21 RandomUint8BoundaryValue(0, 99, SDL_FALSE) returns 100\nRandomUint8BoundaryValue(0, 255, SDL_FALSE) returns 0 (error set)\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or 0\n    with error set\n", 
  "SDL_GetVersion": "\nGet the version of SDL that is linked against your program.\n\nIf you are linking to SDL dynamically, then it is possible that the\ncurrent version will be different than the version you compiled\nagainst. This function returns the current version, while\nSDL_VERSION() is a macro that tells you what version you compiled\nwith.\n\n::\n\n   SDL_version compiled;\n   SDL_version linked;\n\n \n\n   SDL_VERSION(&compiled);\n   SDL_GetVersion(&linked);\n   printf(\"We compiled against SDL version %d.%d.%d ...\\n\",\n          compiled.major, compiled.minor, compiled.patch);\n   printf(\"But we linked against SDL version %d.%d.%d.\\n\",\n          linked.major, linked.minor, linked.patch);\n   \n\nThis function may be called safely at any time, even before\nSDL_Init().\n\nSee also SDL_VERSION\n", 
  "SDL_HapticSetGain": "\nSets the global gain of the device.\n\nDevice must support the SDL_HAPTIC_GAIN feature.\n\nThe user may specify the maximum gain by setting the environment\nvariable SDL_HAPTIC_GAIN_MAX which should be between 0 and 100. All\ncalls to SDL_HapticSetGain() will scale linearly using\nSDL_HAPTIC_GAIN_MAX as the maximum.\n\n:param haptic: Haptic device to set the gain on.\n:param gain: Value to set the gain to, should be between 0 and 100.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticQuery\n", 
  "SDLTest_CommonEvent": "\nCommon event handler for test windows.\n\n:param state: The common state used to create test window.\n:param event: The event to handle.\n:param done: Flag indicating we are done.\n", 
  "SDL_PixelFormatEnumToMasks": "\nConvert one of the enumerated pixel formats to a bpp and RGBA masks.\n\n:return: SDL_TRUE, or SDL_FALSE if the conversion wasn't possible.\n\nSee also SDL_MasksToPixelFormatEnum()\n", 
  "SDL_Delay": "\nWait a specified number of milliseconds before returning.\n", 
  "SDL_GetVideoDriver": "\nGet the name of a built in video driver.\n\nThe video drivers are presented in the order in which they are\nnormally checked during initialization.\n\nSee also SDL_GetNumVideoDrivers()\n", 
  "SDL_SetRelativeMouseMode": "\nSet relative mouse mode.\n\n:param enabled: Whether or not to enable relative mode\n:return: 0 on success, or -1 if relative mode is not supported.\n\nWhile the mouse is in relative mode, the cursor is hidden, and the\ndriver will try to report continuous motion in the current window.\nOnly relative motion events will be delivered, the mouse position will\nnot change.\n\nThis function will flush any pending mouse motion.\n\nSee also SDL_GetRelativeMouseMode()\n", 
  "SDLTest_RandomUint64BoundaryValue": "\nReturns a random boundary value for Uint64 within the given\nboundaries. Boundaries are inclusive, see the usage examples below. If\nvalidDomain is true, the function will only return valid boundaries,\notherwise non-valid boundaries are also possible. If boundary1 >\nboundary2, the values are swapped\n\nUsage examples: RandomUint64BoundaryValue(10, 20, SDL_TRUE) returns\n10, 11, 19 or 20 RandomUint64BoundaryValue(1, 20, SDL_FALSE) returns 0\nor 21 RandomUint64BoundaryValue(0, 99, SDL_FALSE) returns 100\nRandomUint64BoundaryValue(0, 0xFFFFFFFFFFFFFFFF, SDL_FALSE) returns 0\n(with error set)\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or 0\n    with error set\n", 
  "SDL_SetWindowGrab": "\nSet a window's input grab mode.\n\n:param window: The window for which the input grab mode should be set.\n:param grabbed: This is SDL_TRUE to grab input, and SDL_FALSE to\n    release input.\n\nSee also SDL_GetWindowGrab()\n", 
  "SDLTest_RandomUint8": "\nReturns a random Uint8\n\n:return: Generated integer\n", 
  "SDL_GetDesktopDisplayMode": "\nFill in information about the desktop display mode.\n", 
  "SDL_HapticRumbleInit": "\nInitializes the haptic device for simple rumble playback.\n\n:param haptic: Haptic device to initialize for simple rumble playback.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticOpen\n", 
  "SDL_GetPerformanceCounter": "\nGet the current value of the high resolution counter.\n", 
  "SDL_JoystickUpdate": "\nUpdate the current state of the open joysticks.\n\nThis is called automatically by the event loop if any joystick events\nare enabled.\n", 
  "SDL_JoystickGetAxis": "\nGet the current state of an axis control on a joystick.\n\nThe state is a value ranging from -32768 to 32767.\n\nThe axis indices start at index 0.\n", 
  "SDL_WaitEvent": "\nWaits indefinitely for the next available event.\n\n:return: 1, or 0 if there was an error while waiting for events.\n:param event: If not NULL, the next event is removed from the queue\n    and stored in that area.\n", 
  "SDL_GL_SetSwapInterval": "\nSet the swap interval for the current OpenGL context.\n\n:param interval: 0 for immediate updates, 1 for updates synchronized\n    with the vertical retrace. If the system supports it, you may\n    specify -1 to allow late swaps to happen immediately instead of\n    waiting for the next retrace.\n:return: 0 on success, or -1 if setting the swap interval is not\n    supported.\n\nSee also SDL_GL_GetSwapInterval()\n", 
  "SDL_SetHint": "\nSet a hint with normal priority.\n\n:return: SDL_TRUE if the hint was set, SDL_FALSE otherwise\n", 
  "SDL_JoystickGetButton": "\nGet the current state of a button on a joystick.\n\nThe button indices start at index 0.\n", 
  "SDL_WarpMouseInWindow": "\nMoves the mouse to the given position within the window.\n\n:param window: The window to move the mouse into, or NULL for the\n    current mouse focus\n:param x: The x coordinate within the window\n:param y: The y coordinate within the window\n\nThis function generates a mouse motion event\n", 
  "SDL_GetWindowMinimumSize": "\nGet the minimum size of a window's client area.\n\n:param window: The window to query.\n:param w: Pointer to variable for storing the minimum width, may be\n    NULL\n:param h: Pointer to variable for storing the minimum height, may be\n    NULL\n\nSee also SDL_GetWindowMaximumSize()\n", 
  "SDLTest_RandomUnitDouble": "\n:return: random double in range [0.0 - 1.0[\n", 
  "SDL_GL_GetProcAddress": "\nGet the address of an OpenGL function.\n", 
  "SDL_GetClipboardText": "\nGet UTF-8 text from the clipboard, which must be freed with SDL_free()\n\nSee also SDL_SetClipboardText()\n", 
  "SDL_GL_BindTexture": "\nBind the texture to the current OpenGL/ES/ES2 context for use with\nOpenGL instructions.\n\n:param texture: The SDL texture to bind\n:param texw: A pointer to a float that will be filled with the texture\n    width\n:param texh: A pointer to a float that will be filled with the texture\n    height\n:return: 0 on success, or -1 if the operation is not supported\n", 
  "SDL_QueryTexture": "\nQuery the attributes of a texture.\n\n:param texture: A texture to be queried.\n:param format: A pointer filled in with the raw format of the texture.\n    The actual format may differ, but pixel transfers will use this\n    format.\n:param access: A pointer filled in with the actual access to the\n    texture.\n:param w: A pointer filled in with the width of the texture in pixels.\n:param h: A pointer filled in with the height of the texture in\n    pixels.\n:return: 0 on success, or -1 if the texture is not valid.\n", 
  "SDL_GL_MakeCurrent": "\nSet up an OpenGL context for rendering into an OpenGL window.\n\nThe context must have been created with a compatible window.\n", 
  "SDLTest_ResetAssertSummary": "\nResets the assert summary counters to zero.\n", 
  "SDL_GetTouchFinger": "\nGet the finger object of the given touch, with the given index.\n", 
  "SDL_SemWaitTimeout": "\nVariant of SDL_SemWait() with a timeout in milliseconds.\n\n:return: 0 if the wait succeeds,\n\nOn some platforms this function is implemented by looping with a delay\nof 1 ms, and so should be avoided if possible.\n", 
  "SDL_NumJoysticks": "\nCount the number of joysticks attached to the system right now\n", 
  "SDL_GetRevisionNumber": "\nGet the revision number of SDL that is linked against your program.\n\nReturns a number uniquely identifying the exact revision of the SDL\nlibrary in use. It is an incrementing number based on commits to\nhg.libsdl.org.\n", 
  "SDL_GetWindowFromID": "\nGet a window from a stored ID, or NULL if it doesn't exist.\n", 
  "SDL_GL_GetDrawableSize": "\nGet the size of a window's underlying drawable (for use with\nglViewport).\n\n:param window: Window from which the drawable size should be queried\n:param w: Pointer to variable for storing the width, may be NULL\n:param h: Pointer to variable for storing the height, may be NULL\n\nThis may differ from SDL_GetWindowSize if we're rendering to a high-\nDPI drawable, i.e. the window was created with\nSDL_WINDOW_ALLOW_HIGHDPI on a platform with high-DPI support (Apple\ncalls this \"Retina\"), and not disabled by the\nSDL_HINT_VIDEO_HIGHDPI_DISABLED hint.\n\nSee also SDL_GetWindowSize()\n", 
  "SDL_PumpEvents": "\nPumps the event loop, gathering events from the input devices.\n\nThis function updates the event queue and internal input device state.\n\nThis should only be run in the thread that sets the video mode.\n", 
  "SDL_AllocFormat": "\nCreate an SDL_PixelFormat structure from a pixel format enum.\n", 
  "SDL_GL_GetCurrentContext": "\nGet the currently active OpenGL context.\n", 
  "SDL_GameControllerMapping": "\nGet a mapping string for an open GameController\n\n:return: the mapping string. Must be freed with SDL_free. Returns NULL\n    if no mapping is available\n", 
  "SDL_GetWindowPixelFormat": "\nGet the pixel format associated with the window.\n", 
  "SDLTest_RandomAsciiStringOfSize": "\nGenerates random null-terminated string. The length for the string is\ndefined by the size parameter. String can contain ASCII characters\nfrom 32 to 126.\n\nNote: Returned string needs to be deallocated.\n\n:param size: The length of the generated string\n:return: Newly allocated random string; or NULL if size was invalid or\n    string could not be allocated.\n", 
  "SDL_JoystickGetGUIDString": "\nReturn a string representation for this guid. pszGUID must point to at\nleast 33 bytes (32 for the string plus a NULL terminator).\n", 
  "SDL_RestoreWindow": "\nRestore the size and position of a minimized or maximized window.\n\nSee also SDL_MaximizeWindow()\n", 
  "SDL_SetWindowPosition": "\nSet the position of a window.\n\n:param window: The window to reposition.\n:param x: The x coordinate of the window, SDL_WINDOWPOS_CENTERED, or\n    SDL_WINDOWPOS_UNDEFINED.\n:param y: The y coordinate of the window, SDL_WINDOWPOS_CENTERED, or\n    SDL_WINDOWPOS_UNDEFINED.\n\nThe window coordinate origin is the upper left of the display.\n\nSee also SDL_GetWindowPosition()\n", 
  "SDL_JoystickClose": "\nClose a joystick previously opened with SDL_JoystickOpen().\n", 
  "SDL_SetCursor": "\nSet the active cursor.\n", 
  "SDL_GetHint": "\nGet a hint.\n\n:return: The string value of a hint variable.\n", 
  "SDL_HasRDTSC": "\nThis function returns true if the CPU has the RDTSC instruction.\n", 
  "SDL_GetWindowFlags": "\nGet the window flags.\n", 
  "SDL_GL_DeleteContext": "\nDelete an OpenGL context.\n\nSee also SDL_GL_CreateContext()\n", 
  "SDLTest_RandomSint32": "\nReturns a random integer\n\n:return: Generated integer\n", 
  "SDL_CreateSemaphore": "\nCreate a semaphore, initialized with value, returns NULL on failure.\n", 
  "SDL_LowerBlit": "\nThis is a semi-private blit function and it performs low-level surface\nblitting only.\n", 
  "SDLTest_FuzzerInit": "\nInitializes the fuzzer for a test\n\n/param execKey Execution \"Key\" that initializes the random number\ngenerator uniquely for the test.\n", 
  "SDLTest_RandomSint32BoundaryValue": "\nReturns a random boundary value for Sint32 within the given\nboundaries. Boundaries are inclusive, see the usage examples below. If\nvalidDomain is true, the function will only return valid boundaries,\notherwise non-valid boundaries are also possible. If boundary1 >\nboundary2, the values are swapped\n\nUsage examples: RandomSint32BoundaryValue(-10, 20, SDL_TRUE) returns\n-11, -10, 19 or 20 RandomSint32BoundaryValue(-100, -10, SDL_FALSE)\nreturns -101 or -9 RandomSint32BoundaryValue(SINT32_MIN, 99,\nSDL_FALSE) returns 100 RandomSint32BoundaryValue(SINT32_MIN,\nSINT32_MAX, SDL_FALSE) returns SINT32_MIN (== error value)\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or\n    SINT32_MIN with error set\n", 
  "SDL_CreateCond": "\nCreate a condition variable.\n\nTypical use of condition variables:\n\nThread A: SDL_LockMutex(lock); while ( ! condition ) {\nSDL_CondWait(cond, lock); } SDL_UnlockMutex(lock);\n\nThread B: SDL_LockMutex(lock); ... condition = true; ...\nSDL_CondSignal(cond); SDL_UnlockMutex(lock);\n\nThere is some discussion whether to signal the condition variable with\nthe mutex locked or not. There is some potential performance benefit\nto unlocking first on some platforms, but there are some potential\nrace conditions depending on how your code is structured.\n\nIn general it's safer to signal the condition variable while the mutex\nis locked.\n", 
  "SDL_GetWindowPosition": "\nGet the position of a window.\n\n:param window: The window to query.\n:param x: Pointer to variable for storing the x position, may be NULL\n:param y: Pointer to variable for storing the y position, may be NULL\n\nSee also SDL_SetWindowPosition()\n", 
  "SDL_JoystickGetHat": "\nGet the current state of a POV hat on a joystick.\n\nThe hat indices start at index 0.\n\n:return: The return value is one of the following positions:\n", 
  "SDL_GetNumRenderDrivers": "\nGet the number of 2D rendering drivers available for the current\ndisplay.\n\nA render driver is a set of code that handles rendering and texture\nmanagement on a particular display. Normally there is only one, but\nsome drivers may have several available with different capabilities.\n\nSee also SDL_GetRenderDriverInfo()\n", 
  "SDL_GetRGB": "\nGet the RGB components from a pixel of the specified format.\n\nSee also SDL_GetRGBA\n", 
  "SDL_HapticName": "\nGet the implementation dependent name of a Haptic device.\n\nThis can be called before any joysticks are opened. If no name can be\nfound, this function returns NULL.\n\n:param device_index: Index of the device to get its name.\n:return: Name of the device or NULL on error.\n\nSee also SDL_NumHaptics\n", 
  "SDLTest_crc32Calc": "\n/brief calculate a crc32 from a data block\n\n/param crcContext pointer to context variable /param inBuf input\nbuffer to checksum /param inLen length of input buffer /param crc32\npointer to Uint32 to store the final CRC into\n\n/returns 0 for OK, -1 on error\n", 
  "SDL_WaitThread": "\nWait for a thread to finish. Threads that haven't been detached will\nremain (as a \"zombie\") until this function cleans them up. Not doing\nso is a resource leak.\n\nOnce a thread has been cleaned up through this function, the\nSDL_Thread that references it becomes invalid and should not be\nreferenced again. As such, only one thread may call SDL_WaitThread()\non another.\n\nThe return code for the thread function is placed in the area pointed\nto by status, if status is not NULL.\n\nYou may not wait on a thread that has been used in a call to\nSDL_DetachThread(). Use either that function or this one, but not\nboth, or behavior is undefined.\n\nIt is safe to pass NULL to this function; it is a no-op.\n", 
  "SDLTest_CommonInit": "\nOpen test window.\n\n:param state: The common state describing the test window to create.\n:return: True if initialization succeeded, false otherwise\n", 
  "SDL_RenderDrawRect": "\nDraw a rectangle on the current rendering target.\n\n:param renderer: The renderer which should draw a rectangle.\n:param rect: A pointer to the destination rectangle, or NULL to\n    outline the entire rendering target.\n:return: 0 on success, or -1 on error\n", 
  "SDLTest_Assert": "\nAssert that logs and break execution flow on failures.\n\n:param assertCondition: Evaluated condition or variable to assert;\n    fail (==0) or pass (!=0).\n:param assertDescription: Message to log with the assert describing\n    it.\n", 
  "SDL_GetWindowDisplayIndex": "\nGet the display index associated with a window.\n\n:return: the display index of the display containing the center of the\n    window, or -1 on error.\n", 
  "SDL_HapticQuery": "\nGets the haptic devices supported features in bitwise matter.\n\nExample: ::\n\n   if (SDL_HapticQuery(haptic) & SDL_HAPTIC_CONSTANT) {\n       printf(\"We have constant haptic effect!\");\n   }\n   \n\n:param haptic: The haptic device to query.\n:return: Haptic features in bitwise manner (OR'd).\n\nSee also SDL_HapticNumEffects\n", 
  "SDL_GL_GetAttribute": "\nGet the actual value for an attribute from the current context.\n", 
  "SDL_GetWindowData": "\nRetrieve the data pointer associated with a window.\n\n:param window: The window to query.\n:param name: The name of the pointer.\n:return: The value associated with 'name'\n\nSee also SDL_SetWindowData()\n", 
  "SDL_SetWindowIcon": "\nSet the icon for a window.\n\n:param window: The window for which the icon should be set.\n:param icon: The icon for the window.\n", 
  "SDL_GetKeyFromScancode": "\nGet the key code corresponding to the given scancode according to the\ncurrent keyboard layout.\n\nSee SDL_Keycode for details.\n\nSee also SDL_GetKeyName()\n", 
  "SDL_GetRGBA": "\nGet the RGBA components from a pixel of the specified format.\n\nSee also SDL_GetRGB\n", 
  "SDL_UnlockSurface": "\nSee also SDL_LockSurface()\n", 
  "SDL_GetPlatform": "\nGets the name of the platform.\n", 
  "SDL_SetWindowMinimumSize": "\nSet the minimum size of a window's client area.\n\n:param window: The window to set a new minimum size.\n:param min_w: The minimum width of the window, must be >0\n:param min_h: The minimum height of the window, must be >0\n\nYou can't change the minimum size of a fullscreen window, it\nautomatically matches the size of the display mode.\n\nSee also SDL_GetWindowMinimumSize()\n", 
  "SDL_GetSurfaceAlphaMod": "\nGet the additional alpha value used in blit operations.\n\n:param surface: The surface to query.\n:param alpha: A pointer filled in with the current alpha value.\n:return: 0 on success, or -1 if the surface is not valid.\n\nSee also SDL_SetSurfaceAlphaMod()\n", 
  "SDL_SetWindowFullscreen": "\nSet a window's fullscreen state.\n\n:return: 0 on success, or -1 if setting the display mode failed.\n\nSee also SDL_SetWindowDisplayMode()\n", 
  "SDLTest_RandomInit": "\nInitialize random number generator with two integers.\n\nNote: The random sequence of numbers returned by ...Random() is the\nsame for the same two integers and has a period of 2^31.\n\n:param rndContext: pointer to context structure\n:param xi: integer that defines the random sequence\n:param ci: integer that defines the random sequence\n", 
  "SDL_HasSSE": "\nThis function returns true if the CPU has SSE features.\n", 
  "SDL_AtomicLock": "\nLock a spin lock by setting it to a non-zero value.\n\n:param lock: Points to the lock.\n", 
  "SDL_CreateSystemCursor": "\nCreate a system cursor.\n\nSee also SDL_FreeCursor()\n", 
  "SDL_HapticOpened": "\nChecks if the haptic device at index has been opened.\n\n:param device_index: Index to check to see if it has been opened.\n:return: 1 if it has been opened or 0 if it hasn't.\n\nSee also SDL_HapticOpen\n", 
  "SDL_HapticIndex": "\nGets the index of a haptic device.\n\n:param haptic: Haptic device to get the index of.\n:return: The index of the haptic device or -1 on error.\n\nSee also SDL_HapticOpen\n", 
  "SDLTest_CompareSurfaces": "\nCompares a surface and with reference image data for equality.\n\n:param surface: Surface used in comparison\n:param referenceSurface: Test Surface used in comparison\n:param allowable_error: Allowable difference (squared) in blending\n    accuracy.\n:return: 0 if comparison succeeded, >0 (=number of pixels where\n    comparison failed) if comparison failed, -1 if any of the surfaces\n    were NULL, -2 if the surface sizes differ.\n", 
  "SDL_JoystickNameForIndex": "\nGet the implementation dependent name of a joystick. This can be\ncalled before any joysticks are opened. If no name can be found, this\nfunction returns NULL.\n", 
  "SDL_LoadDollarTemplates": "\nLoad Dollar Gesture templates from a file.\n", 
  "SDL_HasAVX": "\nThis function returns true if the CPU has AVX features.\n", 
  "SDL_GetCursor": "\nReturn the active cursor.\n", 
  "SDL_GameControllerMappingForGUID": "\nGet a mapping string for a GUID\n\n:return: the mapping string. Must be freed with SDL_free. Returns NULL\n    if no mapping is available\n", 
  "SDL_SaveBMP_RW": "\nSave a surface to a seekable SDL data stream (memory or file).\n\nIf freedst is non-zero, the stream will be closed after being written.\n\n:return: 0 if successful or -1 if there was an error.\n", 
  "SDL_HapticUnpause": "\nUnpauses a haptic device.\n\nCall to unpause after SDL_HapticPause().\n\n:param haptic: Haptic device to pause.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticPause\n", 
  "SDLTest_RandomSint16BoundaryValue": "\nReturns a random boundary value for Sint16 within the given\nboundaries. Boundaries are inclusive, see the usage examples below. If\nvalidDomain is true, the function will only return valid boundaries,\notherwise non-valid boundaries are also possible. If boundary1 >\nboundary2, the values are swapped\n\nUsage examples: RandomSint16BoundaryValue(-10, 20, SDL_TRUE) returns\n-11, -10, 19 or 20 RandomSint16BoundaryValue(-100, -10, SDL_FALSE)\nreturns -101 or -9 RandomSint16BoundaryValue(SINT16_MIN, 99,\nSDL_FALSE) returns 100 RandomSint16BoundaryValue(SINT16_MIN,\nSINT16_MAX, SDL_FALSE) returns SINT16_MIN (== error value) with error\nset\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or\n    SINT16_MIN with error set\n", 
  "SDL_SetAssertionHandler": "\nSet an application-defined assertion handler.\n\nThis allows an app to show its own assertion UI and/or force the\nresponse to an assertion failure. If the app doesn't provide this, SDL\nwill try to do the right thing, popping up a system-specific GUI\ndialog, and probably minimizing any fullscreen windows.\n\nThis callback may fire from any thread, but it runs wrapped in a\nmutex, so it will only fire from one thread at a time.\n\nSetting the callback to NULL restores SDL's original internal handler.\n\nThis callback is NOT reset to SDL's internal handler upon SDL_Quit()!\n\n:return: SDL_assert_state value of how to handle the assertion\n    failure.\n:param handler: Callback function, called when an assertion fails.\n:param userdata: A pointer passed to the callback as-is.\n", 
  "SDL_iconv_string": "\nThis function converts a string between encodings in one pass,\nreturning a string that must be freed with SDL_free() or NULL on\nerror.\n", 
  "SDL_UpdateWindowSurfaceRects": "\nCopy a number of rectangles on the window surface to the screen.\n\n:return: 0 on success, or -1 on error.\n\nSee also SDL_GetWindowSurface()\n", 
  "SDL_QuitSubSystem": "\nThis function cleans up specific SDL subsystems\n", 
  "SDL_VideoInit": "\nInitialize the video subsystem, optionally specifying a video driver.\n\n:param driver_name: Initialize a specific driver by name, or NULL for\n    the default video driver.\n:return: 0 on success, -1 on error\n\nThis function initializes the video subsystem; setting up a connection\nto the window manager, etc, and determines the available display modes\nand pixel formats, but does not initialize a window or graphics mode.\n\nSee also SDL_VideoQuit()\n", 
  "SDLTest_RandomUnitFloat": "\n:return: random float in range [0.0 - 1.0[\n", 
  "SDL_GetDisplayBounds": "\nGet the desktop area represented by a display, with the primary\ndisplay located at 0,0.\n\n:return: 0 on success, or -1 if the index is out of range.\n\nSee also SDL_GetNumVideoDisplays()\n", 
  "SDL_HapticNumEffects": "\nReturns the number of effects a haptic device can store.\n\nOn some platforms this isn't fully supported, and therefore is an\napproximation. Always check to see if your created effect was actually\ncreated and do not rely solely on SDL_HapticNumEffects().\n\n:param haptic: The haptic device to query effect max.\n:return: The number of effects the haptic device can store or -1 on\n    error.\n\nSee also SDL_HapticNumEffectsPlaying\n", 
  "SDL_SetWindowMaximumSize": "\nSet the maximum size of a window's client area.\n\n:param window: The window to set a new maximum size.\n:param max_w: The maximum width of the window, must be >0\n:param max_h: The maximum height of the window, must be >0\n\nYou can't change the maximum size of a fullscreen window, it\nautomatically matches the size of the display mode.\n\nSee also SDL_GetWindowMaximumSize()\n", 
  "SDL_HapticClose": "\nCloses a Haptic device previously opened with SDL_HapticOpen().\n\n:param haptic: Haptic device to close.\n", 
  "SDL_SetPixelFormatPalette": "\nSet the palette for a pixel format structure.\n", 
  "SDL_HapticDestroyEffect": "\nDestroys a haptic effect on the device.\n\nThis will stop the effect if it's running. Effects are automatically\ndestroyed when the device is closed.\n\n:param haptic: Device to destroy the effect on.\n:param effect: Identifier of the effect to destroy.\n\nSee also SDL_HapticNewEffect\n", 
  "SDL_RenderPresent": "\nUpdate the screen with rendering performed.\n", 
  "SDL_HasSSE41": "\nThis function returns true if the CPU has SSE4.1 features.\n", 
  "SDL_HasSSE42": "\nThis function returns true if the CPU has SSE4.2 features.\n", 
  "SDLTest_RandomSint64BoundaryValue": "\nReturns a random boundary value for Sint64 within the given\nboundaries. Boundaries are inclusive, see the usage examples below. If\nvalidDomain is true, the function will only return valid boundaries,\notherwise non-valid boundaries are also possible. If boundary1 >\nboundary2, the values are swapped\n\nUsage examples: RandomSint64BoundaryValue(-10, 20, SDL_TRUE) returns\n-11, -10, 19 or 20 RandomSint64BoundaryValue(-100, -10, SDL_FALSE)\nreturns -101 or -9 RandomSint64BoundaryValue(SINT64_MIN, 99,\nSDL_FALSE) returns 100 RandomSint64BoundaryValue(SINT64_MIN,\nSINT64_MAX, SDL_FALSE) returns SINT64_MIN (== error value) and error\nset\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or\n    SINT64_MIN with error set\n", 
  "SDL_DelHintCallback": "\nRemove a function watching a particular hint.\n\n:param name: The hint being watched\n:param callback: The function being called when the hint value changes\n:param userdata: A pointer being passed to the callback function\n", 
  "SDL_JoystickGetGUIDFromString": "\nconvert a string into a joystick formatted guid\n", 
  "SDL_LogSetAllPriority": "\nSet the priority of all log categories.\n", 
  "SDL_SetRenderDrawBlendMode": "\nSet the blend mode used for drawing operations (Fill and Line).\n\n:param renderer: The renderer for which blend mode should be set.\n:param blendMode: SDL_BlendMode to use for blending.\n:return: 0 on success, or -1 on error\n\nIf the blend mode is not supported, the closest supported mode is\nchosen.\n\nSee also SDL_GetRenderDrawBlendMode()\n", 
  "SDL_FilterEvents": "\nRun the filter function on the current event queue, removing any\nevents for which the filter returns 0.\n", 
  "SDLTest_RandomAsciiString": "\nGenerates random null-terminated string. The minimum length for the\nstring is 1 character, maximum length for the string is 255 characters\nand it can contain ASCII characters from 32 to 126.\n\nNote: Returned string needs to be deallocated.\n\n:return: Newly allocated random string; or NULL if length was invalid\n    or string could not be allocated.\n", 
  "SDLTest_LogError": "\nPrints given message with a timestamp in the TEST category and the\nERROR priority.\n\n:param fmt: Message to be logged\n", 
  "SDL_GetPrefPath": "\nGet the user-and-app-specific path where files can be written.\n\nGet the \"pref dir\". This is meant to be where users can write personal\nfiles (preferences and save games, etc) that are specific to your\napplication. This directory is unique per user, per application.\n\nThis function will decide the appropriate location in the native\nfilesystem, create the directory if necessary, and return a string of\nthe absolute path to the directory in UTF-8 encoding.\n\nOn Windows, the string might look like:\n\"C:\\\\Users\\\\bob\\\\AppData\\\\Roaming\\\\My Company\\\\My Program Name\\\\\"\n\nOn Linux, the string might look like: \"/home/bob/.local/share/My\nProgram Name/\"\n\nOn Mac OS X, the string might look like:\n\"/Users/bob/Library/Application Support/My Program Name/\"\n\n(etc.)\n\nYou specify the name of your organization (if it's not a real\norganization, your name or an Internet domain you own might do) and\nthe name of your application. These should be untranslated proper\nnames.\n\nBoth the org and app strings may become part of a directory name, so\nplease follow these rules:\n\nTry to use the same org string (including case-sensitivity) for all\nyour applications that use this function.\n\nAlways use a unique app string for each one, and make sure it never\nchanges for an app once you've decided on it.\n\nUnicode characters are legal, as long as it's UTF-8 encoded, but...\n\n...only use letters, numbers, and spaces. Avoid punctuation like \"Game\nName 2: Bad Guy's Revenge!\" ... \"Game Name 2\" is sufficient.\n\nThis returns an absolute path in UTF-8 encoding, and is guaranteed to\nend with a path separator ('\\' on Windows, '/' most other places).\n\nThe pointer returned by this function is owned by you. Please call\nSDL_free() on the pointer when you are done with it, or it will be a\nmemory leak. This is not necessarily a fast call, though, so you\nshould call this once near startup and save the string if you need it.\n\nYou should assume the path returned by this function is the only safe\nplace to write files (and that SDL_GetBasePath(), while it might be\nwritable, or even the parent of the returned path, aren't where you\nshould be writing things).\n\nSome platforms can't determine the pref path, and on other platforms,\nthis might be meaningless. In such cases, this function will return\nNULL.\n\n:param org: The name of your organization.\n:param app: The name of your application.\n:return: UTF-8 string of user dir in platform-dependent notation. NULL\n    if there's a problem (creating directory failed, etc).\n\nSee also SDL_GetBasePath\n", 
  "SDL_TryLockMutex": "\nTry to lock the mutex\n\n:return: 0, SDL_MUTEX_TIMEDOUT, or -1 on error\n", 
  "SDLTest_AssertSummaryToTestResult": "\nConverts the current assert summary state to a test result.\n\n:return: TEST_RESULT_PASSED, TEST_RESULT_FAILED, or\n    TEST_RESULT_NO_ASSERT\n", 
  "SDLTest_AssertCheck": "\nAssert for test cases that logs but does not break execution flow on\nfailures. Updates assertion counters.\n\n:param assertCondition: Evaluated condition or variable to assert;\n    fail (==0) or pass (!=0).\n:param assertDescription: Message to log with the assert describing\n    it.\n:return: Returns the assertCondition so it can be used to externally\n    to break execution flow if desired.\n", 
  "SDL_DelEventWatch": "\nRemove an event watch function added with SDL_AddEventWatch()\n", 
  "SDL_CreateMutex": "\nCreate a mutex, initialized unlocked.\n", 
  "SDL_SetSurfaceAlphaMod": "\nSet an additional alpha value used in blit operations.\n\n:param surface: The surface to update.\n:param alpha: The alpha value multiplied into blit operations.\n:return: 0 on success, or -1 if the surface is not valid.\n\nSee also SDL_GetSurfaceAlphaMod()\n", 
  "SDL_RegisterApp": "\nThis can be called to set the application class at startup\n", 
  "SDL_GetRenderDriverInfo": "\nGet information about a specific 2D rendering driver for the current\ndisplay.\n\n:param index: The index of the driver to query information about.\n:param info: A pointer to an SDL_RendererInfo struct to be filled with\n    information on the rendering driver.\n:return: 0 on success, -1 if the index was out of range.\n\nSee also SDL_CreateRenderer()\n", 
  "SDL_UnlockTexture": "\nUnlock a texture, uploading the changes to video memory, if needed.\n\nSee also SDL_LockTexture()\n", 
  "SDL_GetTextureColorMod": "\nGet the additional color value used in render copy operations.\n\n:param texture: The texture to query.\n:param r: A pointer filled in with the current red color value.\n:param g: A pointer filled in with the current green color value.\n:param b: A pointer filled in with the current blue color value.\n:return: 0 on success, or -1 if the texture is not valid.\n\nSee also SDL_SetTextureColorMod()\n", 
  "SDL_RegisterEvents": "\nThis function allocates a set of user-defined events, and returns the\nbeginning event number for that set of events.\n\nIf there aren't enough user-defined events left, this function returns\n(Uint32)-1\n", 
  "SDL_WaitEventTimeout": "\nWaits until the specified timeout (in milliseconds) for the next\navailable event.\n\n:return: 1, or 0 if there was an error while waiting for events.\n:param event: If not NULL, the next event is removed from the queue\n    and stored in that area.\n:param timeout: The timeout (in milliseconds) to wait for next event.\n", 
  "SDL_GameControllerName": "\nReturn the name for this currently opened controller\n", 
  "SDL_SetWindowBrightness": "\nSet the brightness (gamma correction) for a window.\n\n:return: 0 on success, or -1 if setting the brightness isn't\n    supported.\n\nSee also SDL_GetWindowBrightness()\n", 
  "SDL_Has3DNow": "\nThis function returns true if the CPU has 3DNow! features.\n", 
  "SDL_UpdateWindowSurface": "\nCopy the window surface to the screen.\n\n:return: 0 on success, or -1 on error.\n\nSee also SDL_GetWindowSurface()\n", 
  "SDLTest_CommonArg": "\nProcess one common argument.\n\n:param state: The common state describing the test window to create.\n:param index: The index of the argument to process in argv[].\n:return: The number of arguments processed (i.e. 1 for\n", 
  "SDL_GameControllerOpen": "\nOpen a game controller for use. The index passed as an argument refers\nto the N'th game controller on the system. This index is the value\nwhich will identify this controller in future controller events.\n\n:return: A controller identifier, or NULL if an error occurred.\n", 
  "SDL_RenderGetViewport": "\nGet the drawing area for the current target.\n\nSee also SDL_RenderSetViewport()\n", 
  "SDL_GetThreadName": "\nGet the thread name, as it was specified in SDL_CreateThread(). This\nfunction returns a pointer to a UTF-8 string that names the specified\nthread, or NULL if it doesn't have a name. This is internal memory,\nnot to be free()'d by the caller, and remains valid until the\nspecified thread is cleaned up by SDL_WaitThread().\n", 
  "SDL_RenderDrawLine": "\nDraw a line on the current rendering target.\n\n:param renderer: The renderer which should draw a line.\n:param x1: The x coordinate of the start point.\n:param y1: The y coordinate of the start point.\n:param x2: The x coordinate of the end point.\n:param y2: The y coordinate of the end point.\n:return: 0 on success, or -1 on error\n", 
  "SDL_SetSurfaceColorMod": "\nSet an additional color value used in blit operations.\n\n:param surface: The surface to update.\n:param r: The red color value multiplied into blit operations.\n:param g: The green color value multiplied into blit operations.\n:param b: The blue color value multiplied into blit operations.\n:return: 0 on success, or -1 if the surface is not valid.\n\nSee also SDL_GetSurfaceColorMod()\n", 
  "SDL_GetNumTouchFingers": "\nGet the number of active fingers for a given touch device.\n", 
  "SDL_AtomicTryLock": "\nTry to lock a spin lock by setting it to a non-zero value.\n\n:param lock: Points to the lock.\n:return: SDL_TRUE if the lock succeeded, SDL_FALSE if the lock is\n    already held.\n", 
  "SDL_GL_GetCurrentWindow": "\nGet the currently active OpenGL window.\n", 
  "SDL_WasInit": "\nThis function returns a mask of the specified subsystems which have\npreviously been initialized.\n\nIf flags is 0, it returns a mask of all initialized subsystems.\n", 
  "SDLTest_RandomUint32": "\nReturns a random positive integer\n\n:return: Generated integer\n", 
  "SDLTest_RandomUint16BoundaryValue": "\nReturns a random boundary value for Uint16 within the given\nboundaries. Boundaries are inclusive, see the usage examples below. If\nvalidDomain is true, the function will only return valid boundaries,\notherwise non-valid boundaries are also possible. If boundary1 >\nboundary2, the values are swapped\n\nUsage examples: RandomUint16BoundaryValue(10, 20, SDL_TRUE) returns\n10, 11, 19 or 20 RandomUint16BoundaryValue(1, 20, SDL_FALSE) returns 0\nor 21 RandomUint16BoundaryValue(0, 99, SDL_FALSE) returns 100\nRandomUint16BoundaryValue(0, 0xFFFF, SDL_FALSE) returns 0 (error set)\n\n:param boundary1: Lower boundary limit\n:param boundary2: Upper boundary limit\n:param validDomain: Should the generated boundary be valid (=within\n    the bounds) or not?\n:return: Random boundary value for the given range and domain or 0\n    with error set\n", 
  "SDL_RenderGetClipRect": "\nGet the clip rectangle for the current target.\n\n:param renderer: The renderer from which clip rectangle should be\n    queried.\n:param rect: A pointer filled in with the current clip rectangle, or\n    an empty rectangle if clipping is disabled.\n\nSee also SDL_RenderSetClipRect()\n", 
  "SDL_LogGetPriority": "\nGet the priority of a particular log category.\n", 
  "SDL_GameControllerGetAttached": "\nReturns SDL_TRUE if the controller has been opened and currently\nconnected, or SDL_FALSE if it has not.\n", 
  "SDL_SetClipRect": "\nSets the clipping rectangle for the destination surface in a blit.\n\nIf the clip rectangle is NULL, clipping will be disabled.\n\nIf the clip rectangle doesn't intersect the surface, the function will\nreturn SDL_FALSE and blits will be completely clipped. Otherwise the\nfunction returns SDL_TRUE and blits to the surface will be clipped to\nthe intersection of the surface area and the clipping rectangle.\n\nNote that blits are automatically clipped to the edges of the source\nand destination surfaces.\n", 
  "SDL_RenderReadPixels": "\nRead pixels from the current rendering target.\n\n:param renderer: The renderer from which pixels should be read.\n:param rect: A pointer to the rectangle to read, or NULL for the\n    entire render target.\n:param format: The desired format of the pixel data, or 0 to use the\n    format of the rendering target\n:param pixels: A pointer to be filled in with the pixel data\n:param pitch: The pitch of the pixels parameter.\n:return: 0 on success, or -1 if pixel reading is not supported.\n\nThis is a very slow operation, and should not be used frequently.\n", 
  "SDL_SemPost": "\nAtomically increases the semaphore's count (not blocking).\n\n:return: 0, or -1 on error.\n", 
  "SDL_IsScreenSaverEnabled": "\nReturns whether the screensaver is currently enabled (default on).\n\nSee also SDL_EnableScreenSaver()\n", 
  "SDL_ClearHints": "\nClear all hints.\n\nThis function is called during SDL_Quit() to free stored hints.\n", 
  "SDL_SetRenderTarget": "\nSet a texture as the current rendering target.\n\n:param renderer: The renderer.\n:param texture: The targeted texture, which must be created with the\n    SDL_TEXTUREACCESS_TARGET flag, or NULL for the default render\n    target\n:return: 0 on success, or -1 on error\n\nSee also SDL_GetRenderTarget()\n", 
  "SDL_RaiseWindow": "\nRaise a window above other windows and set the input focus.\n", 
  "SDL_JoystickName": "\nReturn the name for this currently opened joystick. If no name can be\nfound, this function returns NULL.\n", 
  "SDL_LoadWAV_RW": "\nThis function loads a WAVE from the data source, automatically freeing\nthat source if freesrc is non-zero. For example, to load a WAVE file,\nyou could do: ::\n\n       SDL_LoadWAV_RW(SDL_RWFromFile(\"sample.wav\", \"rb\"), 1, ...);\n   \n\nIf this function succeeds, it returns the given SDL_AudioSpec, filled\nwith the audio data format of the wave data, and sets *audio_buf to a\nmalloc()'d buffer containing the audio data, and sets *audio_len to\nthe length of that audio buffer, in bytes. You need to free the audio\nbuffer with SDL_FreeWAV() when you are done with it.\n\nThis function returns NULL and sets the SDL error message if the wave\nfile cannot be opened, uses an unknown data format, or is corrupt.\nCurrently raw and MS-ADPCM WAVE files are supported.\n", 
  "SDL_GetWindowSurface": "\nGet the SDL surface associated with the window.\n\n:return: The window's framebuffer surface, or NULL on error.\n\nA new surface will be created with the optimal format for the window,\nif necessary. This surface will be freed when the window is destroyed.\n\nYou may not combine this with 3D or the rendering API on this window.\n\nSee also SDL_UpdateWindowSurface()\n", 
  "SDL_HapticOpenFromJoystick": "\nOpens a Haptic device for usage from a Joystick device.\n\nYou must still close the haptic device seperately. It will not be\nclosed with the joystick.\n\nWhen opening from a joystick you should first close the haptic device\nbefore closing the joystick device. If not, on some implementations\nthe haptic device will also get unallocated and you'll be unable to\nuse force feedback on that device.\n\n:param joystick: Joystick to create a haptic device from.\n:return: A valid haptic device identifier on success or NULL on error.\n\nSee also SDL_HapticOpen\n", 
  "SDLTest_CommonUsage": "\nReturns common usage information.\n\n:param state: The common state describing the test window to create.\n:return: String with usage information\n", 
  "SDL_CondWaitTimeout": "\nWaits for at most ms milliseconds, and returns 0 if the condition\nvariable is signaled, SDL_MUTEX_TIMEDOUT if the condition is not\nsignaled in the allotted time, and -1 on error.\n\nOn some platforms this function is implemented by looping with a delay\nof 1 ms, and so should be avoided if possible.\n", 
  "SDL_CondSignal": "\nRestart one of the threads that are waiting on the condition variable.\n\n:return: 0 or -1 on error.\n", 
  "SDL_IntersectRect": "\nCalculate the intersection of two rectangles.\n\n:return: SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n", 
  "SDL_JoystickNumAxes": "\nGet the number of general axis controls on a joystick.\n", 
  "SDL_DestroyWindow": "\nDestroy a window.\n", 
  "SDL_MouseIsHaptic": "\nGets whether or not the current mouse has haptic capabilities.\n\n:return: SDL_TRUE if the mouse is haptic, SDL_FALSE if it isn't.\n\nSee also SDL_HapticOpenFromMouse\n", 
  "SDL_PeepEvents": "\nChecks the event queue for messages and optionally returns them.\n\nIf action is SDL_ADDEVENT, up to numevents events will be added to the\nback of the event queue.\n\nIf action is SDL_PEEKEVENT, up to numevents events at the front of the\nevent queue, within the specified minimum and maximum type, will be\nreturned and will not be removed from the queue.\n\nIf action is SDL_GETEVENT, up to numevents events at the front of the\nevent queue, within the specified minimum and maximum type, will be\nreturned and will be removed from the queue.\n\n:return: The number of events actually stored, or -1 if there was an\n    error.\n\nThis function is thread-safe.\n", 
  "SDL_NumHaptics": "\nCount the number of haptic devices attached to the system.\n\n:return: Number of haptic devices detected on the system.\n", 
  "SDL_GetTextureAlphaMod": "\nGet the additional alpha value used in render copy operations.\n\n:param texture: The texture to query.\n:param alpha: A pointer filled in with the current alpha value.\n:return: 0 on success, or -1 if the texture is not valid.\n\nSee also SDL_SetTextureAlphaMod()\n", 
  "SDL_GL_ResetAttributes": "\nReset all previously set OpenGL context attributes to their default\nvalues.\n", 
  "SDL_GL_SetAttribute": "\nSet an OpenGL window attribute before window creation.\n", 
  "SDL_IsTextInputActive": "\nReturn whether or not Unicode text input events are enabled.\n\nSee also SDL_StartTextInput()\n", 
  "SDL_JoystickGetGUID": "\nReturn the GUID for this opened joystick\n", 
  "SDL_GetEventFilter": "\nReturn the current event filter - can be used to \"chain\" filters. If\nthere is no event filter set, this function returns SDL_FALSE.\n", 
  "SDL_GetNumTouchDevices": "\nGet the number of registered touch devices.\n", 
  "SDL_GetRendererOutputSize": "\nGet the output size of a rendering context.\n", 
  "SDL_GetColorKey": "\nGets the color key (transparent pixel) in a blittable surface.\n\n:param surface: The surface to update\n:param key: A pointer filled in with the transparent pixel in the\n    native surface format\n:return: 0 on success, or -1 if the surface is not valid or colorkey\n    is not enabled.\n", 
  "SDL_ConvertAudio": "\nOnce you have initialized the cvt structure using SDL_BuildAudioCVT(),\ncreated an audio buffer cvt->buf, and filled it with cvt->len bytes of\naudio data in the source format, this function will convert it in-\nplace to the desired format.\n\nThe data conversion may expand the size of the audio data, so the\nbuffer cvt->buf should be allocated after the cvt structure is\ninitialized by SDL_BuildAudioCVT(), and should be\ncvt->len*cvt->len_mult bytes long.\n", 
  "SDL_CreateWindow": "\nCreate a window with the specified position, dimensions, and flags.\n\n:param title: The title of the window, in UTF-8 encoding.\n:param x: The x position of the window, SDL_WINDOWPOS_CENTERED, or\n    SDL_WINDOWPOS_UNDEFINED.\n:param y: The y position of the window, SDL_WINDOWPOS_CENTERED, or\n    SDL_WINDOWPOS_UNDEFINED.\n:param w: The width of the window.\n:param h: The height of the window.\n:param flags: The flags for the window, a mask of any of the\n    following: SDL_WINDOW_FULLSCREEN, SDL_WINDOW_OPENGL,\n    SDL_WINDOW_HIDDEN, SDL_WINDOW_BORDERLESS, SDL_WINDOW_RESIZABLE,\n    SDL_WINDOW_MAXIMIZED, SDL_WINDOW_MINIMIZED,\n    SDL_WINDOW_INPUT_GRABBED, SDL_WINDOW_ALLOW_HIGHDPI.\n:return: The id of the window created, or zero if window creation\n    failed.\n\nSee also SDL_DestroyWindow()\n", 
  "SDL_HasSSE2": "\nThis function returns true if the CPU has SSE2 features.\n", 
  "SDL_DestroyTexture": "\nDestroy the specified texture.\n\nSee also SDL_CreateTexture()\n", 
  "SDL_Init": "\nThis function initializes the subsystems specified by flags Unless the\nSDL_INIT_NOPARACHUTE flag is set, it will install cleanup signal\nhandlers for some commonly ignored fatal signals (like SIGSEGV).\n", 
  "SDL_GameControllerGetButtonFromString": "\nturn this string into a button mapping\n", 
  "SDL_GameControllerUpdate": "\nUpdate the current state of the open game controllers.\n\nThis is called automatically by the event loop if any game controller\nevents are enabled.\n", 
  "SDL_GL_ExtensionSupported": "\nReturn true if an OpenGL extension is supported for the current\ncontext.\n", 
  "SDLTest_AssertPass": "\nExplicitely pass without checking an assertion condition. Updates\nassertion counter.\n\n:param assertDescription: Message to log with the assert describing\n    it.\n", 
  "SDL_GetTextureBlendMode": "\nGet the blend mode used for texture copy operations.\n\n:param texture: The texture to query.\n:param blendMode: A pointer filled in with the current blend mode.\n:return: 0 on success, or -1 if the texture is not valid.\n\nSee also SDL_SetTextureBlendMode()\n", 
  "SDL_GL_UnloadLibrary": "\nUnload the OpenGL library previously loaded by SDL_GL_LoadLibrary().\n\nSee also SDL_GL_LoadLibrary()\n", 
  "SDL_HapticSetAutocenter": "\nSets the global autocenter of the device.\n\nAutocenter should be between 0 and 100. Setting it to 0 will disable\nautocentering.\n\nDevice must support the SDL_HAPTIC_AUTOCENTER feature.\n\n:param haptic: Haptic device to set autocentering on.\n:param autocenter: Value to set autocenter to, 0 disables\n    autocentering.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticQuery\n", 
  "SDL_CreateTextureFromSurface": "\nCreate a texture from an existing surface.\n\n:param renderer: The renderer.\n:param surface: The surface containing pixel data used to fill the\n    texture.\n:return: The created texture is returned, or 0 on error.\n\nThe surface is not modified or freed by this function.\n\nSee also SDL_QueryTexture()\n", 
  "SDL_ThreadID": "\nGet the thread identifier for the current thread.\n", 
  "SDL_SetMainReady": "\nThis is called by the real SDL main function to let the rest of the\nlibrary know that initialization was done properly.\n\nCalling this yourself without knowing what you're doing can cause\ncrashes and hard to diagnose problems with your application.\n", 
  "SDL_SetPaletteColors": "\nSet a range of colors in a palette.\n\n:param palette: The palette to modify.\n:param colors: An array of colors to copy into the palette.\n:param firstcolor: The index of the first palette entry to modify.\n:param ncolors: The number of entries to modify.\n:return: 0 on success, or -1 if not all of the colors could be set.\n", 
  "SDL_GameControllerGetStringForAxis": "\nturn this axis enum into a string mapping\n", 
  "SDL_HapticStopAll": "\nStops all the currently playing effects on a haptic device.\n\n:param haptic: Haptic device to stop.\n:return: 0 on success or -1 on error.\n", 
  "SDL_GL_LoadLibrary": "\nDynamically load an OpenGL library.\n\n:param path: The platform dependent OpenGL library name, or NULL to\n    open the default OpenGL library.\n:return: 0 on success, or -1 if the library couldn't be loaded.\n\nThis should be done after initializing the video driver, but before\ncreating any OpenGL windows. If no OpenGL library is loaded, the\ndefault library will be loaded upon creation of the first OpenGL\nwindow.\n\nIf you do this, you need to retrieve all of the GL functions used in\nyour program from the dynamic library using SDL_GL_GetProcAddress().\n\nSee also SDL_GL_GetProcAddress()\n", 
  "SDL_PollEvent": "\nPolls for currently pending events.\n\n:return: 1 if there are any pending events, or 0 if there are none\n    available.\n:param event: If not NULL, the next event is removed from the queue\n    and stored in that area.\n", 
  "SDL_TLSSet": "\nSet the value associated with a thread local storage ID for the\ncurrent thread.\n\n:param id: The thread local storage ID\n:param value: The value to associate with the ID for the current\n    thread\n:param destructor: A function called when the thread exits, to free\n    the value.\n:return: 0 on success, -1 on error\n\nSee also SDL_TLSCreate()\n", 
  "SDL_UpdateYUVTexture": "\nUpdate a rectangle within a planar YV12 or IYUV texture with new pixel\ndata.\n\n:param texture: The texture to update\n:param rect: A pointer to the rectangle of pixels to update, or NULL\n    to update the entire texture.\n:param Yplane: The raw pixel data for the Y plane.\n:param Ypitch: The number of bytes between rows of pixel data for the\n    Y plane.\n:param Uplane: The raw pixel data for the U plane.\n:param Upitch: The number of bytes between rows of pixel data for the\n    U plane.\n:param Vplane: The raw pixel data for the V plane.\n:param Vpitch: The number of bytes between rows of pixel data for the\n    V plane.\n:return: 0 on success, or -1 if the texture is not valid.\n\nYou can use SDL_UpdateTexture() as long as your pixel data is a\ncontiguous block of Y and U/V planes in the proper order, but this\nfunction is available if your pixel data is not contiguous.\n", 
  "SDL_RemoveTimer": "\nRemove a timer knowing its ID.\n\n:return: A boolean value indicating success or failure.\n\nIt is not safe to remove a timer multiple times.\n", 
  "SDL_GetAudioDeviceName": "\nGet the human-readable name of a specific audio device. Must be a\nvalue between 0 and (number of audio devices-1). Only valid after a\nsuccessfully initializing the audio subsystem. The values returned by\nthis function reflect the latest call to SDL_GetNumAudioDevices();\nrecall that function to redetect available hardware.\n\nThe string returned by this function is UTF-8 encoded, read-only, and\nmanaged internally. You are not to free it. If you need to keep the\nstring for any length of time, you should make your own copy of it, as\nit will be invalid next time any of several other SDL functions is\ncalled.\n", 
  "SDL_GetClosestDisplayMode": "\nGet the closest match to the requested display mode.\n\n:param displayIndex: The index of display from which mode should be\n    queried.\n:param mode: The desired display mode\n:param closest: A pointer to a display mode to be filled in with the\n    closest match of the available display modes.\n:return: The passed in value\n\nThe available display modes are scanned, and closest is filled in with\nthe closest mode matching the requested mode and returned. The mode\nformat and refresh_rate default to the desktop mode if they are 0. The\nmodes are scanned with size being first priority, format being second\npriority, and finally checking the refresh_rate. If all the available\nmodes are too small, then NULL is returned.\n\nSee also SDL_GetNumDisplayModes()\n", 
  "SDL_InitSubSystem": "\nThis function initializes specific SDL subsystems\n", 
  "SDL_CreateColorCursor": "\nCreate a color cursor.\n\nSee also SDL_FreeCursor()\n", 
  "SDL_GetWindowSize": "\nGet the size of a window's client area.\n\n:param window: The window to query.\n:param w: Pointer to variable for storing the width, may be NULL\n:param h: Pointer to variable for storing the height, may be NULL\n\nSee also SDL_SetWindowSize()\n", 
  "SDL_SetTextureColorMod": "\nSet an additional color value used in render copy operations.\n\n:param texture: The texture to update.\n:param r: The red color value multiplied into copy operations.\n:param g: The green color value multiplied into copy operations.\n:param b: The blue color value multiplied into copy operations.\n:return: 0 on success, or -1 if the texture is not valid or color\n    modulation is not supported.\n\nSee also SDL_GetTextureColorMod()\n", 
  "SDL_ResetAssertionReport": "\nReset the list of all assertion failures.\n\nReset list of all assertions triggered.\n\nSee also SDL_GetAssertionReport\n", 
  "SDL_CreateWindowAndRenderer": "\nCreate a window and default renderer.\n\n:param width: The width of the window\n:param height: The height of the window\n:param window_flags: The flags used to create the window\n:param window: A pointer filled with the window, or NULL on error\n:param renderer: A pointer filled with the renderer, or NULL on error\n:return: 0 on success, or -1 on error\n", 
  "SDL_JoystickInstanceID": "\nGet the instance ID of an opened joystick or -1 if the joystick is\ninvalid.\n", 
  "SDL_StopTextInput": "\nStop receiving any text input events. This function will hide the on-\nscreen keyboard if supported.\n\nSee also SDL_StartTextInput()\n", 
  "SDL_Log": "\nLog a message with SDL_LOG_CATEGORY_APPLICATION and\nSDL_LOG_PRIORITY_INFO.\n", 
  "SDL_GetCurrentDisplayMode": "\nFill in information about the current display mode.\n", 
  "SDL_RectEquals": "\nReturns true if the two rectangles are equal.\n", 
  "SDL_HasMMX": "\nThis function returns true if the CPU has MMX features.\n", 
  "SDL_HasIntersection": "\nDetermine whether two rectangles intersect.\n\n:return: SDL_TRUE if there is an intersection, SDL_FALSE otherwise.\n", 
  "SDL_MostSignificantBitIndex32": "\nGet the index of the most significant bit. Result is undefined when\ncalled with 0. This operation can also be stated as \"count leading\nzeroes\" and \"log base 2\".\n\n:return: Index of the most significant bit, or -1 if the value is 0.\n", 
  "SDL_CloseAudio": "\nThis function shuts down audio processing and closes the audio device.\n", 
  "SDL_GetRenderer": "\nGet the renderer associated with a window.\n", 
  "SDL_CalculateGammaRamp": "\nCalculate a 256 entry gamma ramp for a gamma value.\n", 
  "SDL_GL_SwapWindow": "\nSwap the OpenGL buffers for a window, if double-buffering is\nsupported.\n", 
  "SDL_HapticRumblePlay": "\nRuns simple rumble on a haptic device.\n\n:param haptic: Haptic device to play rumble effect on.\n:param strength: Strength of the rumble to play as a 0-1 float value.\n:param length: Length of the rumble to play in milliseconds.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticRumbleSupported\n", 
  "SDL_RenderDrawLines": "\nDraw a series of connected lines on the current rendering target.\n\n:param renderer: The renderer which should draw multiple lines.\n:param points: The points along the lines\n:param count: The number of points, drawing count-1 lines\n:return: 0 on success, or -1 on error\n", 
  "SDL_BuildAudioCVT": "\nThis function takes a source format and rate and a destination format\nand rate, and initializes the cvt structure with information needed by\nSDL_ConvertAudio() to convert a buffer of audio data from one format\nto the other.\n\n:return: -1 if the format conversion is not supported, 0 if there's no\n    conversion needed, or 1 if the audio filter is set up.\n", 
  "SDL_SetWindowGammaRamp": "\nSet the gamma ramp for a window.\n\n:param window: The window for which the gamma ramp should be set.\n:param red: The translation table for the red channel, or NULL.\n:param green: The translation table for the green channel, or NULL.\n:param blue: The translation table for the blue channel, or NULL.\n:return: 0 on success, or -1 if gamma ramps are unsupported.\n\nSet the gamma translation table for the red, green, and blue channels\nof the video hardware. Each table is an array of 256 16-bit\nquantities, representing a mapping between the input and output for\nthat channel. The input is the index into the array, and the output is\nthe 16-bit gamma value at that index, scaled to the output color\nprecision.\n\nSee also SDL_GetWindowGammaRamp()\n", 
  "SDLTest_Md5Update": "\n/brief update digest from variable length data\n\n/param mdContext pointer to context variable /param inBuf pointer to\ndata array/string /param inLen length of data array/string\n\nNote: The function updates the message-digest context to account for\nthe presence of each of the characters inBuf[0..inLen-1] in the\nmessage whose digest is being computed.\n", 
  "SDL_MapRGBA": "\nMaps an RGBA quadruple to a pixel value for a given pixel format.\n\nSee also SDL_MapRGB\n", 
  "SDL_SemTryWait": "\nNon-blocking variant of SDL_SemWait().\n\n:return: 0 if the wait succeeds,\n", 
  "SDL_FlushEvent": "\nThis function clears events from the event queue\n", 
  "SDL_GameControllerGetJoystick": "\nGet the underlying joystick object used by a controller\n", 
  "SDL_GetWindowID": "\nGet the numeric ID of a window, for logging purposes.\n", 
  "SDL_RectEmpty": "\nReturns true if the rectangle has no area.\n", 
  "SDL_CreateShapedWindow": "\nCreate a window that can be shaped with the specified position,\ndimensions, and flags.\n\n:param title: The title of the window, in UTF-8 encoding.\n:param x: The x position of the window, SDL_WINDOWPOS_CENTERED, or\n    SDL_WINDOWPOS_UNDEFINED.\n:param y: The y position of the window, SDL_WINDOWPOS_CENTERED, or\n    SDL_WINDOWPOS_UNDEFINED.\n:param w: The width of the window.\n:param h: The height of the window.\n:param flags: The flags for the window, a mask of\n    SDL_WINDOW_BORDERLESS with any of the following:\n    SDL_WINDOW_OPENGL, SDL_WINDOW_INPUT_GRABBED, SDL_WINDOW_HIDDEN,\n    SDL_WINDOW_RESIZABLE, SDL_WINDOW_MAXIMIZED, SDL_WINDOW_MINIMIZED,\n    SDL_WINDOW_BORDERLESS is always set, and SDL_WINDOW_FULLSCREEN is\n    always unset.\n:return: The window created, or NULL if window creation failed.\n\nSee also SDL_DestroyWindow()\n", 
  "SDL_JoystickEventState": "\nEnable/disable joystick event polling.\n\nIf joystick events are disabled, you must call SDL_JoystickUpdate()\nyourself and check the state of the joystick when you want joystick\ninformation.\n\nThe state can be one of SDL_QUERY, SDL_ENABLE or SDL_IGNORE.\n", 
  "SDL_RenderDrawRects": "\nDraw some number of rectangles on the current rendering target.\n\n:param renderer: The renderer which should draw multiple rectangles.\n:param rects: A pointer to an array of destination rectangles.\n:param count: The number of rectangles.\n:return: 0 on success, or -1 on error\n", 
  "SDL_HapticUpdateEffect": "\nUpdates the properties of an effect.\n\nCan be used dynamically, although behaviour when dynamically changing\ndirection may be strange. Specifically the effect may reupload itself\nand start playing from the start. You cannot change the type either\nwhen running SDL_HapticUpdateEffect().\n\n:param haptic: Haptic device that has the effect.\n:param effect: Effect to update.\n:param data: New effect properties to use.\n:return: 0 on success or -1 on error.\n\nSee also SDL_HapticNewEffect\n", 
  "SDL_MaximizeWindow": "\nMake a window as large as possible.\n\nSee also SDL_RestoreWindow()\n", 
  "SDL_SemValue": "\nReturns the current count of the semaphore.\n", 
  "SDL_SetWindowShape": "\nSet the shape and parameters of a shaped window.\n\n:param window: The shaped window whose parameters should be set.\n:param shape: A surface encoding the desired shape for the window.\n:param shape_mode: The parameters to set for the shaped window.\n:return: 0 on success, SDL_INVALID_SHAPE_ARGUMENT on invalid an\n    invalid shape argument, or SDL_NONSHAPEABLE_WINDOW if the\n    SDL_Window* given does not reference a valid shaped window.\n\nSee also SDL_WindowShapeMode\n", 
  "SDL_AtomicGet": "\nGet the value of an atomic variable.\n", 
  "SDL_HapticNumAxes": "\nGets the number of haptic axes the device has.\n\nSee also SDL_HapticDirection\n", 
  "SDLTest_RandomSint64": "\nReturns random Sint64.\n\n:return: Generated signed integer\n"
}