#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from raxmon_cli.common import run_action
from raxmon_cli.utils import str_to_dict, str_to_list, instance_to_dict

OPTIONS = [
    [['--entity-id'], {'dest': 'entity_id', 'help': 'Parent Entity ID'}],
    [['--id'], {'dest': 'id', 'help': 'Check ID'}],
    [['--label'], {'dest': 'label', 'help': 'Check label'}],
    [['--type'], {'dest': 'type', 'help': 'Check type'}],
    [['--details'], {'dest': 'details', 'help': 'Check details'}],
    [['--timeout'], {'dest': 'timeout', 'help': 'Check timeout'}],
    [['--period'], {'dest': 'period', 'help': 'Check period'}],
    [['--monitoring-zones'], {'dest': 'monitoring_zones', 'help': 'A list of monitoring zones'}],
    [['--target-alias'], {'dest': 'target_alias', 'help': 'Target alias'}],
    [['--target-hostname'], {'dest': 'target_hostname', 'help': 'Target hostname'}],
    [['--target-resolver'], {'dest': 'target_resolver', 'help': 'Target resolver'}]
]

REQUIRED_OPTIONS = ['entity_id', 'id']

def callback(driver, options, args, callback):
    options.monitoring_zones = str_to_list(options.monitoring_zones)
    options.details = str_to_dict(options.details)
    keys = ['label', 'type', 'details', 'timeout', 'period', 'monitoring_zones',
            'target_alias', 'target_hostname', 'target_resolver']

    ch = driver.get_check(entity_id=options.entity_id, check_id=options.id)

    if ch.type == 'agent.plugin':
        if options.details.get('args') and not isinstance(options.details['args'], list):
            options.details['args'] = [options.details['args']]

    data = instance_to_dict(options, keys, False)
    result = driver.update_check(check=ch, data=data)
    callback(result)

run_action(OPTIONS, REQUIRED_OPTIONS, 'checks', 'update', callback)
