#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import optparse

from raxmon_cli.common import run_action
from raxmon_cli.utils import str_to_list

OPTIONS = [
    [['--notification-plans'], {'dest': 'notification_plans', 'help': 'Suppression notification plans'}],
    [['--entities'], {'dest': 'entities', 'help': 'Suppression entities'}],
    [['--alarms'], {'dest': 'alarms', 'help': 'Suppression alarms'}],
    [['--checks'], {'dest': 'checks', 'help': 'Suppression checks'}],
    [['--start-time'], {'dest': 'start_time', 'help': 'Suppression start time (Unix time in milliseconds)'}],
    [['--end-time'], {'dest': 'end_time', 'help': 'Suppression end time (Unix time in milliseconds)'}]
]

REQUIRED_OPTIONS = ['start_time', 'end_time']

def callback(driver, options, args, callback):
    options.notification_plans = str_to_list(options.notification_plans)
    options.entities = str_to_list(options.entities)
    options.alarms = str_to_list(options.alarms)
    options.checks = str_to_list(options.checks)
    result = driver.create_suppression(notification_plans=options.notification_plans,
                                       entities=options.entities,
                                       alarms=options.alarms,
                                       checks=options.checks,
                                       start_time=options.start_time,
                                       end_time=options.end_time,
                                       who=options.who,
                                       why=options.why)

    callback(result)

run_action(OPTIONS, REQUIRED_OPTIONS, 'suppression', 'create', callback)
