#!/usr/bin/env python
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

from raxmon_cli.common import run_action
from raxmon_cli.utils import str_to_list

OPTIONS = [
    [['--label'], {'dest': 'label', 'help': 'Notification plan label'}],
    [['--critical-state'], {'dest': 'critical_state', 'help': 'A list of Notification ids for CRITICAL state'}],
    [['--warning-state'], {'dest': 'warning_state', 'help': 'A list of Notification ids for WARNING state'}],
    [['--ok-state'], {'dest': 'ok_state', 'help': 'A list of Notification ids for OK state'}],
]

REQUIRED_OPTIONS = ['label']

def callback(driver, options, args, callback):
    options.critical_state = str_to_list(options.critical_state)
    options.warning_state = str_to_list(options.warning_state)
    options.ok_state = str_to_list(options.ok_state)

    result = driver.create_notification_plan(label=options.label,
                                             critical_state=options.critical_state,
                                             warning_state=options.warning_state,
                                             ok_state=options.ok_state,
                                             who=options.who,
                                             why=options.why)

    callback(result)

run_action(OPTIONS, REQUIRED_OPTIONS, 'notification_plans', 'create', callback)
