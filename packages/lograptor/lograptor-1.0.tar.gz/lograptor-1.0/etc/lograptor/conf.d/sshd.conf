# "sshd" app configuration for Lograptor

[main]
desc = SSH daemon
tags = sshd
files = ${logdir}/secure*, ${logdir}/sshd*, ${logdir}/logdir/${host}/%Y/%m/secure-%Y%m%d.log*
enabled = yes
priority = 0

[rules]
User_Logins_PK = \[(?P<thread>\d+)\]: Accepted publickey for (?P<user>${user}) from (?P<client>${client})
User_Logins_PW = \[(?P<thread>\d+)\]: Accepted password for (?P<user>${user}) from (?P<client>${client})
User_Failures_PK = \[(?P<thread>\d+)\]: Failed publickey for (?P<user>${user}) from (?P<client>${client})
User_Failures_PW = \[(?P<thread>\d+)\]: Failed password for (?P<user>${user}) from (?P<client>${client})
Invalid_User_Fail = \[(?P<thread>\d+)\]: Failed password for invalid user (?P<user>${user})\s
                    from (?P<client>${client})
Connection_Open = \[(?P<thread>\d+)\]: Connection from (?P<client>${client}) port (?P<port>\d+)
Connection_Closing = \[(?P<thread>\d+)\]: Closing connection to (?P<client>${client})
Connection_Closed = \[(?P<thread>\d+)\]: Connection closed by (?P<client>${client})
Session_Open = \[(?P<thread>\d+)\]: pam_unix\(.+\): session opened for user (?P<user>${user})\s
               by \(uid\=(?P<uid>${uid})\)
Session_Close = \[(?P<thread>\d+)\]: pam_unix\(.+\): session closed for user (?P<user>${user})
Matching_Key = \[(?P<thread>\d+)\]: Found matching (?P<algorithm>[\w\d-]+) key:\s
               (?P<key>(?:[0-9a-f]{2}:)+[0-9a-f]{2})
Postponed_Key = \[(?P<thread>\d+)\]: Postponed publickey for (?P<user>${user}) from\s
                (?P<client>${client}) port (?P<port>\d+) ssh2
Client_Disconnect = \[(?P<thread>\d+)\]: Received disconnect from (?P<client>${client}): (?P<reason>.+)
Connection_Timed_Out = \[(?P<thread>\d+)\]: Read error from remote host (?P<client>${client})
                       : Connection timed out
Auth_Failures = \[(?P<thread>\d+)\]: (pam_unix\(.+\):|PAM \d+ more) authentication failure(s)?;\s
                (.+) rhost=(?P<client>${client})(\s+)user=(?P<user>${user})
Set_Value = \[(?P<thread>\d+)\]: Set (?P<object>.+) to (?P<value>\d+)
Transferred = \[(?P<thread>\d+)\]: Transferred: sent (?P<sent>\d.+), received (?P<received>\d+)
User_PID = \[(?P<thread>\d+)\]: User child is on pid (?P<pid>${pid})
SFTP_Request = \[(?P<thread>\d+)\]: subsystem request for sftp
Disconnecting = \[(?P<thread>\d+)\]: Disconnecting: (?P<reason>.+)
Reverse_Fail = \[(?P<thread>\d+)\]: reverse mapping checking getaddrinfo for (?P<client>${client}) failed
LDAP_Reconnect = \[(?P<thread>\d+)\]: nss_ldap: reconnected to LDAP server
PAM_LDAP_Error = \[(?P<thread>\d+)\]: pam_ldap: error trying to bind as user "(?P<user>.+)"
Invalid_User = \[(?P<thread>\d+)\]: Invalid user (?P<user>${user}) from (?P<client>${client})
Auth_Invalid_User = \[(?P<thread>\d+)\]: input_userauth_request: invalid user (?P<user>${user})
PAM_Error = \[(?P<thread>\d+)\]: pam_succeed_if\(.+\): error retrieving information\s
            about user (?P<user>${user})
Missing_ID_String = \[(?P<thread>\d+)\]: Did not receive identification string from (?P<client>${client})
Unknown_Host = \[(?P<thread>\d+)\]: error: connect_to (?P<user>${user})@(?P<client>${client}): unknown host

[root_failures]
subreport = logins_report
title = ROOT FAILURES
color = red
function = table("Hostname","Service","Client")
User_Failures_PK = (user=="\broot\b",host,"sshd(pk)",client)
User_Failures_PW = (user=="\broot\b",host,"sshd(pw)",client)

[root_logins]
subreport = logins_report
title = ROOT Logins
color = blue
function = table("Hostname","Service","Client")
User_Logins_PK = (user=="\broot\b",host,"sshd(pk)",client)
User_Logins_PW = (user=="\broot\b",host,"sshd(pw)",client)

[user_failures]
subreport = logins_report
title = User Failures
color = red
function = table("Username","Service","Server::client")
User_Failures_PK = (user!="\broot\b",user,"sshd(pk)",host,client)
User_Failures_PW = (user!="\broot\b",user,"sshd(pw)",host,client)

[user_logins]
subreport = logins_report
title = User Logins
color = blue
function = table("Username","Service","Server::client")
User_Logins_PK = (user!="\broot\b",user,"sshd(pk)",host,client)
User_Logins_PW = (user!="\broot\b",user,"sshd(pw)",host,client)
