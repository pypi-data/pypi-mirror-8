{% extends 'project/project.jinja' %}

{% from "_helpers.jinja" import status_label, render_pagination %}
{% from "_helpers.jinja" import render_task with context %}
{% from "_helpers.jinja" import render_progress_bar %}

{% block breadcrumb %}
{{ super() }}
<li class="divider">/</li>
<li><a href="{{ url_for('project.work.render_task_list', project_id=project.id, state='opened') }}">Tasks</a></li>
{% endblock %}

{% block main %}

{{ super() }}
{% set iteration=request.args.get('iteration', None) %}

<div class="row-fluid">

  <div class="row-fluid">
    <div class="span6">
      <ul id="task-list-tab" class="nav nav-tabs">
        {% if not request.args.get('orphans', None) %}
        <li class="{% if state_filter == 'opened' %}active{% endif %} ">
          <a href="{{ url_for('project.work.render_task_list', project_id=project.id, state='opened', tag=request.args.get('tag', None), user=request.args.get('user', None), q=request.args.get('q', None), iteration=iteration) }}">{{ counts['opened_tasks_count'] }} Open Tasks</a>
        </li>
        <li class="{% if state_filter == 'done' %}active{% endif %} ">
          <a href="{{ url_for('project.work.render_task_list', project_id=project.id, state='done', tag=request.args.get('tag', None), user=request.args.get('user', None), q=request.args.get('q', None), iteration=iteration) }}">{{ counts['done_tasks_count'] }} Done Tasks</a>
        </li>
        {% endif %}
        <li class="{% if state_filter == None %}active{% endif %} ">
          <a href="{{ url_for('project.work.render_task_list', project_id=project.id, tag=request.args.get('tag', None), user=request.args.get('user', None), q=request.args.get('q', None), iteration=iteration) }}">All Tasks</a>
        </li>
        {% if current_user.has_permissions(['project.scrum_master']) and iteration %}
          <a class="btn icon icon-edit pull-right btn-warning" href="{{ url_for('project.iteration.render', project_id=0, active_id=iteration) }}"> Edit Iteration</a>
        {% endif %}
      </ul>
    </div>
    <div class="span6 pull-right">
      <form class="form-search pull-right" id="filter-task">
        <input type="hidden" name="state" value="{{ state_filter }}"/>
        <div class="input-append">
          <select name="user" class="select-user">
            <option value="">Anyone</option>
            <optgroup label="Assigned to:">
              {% for member in project.members %}
                {% if not member.user.id == current_user.id %}
                  <option value="{{ member.user.id }}"
                    {% if request.args.get('user') == member.user.id|string() %}
                      selected
                    {% endif %}
                  >{{ member.user.rec_name }}</option>
                {% endif %}
              {% endfor %}
            </optgroup>
            <option value="no one" {% if request.args.get('user') == 'no one' %}selected{% endif %}>Unassigned</option>
            <option value="{{ current_user.id }}" {% if request.args.get('user') == current_user.id|string() %}selected{% endif %}>Assigned to Me</option>
          </select>
          <select name="tag" class="select-tag" style="width:100px;">
            <option value="">Any Tag</option>
            {% for tag in project.tags_for_projects %}
              <option value="{{ tag.id }}"
                {% if request.args.get('tag') == tag.id|string() %}
                  selected
                {% endif %}
              >{{ tag.name }}</option>
            {% endfor %}
          </select>
          <input type="text" class="input-medium search-query" id="search-tasks" 
            placeholder="Search Tasks" name="q" value="{{ request.args.get('q', '') }}">
          <button type="submit" class="btn btn-info"><i class="icon-search"></i> Search</button>
        </div>
      </form>
      {#
      Temporarily hide this till this can be positioned well
      <a class="btn" title="Clear Search" href="{{ url_for('project.work.render_task_list', project_id=project.id, state=state_filter) }}">
       <i class="icon-refresh"></i> Clear
    </a>#}
    </div>

  </div>

  {# When the project have no task.#}
  {% if not project.children %}
    <div class="alert alert-info">
      <h4>
        <i class="icon-bell"></i>
        <font color="#808080">
          This project has no task yet!
        </font>
      </h4>
      <p>
        Be the first one to create a task.
      </p>
      <a class="btn btn-success" data-toggle="modal" href="#new-task">
        <i class="icon-plus"></i>
        {{ _("New Task") }}
      </a>
    </div>
  {% endif %}

  {% if not counts['opened_tasks_count'] == 0 %}
    {{ render_progress_bar(counts['opened_tasks_count'], counts) }}
  {% endif %}

  {# For search.#}
  {% if not tasks and project.children and False %}
    <div class="alert alert-block">
      <h4>
        <i class="icon-warning-sign"></i>
          <font color="#808080">
            No task found in this project matching your search filters.
          </font>
      </h4>
      <p>
        You can see the list of all tasks in this project
          <a href="{{ url_for('project.work.render_task_list', project_id=project.id, state='None') }}">here</a>
      </p> 
    </div>
  {% endif %}
</div>

<div class="row-fluid">
  <div class="pagination">
    <ul class="span12">
      {% for state, state_name in states if state %}
        <li class="span3"><a class="span12">{{ state_name }} ({{ tasks_by_state[state]|length }})</a></li>
      {% endfor %}
    </ul>
  </div>
  <div class="row-fluid">
    <div class="span12">
    {% for state, state_name in states if state %}
      <div class="span3 tasks-list" progress_state="{{ state }}" id="task-list-{{ state|replace(' ', '_') }}">
        {% for task in tasks_by_state[state] %}
          {{ render_task(task, assigned_to_picture=True, show_project_tag=True) }}
        {% endfor %}
      </div>
    {% endfor %}
    </div>
  </div>
</div>
{% endblock %}
{% block scripts %}
{{ super() }}
<script>
  $(document).ready(function(){
        $( ".tasks-list" ).sortable({
      connectWith: ".tasks-list",
      items: "div.task-item:not(.done)",
      opacity: 0.7,
      revert: true,
      delay: 150,
    })
    .disableSelection()
    .on( "sortreceive", function(event, ui){
      $.ajax({
        url: ui.item.attr('update-url'),
        type: 'POST',
        data: {
          progress_state: ui.item.closest("div.tasks-list").attr("progress_state"),
          state: ui.item.attr('state'),
          comment: '',
        },
      })
      .always(function(data, textStatus){
        if(textStatus == "error" || !data.success){
          alert("Update Failed!")
          location.reload();
        }
        else{
          $.meow({
            title: 'Success', 
            message: 'Successfully updated task status of #' + ui.item.attr('task_id'),
          });          
        }
      });
    });
    $("a.add-tags").click(function(e){
      e.preventDefault();
      $('a.action-tag-btn').click(function(e){
        e.preventDefault();
        $.ajax({
          url: $(this).attr("data-url"),
          type: 'POST',
        })
        .done(function(){
          location.reload();
        });
      });
    });

    $('a.log-hours').click(function() {
      $(this).parents("form").find("tr.hours-input").show();
      $(this).parents("form").find("tr.hours-input input").focus();
    });
    $('a.notify-people').click(function() {
      $(this).parents("form").find("tr.people-to-notify").show();
      $(this).parents("form").find("tr.people-to-notify select").focus();
    });

    $("a.watch").click(function() {
      var btn = $(this)
      $.ajax({
        url: btn.attr('data-url'),
        type: 'POST'
      })
      .done(function() {
        btn.parent("li").children("a.watch").hide();
        btn.parent("li").addClass("active");
        btn.parent("li").children("a.unwatch").show();
      });
    });
    $("a.unwatch").click(function() {
      var btn = $(this)
      $.ajax({
        url: btn.attr('data-url'),
        type: 'POST'
      })
      .done(function() {
        btn.parent("li").children("a.watch").show();
        btn.parent("li").removeClass("active");
        btn.parent("li").children("a.unwatch").hide();
      });
    });
    $(".select-user, .select-tag").change(function () {
      $("#filter-task").submit();
    });
  });
</script>
{% endblock %}
