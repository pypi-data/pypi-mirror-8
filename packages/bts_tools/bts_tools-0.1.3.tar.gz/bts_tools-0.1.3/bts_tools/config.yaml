---
# Config file containing the build, run and monitor environments and
# other configuration variables
#
# This file should contain sensible default values in as many places as
# possible, but you will have to at least specify your own values in the
# following categories:
#  - run_environments [for the cmdline tool]
#  - nodes            [for the monitoring webapp]
#

# the logging levels for the different submodules
# can be any of DEBUG, INFO, WARNING, ERROR
logging:
    bts_tools: DEBUG
    bts_tools.core: INFO
    bts_tools.rpcutils: INFO
    bts_tools.monitor: INFO
    bts_tools.notification: INFO
    bts_tools.feeds: INFO
    bts_tools.profile: INFO


# list of configurations for building the bitshares client
#
# build envs define the following vars:
#  - git_repo: self-explanatory
#  - git_branch: self-explanatory
#  - make_args: additional build flags to be passed to 'make'
#  - build_dir: the directory where the client shall be built
#  - bin_dir: the directory where the client will be installed after being successfully built
#
# by default, if you don't specify a build env on the cmdline, the tools will
# use the 'bts' environment
#
build_environments:
    development:
        git_repo: https://github.com/BitShares/bitshares.git
        git_branch: develop
        make_args: ['-j2']
        build_dir: ~/.BitSharesDev_build
        bin_dir: ~/.BitSharesDev_bin

    bts:
        git_repo: https://github.com/BitShares/bitshares.git
        git_branch: master
        make_args: ['-j2']
        build_dir: ~/.BitShares_build
        bin_dir: ~/.BitShares_bin


# list of clients that can be run
#
# clients define the following vars:
#  - type: the type of build you want to run. Needs to be a valid build env (ie: bts, dns, ...)
#  - debug: set to true to run client in gdb (only available in linux for now)
#  - data_dir: [optional] the data dir (blockchain, wallet, etc.) of the bts client.
#                         If not specified, uses the standard location of the client
#  - run_args: [optional] any additional flags you want to pass to the cmdline invocation of the client
#
# by default, if you don't specify a client on the cmdline, the tools will
# run the client for BTS using the standard data dir location, ie:
#
# run_environments:
#     default:
#         type: bts
#         debug: false
#
run_environments:
    debug:
        type: bts
        debug: true

    seed-bts:
        type: bts
        debug: false
        run_args: ['--p2p-port', '1778']


# activate the debug flag on the wsgi app
wsgi_debug: false

# whether to profile how much time the views take to render
profile: false

# in the 'nodes' variable you should specify the list of instances of the bitshares client
# you intend to run on this computer.
# Nodes can be of 2 types:
#  - seed nodes
#  - delegate nodes
#
# The choice of node type will tune a bit the interface and enable/disable
# functionality, such as feed publishing for delegates but not for seed nodes
#
# Delegate nodes can either be on localhost, or on a different host. In that case, you
# need ssh access to the remote host where you also have the bts_tools
# installed in a virtualenv.
#
# For each node you can specify which type of monitoring you want:
#  - feeds: checks price feeds, and optionally publish them if the node is a delegate
#  - email: send an email notification when client crashes or loses network connections
#  - boxcar: send an iOS push notification to the Boxcar app when client crashes or loses network connections
#
# Examples configs:
# nodes:
#     -
#         type: seed    # seed node type: no open wallet, high number of connections
#         name: seed01  # the name for this seed node. This is just for you, it serves no other purpose
#         desired_number_of_connections: 200
#         maximum_number_of_connections: 400
#         rpc_port: 5678
#         rpc_user: username
#         rpc_password: secret-password
#         monitoring: [email]
#     -
#         type: delegate   # delegate node type: run a single delegate account
#         name: delegate1  # the name of the delegate. This needs to be an existing account
#         monitoring: [feeds,email]
#         # you can specify the bts run environment of the client
#         # and it will fetch rpc connections params automatically
#         # NOTE: this needs to be a valid run environment!
#         client: seed-bts
#     -
#         type: delegate
#         name: delegate2
#         monitoring: [feeds,email]
#         data_dir: ~/.BitShares   # you can specify the data dir for a given client
#     -
#         type: delegate   # remote delegate node type: access to a remote node's delegate info. You need to have ssh access to this node for this to work
#         name: delegate3  # the name for this remote node. This is just for you, it serves no other purpose
#         venv_path: ~/.virtualenvs/bts_tools # virtualenv dir in which the bts tools are installed on the remote machine
#         rpc_host: user@myhost  # hostname. Anything you can pass to "ssh" you can put here (eg: your aliases in ~/.ssh/config)
#         rpc_port: 5678
#         rpc_user: username
#         rpc_password: secret-password
#
nodes:
    -
        type: seed
        name: seed-test
        client: seed-bts
        desired_number_of_connections: 200
        maximum_number_of_connections: 400


monitoring:
    monitor_time_interval: 5
    plots_time_span: 86400

    feeds:
        check_time_interval: 300
        publish_time_interval: 3600
        median_time_span: 3600

    email:
        smtp_server: smtp.example.com
        smtp_user: user
        smtp_password: secret-password
        identity: "BTS Monitor <bts_monitor@example.com>"
        recipient: me@example.com

    boxcar:
        tokens: []
