#!/usr/bin/env python
#coding:utf8
# Author          : tuxpy
# Email           : q8886888@qq.com
# Last modified   : 2014-11-01 14:25:17
# Filename        : client.py
# Description     : 

from xmlrpclib import ServerProxy, Fault
from cmd import Cmd
from random import choice
from string import lowercase
from share.server import Node, UNHANDLED
from share.tran_server import TranServer
from share.data import get_port, get_host
from threading import Thread
from time import sleep

import sys

HEAD_START = 0.1
SECRET_LENGTH = 100


def randomString(length):
    chars = []
    for i in range(length):
        chars.append(choice(lowercase))

    return ''.join(chars)

class Client(Cmd):
    prompt = '> '

    def __init__(self, url, dirname):
        Cmd.__init__(self)
        self.url = url
        self.port = get_port(url)  # 这个要当信息广播出去
        self.dirname = dirname
        self.secret = randomString(SECRET_LENGTH)
        self.server = ServerProxy(url)
        self.start_servers()

    def start_servers(self):
        node = Node(self.url, self.dirname, self.secret)
        t_node = Thread(target=node._start)
        t_node.setDaemon(True)
        t_node.start()

        sleep(HEAD_START)

        t_update_known = Thread(target=self.update_known)
        t_update_known.setDaemon(True)
        t_update_known.start()

        sleep(HEAD_START)

        tran = TranServer(self.secret, self.dirname)
        t_tran = Thread(target=tran._start)
        t_tran.setDaemon(True)

        t_tran.start()

    def do_fetch(self, arg):
        self.__do_file('fetch', arg, self.secret)

    def do_cat(self, arg):
        query, read_size =  (arg.split(' ', 2) + ['500'] )[:2]
        try:
            self.__do_file('cat', query, int(read_size) )
        except ValueError:
            self.do_help(arg)
        
    def __do_file(self, cmd, *args):
        func = getattr(self.server, cmd)
        try:
            func(*args)
        except Fault, f:
            if f.faultCode != UNHANDLED:
               raise
            print 'Couldn\'t find the file', args[0]

    def do_ls(self, path):
        for url, files in self.server.ls().items():
            print '%s\n\t%s' % (get_host(url), '\n\t'.join(files))

    def update_known(self):
        from share.sock import sock
        sock = sock()
        sock.broadcast(str(self.port))  # 把自己的xml-rpc端口广播给别人
        while True:
            url = sock.recv_url()
            self.server.hello(url, self.secret)      # 当收到节点信息时，更新节点

    def do_exit(self, arg):
        print
        sys.exit()

    do_EOR = do_exit

def main():
    import os
    cwd = os.path.dirname(os.path.abspath(sys.argv[0]))
    os.chdir(cwd)   # 切换成程序所在目录

    from share.config import config
    cfg = config()
    directory = cfg.get('global', 'share_dir') 
    if not os.path.isdir(directory):
        sys.stderr.write("%s not is exist\n" % directory)
        sys.exit(1)
        
    url = 'http://localhost:' + cfg.get('global', 'data_port')

    client = Client(url, directory) 
    client.cmdloop()

if __name__ == "__main__":
    main()
