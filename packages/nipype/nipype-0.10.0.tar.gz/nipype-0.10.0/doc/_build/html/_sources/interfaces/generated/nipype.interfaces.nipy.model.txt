.. AUTO-GENERATED FILE -- DO NOT EDIT!

interfaces.nipy.model
=====================


.. _nipype.interfaces.nipy.model.EstimateContrast:


.. index:: EstimateContrast

EstimateContrast
----------------

`Link to code <http://github.com/nipy/nipype/tree/e63e055194d62d2bdc4665688261c03a42fd0025/nipype/interfaces/nipy/model.py#L250>`__

Estimate contrast of a fitted model.

Inputs::

        [Mandatory]
        axis
        beta: (an existing file name)
                beta coefficients of the fitted model
        constants
        contrasts: (a list of items which are a tuple of the form: (a string,
                 'T', a list of items which are a string, a list of items which are
                 a float) or a tuple of the form: (a string, 'T', a list of items
                 which are a string, a list of items which are a float, a list of
                 items which are a float) or a tuple of the form: (a string, 'F', a
                 list of items which are a tuple of the form: (a string, 'T', a list
                 of items which are a string, a list of items which are a float) or
                 a tuple of the form: (a string, 'T', a list of items which are a
                 string, a list of items which are a float, a list of items which
                 are a float)))
                List of contrasts with each contrast being a list of the form:
                 [('name', 'stat', [condition list], [weight list], [session
                list])]. if
                 session list is None or not provided, all sessions are used. For F
                 contrasts, the condition list should contain previously defined
                 T-contrasts.
        dof
                degrees of freedom
        nvbeta
        reg_names: (a list of items which are any value)
        s2: (an existing file name)
                squared variance of the residuals

        [Optional]
        ignore_exception: (a boolean, nipype default value: False)
                Print an error message instead of throwing an exception in case the
                interface fails to run
        mask: (a file name)

Outputs::

        p_maps: (an existing file name)
        stat_maps: (an existing file name)
        z_maps: (an existing file name)

.. _nipype.interfaces.nipy.model.FitGLM:


.. index:: FitGLM

FitGLM
------

`Link to code <http://github.com/nipy/nipype/tree/e63e055194d62d2bdc4665688261c03a42fd0025/nipype/interfaces/nipy/model.py#L72>`__

Fit GLM model based on the specified design. Supports only single or concatenated runs.

Inputs::

        [Mandatory]
        TR: (a float)
        session_info: (a list of from 1 to 1 items which are any value)
                Session specific information generated by ``modelgen.SpecifyModel``,
                FitGLM does not support multiple runs uless they are concatenated
                (see SpecifyModel options)

        [Optional]
        drift_model: ('Cosine' or 'Polynomial' or 'Blank', nipype default
                 value: Cosine)
                string that specifies the desired drift model, to be chosen among
                'Polynomial', 'Cosine', 'Blank'
        hrf_model: ('Canonical' or 'Canonical With Derivative' or 'FIR',
                 nipype default value: Canonical)
                that specifies the hemodynamic reponse function it can be
                'Canonical', 'Canonical With Derivative' or 'FIR'
        ignore_exception: (a boolean, nipype default value: False)
                Print an error message instead of throwing an exception in case the
                interface fails to run
        mask: (a file name)
                restrict the fitting only to the region defined by this mask
        method: ('kalman' or 'ols', nipype default value: kalman)
                method to fit the model, ols or kalma; kalman is more time consuming
                but it supports autoregressive model
        model: ('ar1' or 'spherical', nipype default value: ar1)
                autoregressive mode is available only for the kalman method
        normalize_design_matrix: (a boolean, nipype default value: False)
                normalize (zscore) the regressors before fitting
        plot_design_matrix: (a boolean, nipype default value: False)
        save_residuals: (a boolean, nipype default value: False)

Outputs::

        a: (an existing file name)
        axis
        beta: (an existing file name)
        constants
        dof
        nvbeta
        reg_names: (a list of items which are any value)
        residuals: (a file name)
        s2: (an existing file name)
