Metadata-Version: 1.0
Name: vdt.versionplugin.hotfix
Version: 0.0.8
Summary: Create hotfix packages, these add an iteration on an existing version and do not create a tag.
Home-page: https://github.com/devopsconsulting/vdt.versionplugin.hotfix
Author: Lars van de Kerkhof
Author-email: lars@permanentmarkers.nl
License: UNKNOWN
Description: Create hotfix packages, as an iteration on the previous package.
        ================================================================
        
        When doing hotfixes, and try to automate versioning, we can envounter a couple of problems.
        
        1. The hotfix needs to fit in between 2 existing versions.
           This is required, because production could be running on version 1.0.0 while test is
           allready running on version 1.0.123.
        2. A hotfix should be merged back into the main branch, but not cause any disturbance of
           The automatic version system.
           What can happen is that we are doing a hotfix on 1.0.0, while HEAD has allready received
           a tag for version 1.0.123. If we add a hotfix tag and merge it on top of 1.0.123, we
           could reset the version counter.
        
        
        For this reason hotfixes are never tagged. We simply release a package as an iteration on
        a previous package and release it without tagging the repository. The reasoning behind this
        strategy is, that when the hotfix is merged back onto HEAD, it will get tagged and release
        through the main branch anyway and it makes no sense at all to have multiple tags for the
        same feature. (Enforcing this is a main feature of vdt.version).
        
        Usage
        -----
        
        The hotfix plugin will look up the latest tag in your current branch and get it's version.
        If we started a branch from a tag somewhere in the middle of our version history, that
        would work out fine::
        
            > version --plugin=hotfix --iteration=11 --maintainer=lars@permanentmarkers.nl -e -t deb setup.py
            Skipping installation of /var/folders/46/j79zq70n21n5m54j30f1rwrh0000gp/T/package-python-staging20140618-19649-432fe4/usr/lib/python2.7/dist-packages/vdt/__init__.py (namespace package)
            Skipping installation of /var/folders/46/j79zq70n21n5m54j30f1rwrh0000gp/T/package-python-staging20140618-19649-432fe4/usr/lib/python2.7/dist-packages/vdt/versionplugin/__init__.py (namespace package)
            > ls
            python-vdt.versionplugin.hotfix_0.0.1-11_all.deb
        
        The hotfix plugin can not create new versions and thus tags for you::
        
            > version --plugin=hotfix --minor --iteration=11 --maintainer=lars@permanentmarkers.nl -e -t deb setup.py
            Skipping installation of /var/folders/46/j79zq70n21n5m54j30f1rwrh0000gp/T/package-python-staging20140618-19819-l5ti7o/usr/lib/python2.7/dist-packages/vdt/__init__.py (namespace package)
            Skipping installation of /var/folders/46/j79zq70n21n5m54j30f1rwrh0000gp/T/package-python-staging20140618-19819-l5ti7o/usr/lib/python2.7/dist-packages/vdt/versionplugin/__init__.py (namespace package)
            > ls
            python-vdt.versionplugin.hotfix_0.0.1-11_all.deb
        
        You can see, that while we requested the minor version number to be incremented, that didn't happen.
        
        These hotfix packages can be pushed to a separate 'hotfix' repository and because they received a higher iteration
        number as the package it is based on, it will be installed on any environment running on that base version.
        
        Newer packages will have a higher version number and surpass the iteration.
        
        Plugin Arguments
        ----------------
        
        ::
        
            --iteration The iteration number for the hotfix
            -s Fpm input type, one of 'dir', 'rpm', 'gem', 'python', 'empty', 'tar', 'deb'.
               The default is python, which has some default configuration.
        
Platform: UNKNOWN
