module pycoram_{{ userlogic_name.lower() }} #
  (
   //---------------------------------------------------------------------------
   // User-defined parameter in Top-level User logic
   // DO NOT modify. They are NOT passed through to the instance
   //---------------------------------------------------------------------------
{%- for param in def_top_parameters %}
   {{ param }}
{%- endfor %}

   //---------------------------------------------------------------------------
   // parameters
   //---------------------------------------------------------------------------
   parameter W_EXT_A = {{ ext_addrwidth }},
   parameter W_BLEN = {{ ext_burstlen_width }},
   parameter MAX_BURST_LEN = {{ ext_burstlength }},
   parameter CMD_FIFO_ADDR_WIDTH = 4,

   //----------------------------------------------------------------------------
   // Avalon Parameter
   //----------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}

{% for memory in thread.memories | sort(attribute='name') %}
   // Memory {{ memory.name }}
   parameter integer C_AVM_{{ thread.name }}_{{ memory.name }}_DATA_WIDTH = {{ memory.ext_datawidth }},
   parameter integer C_AVM_{{ thread.name }}_{{ memory.name }}_ADDR_WIDTH = {{ ext_addrwidth }},
{% endfor %}

{% for instream in thread.instreams | sort(attribute='name') %}
   // Input stream {{ instream.name }}
   parameter integer C_AVM_{{ thread.name }}_{{ instream.name }}_DATA_WIDTH = {{ instream.ext_datawidth }},
   parameter integer C_AVM_{{ thread.name }}_{{ instream.name }}_ADDR_WIDTH = {{ ext_addrwidth }},
{% endfor %}

{% for outstream in thread.outstreams | sort(attribute='name') %}
   // Output stream {{ outstream.name }}
   parameter integer C_AVM_{{ thread.name }}_{{ outstream.name }}_DATA_WIDTH = {{ outstream.ext_datawidth }},
   parameter integer C_AVM_{{ thread.name }}_{{ outstream.name }}_ADDR_WIDTH = {{ ext_addrwidth }},
{% endfor %}

{% for iochannel in thread.iochannels | sort(attribute='name') %}
   // Control Thread I/O channel {{ iochannel.name }}
   parameter integer C_AVS_{{ thread.name }}_{{ iochannel.name }}_DATA_WIDTH = {{ iochannel.ext_datawidth }},
   parameter integer C_AVS_{{ thread.name }}_{{ iochannel.name }}_ADDR_WIDTH = {{ ext_addrwidth }},
{% endfor %}

{% for ioregister in thread.ioregisters | sort(attribute='name') %}
   // Control Thread I/O register {{ ioregister.name }}
   parameter integer C_AVS_{{ thread.name }}_{{ ioregister.name }}_DATA_WIDTH = {{ ioregister.ext_datawidth }},
   parameter integer C_AVS_{{ thread.name }}_{{ ioregister.name }}_ADDR_WIDTH = {{ ext_addrwidth }},
{% endfor %}

{%- endfor %}
   // Base address of targeted slave DRAM
   parameter C_AVM_TARGET = 'h00000000
   )
  (
   //----------------------------------------------------------------------------
   // Avalon Interface
   //----------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}

{% for memory in thread.memories | sort(attribute='name') %}
{%- if not single_clock %}
   // Clock and Reset
   input  wire csi_sys_{{ thread.name }}_{{ memory.name }}_clk,
   input  wire csi_sys_{{ thread.name }}_{{ memory.name }}_reset_n,
{%- endif %}

   // Common
   output wire [{{ ext_addrwidth }}-1:0] avm_{{ thread.name }}_{{ memory.name }}_address,
   input  wire avm_{{ thread.name }}_{{ memory.name }}_waitrequest,
   output wire [{{ memory.ext_datawidth }}/8-1:0] avm_{{ thread.name }}_{{ memory.name }}_byteenable,
   output wire [8-1:0] avm_{{ thread.name }}_{{ memory.name }}_burstcount,

   // Read
   output wire avm_{{ thread.name }}_{{ memory.name }}_read,
   input  wire [{{ memory.ext_datawidth }}-1:0] avm_{{ thread.name }}_{{ memory.name }}_readdata,
   input  wire avm_{{ thread.name }}_{{ memory.name }}_readdatavalid,

   // Write
   output wire avm_{{ thread.name }}_{{ memory.name }}_write,
   output wire [{{ memory.ext_datawidth }}-1:0] avm_{{ thread.name }}_{{ memory.name }}_writedata,
{% endfor %}

{% for instream in thread.instreams | sort(attribute='name') %}
{%- if not single_clock %}
   // Clock and Reset
   input  wire csi_sys_{{ thread.name }}_{{ instream.name }}_clk,
   input  wire csi_sys_{{ thread.name }}_{{ instream.name }}_reset_n,
{%- endif %}

   // Common
   output wire [{{ ext_addrwidth }}-1:0] avm_{{ thread.name }}_{{ instream.name }}_address,
   input  wire avm_{{ thread.name }}_{{ instream.name }}_waitrequest,
   output wire [{{ instream.ext_datawidth }}/8-1:0] avm_{{ thread.name }}_{{ instream.name }}_byteenable,
   output wire [8-1:0] avm_{{ thread.name }}_{{ instream.name }}_burstcount,

   // Read
   output wire avm_{{ thread.name }}_{{ instream.name }}_read,
   input  wire [{{ instream.ext_datawidth }}-1:0] avm_{{ thread.name }}_{{ instream.name }}_readdata,
   input  wire avm_{{ thread.name }}_{{ instream.name }}_readdatavalid,

   // Write
   output wire avm_{{ thread.name }}_{{ instream.name }}_write,
   output wire [{{ instream.ext_datawidth }}-1:0] avm_{{ thread.name }}_{{ instream.name }}_writedata,
{% endfor %}

{% for outstream in thread.outstreams | sort(attribute='name') %}
{%- if not single_clock %}
   // Clock and Reset
   input  wire csi_sys_{{ thread.name }}_{{ outstream.name }}_clk,
   input  wire csi_sys_{{ thread.name }}_{{ outstream.name }}_reset_n,
{%- endif %}

   // Common
   output wire [{{ ext_addrwidth }}-1:0] avm_{{ thread.name }}_{{ outstream.name }}_address,
   input  wire avm_{{ thread.name }}_{{ outstream.name }}_waitrequest,
   output wire [{{ outstream.ext_datawidth }}/8-1:0] avm_{{ thread.name }}_{{ outstream.name }}_byteenable,
   output wire [8-1:0] avm_{{ thread.name }}_{{ outstream.name }}_burstcount,

   // Read
   output wire avm_{{ thread.name }}_{{ outstream.name }}_read,
   input  wire [{{ outstream.ext_datawidth }}-1:0] avm_{{ thread.name }}_{{ outstream.name }}_readdata,
   input  wire avm_{{ thread.name }}_{{ outstream.name }}_readdatavalid,

   // Write
   output wire avm_{{ thread.name }}_{{ outstream.name }}_write,
   output wire [{{ outstream.ext_datawidth }}-1:0] avm_{{ thread.name }}_{{ outstream.name }}_writedata,
{% endfor %}

{% for iochannel in thread.iochannels | sort(attribute='name') %}
{%- if not single_clock %}
   // Clock and Reset
   input  wire csi_sys_{{ thread.name }}_{{ iochannel.name }}_clk,
   input  wire csi_sys_{{ thread.name }}_{{ iochannel.name }}_reset_n,
{%- endif %}

   // Common
   input  wire [1-1:0] avs_{{ thread.name }}_{{ iochannel.name }}_address,
   output wire avs_{{ thread.name }}_{{ iochannel.name }}_waitrequest,
   input  wire [{{ iochannel.ext_datawidth }}/8-1:0] avs_{{ thread.name }}_{{ iochannel.name }}_byteenable,
{%- if not lite %}
   input  wire [8-1:0] avs_{{ thread.name }}_{{ iochannel.name }}_burstcount,
{%- endif %}
   
   // Read
   input  wire avs_{{ thread.name }}_{{ iochannel.name }}_read,
   output wire [{{ iochannel.ext_datawidth }}-1:0] avs_{{ thread.name }}_{{ iochannel.name }}_readdata,
   output wire avs_{{ thread.name }}_{{ iochannel.name }}_readdatavalid,

   // Write
   input  wire avs_{{ thread.name }}_{{ iochannel.name }}_write,
   input  wire [{{ iochannel.ext_datawidth }}-1:0] avs_{{ thread.name }}_{{ iochannel.name }}_writedata,
{% endfor %}

{% for ioregister in thread.ioregisters | sort(attribute='name') %}
{%- if not single_clock %}
   // Clock and Reset
   input  wire csi_sys_{{ thread.name }}_{{ ioregister.name }}_clk,
   input  wire csi_sys_{{ thread.name }}_{{ ioregister.name }}_reset_n,
{%- endif %}

   // Common
   input  wire [1-1:0] avs_{{ thread.name }}_{{ ioregister.name }}_address,
   output wire avs_{{ thread.name }}_{{ ioregister.name }}_waitrequest,
   input  wire [{{ ioregister.ext_datawidth }}/8-1:0] avs_{{ thread.name }}_{{ ioregister.name }}_byteenable,
{%- if not lite %}
   input  wire [8-1:0] avs_{{ thread.name }}_{{ ioregister.name }}_burstcount,
{%- endif %}
   
   // Read
   input  wire avs_{{ thread.name }}_{{ ioregister.name }}_read,
   output wire [{{ ioregister.ext_datawidth }}-1:0] avs_{{ thread.name }}_{{ ioregister.name }}_readdata,
   output wire avs_{{ thread.name }}_{{ ioregister.name }}_readdatavalid,

   // Write
   input  wire avs_{{ thread.name }}_{{ ioregister.name }}_write,
   input  wire [{{ ioregister.ext_datawidth }}-1:0] avs_{{ thread.name }}_{{ ioregister.name }}_writedata,
{% endfor %}

{%- endfor %}

   //---------------------------------------------------------------------------
   // User-defined I/O ports in Top-level User logic
   //---------------------------------------------------------------------------
{%- for ioport in def_top_ioports | sort() %}
   {{ ioport }},
{%- endfor %}

   //---------------------------------------------------------------------------
   // Finish 
   //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
   output wire coe_{{ thread.name }}_finish,
{%- endfor %}

   //----------------------------------------------------------------------------
   // Control Thread Clock and Reset
   //----------------------------------------------------------------------------
{%- if not single_clock %}
{%- for thread in threads | sort(attribute='name') %}
   input wire csi_sys_{{ thread.name }}_clk,
   input wire csi_sys_{{ thread.name }}_reset_n,
{%- endfor %}
{%- endif %}

   //----------------------------------------------------------------------------
   // User-logic Clock and Reset
   //----------------------------------------------------------------------------
   input wire csi_sys_user_clk,
   input wire csi_sys_user_reset_n
   );


  //---------------------------------------------------------------------------
  // User-defined localparam in Top-level User logic
  //---------------------------------------------------------------------------
{%- for param in def_top_localparams %}
  {{ param }}
{%- endfor %}

  //---------------------------------------------------------------------------
  // User-logic Reset
  //---------------------------------------------------------------------------
  reg user_reset_r;
  reg user_reset_rr;
  reg user_reset;

  always @(posedge csi_sys_user_clk) begin
    user_reset_r <= !csi_sys_user_reset_n;  
    user_reset_rr <= user_reset_r;
    user_reset <= user_reset_rr;
  end

  //---------------------------------------------------------------------------
  // Control Thread Clock and Reset
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{%- if not single_clock %}
  reg {{ thread.name }}_CRST_r;
  reg {{ thread.name }}_CRST_rr;
  reg {{ thread.name }}_CRST;

  always @(posedge csi_sys_{{ thread.name }}_clk) begin
    {{ thread.name }}_CRST_r <= !csi_sys_{{ thread.name }}_reset_n;  
    {{ thread.name }}_CRST_rr <= {{ thread.name }}_CRST_r;
    {{ thread.name }}_CRST <= {{ thread.name }}_CRST_rr;
  end
{%- else %}
  wire csi_sys_{{ thread.name }}_clk;
  assign csi_sys_{{ thread.name }}_clk = csi_sys_user_clk;
  wire {{ thread.name }}_CRST;
  assign {{ thread.name }}_CRST = user_reset;
{%- endif %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Avalon Reset
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{%- for memory in thread.memories | sort(attribute='name') %}
{%- if not single_clock %}
  reg {{ thread.name }}_{{ memory.name }}_AVM_ARST_r;
  reg {{ thread.name }}_{{ memory.name }}_AVM_ARST_rr;
  reg {{ thread.name }}_{{ memory.name }}_AVM_ARST;

  always @(posedge csi_sys_{{ thread.name }}_{{ memory.name }}_clk) begin
    {{ thread.name }}_{{ memory.name }}_AVM_ARST_r <= !csi_sys_{{ thread.name }}_{{ memory.name }}_reset_n;  
    {{ thread.name }}_{{ memory.name }}_AVM_ARST_rr <= {{ thread.name }}_{{ memory.name }}_AVM_ARST_r;
    {{ thread.name }}_{{ memory.name }}_AVM_ARST <= {{ thread.name }}_{{ memory.name }}_AVM_ARST_rr;
  end
{%- else %}
  wire csi_sys_{{ thread.name }}_{{ memory.name }}_clk;
  assign csi_sys_{{ thread.name }}_{{ memory.name }}_clk = csi_sys_user_clk;
  wire csi_sys_{{ thread.name }}_{{ memory.name }}_reset_n;
  assign csi_sys_{{ thread.name }}_{{ memory.name }}_reset_n = csi_sys_user_reset_n;
  wire {{ thread.name }}_{{ memory.name }}_AVM_ARST;
  assign {{ thread.name }}_{{ memory.name }}_AVM_ARST = user_reset;
{%- endif %}
{% endfor %}
{%- for instream in thread.instreams | sort(attribute='name') %}
{%- if not single_clock %}
  reg {{ thread.name }}_{{ instream.name }}_AVM_ARST_r;
  reg {{ thread.name }}_{{ instream.name }}_AVM_ARST_rr;
  reg {{ thread.name }}_{{ instream.name }}_AVM_ARST;

  always @(posedge csi_sys_{{ thread.name }}_{{ instream.name }}_clk) begin
    {{ thread.name }}_{{ instream.name }}_AVM_ARST_r <= !csi_sys_{{ thread.name }}_{{ instream.name }}_reset_n;  
    {{ thread.name }}_{{ instream.name }}_AVM_ARST_rr <= {{ thread.name }}_{{ instream.name }}_AVM_ARST_r;
    {{ thread.name }}_{{ instream.name }}_AVM_ARST <= {{ thread.name }}_{{ instream.name }}_AVM_ARST_rr;
  end
{%- else %}
  wire csi_sys_{{ thread.name }}_{{ instream.name }}_clk;
  assign csi_sys_{{ thread.name }}_{{ instream.name }}_clk = csi_sys_user_clk;
  wire csi_sys_{{ thread.name }}_{{ instream.name }}_reset_n;
  assign csi_sys_{{ thread.name }}_{{ instream.name }}_reset_n = csi_sys_user_reset_n;
  wire {{ thread.name }}_{{ instream.name }}_AVM_ARST;
  assign {{ thread.name }}_{{ instream.name }}_AVM_ARST = user_reset;
{%- endif %}
{% endfor %}
{%- for outstream in thread.outstreams | sort(attribute='name') %}
{%- if not single_clock %}
  reg {{ thread.name }}_{{ outstream.name }}_AVM_ARST_r;
  reg {{ thread.name }}_{{ outstream.name }}_AVM_ARST_rr;
  reg {{ thread.name }}_{{ outstream.name }}_AVM_ARST;

  always @(posedge csi_sys_{{ thread.name }}_{{ outstream.name }}_clk) begin
    {{ thread.name }}_{{ outstream.name }}_AVM_ARST_r <= !csi_sys_{{ thread.name }}_{{ outstream.name }}_reset_n;  
    {{ thread.name }}_{{ outstream.name }}_AVM_ARST_rr <= {{ thread.name }}_{{ outstream.name }}_AVM_ARST_r;
    {{ thread.name }}_{{ outstream.name }}_AVM_ARST <= {{ thread.name }}_{{ outstream.name }}_AVM_ARST_rr;
  end
{%- else %}
  wire csi_sys_{{ thread.name }}_{{ outstream.name }}_clk;
  assign csi_sys_{{ thread.name }}_{{ outstream.name }}_clk = csi_sys_user_clk;
  wire csi_sys_{{ thread.name }}_{{ outstream.name }}_reset_n;
  assign csi_sys_{{ thread.name }}_{{ outstream.name }}_reset_n = csi_sys_user_reset_n;
  wire {{ thread.name }}_{{ outstream.name }}_AVM_ARST;
  assign {{ thread.name }}_{{ outstream.name }}_AVM_ARST = user_reset;
{%- endif %}
{% endfor %}
{%- for iochannel in thread.iochannels | sort(attribute='name') %}
{%- if not single_clock %}
  reg {{ thread.name }}_{{ iochannel.name }}_AVS_ARST_r;
  reg {{ thread.name }}_{{ iochannel.name }}_AVS_ARST_rr;
  reg {{ thread.name }}_{{ iochannel.name }}_AVS_ARST;

  always @(posedge csi_sys_{{ thread.name }}_{{ iochannel.name }}_clk) begin
    {{ thread.name }}_{{ iochannel.name }}_AVS_ARST_r <= !csi_sys_{{ thread.name }}_{{ iochannel.name }}_reset_n;  
    {{ thread.name }}_{{ iochannel.name }}_AVS_ARST_rr <= {{ thread.name }}_{{ iochannel.name }}_AVS_ARST_r;
    {{ thread.name }}_{{ iochannel.name }}_AVS_ARST <= {{ thread.name }}_{{ iochannel.name }}_AVS_ARST_rr;
  end
{%- else %}
  wire csi_sys_{{ thread.name }}_{{ iochannel.name }}_clk;
  assign csi_sys_{{ thread.name }}_{{ iochannel.name }}_clk = csi_sys_user_clk;
  wire csi_sys_{{ thread.name }}_{{ iochannel.name }}_reset_n;
  assign csi_sys_{{ thread.name }}_{{ iochannel.name }}_reset_n = csi_sys_user_reset_n;
  wire {{ thread.name }}_{{ iochannel.name }}_AVM_ARST;
  assign {{ thread.name }}_{{ iochannel.name }}_AVM_ARST = user_reset;
{%- endif %}
{% endfor %}
{%- for ioregister in thread.ioregisters | sort(attribute='name') %}
{%- if not single_clock %}
  reg {{ thread.name }}_{{ ioregister.name }}_AVS_ARST_r;
  reg {{ thread.name }}_{{ ioregister.name }}_AVS_ARST_rr;
  reg {{ thread.name }}_{{ ioregister.name }}_AVS_ARST;

  always @(posedge csi_sys_{{ thread.name }}_{{ ioregister.name }}_clk) begin
    {{ thread.name }}_{{ ioregister.name }}_AVS_ARST_r <= !csi_sys_{{ thread.name }}_{{ ioregister.name }}_reset_n;  
    {{ thread.name }}_{{ ioregister.name }}_AVS_ARST_rr <= {{ thread.name }}_{{ ioregister.name }}_AVS_ARST_r;
    {{ thread.name }}_{{ ioregister.name }}_AVS_ARST <= {{ thread.name }}_{{ ioregister.name }}_AVS_ARST_rr;
  end
{%- else %}
  wire csi_sys_{{ thread.name }}_{{ ioregister.name }}_clk;
  assign csi_sys_{{ thread.name }}_{{ ioregister.name }}_clk = csi_sys_user_clk;
  wire csi_sys_{{ thread.name }}_{{ ioregister.name }}_reset_n;
  assign csi_sys_{{ thread.name }}_{{ ioregister.name }}_reset_n = csi_sys_user_reset_n;
  wire {{ thread.name }}_{{ ioregister.name }}_AVM_ARST;
  assign {{ thread.name }}_{{ ioregister.name }}_AVM_ARST = user_reset;
{%- endif %}
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Memory port to User logic
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for memory in thread.memories | sort(attribute='name') %}
{% for bank in range(memory.length) %}
  wire {{ thread.name }}_{{ memory.name }}_{{ bank }}_clk; // Avalon clock
  wire [{{ memory.addrwidth -1 }}:0] {{ thread.name }}_{{ memory.name }}_{{ bank }}_addr; 
  wire [{{ memory.datawidth -1 }}:0] {{ thread.name }}_{{ memory.name }}_{{ bank }}_d; 
  wire {{ thread.name }}_{{ memory.name }}_{{ bank }}_we; 
  wire [{{ memory.datawidth -1 }}:0] {{ thread.name }}_{{ memory.name }}_{{ bank }}_q; 
  assign {{ thread.name }}_{{ memory.name }}_{{ bank }}_clk = csi_sys_{{ thread.name }}_{{ memory.name }}_clk;
{% endfor %}
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Memory request port from Control Thread
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for memory in thread.memories | sort(attribute='name') %}
  wire {{ thread.name }}_{{ memory.name }}_req_clk; // control thread clock
  wire {{ thread.name }}_{{ memory.name }}_req_rst; // control thread clock
  wire [W_EXT_A-1:0] {{ thread.name }}_{{ memory.name }}_req_ext_addr; 
  wire [W_EXT_A-1:0] {{ thread.name }}_{{ memory.name }}_req_core_addr; 
  wire {{ thread.name }}_{{ memory.name }}_req_read_enable; 
  wire {{ thread.name }}_{{ memory.name }}_req_write_enable; 
  wire [W_EXT_A:0] {{ thread.name }}_{{ memory.name }}_req_word_size; 
  wire {{ thread.name }}_{{ memory.name }}_req_ready;
  wire {{ thread.name }}_{{ memory.name }}_req_busy; 
  assign {{ thread.name }}_{{ memory.name }}_req_clk = csi_sys_{{ thread.name }}_clk;
  assign {{ thread.name }}_{{ memory.name }}_req_rst = {{ thread.name }}_CRST;
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Input stream port to User logic
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for instream in thread.instreams | sort(attribute='name') %}
  wire {{ thread.name }}_{{ instream.name }}_clk; // Avalon clock
  wire {{ thread.name }}_{{ instream.name }}_rst; // Avalon reset
  wire [{{ instream.datawidth -1 }}:0] {{ thread.name }}_{{ instream.name }}_d; 
  wire {{ thread.name }}_{{ instream.name }}_enq; 
  wire {{ thread.name }}_{{ instream.name }}_almost_full; 
  wire [{{ instream.addrwidth }}:0] {{ thread.name }}_{{ instream.name }}_room_enq; 
  assign {{ thread.name }}_{{ instream.name }}_clk = csi_sys_{{ thread.name }}_{{ instream.name }}_clk;
  assign {{ thread.name }}_{{ instream.name }}_rst = {{ thread.name }}_{{ instream.name }}_AVM_ARST;
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Input stream request port from Control Thread
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for instream in thread.instreams | sort(attribute='name') %}
  wire {{ thread.name }}_{{ instream.name }}_req_clk; // control thread clock
  wire {{ thread.name }}_{{ instream.name }}_req_rst; // control thread reset
  wire [W_EXT_A-1:0] {{ thread.name }}_{{ instream.name }}_req_ext_addr; 
  wire {{ thread.name }}_{{ instream.name }}_req_write_enable; 
  wire [W_EXT_A:0] {{ thread.name }}_{{ instream.name }}_req_word_size; 
  wire {{ thread.name }}_{{ instream.name }}_req_ready;
  wire {{ thread.name }}_{{ instream.name }}_req_busy; 
  assign {{ thread.name }}_{{ instream.name }}_req_clk = csi_sys_{{ thread.name }}_clk;
  assign {{ thread.name }}_{{ instream.name }}_req_rst = {{ thread.name }}_CRST;
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Output stream port to User logic
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for outstream in thread.outstreams | sort(attribute='name') %}
  wire {{ thread.name }}_{{ outstream.name }}_clk; // Avalon clock 
  wire {{ thread.name }}_{{ outstream.name }}_rst; // Avalon reset
  wire [{{ outstream.datawidth -1 }}:0] {{ thread.name }}_{{ outstream.name }}_q; 
  wire {{ thread.name }}_{{ outstream.name }}_deq; 
  wire {{ thread.name }}_{{ outstream.name }}_empty; 
  assign {{ thread.name }}_{{ outstream.name }}_clk = csi_sys_{{ thread.name }}_{{ outstream.name }}_clk;
  assign {{ thread.name }}_{{ outstream.name }}_rst = {{ thread.name }}_{{ outstream.name }}_AVM_ARST;
{% endfor %}
{%- endfor %}
  
  //---------------------------------------------------------------------------
  // Output stream request port from Control Thread
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for outstream in thread.outstreams | sort(attribute='name') %}
  wire {{ thread.name }}_{{ outstream.name }}_req_clk; // control thread clock    
  wire {{ thread.name }}_{{ outstream.name }}_req_rst; // control thread reset
  wire [W_EXT_A-1:0] {{ thread.name }}_{{ outstream.name }}_req_ext_addr; 
  wire {{ thread.name }}_{{ outstream.name }}_req_read_enable; 
  wire [W_EXT_A:0] {{ thread.name }}_{{ outstream.name }}_req_word_size; 
  wire {{ thread.name }}_{{ outstream.name }}_req_ready;
  wire {{ thread.name }}_{{ outstream.name }}_req_busy; 
  assign {{ thread.name }}_{{ outstream.name }}_req_clk = csi_sys_{{ thread.name }}_clk;
  assign {{ thread.name }}_{{ outstream.name }}_req_rst = {{ thread.name }}_CRST;
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Channel port to User logic
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for channel in thread.channels | sort(attribute='name') %}
  wire {{ thread.name }}_{{ channel.name }}_clk; // control thread clock
  wire {{ thread.name }}_{{ channel.name }}_rst; // control thread reset
  wire [{{ channel.datawidth -1 }}:0] {{ thread.name }}_{{ channel.name }}_d; 
  wire {{ thread.name }}_{{ channel.name }}_enq; 
  wire {{ thread.name }}_{{ channel.name }}_almost_full; 
  wire [{{ channel.datawidth -1 }}:0] {{ thread.name }}_{{ channel.name }}_q; 
  wire {{ thread.name }}_{{ channel.name }}_deq; 
  wire {{ thread.name }}_{{ channel.name }}_empty;
  assign {{ thread.name }}_{{ channel.name }}_clk = csi_sys_{{ thread.name }}_clk;
  assign {{ thread.name }}_{{ channel.name }}_rst = {{ thread.name }}_CRST;
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // Register port to User logic
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for register in thread.registers | sort(attribute='name') %}
  wire {{ thread.name }}_{{ register.name }}_clk; // control thread clock
  wire [{{ register.datawidth -1 }}:0] {{ thread.name }}_{{ register.name }}_d; 
  wire {{ thread.name }}_{{ register.name }}_we; 
  wire [{{ register.datawidth -1 }}:0] {{ thread.name }}_{{ register.name }}_q; 
  assign {{ thread.name }}_{{ register.name }}_clk = csi_sys_{{ thread.name }}_clk;
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // I/O Channel port to Control Thread
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for iochannel in thread.iochannels | sort(attribute='name') %}
  wire {{ thread.name }}_{{ iochannel.name }}_clk; // control thread clock
  wire {{ thread.name }}_{{ iochannel.name }}_rst; // control thread reset
  wire [{{ iochannel.datawidth -1 }}:0] {{ thread.name }}_{{ iochannel.name }}_d; 
  wire {{ thread.name }}_{{ iochannel.name }}_enq; 
  wire {{ thread.name }}_{{ iochannel.name }}_almost_full; 
  wire [{{ iochannel.datawidth -1 }}:0] {{ thread.name }}_{{ iochannel.name }}_q; 
  wire {{ thread.name }}_{{ iochannel.name }}_deq; 
  wire {{ thread.name }}_{{ iochannel.name }}_empty;
  assign {{ thread.name }}_{{ iochannel.name }}_clk = csi_sys_{{ thread.name }}_clk;
  assign {{ thread.name }}_{{ iochannel.name }}_rst = {{ thread.name }}_CRST;
{% endfor %}
{%- endfor %}

  //---------------------------------------------------------------------------
  // I/O Register port to Control Thread
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for ioregister in thread.ioregisters | sort(attribute='name') %}
  wire {{ thread.name }}_{{ ioregister.name }}_clk; // control thread clock
  wire [{{ ioregister.datawidth -1 }}:0] {{ thread.name }}_{{ ioregister.name }}_d; 
  wire {{ thread.name }}_{{ ioregister.name }}_we; 
  wire [{{ ioregister.datawidth -1 }}:0] {{ thread.name }}_{{ ioregister.name }}_q; 
  assign {{ thread.name }}_{{ ioregister.name }}_clk = csi_sys_{{ thread.name }}_clk;
{% endfor %}
{%- endfor %}


  //---------------------------------------------------------------------------
  // DMAC <-> Avalon Interface
  //---------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}

{% for memory in thread.memories | sort(attribute='name') %}
  // Master Interface Write Address
  wire [C_AVM_{{ thread.name }}_{{ memory.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ memory.name }}_awaddr;
  wire [8-1:0] {{ thread.name }}_{{ memory.name }}_awlen;
  wire {{ thread.name }}_{{ memory.name }}_awvalid;
  wire {{ thread.name }}_{{ memory.name }}_awready;
   
  // Master Interface Write Data
  wire [C_AVM_{{ thread.name }}_{{ memory.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ memory.name }}_wdata;
  wire {{ thread.name }}_{{ memory.name }}_wlast;
  wire {{ thread.name }}_{{ memory.name }}_wvalid;
  wire {{ thread.name }}_{{ memory.name }}_wready;
   
  // Master Interface Write Response
  wire {{ thread.name }}_{{ memory.name }}_bvalid;
  wire {{ thread.name }}_{{ memory.name }}_bready;
   
  // Master Interface Read Address
  wire [C_AVM_{{ thread.name }}_{{ memory.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ memory.name }}_araddr;
  wire [8-1:0] {{ thread.name }}_{{ memory.name }}_arlen;
  wire {{ thread.name }}_{{ memory.name }}_arvalid;
  wire {{ thread.name }}_{{ memory.name }}_arready;
   
  // Master Interface Read Data 
  wire [C_AVM_{{ thread.name }}_{{ memory.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ memory.name }}_rdata;
  wire {{ thread.name }}_{{ memory.name }}_rlast;
  wire {{ thread.name }}_{{ memory.name }}_rvalid;
  wire {{ thread.name }}_{{ memory.name }}_rready;
{% endfor %}

{% for instream in thread.instreams | sort(attribute='name') %}
  // Master Interface Write Address
  wire [C_AVM_{{ thread.name }}_{{ instream.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ instream.name }}_awaddr;
  wire [8-1:0] {{ thread.name }}_{{ instream.name }}_awlen;
  wire {{ thread.name }}_{{ instream.name }}_awvalid;
  wire {{ thread.name }}_{{ instream.name }}_awready;
   
  // Master Interface Write Data
  wire [C_AVM_{{ thread.name }}_{{ instream.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ instream.name }}_wdata;
  wire {{ thread.name }}_{{ instream.name }}_wlast;
  wire {{ thread.name }}_{{ instream.name }}_wvalid;
  wire {{ thread.name }}_{{ instream.name }}_wready;
   
  // Master Interface Write Response
  wire {{ thread.name }}_{{ instream.name }}_bvalid;
  wire {{ thread.name }}_{{ instream.name }}_bready;
   
  // Master Interface Read Address
  wire [C_AVM_{{ thread.name }}_{{ instream.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ instream.name }}_araddr;
  wire [8-1:0] {{ thread.name }}_{{ instream.name }}_arlen;
  wire {{ thread.name }}_{{ instream.name }}_arvalid;
  wire {{ thread.name }}_{{ instream.name }}_arready;
   
  // Master Interface Read Data 
  wire [C_AVM_{{ thread.name }}_{{ instream.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ instream.name }}_rdata;
  wire {{ thread.name }}_{{ instream.name }}_rlast;
  wire {{ thread.name }}_{{ instream.name }}_rvalid;
  wire {{ thread.name }}_{{ instream.name }}_rready;
{% endfor %}

{% for outstream in thread.outstreams | sort(attribute='name') %}
  // Master Interface Write Address
  wire [C_AVM_{{ thread.name }}_{{ outstream.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ outstream.name }}_awaddr;
  wire [8-1:0] {{ thread.name }}_{{ outstream.name }}_awlen;
  wire {{ thread.name }}_{{ outstream.name }}_awvalid;
  wire {{ thread.name }}_{{ outstream.name }}_awready;
   
  // Master Interface Write Data
  wire [C_AVM_{{ thread.name }}_{{ outstream.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ outstream.name }}_wdata;
  wire {{ thread.name }}_{{ outstream.name }}_wlast;
  wire {{ thread.name }}_{{ outstream.name }}_wvalid;
  wire {{ thread.name }}_{{ outstream.name }}_wready;
   
  // Master Interface Write Response
  wire {{ thread.name }}_{{ outstream.name }}_bvalid;
  wire {{ thread.name }}_{{ outstream.name }}_bready;
   
  // Master Interface Read Address
  wire [C_AVM_{{ thread.name }}_{{ outstream.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ outstream.name }}_araddr;
  wire [8-1:0] {{ thread.name }}_{{ outstream.name }}_arlen;
  wire {{ thread.name }}_{{ outstream.name }}_arvalid;
  wire {{ thread.name }}_{{ outstream.name }}_arready;
   
  // Master Interface Read Data 
  wire [C_AVM_{{ thread.name }}_{{ outstream.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ outstream.name }}_rdata;
  wire {{ thread.name }}_{{ outstream.name }}_rlast;
  wire {{ thread.name }}_{{ outstream.name }}_rvalid;
  wire {{ thread.name }}_{{ outstream.name }}_rready;
{% endfor %}

{% for iochannel in thread.iochannels | sort(attribute='name') %}
  // Master Interface Write Address
  wire [C_AVS_{{ thread.name }}_{{ iochannel.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ iochannel.name }}_awaddr;
  wire [8-1:0] {{ thread.name }}_{{ iochannel.name }}_awlen;
  wire {{ thread.name }}_{{ iochannel.name }}_awvalid;
  wire {{ thread.name }}_{{ iochannel.name }}_awready;
   
  // Master Interface Write Data
  wire [C_AVS_{{ thread.name }}_{{ iochannel.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ iochannel.name }}_wdata;
  wire {{ thread.name }}_{{ iochannel.name }}_wlast;
  wire {{ thread.name }}_{{ iochannel.name }}_wvalid;
  wire {{ thread.name }}_{{ iochannel.name }}_wready;
   
  // Master Interface Write Response
  wire {{ thread.name }}_{{ iochannel.name }}_bvalid;
  wire {{ thread.name }}_{{ iochannel.name }}_bready;
   
  // Master Interface Read Address
  wire [C_AVS_{{ thread.name }}_{{ iochannel.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ iochannel.name }}_araddr;
  wire [8-1:0] {{ thread.name }}_{{ iochannel.name }}_arlen;
  wire {{ thread.name }}_{{ iochannel.name }}_arvalid;
  wire {{ thread.name }}_{{ iochannel.name }}_arready;
   
  // Master Interface Read Data 
  wire [C_AVS_{{ thread.name }}_{{ iochannel.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ iochannel.name }}_rdata;
  wire {{ thread.name }}_{{ iochannel.name }}_rlast;
  wire {{ thread.name }}_{{ iochannel.name }}_rvalid;
  wire {{ thread.name }}_{{ iochannel.name }}_rready;
{% endfor %}

{% for ioregister in thread.ioregisters | sort(attribute='name') %}
  // Master Interface Write Address
  wire [C_AVS_{{ thread.name }}_{{ ioregister.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ ioregister.name }}_awaddr;
  wire [8-1:0] {{ thread.name }}_{{ ioregister.name }}_awlen;
  wire {{ thread.name }}_{{ ioregister.name }}_awvalid;
  wire {{ thread.name }}_{{ ioregister.name }}_awready;
   
  // Master Interface Write Data
  wire [C_AVS_{{ thread.name }}_{{ ioregister.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ ioregister.name }}_wdata;
  wire {{ thread.name }}_{{ ioregister.name }}_wlast;
  wire {{ thread.name }}_{{ ioregister.name }}_wvalid;
  wire {{ thread.name }}_{{ ioregister.name }}_wready;
   
  // Master Interface Write Response
  wire {{ thread.name }}_{{ ioregister.name }}_bvalid;
  wire {{ thread.name }}_{{ ioregister.name }}_bready;
   
  // Master Interface Read Address
  wire [C_AVS_{{ thread.name }}_{{ ioregister.name }}_ADDR_WIDTH-1:0] {{ thread.name }}_{{ ioregister.name }}_araddr;
  wire [8-1:0] {{ thread.name }}_{{ ioregister.name }}_arlen;
  wire {{ thread.name }}_{{ ioregister.name }}_arvalid;
  wire {{ thread.name }}_{{ ioregister.name }}_arready;
   
  // Master Interface Read Data 
  wire [C_AVS_{{ thread.name }}_{{ ioregister.name }}_DATA_WIDTH-1:0] {{ thread.name }}_{{ ioregister.name }}_rdata;
  wire {{ thread.name }}_{{ ioregister.name }}_rlast;
  wire {{ thread.name }}_{{ ioregister.name }}_rvalid;
  wire {{ thread.name }}_{{ ioregister.name }}_rready;
{% endfor %}
{%- endfor %}


  //----------------------------------------------------------------------------
  // User Logic
  //----------------------------------------------------------------------------
  {{ userlogic_name }}
  inst_{{ userlogic_name }}
    (
{%- for thread in threads | sort(attribute='name') %}
{% for memory in thread.memories | sort(attribute='name') %}
{% for bank in range(memory.length) %}
     .{{ thread.name }}_{{ memory.name }}_{{ bank }}_clk({{ thread.name }}_{{ memory.name }}_{{ bank }}_clk), 
     .{{ thread.name }}_{{ memory.name }}_{{ bank }}_addr({{ thread.name }}_{{ memory.name }}_{{ bank }}_addr), 
     .{{ thread.name }}_{{ memory.name }}_{{ bank }}_d({{ thread.name }}_{{ memory.name }}_{{ bank }}_d), 
     .{{ thread.name }}_{{ memory.name }}_{{ bank }}_we({{ thread.name }}_{{ memory.name }}_{{ bank }}_we), 
     .{{ thread.name }}_{{ memory.name }}_{{ bank }}_q({{ thread.name }}_{{ memory.name }}_{{ bank }}_q), 
{% endfor %}
{% endfor %}
{% for instream in thread.instreams | sort(attribute='name') %}
     .{{ thread.name }}_{{ instream.name }}_clk({{ thread.name }}_{{ instream.name }}_clk), 
     .{{ thread.name }}_{{ instream.name }}_rst({{ thread.name }}_{{ instream.name }}_rst), 
     .{{ thread.name }}_{{ instream.name }}_d({{ thread.name }}_{{ instream.name }}_d), 
     .{{ thread.name }}_{{ instream.name }}_enq({{ thread.name }}_{{ instream.name }}_enq), 
     .{{ thread.name }}_{{ instream.name }}_almost_full({{ thread.name }}_{{ instream.name }}_almost_full), 
     .{{ thread.name }}_{{ instream.name }}_room_enq({{ thread.name }}_{{ instream.name }}_room_enq), 
{% endfor %}
{% for outstream in thread.outstreams | sort(attribute='name') %}
     .{{ thread.name }}_{{ outstream.name }}_clk({{ thread.name }}_{{ outstream.name }}_clk), 
     .{{ thread.name }}_{{ outstream.name }}_rst({{ thread.name }}_{{ outstream.name }}_rst), 
     .{{ thread.name }}_{{ outstream.name }}_q({{ thread.name }}_{{ outstream.name }}_q), 
     .{{ thread.name }}_{{ outstream.name }}_deq({{ thread.name }}_{{ outstream.name }}_deq), 
     .{{ thread.name }}_{{ outstream.name }}_empty({{ thread.name }}_{{ outstream.name }}_empty), 
{% endfor %}
{% for channel in thread.channels %}
     .{{ thread.name }}_{{ channel.name }}_clk({{ thread.name }}_{{ channel.name }}_clk), 
     .{{ thread.name }}_{{ channel.name }}_rst({{ thread.name }}_{{ channel.name }}_rst), 
     .{{ thread.name }}_{{ channel.name }}_d({{ thread.name }}_{{ channel.name }}_d), 
     .{{ thread.name }}_{{ channel.name }}_enq({{ thread.name }}_{{ channel.name }}_enq), 
     .{{ thread.name }}_{{ channel.name }}_almost_full({{ thread.name }}_{{ channel.name }}_almost_full), 
     .{{ thread.name }}_{{ channel.name }}_q({{ thread.name }}_{{ channel.name }}_q), 
     .{{ thread.name }}_{{ channel.name }}_deq({{ thread.name }}_{{ channel.name }}_deq), 
     .{{ thread.name }}_{{ channel.name }}_empty({{ thread.name }}_{{ channel.name }}_empty),
{% endfor %}
{% for register in thread.registers %}
     .{{ thread.name }}_{{ register.name }}_clk({{ thread.name }}_{{ register.name }}_clk), 
     .{{ thread.name }}_{{ register.name }}_d({{ thread.name }}_{{ register.name }}_d), 
     .{{ thread.name }}_{{ register.name }}_we({{ thread.name }}_{{ register.name }}_we), 
     .{{ thread.name }}_{{ register.name }}_q({{ thread.name }}_{{ register.name }}_q), 
{% endfor %}
{%- endfor %}
{%- for ioport in name_top_ioports | sort() %}
     .{{ ioport }}(coe_{{ ioport }}),
{%- endfor %}
     .CLK(csi_sys_user_clk), // User-logic clock
     .RST(user_reset) // User-logic reset
     );


  //----------------------------------------------------------------------------
  // Control Thread
  //----------------------------------------------------------------------------
{% for thread in threads | sort(attribute='name') %}
  {{ thread.name }}
  inst_{{ thread.name }}
    (
     .CLK(csi_sys_{{ thread.name }}_clk), // control therad clock
     .RST({{ thread.name }}_CRST), // control thread reset
{% for memory in thread.memories | sort(attribute='name') %}
     .{{ memory.name }}_ext_addr({{ thread.name }}_{{ memory.name }}_req_ext_addr), 
     .{{ memory.name }}_core_addr({{ thread.name }}_{{ memory.name }}_req_core_addr), 
     .{{ memory.name }}_read_enable({{ thread.name }}_{{ memory.name }}_req_read_enable), 
     .{{ memory.name }}_write_enable({{ thread.name }}_{{ memory.name }}_req_write_enable), 
     .{{ memory.name }}_word_size({{ thread.name }}_{{ memory.name }}_req_word_size), 
     .{{ memory.name }}_ready({{ thread.name }}_{{ memory.name }}_req_ready),
     .{{ memory.name }}_busy({{ thread.name }}_{{ memory.name }}_req_busy), 
{% endfor %}
{% for instream in thread.instreams | sort(attribute='name') %}
     .{{ instream.name }}_ext_addr({{ thread.name }}_{{ instream.name }}_req_ext_addr), 
     .{{ instream.name }}_write_enable({{ thread.name }}_{{ instream.name }}_req_write_enable), 
     .{{ instream.name }}_word_size({{ thread.name }}_{{ instream.name }}_req_word_size), 
     .{{ instream.name }}_ready({{ thread.name }}_{{ instream.name }}_req_ready),
     .{{ instream.name }}_busy({{ thread.name }}_{{ instream.name }}_req_busy), 
{% endfor %}
{% for outstream in thread.outstreams | sort(attribute='name') %}
     .{{ outstream.name }}_ext_addr({{ thread.name }}_{{ outstream.name }}_req_ext_addr), 
     .{{ outstream.name }}_read_enable({{ thread.name }}_{{ outstream.name }}_req_read_enable), 
     .{{ outstream.name }}_word_size({{ thread.name }}_{{ outstream.name }}_req_word_size), 
     .{{ outstream.name }}_ready({{ thread.name }}_{{ outstream.name }}_req_ready),
     .{{ outstream.name }}_busy({{ thread.name }}_{{ outstream.name }}_req_busy), 
{% endfor %}
{% for channel in thread.channels | sort(attribute='name') %}
     .{{ channel.name }}_q({{ thread.name }}_{{ channel.name }}_q), 
     .{{ channel.name }}_deq({{ thread.name }}_{{ channel.name }}_deq), 
     .{{ channel.name }}_empty({{ thread.name }}_{{ channel.name }}_empty), 
     .{{ channel.name }}_d({{ thread.name }}_{{ channel.name }}_d), 
     .{{ channel.name }}_enq({{ thread.name }}_{{ channel.name }}_enq), 
     .{{ channel.name }}_almost_full({{ thread.name }}_{{ channel.name }}_almost_full),
{% endfor %}
{% for register in thread.registers | sort(attribute='name') %}
     .{{ register.name }}_d({{ thread.name }}_{{ register.name }}_d), 
     .{{ register.name }}_we({{ thread.name }}_{{ register.name }}_we), 
     .{{ register.name }}_q({{ thread.name }}_{{ register.name }}_q), 
{% endfor %}
{% for iochannel in thread.iochannels | sort(attribute='name') %}
     .{{ iochannel.name }}_q({{ thread.name }}_{{ iochannel.name }}_q), 
     .{{ iochannel.name }}_deq({{ thread.name }}_{{ iochannel.name }}_deq), 
     .{{ iochannel.name }}_empty({{ thread.name }}_{{ iochannel.name }}_empty), 
     .{{ iochannel.name }}_d({{ thread.name }}_{{ iochannel.name }}_d), 
     .{{ iochannel.name }}_enq({{ thread.name }}_{{ iochannel.name }}_enq), 
     .{{ iochannel.name }}_almost_full({{ thread.name }}_{{ iochannel.name }}_almost_full),
{% endfor %}
{% for ioregister in thread.ioregisters | sort(attribute='name') %}
     .{{ ioregister.name }}_d({{ thread.name }}_{{ ioregister.name }}_d), 
     .{{ ioregister.name }}_we({{ thread.name }}_{{ ioregister.name }}_we), 
     .{{ ioregister.name }}_q({{ thread.name }}_{{ ioregister.name }}_q), 
{% endfor %}
     .finish(coe_{{ thread.name }}_finish)
     );
{% endfor %}


  //----------------------------------------------------------------------------
  // DMA Controller
  //----------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for memory in thread.memories | sort(attribute='name') %}
  DMAC_MEMORY_{{ thread.name }}_{{ memory.name }} #
  (
   .W_A({{ memory.addrwidth }}),
   .W_D({{ memory.datawidth }}),
   .W_EXT_A(W_EXT_A),
   .W_EXT_D({{ memory.ext_datawidth }}),
   .ADDRMASK_WIDTH({{ memory.addroffset }}),
   .NUM_RANKS({{ memory.numranks }}),
   .LOG_NUM_RANKS({{ memory.lognumranks }}),
   .NUM_PAGES({{ memory.numpages }}),
   .LOG_NUM_PAGES({{ memory.lognumpages }}),
   .W_BLEN(W_BLEN),
   .MAX_BURST_LEN(MAX_BURST_LEN),
   .CMD_FIFO_ADDR_WIDTH(CMD_FIFO_ADDR_WIDTH),
   .ASYNC({%- if single_clock -%} 0 {%- else -%} 1 {%- endif -%}),
   .SUPPORTS_WRITE(1)
   )
  inst_dmac_{{ thread.name }}_{{ memory.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ memory.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ memory.name }}_reset_n), // Avalon reset

{% for bank in range(memory.length) %}
     .core_addr_{{ bank }}({{ thread.name }}_{{ memory.name }}_{{ bank }}_addr),
     .core_read_enable_{{ bank }}(),
     .core_read_data_{{ bank }}({{ thread.name }}_{{ memory.name }}_{{ bank }}_q), 
     .core_write_enable_{{ bank }}({{ thread.name }}_{{ memory.name }}_{{ bank }}_we), 
     .core_write_data_{{ bank }}({{ thread.name }}_{{ memory.name }}_{{ bank }}_d),
{% endfor %}

     .req_clk({{ thread.name }}_{{ memory.name }}_req_clk), // control thread clock
     .req_rst({{ thread.name }}_{{ memory.name }}_req_rst), // control thread reset
     .req_ext_addr({{ thread.name }}_{{ memory.name }}_req_ext_addr), 
     .req_core_addr({{ thread.name }}_{{ memory.name }}_req_core_addr), 
     .req_read_enable({{ thread.name }}_{{ memory.name }}_req_read_enable), 
     .req_write_enable({{ thread.name }}_{{ memory.name }}_req_write_enable), 
     .req_word_size({{ thread.name }}_{{ memory.name }}_req_word_size), 
     .req_ready({{ thread.name }}_{{ memory.name }}_req_ready),
     .req_busy({{ thread.name }}_{{ memory.name }}_req_busy),

     .awvalid({{ thread.name }}_{{ memory.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ memory.name }}_awaddr),
     .awlen({{ thread.name }}_{{ memory.name }}_awlen),
     .awready({{ thread.name }}_{{ memory.name }}_awready),

     .wvalid({{ thread.name }}_{{ memory.name }}_wvalid),
     .wdata({{ thread.name }}_{{ memory.name }}_wdata),
     .wlast({{ thread.name }}_{{ memory.name }}_wlast),
     .wready({{ thread.name }}_{{ memory.name }}_wready),

     .bvalid({{ thread.name }}_{{ memory.name }}_bvalid),
     .bready({{ thread.name }}_{{ memory.name }}_bready),

     .arvalid({{ thread.name }}_{{ memory.name }}_arvalid),
     .araddr({{ thread.name }}_{{ memory.name }}_araddr),
     .arlen({{ thread.name }}_{{ memory.name }}_arlen),
     .arready({{ thread.name }}_{{ memory.name }}_arready),

     .rvalid({{ thread.name }}_{{ memory.name }}_rvalid),
     .rdata({{ thread.name }}_{{ memory.name }}_rdata),
     .rlast({{ thread.name }}_{{ memory.name }}_rlast),
     .rready({{ thread.name }}_{{ memory.name }}_rready)
     );
{% endfor %}

{% for instream in thread.instreams | sort(attribute='name') %}
  DMAC_STREAM #
  (
   .W_A({{ instream.addrwidth }}),
   .W_D({{ instream.datawidth }}),
   .ADDRMASK_WIDTH({{ instream.addroffset }}),
   .W_EXT_A(W_EXT_A),
   .W_EXT_D({{ instream.ext_datawidth }}),
   .W_BLEN(W_BLEN),
   .MAX_BURST_LEN(MAX_BURST_LEN),
   .CMD_FIFO_ADDR_WIDTH(CMD_FIFO_ADDR_WIDTH),
   .ASYNC({%- if single_clock -%} 0 {%- else -%} 1 {%- endif -%}),
   .SUPPORTS_WRITE(0),
   .BUS_TYPE("avalon")
   )
  inst_dmac_stream_{{ thread.name }}_{{ instream.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ instream.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ instream.name }}_reset_n), // Avalon reset

     .core_read_enable(),
     .core_read_data( 'h0 ),
     .core_read_empty( 1'b0 ),
     .core_write_enable({{ thread.name }}_{{ instream.name }}_enq), 
     .core_write_data({{ thread.name }}_{{ instream.name }}_d),
     .core_write_almost_full({{ thread.name }}_{{ instream.name }}_almost_full),
     .core_write_room_enq({{ thread.name }}_{{ instream.name }}_room_enq),

     .req_clk({{ thread.name }}_{{ instream.name }}_req_clk), // control thread clock
     .req_rst({{ thread.name }}_{{ instream.name }}_req_rst), // control thread reset
     .req_ext_addr({{ thread.name }}_{{ instream.name }}_req_ext_addr), 
     .req_read_enable( 1'b0 ),
     .req_write_enable({{ thread.name }}_{{ instream.name }}_req_write_enable), 
     .req_word_size({{ thread.name }}_{{ instream.name }}_req_word_size), 
     .req_ready({{ thread.name }}_{{ instream.name }}_req_ready),
     .req_busy({{ thread.name }}_{{ instream.name }}_req_busy),

     .awvalid({{ thread.name }}_{{ instream.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ instream.name }}_awaddr),
     .awlen({{ thread.name }}_{{ instream.name }}_awlen),
     .awready({{ thread.name }}_{{ instream.name }}_awready),

     .wvalid({{ thread.name }}_{{ instream.name }}_wvalid),
     .wdata({{ thread.name }}_{{ instream.name }}_wdata),
     .wlast({{ thread.name }}_{{ instream.name }}_wlast),
     .wready({{ thread.name }}_{{ instream.name }}_wready),

     .bvalid({{ thread.name }}_{{ instream.name }}_bvalid),
     .bready({{ thread.name }}_{{ instream.name }}_bready),

     .arvalid({{ thread.name }}_{{ instream.name }}_arvalid),
     .araddr({{ thread.name }}_{{ instream.name }}_araddr),
     .arlen({{ thread.name }}_{{ instream.name }}_arlen),
     .arready({{ thread.name }}_{{ instream.name }}_arready),

     .rvalid({{ thread.name }}_{{ instream.name }}_rvalid),
     .rdata({{ thread.name }}_{{ instream.name }}_rdata),
     .rlast({{ thread.name }}_{{ instream.name }}_rlast),
     .rready({{ thread.name }}_{{ instream.name }}_rready)
     );
{% endfor %}

{% for outstream in thread.outstreams | sort(attribute='name') %}
  DMAC_STREAM #
  (
   .W_A({{ outstream.addrwidth }}),
   .W_D({{ outstream.datawidth }}),
   .ADDRMASK_WIDTH({{ outstream.addroffset }}),
   .W_EXT_A(W_EXT_A),
   .W_EXT_D({{ outstream.ext_datawidth }}),
   .W_BLEN(W_BLEN),
   .MAX_BURST_LEN(MAX_BURST_LEN),
   .CMD_FIFO_ADDR_WIDTH(CMD_FIFO_ADDR_WIDTH),
   .ASYNC({%- if single_clock -%} 0 {%- else -%} 1 {%- endif -%}),
   .SUPPORTS_WRITE(1),
   .BUS_TYPE("avalon")
   )
  inst_dmac_stream_{{ thread.name }}_{{ outstream.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ outstream.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ outstream.name }}_reset_n), // Avalon reset

     .core_read_enable({{ thread.name }}_{{ outstream.name }}_deq),
     .core_read_data({{ thread.name }}_{{ outstream.name }}_q),
     .core_read_empty({{ thread.name }}_{{ outstream.name }}_empty),
     .core_write_enable(), 
     .core_write_data(),
     .core_write_almost_full( 1'b0 ),
     .core_write_room_enq( 0 ),

     .req_clk({{ thread.name }}_{{ outstream.name }}_req_clk), 
     .req_rst({{ thread.name }}_{{ outstream.name }}_req_rst), 
     .req_ext_addr({{ thread.name }}_{{ outstream.name }}_req_ext_addr), 
     .req_read_enable({{ thread.name }}_{{ outstream.name }}_req_read_enable), 
     .req_write_enable( 1'b0 ),
     .req_word_size({{ thread.name }}_{{ outstream.name }}_req_word_size), 
     .req_ready({{ thread.name }}_{{ outstream.name }}_req_ready),
     .req_busy({{ thread.name }}_{{ outstream.name }}_req_busy),

     .awvalid({{ thread.name }}_{{ outstream.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ outstream.name }}_awaddr),
     .awlen({{ thread.name }}_{{ outstream.name }}_awlen),
     .awready({{ thread.name }}_{{ outstream.name }}_awready),

     .wvalid({{ thread.name }}_{{ outstream.name }}_wvalid),
     .wdata({{ thread.name }}_{{ outstream.name }}_wdata),
     .wlast({{ thread.name }}_{{ outstream.name }}_wlast),
     .wready({{ thread.name }}_{{ outstream.name }}_wready),

     .bvalid({{ thread.name }}_{{ outstream.name }}_bvalid),
     .bready({{ thread.name }}_{{ outstream.name }}_bready),

     .arvalid({{ thread.name }}_{{ outstream.name }}_arvalid),
     .araddr({{ thread.name }}_{{ outstream.name }}_araddr),
     .arlen({{ thread.name }}_{{ outstream.name }}_arlen),
     .arready({{ thread.name }}_{{ outstream.name }}_arready),

     .rvalid({{ thread.name }}_{{ outstream.name }}_rvalid),
     .rdata({{ thread.name }}_{{ outstream.name }}_rdata),
     .rlast({{ thread.name }}_{{ outstream.name }}_rlast),
     .rready({{ thread.name }}_{{ outstream.name }}_rready)
     );
{% endfor %}

{% for iochannel in thread.iochannels | sort(attribute='name') %}
  DMAC_IOCHANNEL #
  (
   .W_D({{ iochannel.datawidth }}),
   .W_EXT_A(W_EXT_A),
   .W_BLEN(W_BLEN),
   .MAX_BURST_LEN(MAX_BURST_LEN),
   .FIFO_ADDR_WIDTH(CMD_FIFO_ADDR_WIDTH),
   .ASYNC({%- if single_clock -%} 0 {%- else -%} 1 {%- endif -%})
   )
  inst_dmac_iochannel_{{ thread.name }}_{{ iochannel.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ iochannel.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ iochannel.name }}_reset_n), // Avalon reset

     .coram_clk({{ thread.name }}_{{ iochannel.name }}_clk),
     .coram_rst({{ thread.name }}_{{ iochannel.name }}_rst),

     .coram_deq({{ thread.name }}_{{ iochannel.name }}_deq),
     .coram_q({{ thread.name }}_{{ iochannel.name }}_q),
     .coram_empty({{ thread.name }}_{{ iochannel.name }}_empty),

     .coram_enq({{ thread.name }}_{{ iochannel.name }}_enq),
     .coram_d({{ thread.name }}_{{ iochannel.name }}_d),
     .coram_almost_full({{ thread.name }}_{{ iochannel.name }}_almost_full),

     .awvalid({{ thread.name }}_{{ iochannel.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ iochannel.name }}_awaddr),
     .awlen({{ thread.name }}_{{ iochannel.name }}_awlen),
     .awready({{ thread.name }}_{{ iochannel.name }}_awready),

     .wvalid({{ thread.name }}_{{ iochannel.name }}_wvalid),
     .wdata({{ thread.name }}_{{ iochannel.name }}_wdata),
     .wlast({{ thread.name }}_{{ iochannel.name }}_wlast),
     .wready({{ thread.name }}_{{ iochannel.name }}_wready),

     .bvalid({{ thread.name }}_{{ iochannel.name }}_bvalid),
     .bready({{ thread.name }}_{{ iochannel.name }}_bready),

     .arvalid({{ thread.name }}_{{ iochannel.name }}_arvalid),
     .araddr({{ thread.name }}_{{ iochannel.name }}_araddr),
     .arlen({{ thread.name }}_{{ iochannel.name }}_arlen),
     .arready({{ thread.name }}_{{ iochannel.name }}_arready),

     .rvalid({{ thread.name }}_{{ iochannel.name }}_rvalid),
     .rdata({{ thread.name }}_{{ iochannel.name }}_rdata),
     .rlast({{ thread.name }}_{{ iochannel.name }}_rlast),
     .rready({{ thread.name }}_{{ iochannel.name }}_rready)
     );
{% endfor %}

{% for ioregister in thread.ioregisters | sort(attribute='name') %}
  DMAC_IOREGISTER #
  (
   .W_D({{ ioregister.datawidth }}),
   .W_EXT_A(W_EXT_A),
   .W_BLEN(W_BLEN),
   .MAX_BURST_LEN(MAX_BURST_LEN),
   .FIFO_ADDR_WIDTH(CMD_FIFO_ADDR_WIDTH),
   .ASYNC({%- if single_clock -%} 0 {%- else -%} 1 {%- endif -%})
   )
  inst_dmac_ioregister_{{ thread.name }}_{{ ioregister.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ ioregister.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ ioregister.name }}_reset_n), // Avalon reset

     .coram_clk({{ thread.name }}_{{ ioregister.name }}_clk),
     .coram_rst({{ thread.name }}_{{ ioregister.name }}_rst),

     .coram_d({{ thread.name }}_{{ ioregister.name }}_d),
     .coram_we({{ thread.name }}_{{ ioregister.name }}_we),
     .coram_q({{ thread.name }}_{{ ioregister.name }}_q),

     .awvalid({{ thread.name }}_{{ ioregister.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ ioregister.name }}_awaddr),
     .awlen({{ thread.name }}_{{ ioregister.name }}_awlen),
     .awready({{ thread.name }}_{{ ioregister.name }}_awready),

     .wvalid({{ thread.name }}_{{ ioregister.name }}_wvalid),
     .wdata({{ thread.name }}_{{ ioregister.name }}_wdata),
     .wlast({{ thread.name }}_{{ ioregister.name }}_wlast),
     .wready({{ thread.name }}_{{ ioregister.name }}_wready),

     .bvalid({{ thread.name }}_{{ ioregister.name }}_bvalid),
     .bready({{ thread.name }}_{{ ioregister.name }}_bready),

     .arvalid({{ thread.name }}_{{ ioregister.name }}_arvalid),
     .araddr({{ thread.name }}_{{ ioregister.name }}_araddr),
     .arlen({{ thread.name }}_{{ ioregister.name }}_arlen),
     .arready({{ thread.name }}_{{ ioregister.name }}_arready),

     .rvalid({{ thread.name }}_{{ ioregister.name }}_rvalid),
     .rdata({{ thread.name }}_{{ ioregister.name }}_rdata),
     .rlast({{ thread.name }}_{{ ioregister.name }}_rlast),
     .rready({{ thread.name }}_{{ ioregister.name }}_rready)
     );
{% endfor %}
{%- endfor %}


  //------------------------------------------------------------------------------
  // Avalon Interface
  //------------------------------------------------------------------------------
{%- for thread in threads | sort(attribute='name') %}
{% for memory in thread.memories | sort(attribute='name') %}
  avalon_master_interface #
   (
    .C_AVM_ADDR_WIDTH(C_AVM_{{ thread.name }}_{{ memory.name }}_ADDR_WIDTH),
    .C_AVM_DATA_WIDTH(C_AVM_{{ thread.name }}_{{ memory.name }}_DATA_WIDTH),
    .C_AVM_TARGET(C_AVM_TARGET)
   )
  inst_avalon_master_interface_{{ thread.name }}_{{ memory.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ memory.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ memory.name }}_reset_n), // Avalon reset

     .awvalid({{ thread.name }}_{{ memory.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ memory.name }}_awaddr),
     .awlen({{ thread.name }}_{{ memory.name }}_awlen),
     .awready({{ thread.name }}_{{ memory.name }}_awready),

     .wvalid({{ thread.name }}_{{ memory.name }}_wvalid),
     .wdata({{ thread.name }}_{{ memory.name }}_wdata),
     .wlast({{ thread.name }}_{{ memory.name }}_wlast),
     .wready({{ thread.name }}_{{ memory.name }}_wready),

     .bvalid({{ thread.name }}_{{ memory.name }}_bvalid),
     .bready({{ thread.name }}_{{ memory.name }}_bready),

     .arvalid({{ thread.name }}_{{ memory.name }}_arvalid),
     .araddr({{ thread.name }}_{{ memory.name }}_araddr),
     .arlen({{ thread.name }}_{{ memory.name }}_arlen),
     .arready({{ thread.name }}_{{ memory.name }}_arready),

     .rvalid({{ thread.name }}_{{ memory.name }}_rvalid),
     .rdata({{ thread.name }}_{{ memory.name }}_rdata),
     .rlast({{ thread.name }}_{{ memory.name }}_rlast),
     .rready({{ thread.name }}_{{ memory.name }}_rready),

     .avm_address(avm_{{ thread.name }}_{{ memory.name }}_address),
     .avm_waitrequest(avm_{{ thread.name }}_{{ memory.name }}_waitrequest),
     .avm_byteenable(avm_{{ thread.name }}_{{ memory.name }}_byteenable),
     .avm_burstcount(avm_{{ thread.name }}_{{ memory.name }}_burstcount),

     .avm_read(avm_{{ thread.name }}_{{ memory.name }}_read),
     .avm_readdata(avm_{{ thread.name }}_{{ memory.name }}_readdata),
     .avm_readdatavalid(avm_{{ thread.name }}_{{ memory.name }}_readdatavalid),

     .avm_write(avm_{{ thread.name }}_{{ memory.name }}_write),
     .avm_writedata(avm_{{ thread.name }}_{{ memory.name }}_writedata)
     );
{% endfor %}

{% for instream in thread.instreams | sort(attribute='name') %}
  avalon_master_interface #
   (
    .C_AVM_ADDR_WIDTH(C_AVM_{{ thread.name }}_{{ instream.name }}_ADDR_WIDTH),
    .C_AVM_DATA_WIDTH(C_AVM_{{ thread.name }}_{{ instream.name }}_DATA_WIDTH),
    .C_AVM_TARGET(C_AVM_TARGET)
   )
  inst_avalon_master_interface_{{ thread.name }}_{{ instream.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ instream.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ instream.name }}_reset_n), // Avalon reset

     .awvalid({{ thread.name }}_{{ instream.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ instream.name }}_awaddr),
     .awlen({{ thread.name }}_{{ instream.name }}_awlen),
     .awready({{ thread.name }}_{{ instream.name }}_awready),

     .wvalid({{ thread.name }}_{{ instream.name }}_wvalid),
     .wdata({{ thread.name }}_{{ instream.name }}_wdata),
     .wlast({{ thread.name }}_{{ instream.name }}_wlast),
     .wready({{ thread.name }}_{{ instream.name }}_wready),

     .bvalid({{ thread.name }}_{{ instream.name }}_bvalid),
     .bready({{ thread.name }}_{{ instream.name }}_bready),

     .arvalid({{ thread.name }}_{{ instream.name }}_arvalid),
     .araddr({{ thread.name }}_{{ instream.name }}_araddr),
     .arlen({{ thread.name }}_{{ instream.name }}_arlen),
     .arready({{ thread.name }}_{{ instream.name }}_arready),

     .rvalid({{ thread.name }}_{{ instream.name }}_rvalid),
     .rdata({{ thread.name }}_{{ instream.name }}_rdata),
     .rlast({{ thread.name }}_{{ instream.name }}_rlast),
     .rready({{ thread.name }}_{{ instream.name }}_rready),

     .avm_address(avm_{{ thread.name }}_{{ instream.name }}_address),
     .avm_waitrequest(avm_{{ thread.name }}_{{ instream.name }}_waitrequest),
     .avm_byteenable(avm_{{ thread.name }}_{{ instream.name }}_byteenable),
     .avm_burstcount(avm_{{ thread.name }}_{{ instream.name }}_burstcount),

     .avm_read(avm_{{ thread.name }}_{{ instream.name }}_read),
     .avm_readdata(avm_{{ thread.name }}_{{ instream.name }}_readdata),
     .avm_readdatavalid(avm_{{ thread.name }}_{{ instream.name }}_readdatavalid),

     .avm_write(avm_{{ thread.name }}_{{ instream.name }}_write),
     .avm_writedata(avm_{{ thread.name }}_{{ instream.name }}_writedata)
     );
{% endfor %}

{% for outstream in thread.outstreams | sort(attribute='name') %}
  avalon_master_interface #
   (
    .C_AVM_ADDR_WIDTH(C_AVM_{{ thread.name }}_{{ outstream.name }}_ADDR_WIDTH),
    .C_AVM_DATA_WIDTH(C_AVM_{{ thread.name }}_{{ outstream.name }}_DATA_WIDTH),
    .C_AVM_TARGET(C_AVM_TARGET)
   )
  inst_avalon_master_interface_{{ thread.name }}_{{ outstream.name }}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ outstream.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ outstream.name }}_reset_n), // Avalon reset

     .awvalid({{ thread.name }}_{{ outstream.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ outstream.name }}_awaddr),
     .awlen({{ thread.name }}_{{ outstream.name }}_awlen),
     .awready({{ thread.name }}_{{ outstream.name }}_awready),

     .wvalid({{ thread.name }}_{{ outstream.name }}_wvalid),
     .wdata({{ thread.name }}_{{ outstream.name }}_wdata),
     .wlast({{ thread.name }}_{{ outstream.name }}_wlast),
     .wready({{ thread.name }}_{{ outstream.name }}_wready),

     .bvalid({{ thread.name }}_{{ outstream.name }}_bvalid),
     .bready({{ thread.name }}_{{ outstream.name }}_bready),

     .arvalid({{ thread.name }}_{{ outstream.name }}_arvalid),
     .araddr({{ thread.name }}_{{ outstream.name }}_araddr),
     .arlen({{ thread.name }}_{{ outstream.name }}_arlen),
     .arready({{ thread.name }}_{{ outstream.name }}_arready),

     .rvalid({{ thread.name }}_{{ outstream.name }}_rvalid),
     .rdata({{ thread.name }}_{{ outstream.name }}_rdata),
     .rlast({{ thread.name }}_{{ outstream.name }}_rlast),
     .rready({{ thread.name }}_{{ outstream.name }}_rready),

     .avm_address(avm_{{ thread.name }}_{{ outstream.name }}_address),
     .avm_waitrequest(avm_{{ thread.name }}_{{ outstream.name }}_waitrequest),
     .avm_byteenable(avm_{{ thread.name }}_{{ outstream.name }}_byteenable),
     .avm_burstcount(avm_{{ thread.name }}_{{ outstream.name }}_burstcount),

     .avm_read(avm_{{ thread.name }}_{{ outstream.name }}_read),
     .avm_readdata(avm_{{ thread.name }}_{{ outstream.name }}_readdata),
     .avm_readdatavalid(avm_{{ thread.name }}_{{ outstream.name }}_readdatavalid),

     .avm_write(avm_{{ thread.name }}_{{ outstream.name }}_write),
     .avm_writedata(avm_{{ thread.name }}_{{ outstream.name }}_writedata)
     );
{% endfor %}

{% for iochannel in thread.iochannels | sort(attribute='name') %}
{%- if not lite %}
  avalon_slave_interface #
{%- else %}
  avalon_lite_slave_interface #
{%- endif %}
   (
    .C_AVS_ADDR_WIDTH(C_AVS_{{ thread.name }}_{{ iochannel.name }}_ADDR_WIDTH),
    .C_AVS_DATA_WIDTH(C_AVS_{{ thread.name }}_{{ iochannel.name }}_DATA_WIDTH)
   )
{%- if not lite %}
  inst_avalon_slave_interface_{{ thread.name }}_{{ iochannel.name }}
{%- else %}
  inst_avalon_lite_slave_interface_{{ thread.name }}_{{ iochannel.name }}
{%- endif %}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ iochannel.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ iochannel.name }}_reset_n), // Avalon reset

     .awvalid({{ thread.name }}_{{ iochannel.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ iochannel.name }}_awaddr),
     .awlen({{ thread.name }}_{{ iochannel.name }}_awlen),
     .awready({{ thread.name }}_{{ iochannel.name }}_awready),

     .wvalid({{ thread.name }}_{{ iochannel.name }}_wvalid),
     .wdata({{ thread.name }}_{{ iochannel.name }}_wdata),
     .wlast({{ thread.name }}_{{ iochannel.name }}_wlast),
     .wready({{ thread.name }}_{{ iochannel.name }}_wready),

     .bvalid({{ thread.name }}_{{ iochannel.name }}_bvalid),
     .bready({{ thread.name }}_{{ iochannel.name }}_bready),

     .arvalid({{ thread.name }}_{{ iochannel.name }}_arvalid),
     .araddr({{ thread.name }}_{{ iochannel.name }}_araddr),
     .arlen({{ thread.name }}_{{ iochannel.name }}_arlen),
     .arready({{ thread.name }}_{{ iochannel.name }}_arready),

     .rvalid({{ thread.name }}_{{ iochannel.name }}_rvalid),
     .rdata({{ thread.name }}_{{ iochannel.name }}_rdata),
     .rlast({{ thread.name }}_{{ iochannel.name }}_rlast),
     .rready({{ thread.name }}_{{ iochannel.name }}_rready),

     .avs_address({ {{ ext_addrwidth-1 }}'h0, avs_{{ thread.name }}_{{ iochannel.name }}_address}),
     .avs_waitrequest(avs_{{ thread.name }}_{{ iochannel.name }}_waitrequest),
     .avs_byteenable(avs_{{ thread.name }}_{{ iochannel.name }}_byteenable),
{%- if not lite %}
     .avs_burstcount(avs_{{ thread.name }}_{{ iochannel.name }}_burstcount),
{%- endif %}
     .avs_read(avs_{{ thread.name }}_{{ iochannel.name }}_read),
     .avs_readdata(avs_{{ thread.name }}_{{ iochannel.name }}_readdata),
     .avs_readdatavalid(avs_{{ thread.name }}_{{ iochannel.name }}_readdatavalid),
     .avs_write(avs_{{ thread.name }}_{{ iochannel.name }}_write),
     .avs_writedata(avs_{{ thread.name }}_{{ iochannel.name }}_writedata)
     );
{% endfor %}

{% for ioregister in thread.ioregisters | sort(attribute='name') %}
{%- if not lite %}
  avalon_slave_interface #
{%- else %}
  avalon_lite_slave_interface #
{%- endif %}
   (
    .C_AVS_ADDR_WIDTH(C_AVS_{{ thread.name }}_{{ ioregister.name }}_ADDR_WIDTH),
    .C_AVS_DATA_WIDTH(C_AVS_{{ thread.name }}_{{ ioregister.name }}_DATA_WIDTH)
   )
{%- if not lite %}
  inst_avalon_slave_interface_{{ thread.name }}_{{ ioregister.name }}
{%- else %}
  inst_avalon_lite_slave_interface_{{ thread.name }}_{{ ioregister.name }}
{%- endif %}
    (
     .ACLK(csi_sys_{{ thread.name }}_{{ ioregister.name }}_clk), // Avalon clock
     .ARESETN(csi_sys_{{ thread.name }}_{{ ioregister.name }}_reset_n), // Avalon reset

     .awvalid({{ thread.name }}_{{ ioregister.name }}_awvalid),
     .awaddr({{ thread.name }}_{{ ioregister.name }}_awaddr),
     .awlen({{ thread.name }}_{{ ioregister.name }}_awlen),
     .awready({{ thread.name }}_{{ ioregister.name }}_awready),

     .wvalid({{ thread.name }}_{{ ioregister.name }}_wvalid),
     .wdata({{ thread.name }}_{{ ioregister.name }}_wdata),
     .wlast({{ thread.name }}_{{ ioregister.name }}_wlast),
     .wready({{ thread.name }}_{{ ioregister.name }}_wready),

     .bvalid({{ thread.name }}_{{ ioregister.name }}_bvalid),
     .bready({{ thread.name }}_{{ ioregister.name }}_bready),

     .arvalid({{ thread.name }}_{{ ioregister.name }}_arvalid),
     .araddr({{ thread.name }}_{{ ioregister.name }}_araddr),
     .arlen({{ thread.name }}_{{ ioregister.name }}_arlen),
     .arready({{ thread.name }}_{{ ioregister.name }}_arready),

     .rvalid({{ thread.name }}_{{ ioregister.name }}_rvalid),
     .rdata({{ thread.name }}_{{ ioregister.name }}_rdata),
     .rlast({{ thread.name }}_{{ ioregister.name }}_rlast),
     .rready({{ thread.name }}_{{ ioregister.name }}_rready),

     .avs_address({ {{ ext_addrwidth-1 }}'h0, avs_{{ thread.name }}_{{ ioregister.name }}_address}),
     .avs_waitrequest(avs_{{ thread.name }}_{{ ioregister.name }}_waitrequest),
     .avs_byteenable(avs_{{ thread.name }}_{{ ioregister.name }}_byteenable),
{%- if not lite %}
     .avs_burstcount(avs_{{ thread.name }}_{{ ioregister.name }}_burstcount),
{%- endif %}
     .avs_read(avs_{{ thread.name }}_{{ ioregister.name }}_read),
     .avs_readdata(avs_{{ thread.name }}_{{ ioregister.name }}_readdata),
     .avs_readdatavalid(avs_{{ thread.name }}_{{ ioregister.name }}_readdatavalid),
     .avs_write(avs_{{ thread.name }}_{{ ioregister.name }}_write),
     .avs_writedata(avs_{{ thread.name }}_{{ ioregister.name }}_writedata)
     );
{% endfor %}

{%- endfor %}

endmodule

