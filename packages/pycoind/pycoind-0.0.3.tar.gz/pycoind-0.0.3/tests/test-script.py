import unittest

import pycoind

class TestScriptTransactions(unittest.TestCase):

    class MockTransaction(pycoind.blockchain.transaction.Transaction):
      '''Script only requires the wrapper to include the raw Txn. Many
         operations will otherwise fail on this object, so do not try this
         in your day-to-day life. Badness may ensue.'''

      def __init__(self, txn_bytes):
          (dummy, self._transaction) = pycoind.protocol.Txn.parse(txn_bytes)

    @staticmethod
    def bv(value):
        'Create a stack literal sequence for an integer value.'

        v = pycoind.script.ByteVector.from_value(value).vector
        return chr(len(v)) + v

    def setUp(self):
        pass

    def check_transaction(self, txn_bytes, pk_script, input_index):
        txn = self.MockTransaction(txn_bytes)
        txio = pycoind.script.Script(txn)
        valid = txio.verify_input(input_index, pk_script)
        self.assertTrue(valid)

        # with self.assertRaises(exception):
        #self.assetRaises(exception, script.script, broken

    def test_hashall(self):
        # Block: bitcoin@40094
        # Txn: 854a3aaaee36be32e441cc8f86890b7eebe4710f30003dfff362cc2d90d163d4

        txn_bytes = ''.decode('hex')
        pk_script = '76a9143f320f852a51643d3ffbaa1f49bfe521dd97764a88ac'.decode('hex')
        input_index = 70

        self.check_transaction(txn_bytes, pk_script, input_index)

    def test_hashall_anyonecanpay(self):
        # Block: bitcoin@276459
        # Txn: 33854f625c90e3287eae951103489a2449f91bfe039aa4d4c810bd66450edbf1

        txn_bytes = ''.decode('hex')
        pk_script = '76a9149bc0bbdd3024da4d0c38ed1aecf5c68dd1d3fa1288ac'.decode('hex')
        input_index = 12

        self.check_transaction(txn_bytes, pk_script, input_index)

    def test_hashnone(self):
        # Block: bitcoin@
        # Txn: 

        txn_bytes = ''.decode('hex')
        pk_script = ''.decode('hex')
        input_index = 3

        #self.check_transaction(txn_bytes, pk_script, input_index)

    def test_hashnone_anyonecanpay(self):
        # Block: bitcoin@
        # Txn: 

        txn_bytes = ''.decode('hex')
        pk_script = ''.decode('hex')
        input_index = 3

        #self.check_transaction(txn_bytes, pk_script, input_index)

    def test_hashsingle(self):
        # Block: bitcoin@238797
        # Txn: afd9c17f8913577ec3509520bd6e5d63e9c0fd2a5f70c787993b097ba6ca9fae

        txn_bytes = '010000000370ac0a1ae588aaf284c308d67ca92c69a39e2db81337e563bf40c59da0a5cf63000000006a4730440220360d20baff382059040ba9be98947fd678fb08aab2bb0c172efa996fd8ece9b702201b4fb0de67f015c90e7ac8a193aeab486a1f587e0f54d0fb9552ef7f5ce6caec032103579ca2e6d107522f012cd00b52b9a65fb46f0c57b9b8b6e377c48f526a44741affffffff7d815b6447e35fbea097e00e028fb7dfbad4f3f0987b4734676c84f3fcd0e804010000006b483045022100c714310be1e3a9ff1c5f7cacc65c2d8e781fc3a88ceb063c6153bf950650802102200b2d0979c76e12bb480da635f192cc8dc6f905380dd4ac1ff35a4f68f462fffd032103579ca2e6d107522f012cd00b52b9a65fb46f0c57b9b8b6e377c48f526a44741affffffff3f1f097333e4d46d51f5e77b53264db8f7f5d2e18217e1099957d0f5af7713ee010000006c493046022100b663499ef73273a3788dea342717c2640ac43c5a1cf862c9e09b206fcb3f6bb8022100b09972e75972d9148f2bdd462e5cb69b57c1214b88fc55ca638676c07cfc10d8032103579ca2e6d107522f012cd00b52b9a65fb46f0c57b9b8b6e377c48f526a44741affffffff0380841e00000000001976a914bfb282c70c4191f45b5a6665cad1682f2c9cfdfb88ac80841e00000000001976a9149857cc07bed33a5cf12b9c5e0500b675d500c81188ace0fd1c00000000001976a91443c52850606c872403c0601e69fa34b26f62db4a88ac00000000'.decode('hex')
        pk_script = '76a914dcf72c4fd02f5a987cf9b02f2fabfcac3341a87d88ac'.decode('hex')
        input_index = 1

        self.check_transaction(txn_bytes, pk_script, input_index)

    def test_hashsingle_anyonecanpay(self):
        # Block: bitcoin@
        # Txn: 

        txn_bytes = ''.decode('hex')
        pk_script = ''.decode('hex')
        input_index = 3

        #self.check_transaction(txn_bytes, pk_script, input_index)

    def check_script(self, script, output):

        # for each output, add the literal and do checkverify
        if output:
            for o in reversed(output):
                if isinstance(o, int):
                    script += self.bv(o)
                elif isinstance(o, str):
                    script += chr(len(o)) + o
                else:
                    raise Exception()
                script += chr(pycoind.script.opcodes.OP_EQUALVERIFY)

        # make sure the stack depth is 0 and return true
        script += (
            chr(pycoind.script.opcodes.OP_DEPTH) +
            self.bv(0) +
            chr(pycoind.script.opcodes.OP_EQUALVERIFY) +
            chr(pycoind.script.opcodes.OP_TRUE)
        )

        # run the script
        result = pycoind.script.Script.process('', script, None, None)

        # check the output (None indicates expected failure)
        if output is None:
            self.assertFalse(result)
        else:
            self.assertTrue(result)

    def test_flow_control_ops(self):
        pass

    def test_literal_ops(self):
        tests = [
            # https://github.com/bitcoin/bitcoin/blob/master/src/test/script_tests.cpp#L110
            ((1, 0x5a), 0x5a),
            ((pycoind.script.opcodes.OP_PUSHDATA1, 1, 0x5a), 0x5a),
            ((pycoind.script.opcodes.OP_PUSHDATA2, 1, 0, 0x5a), 0x5a),
            ((pycoind.script.opcodes.OP_PUSHDATA4, 1, 0, 0, 0, 0x5a), 0x5a),
        ]

        for (inputs, output) in tests:
            script = "".join(chr(i) for i in inputs)
            self.check_script(script, [output])

    def test_stack_ops(self):
        xTop = 19
        (x, x0, x1, x2, x3, x4, x5, x6) = (41, 43, 47, 53, 59, 61, 67, 71)
        tests = [
            ('OP_IFDUP', [0], [0],),
            ('OP_IFDUP', [1], [1, 1],),

            ('OP_DEPTH', [], [0]),
            ('OP_DEPTH', [1,1], [1,1,2]),

            ('OP_DROP', [x], []),
            ('OP_DROP', [], None),

            ('OP_DUP', [x], [x, x]),
            ('OP_DUP', [x1, x], [x1, x, x]),
            ('OP_DUP', [], None),

            ('OP_NIP', [x1,x2], [x2]),
            ('OP_NIP', [x,x2,x3], [x,x3]),
            ('OP_NIP', [x1], None),
            ('OP_NIP', [], None),

            ('OP_OVER', [x1,x2], [x1,x2,x1]),
            ('OP_OVER', [x1], None),
            ('OP_OVER', [], None),

            ('OP_PICK', [x5, x4, x3, x2, x1, x0, 5], [x5, x4, x3, x2, x1, x0, x5]),
            ('OP_PICK', [x5, x4, x3, x2, x1, x0, 2], [x5, x4, x3, x2, x1, x0, x2]),
            # @TODO: pick error cases

            ('OP_ROLL', [x5, x4, x3, x2, x1, x0, 5], [x4, x3, x2, x1, x0, x5]),
            ('OP_ROLL', [x5, x4, x3, x2, x1, x0, 2], [x5, x4, x3, x1, x0, x2]),
            # @TODO: roll error cases (not enough arguments to start, len < n)

            ('OP_ROT', [x1, x2, x3], [x2, x3, x1]),
            ('OP_ROT', [x, x1, x2, x3], [x, x2, x3, x1]),
            # @TODO: rot error cases (ditto)

            ('OP_SWAP', [x1, x2], [x2, x1]),
            ('OP_SWAP', [x, x1, x2], [x, x2, x1]),
            ('OP_SWAP', [x1], None),
            ('OP_SWAP', [], None),

            ('OP_TUCK', [x1, x2], [x2, x1, x2]),
            ('OP_TUCK', [x, x1, x2], [x, x2, x1, x2]),
            # @TODO: tuck error cases

            ('OP_2DROP', [x1, x2], []),
            ('OP_2DROP', [x, x1, x2], [x]),
            ('OP_2DROP', [x1], None),
            ('OP_2DROP', [], None),

            ('OP_2DUP', [x1, x2], [x1, x2, x1, x2]),
            ('OP_2DUP', [x, x1, x2], [x, x1, x2, x1, x2]),
            ('OP_2DUP', [x1], None),
            ('OP_2DUP', [], None),

            ('OP_3DUP', [x1, x2, x3], [x1, x2, x3, x1, x2, x3]),
            ('OP_3DUP', [x, x1, x2, x3], [x, x1, x2, x3, x1, x2, x3]),
            ('OP_3DUP', [x1, x2], None),
            ('OP_3DUP', [x1], None),
            ('OP_3DUP', [], None),

            ('OP_2OVER', [x1, x2, x3, x4], [x1, x2, x3, x4, x1, x2]),
            ('OP_2OVER', [x, x1, x2, x3, x4], [x, x1, x2, x3, x4, x1, x2]),
            # @TODO: 2over error cases

            ('OP_2ROT', [x1, x2, x3, x4, x5, x6], [x3, x4, x5, x6, x1, x2]),
            ('OP_2ROT', [x, x1, x2, x3, x4, x5, x6], [x, x3, x4, x5, x6, x1, x2]),
            # @TODO: 2rot error cases

            ('OP_2SWAP', [x1, x2, x3, x4], [x3, x4, x1, x2]),
            ('OP_2SWAP', [x, x1, x2, x3, x4], [x, x3, x4, x1, x2]),
            # @TODO: 2swap error cases
        ]

        for opname, inputs, outputs in tests:
            # length(x1) + x1 [+ length(x1) + x2 ...] + opcode
            script = "".join(self.bv(i) for i in inputs) + chr(pycoind.script.opcodes.get_opcode(opname))
            self.check_script(script, outputs)

    def test_splice_ops(self):
        tests = [
            (['hello'], ['hello', 5]),
            (['hello', 'world!'], ['hello', 'world!', 6]),
            ([], None),
        ]

        for (inputs, outputs) in tests:
            script = ''.join((chr(len(i)) + i) for i in inputs) + chr(pycoind.script.opcodes.OP_SIZE)
            self.check_script(script, outputs)

    def test_logic_ops(self):
        pass

    def test_math_overflow_ops(self):
        pass

    def test_unary_math_ops(self):
        tests = [
            ('OP_1ADD', -2, -1),
            ('OP_1ADD', -1, 0),
            ('OP_1ADD', 0, 1),
            ('OP_1ADD', 1, 2),

            ('OP_1SUB', -1, -2),
            ('OP_1SUB', 0, -1),
            ('OP_1SUB', 1, 0),
            ('OP_1SUB', 2, 1),

            ('OP_NEGATE', 0, 0),
            ('OP_NEGATE', 1, -1),
            ('OP_NEGATE', -1, 1),

            ('OP_ABS', 0, 0),
            ('OP_ABS', 1, 1),
            ('OP_ABS', -1, 1),

            ('OP_NOT', 0, 1),
            ('OP_NOT', 1, 0),
            ('OP_NOT', -1, 0),
            ('OP_NOT', 200, 0),

            ('OP_0NOTEQUAL', 0, 0),
            ('OP_0NOTEQUAL', 1, 1),
            ('OP_0NOTEQUAL', -1, 1),
        ]

        for opname, input, output in tests:
            # length(input) + input + opcode
            script = self.bv(input) + chr(pycoind.script.opcodes.get_opcode(opname))
            self.check_script(script, [output])

    def test_binary_math_ops(self):
        tests = [
          ('OP_ADD', 1, 2, 3),
          ('OP_ADD', 1, -1, 0),
          ('OP_ADD', 1, -2, -1),
          ('OP_ADD', 1, -2, -1),
          ('OP_ADD', 1, 127, 128),
          ('OP_ADD', 129, 129, 258),
          ('OP_ADD', -1000, -1000, -2000),

          ('OP_SUB', 1, 1, 0),
          ('OP_SUB', 5, 1, 4),
          ('OP_SUB', 1, 5, -4),

          ('OP_BOOLAND', 0, 0, 0),
          ('OP_BOOLAND', 0, 1, 0),
          ('OP_BOOLAND', 1, 0, 0),
          ('OP_BOOLAND', 1, 1, 1),

          ('OP_BOOLOR', 0, 0, 0),
          ('OP_BOOLOR', 0, 1, 1),
          ('OP_BOOLOR', 1, 0, 1),
          ('OP_BOOLOR', 1, 1, 1),

          ('OP_NUMEQUAL', 1, 1, 1),
          ('OP_NUMEQUAL', 1, 5, 0),

          ('OP_NUMNOTEQUAL', 1, 1, 0),
          ('OP_NUMNOTEQUAL', 5, 1, 1),

          ('OP_LESSTHAN', 5, 6, 1),
          ('OP_LESSTHAN', 5, 5, 0),
          ('OP_LESSTHAN', 5, 4, 0),

          ('OP_LESSTHANOREQUAL', 5, 6, 1),
          ('OP_LESSTHANOREQUAL', 5, 5, 1),
          ('OP_LESSTHANOREQUAL', 5, 4, 0),

          ('OP_GREATERTHAN', 5, 6, 0),
          ('OP_GREATERTHAN', 5, 5, 0),
          ('OP_GREATERTHAN', 5, 4, 1),

          ('OP_GREATERTHANOREQUAL', 5, 6, 0),
          ('OP_GREATERTHANOREQUAL', 5, 5, 1),
          ('OP_GREATERTHANOREQUAL', 5, 4, 1),

          ('OP_MIN', 5, 6, 5),
          ('OP_MIN', 6, 5, 5),
          ('OP_MIN', 5, -6, -6),

          ('OP_MAX', 5, 6, 6),
          ('OP_MAX', 6, 5, 6),
          ('OP_MAX', -5, -6, -5),
        ]

        for opname, a, b, output in tests:
            # length(a) + a + length(b) + b + opcode
            script = self.bv(a) + self.bv(b) + chr(pycoind.script.opcodes.get_opcode(opname))
            self.check_script(script, [output])

    def test_multisig(self):
        pass
        # test 1/3 work for 2/3
        # test 2/3 work for 2/3
        # test 3/3 work for 2/3

        # 1 of 2 multi-sig, where one of the public keys is giberish
        # txid: 7aa7f9172660e38236b3bb97830c0b79a6e843ae83145d8707b9b8f249e7c470

    def test_ternary_math_ops(self):
        tests = [
            (pycoind.script.opcodes.OP_WITHIN, [2, 1, 3], [1]),
            (pycoind.script.opcodes.OP_WITHIN, [1, 1, 3], [1]),
            (pycoind.script.opcodes.OP_WITHIN, [3, 1, 3], [0]),

            (pycoind.script.opcodes.OP_WITHIN, [0, -5, 5], [1]),
            (pycoind.script.opcodes.OP_WITHIN, [0, 5, -5], [0]),

            (pycoind.script.opcodes.OP_WITHIN, [10, 12], None),
            (pycoind.script.opcodes.OP_WITHIN, [12, 10], None),
            (pycoind.script.opcodes.OP_WITHIN, [12], None),
            (pycoind.script.opcodes.OP_WITHIN, [], None),

        ]
        for (opname, inputs, outputs) in tests:
            # length(x1) + x1 [+ length(x1) + x2 ...] + opcode
            script = "".join(self.bv(i) for i in inputs) + chr(opname)
            self.check_script(script, outputs)

    def test_crypto_ops(self):
        tests = [
            # http://en.wikipedia.org/wiki/RIPEMD
            ('OP_RIPEMD160', 'The quick brown fox jumps over the lazy dog', '37f332f68db77bd9d7edd4969571ad671cf9dd3b'),
            ('OP_RIPEMD160', '', '9c1185a5c5e9fc54612808977ee8f548b2258d31'),

            # http://en.wikipedia.org/wiki/SHA_1
            ('OP_SHA1', 'The quick brown fox jumps over the lazy dog', '2fd4e1c67a2d28fced849ee1bb76e7391b93eb12'),
            ('OP_SHA1', '', 'da39a3ee5e6b4b0d3255bfef95601890afd80709'),

            # http://en.wikipedia.org/wiki/Sha256
            ('OP_SHA256', 'The quick brown fox jumps over the lazy dog', 'd7a8fbb307d7809469ca9abcb0082e4f8d5651e46d3cdb762d02d0bf37c9e592'),
            ('OP_SHA256', '', 'e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855'),

            # https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses
            ('OP_HASH160', '0450863AD64A87AE8A2FE83C1AF1A8403CB53F53E486D8511DAD8A04887E5B23522CD470243453A299FA9E77237716103ABC11A1DF38855ED6F2EE187E9C582BA6'.decode('hex'), '010966776006953D5567439E5E39F86A0D273BEE'),

            # https://en.bitcoin.it/wiki/Technical_background_of_Bitcoin_addresses
            ('OP_HASH256', '00010966776006953D5567439E5E39F86A0D273BEE'.decode('hex'), 'D61967F63C7DD183914A4AE452C9F6AD5D462CE3D277798075B107615C1A8A30'),
        ]

        for opname, input, output in tests:
            # length(input) + input + opcode
            script = chr(len(input)) + input + chr(pycoind.script.opcodes.get_opcode(opname))
            self.check_script(script, [output.decode('hex')])

    def test_reserved_ops(self):
        pass

suite = unittest.TestLoader().loadTestsFromTestCase(TestScriptTransactions)
unittest.TextTestRunner(verbosity=2).run(suite)
