#!/usr/bin/env python
#
# Author: Paul D. Eden
# Created: ${date}
"""

"""

import cmd
import threading
import subprocess

import decorator

import benchline.args


def run(command):
    subprocess.check_call(command, shell=True)


def runbool(command):
    return subprocess.call(command, shell=True) == 0


def output(command):
    process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE)
    rval = process.communicate()[0]
    if process.returncode != 0:
        raise Exception, "%s failed" % command
    return rval


def delayed(nsec):
    def call(proc, *args, **kw):
        thread = threading.Timer(nsec, proc, args, kw)
        thread.start()
        return thread

    return decorator.decorator(call)


threaded = delayed(0)


class ${class_name}(cmd.Cmd):
    """
    """

    def __init__(self, options, args):
        cmd.Cmd.__init__(self)
        self.options = options
        self.args = args

    ##########  Private Methods  ##########

    ##########  Public Methods  ##########

    def do_quit(self, arg):
        return True

    do_q = do_quit

    def emptyline(self):
        pass

    def main(self):
        self.cmdloop()


if __name__ == "__main__":
    c = ${class_name}()
    benchline.args.triage(__doc__, c.main)
