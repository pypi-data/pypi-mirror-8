diff -urBNs re2/re2/dfa.cc re2/re2/dfa.cc
--- re2/re2/dfa.cc	2013-01-15 10:00:09.000000000 +0000
+++ re2/re2/dfa.cc	2013-10-24 05:53:02.220772889 +0000
@@ -21,13 +21,16 @@
 //
 // See http://swtch.com/~rsc/regexp/ for a very bare-bones equivalent.
 
+#include <iostream>
+#include <stdlib.h>
+
 #include "re2/prog.h"
 #include "re2/stringpiece.h"
 #include "util/atomicops.h"
 #include "util/flags.h"
 #include "util/sparse_set.h"
 
-DEFINE_bool(re2_dfa_bail_when_slow, true,
+DEFINE_bool(re2_dfa_bail_when_slow, false,
             "Whether the RE2 DFA should bail out early "
             "if the NFA would be faster (for testing).");
 
@@ -79,6 +82,7 @@
   // Builds out all states for the entire DFA.  FOR TESTING ONLY
   // Returns number of states.
   int BuildAllStates();
+  std::string PrintAllStates();
 
   // Computes min and max for matching strings.  Won't return strings
   // bigger than maxlen.
@@ -1939,7 +1943,9 @@
   // at beginning of text.
   RWLocker l(&cache_mutex_);
   SearchParams params(NULL, NULL, &l);
-  params.anchored = false;
+  params.anchored = true;
+  params.want_earliest_match = true;
+  params.run_forward = true;
   if (!AnalyzeSearch(&params) || params.start <= SpecialStateMax)
     return 0;
 
@@ -1964,12 +1970,90 @@
   return q.size();
 }
 
+std::string DFA::PrintAllStates() {
+  if (!ok())
+    return 0;
+
+  std::string retval = "";
+    
+  // Pick out start state for unanchored search
+  // at beginning of text.
+  RWLocker l(&cache_mutex_);
+  SearchParams params(NULL, NULL, &l);
+  params.anchored = true;
+  params.want_earliest_match = true;
+  params.run_forward = true;
+  if (!AnalyzeSearch(&params) || params.start <= SpecialStateMax)
+    return 0;
+
+  // Add start state to work queue.
+  StateSet queued;
+  vector<State*> q;
+  queued.insert(params.start);
+  q.push_back(params.start);
+
+  // Flood to expand every state.
+  for (int i = 0; i < q.size(); i++) {
+    //if (i>5000) { retval = "ERROR: DFA has more than 5000 states."; break; }
+    State* s = q[i];
+    for (int c = 0; c < 257; c++) {
+      State* ns = RunStateOnByteUnlocked(s, c);
+      if (ns > SpecialStateMax && queued.find(ns) == queued.end()) {
+        queued.insert(ns);
+        q.push_back(ns);
+      }
+      if (ns!=DeadState) {
+          char c_str[100];
+          char s_addr_str[100];
+          char ns_addr_str[100];
+          unsigned int s_addr_int32;
+          unsigned int ns_addr_int32;
+          
+          snprintf(c_str, sizeof(c_str), "%d", c);
+          snprintf(s_addr_str, sizeof(s_addr_str), "%p", s);
+          snprintf(ns_addr_str, sizeof(ns_addr_str), "%p", ns);
+          
+          sscanf(s_addr_str, "%x", &s_addr_int32);
+          sscanf(ns_addr_str, "%x", &ns_addr_int32);
+          
+          snprintf(s_addr_str, sizeof(s_addr_str), "%u", s_addr_int32);
+          snprintf(ns_addr_str, sizeof(ns_addr_str), "%u", ns_addr_int32);
+                   
+          retval += std::string(s_addr_str);
+          retval += " " + std::string(ns_addr_str);
+          retval += " " + std::string(c_str);
+          retval += " " + std::string(c_str);
+          retval += "\n"; 
+      }
+      if (ns!=DeadState && (ns == FullMatchState||ns->IsMatch())) {
+        char s_addr_str[100];
+        unsigned int s_addr_int32;
+        
+        snprintf(s_addr_str, sizeof(s_addr_str), "%p", s);
+        sscanf(s_addr_str, "%x", &s_addr_int32);
+        snprintf(s_addr_str, sizeof(s_addr_str), "%u", s_addr_int32);
+        
+        retval += std::string(s_addr_str);
+        retval += "\n";
+      }
+    }
+  }
+
+  return retval;
+}
+
 // Build out all states in DFA for kind.  Returns number of states.
 int Prog::BuildEntireDFA(MatchKind kind) {
   //LOG(ERROR) << "BuildEntireDFA is only for testing.";
   return GetDFA(kind)->BuildAllStates();
 }
 
+// Build out all states in DFA for kind.  Returns number of states.
+std::string Prog::PrintEntireDFA(MatchKind kind) {
+  //LOG(ERROR) << "BuildEntireDFA is only for testing.";
+  return GetDFA(kind)->PrintAllStates();
+}
+
 // Computes min and max for matching string.
 // Won't return strings bigger than maxlen.
 bool DFA::PossibleMatchRange(string* min, string* max, int maxlen) {
diff -urBNs re2/re2/prog.h re2/re2/prog.h
--- re2/re2/prog.h	2012-10-21 13:15:03.000000000 +0000
+++ re2/re2/prog.h	2013-10-24 01:25:33.113488427 +0000
@@ -279,6 +279,7 @@
   // avoids lots of unnecessary work.  This function is useful only
   // for testing purposes.  Returns number of states.
   int BuildEntireDFA(MatchKind kind);
+  std::string PrintEntireDFA(MatchKind kind);
 
   // Compute byte map.
   void ComputeByteMap();
