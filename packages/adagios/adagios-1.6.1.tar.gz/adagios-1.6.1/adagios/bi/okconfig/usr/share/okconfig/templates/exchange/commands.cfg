#check to see if your mail server is on any public RBLs (real time blackhole lists)
# Edited by PyNag on Wed May 30 10:18:45 2012
define  command {
	command_name                  okc-check_bl
        command_line    $USER1$/check_bl -H $ARG1$ -B zen.spamhaus.org bl.spamcop.net dnsbl.ahbl.org dnsbl.njabl.org dnsbl.sorbs.net virbl.dnsbl.bit.nl rbl.efnet.org phishing.rbl.msrbl.net 0spam.fusionzero.com list.dsbl.org multihop.dsbl.org unconfirmed.dsbl.org will-spam-for-food.eu.org blacklist.spambag.org blackholes.brainerd.net blackholes.uceb.org spamsources.dnsbl.info map.spam-rbl.com ns1.unsubscore.com psbl.surriel.com l2.spews.dnsbl.sorbs.net bl.csma.biz sbl.csma.biz dynablock.njabl.org no-more-funn.moensted.dk  ubl.unsubscore.com dnsbl-1.uceprotect.net dnsbl-2.uceprotect.net dnsbl-3.uceprotect.net spamguard.leadmon.net opm.blitzed.org bl.spamcannibal.org rbl.schulte.org dnsbl.ahbl.org virbl.dnsbl.bit.nl combined.rbl.msrbl.net
        }




# Edited by PyNag on Wed May 30 10:18:45 2012
define  command {
	command_name                  okc-check_exchange_pending_routing
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v COUNTER -l "\\SMTP Server(_Total)\\Messages Pending Routing","Messages Pending Routing are: %.f" -w $ARG1$ -c $ARG2$
        }

# Edited by PyNag on Wed May 30 10:18:45 2012
define  command {
	command_name                  okc-check_exchange_remote_queue_length
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v COUNTER -l "\\SMTP Server(_Total)\\Remote Queue Length","Remote Queue Length is: %.f" -w $ARG1$ -c $ARG2$
        }

#define  command {
#        command_name    check_imap
#        command_line    $USER1$/check_imap -H $HOSTADDRESS$
#        }

#define  command {
#        command_name    check_pop
#        command_line    $USER1$/check_pop -H $HOSTADDRESS$
#        }

#define  command {
#        command_name    check_smtp
#        command_line    $USER1$/check_smtp -H $HOSTADDRESS$
#        }



#following commands are based off check_nt, which comes installed with Nagios
#
#
#define  command {
#        command_name    check_nt_service
#        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d #SHOWALL -l $ARG1$

# Edited by PyNag on Wed May 30 10:18:45 2012
define  command {
	command_name                  okc-check_Exchange_all_services
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -l $_SERVICE_EXCHANGE_SKIP_SERVICES$ MSExchangeADTopology,MSExchangeAntispamUpdate,MSExchangeEdgeSync,MSExchangeFDS,MSExchangeImap4,MSExchangeIS,MSExchangeMailboxAssistants,MSExchangeMailSubmission,MSExchangeRepl,MSExchangeSA,MSExchangeSearch,MSExchangeServiceHost,MSExchangeTransport,MSExchangeTransportLogSearch,msftesql-Exchange
        }

#Microsoft Exchange Server Information Store
# Edited by PyNag on Wed May 30 10:18:46 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeIS
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeIS
        }

# Edited by PyNag on Wed May 30 10:18:46 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeADTopology
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeADTopology
        }

# Edited by PyNag on Wed May 30 10:18:46 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeAntispamUpdate
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeAntispamUpdate
        }

# Edited by PyNag on Wed May 30 10:18:46 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeEdgeSync
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeEdgeSync
        }

# Edited by PyNag on Wed May 30 10:18:47 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeFDS
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeFDS
        }

# Edited by PyNag on Wed May 30 10:18:47 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeImap4
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeImap4
        }

# Edited by PyNag on Wed May 30 10:18:47 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeMailboxAssistants
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeMailboxAssistants
        }

# Edited by PyNag on Wed May 30 10:18:47 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeMailSubmission
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeMailSubmission
        }

# Edited by PyNag on Wed May 30 10:18:47 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeMonitoring
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeMonitoring
        }


# Edited by PyNag on Wed May 30 10:18:48 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangePop3
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangePop3
        }


# Edited by PyNag on Wed May 30 10:18:48 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeRepl
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeRepl
        }


# Edited by PyNag on Wed May 30 10:18:48 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeSA
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeSA
        }


# Edited by PyNag on Wed May 30 10:18:48 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeSearch
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeSearch
        }


# Edited by PyNag on Wed May 30 10:18:49 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeServiceHost
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeServiceHost
        }


# Edited by PyNag on Wed May 30 10:18:49 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeTransport
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeTransport
        }


# Edited by PyNag on Wed May 30 10:18:49 2012
define  command {
	command_name                  okc-check_Exchange_service_MSExchangeTransportLogSearch
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l MSExchangeTransportLogSearch
        }


# Edited by PyNag on Wed May 30 10:18:49 2012
define  command {
	command_name                  okc-check_Exchange_service_msftesql-Exchange
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l msftesql-Exchange
        }


# Edited by PyNag on Wed May 30 10:18:50 2012
define  command {
	command_name                  okc-check_Exchange_service_SMTPSVC
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l SMTPSVC
        }

# Edited by PyNag on Wed May 30 10:18:50 2012
define  command {
	command_name                  okc-check_Exchange_service_RESvc
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l RESvc
        }

# Edited by PyNag on Wed May 30 10:18:50 2012
define  command {
	command_name                  okc-check_Exchange_service_W3SVC
        command_line    $USER1$/check_nt -H $HOSTADDRESS$ -p 12489 -v SERVICESTATE -d SHOWALL -l W3SVC
        }

# Edited by PyNag on Wed May 30 10:18:50 2012
define  command {
	command_name                  okc-check_owa_https
        command_line    $USER1$/check_http -H $HOSTADDRESS$ --ssl -C 60 -u /owa
        }

# Edited by PyNag on Wed May 30 10:18:51 2012
define  command {
	command_name                  okc-check_owa_http
        command_line    $USER1$/check_http -H $HOSTADDRESS$ -u /owa
        }

#
#more information here:
#http://www.petri.co.il/ports_used_by_exchange.htm
#
#following commands based on 
#define  command {
#        command_name    check_tcp
#        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p $ARG1$
#        }


#Port 389 (TCP)
#Description: Lightweight Directory Access Protocol (LDAP), used by Active Directory, Active #Directory Connector, and the Microsoft Exchange Server 5.5 directory.

# Edited by PyNag on Wed May 30 10:18:51 2012
define  command {
	command_name                  okc-check_Exchange_tcp_LDAP
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 389
        }

#Port 636 (TCP)
#Description: LDAP over Secure Sockets Layer (SSL). When SSL is enabled, LDAP data 
#that is transmitted and received is encrypted.
#To enable SSL, you must install a Computer certificate on the domain controller 
#or Exchange Server 5.5 computer.

# Edited by PyNag on Wed May 30 10:18:51 2012
define  command {
	command_name                  okc-check_Exchange_tcp_LDAP_SSL
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 636
        }

#Port (379 (TCP)
#Description: The Site Replication Service (SRS) uses TCP port 379.

# Edited by PyNag on Wed May 30 10:18:51 2012
define  command {
	command_name                  okc-check_Exchange_tcp_LDAP_SRS
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 379
        }

#Port 390 (TCP)
#Description: While not a standard LDAP port, TCP port 390 is the recommended alternate port 
#to configure the Exchange Server 5.5 LDAP protocol when Exchange Server 5.5 is running 
#on a Microsoft Windows 200x Active Directory domain controller.

# Edited by PyNag on Wed May 30 10:18:52 2012
define  command {
	command_name                  okc-check_Exchange_tcp_LDAP_SRS_ALT
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 390
        }

#Port 3268 (TCP)
#Description: Global catalog. The Windows 200x Active Directory global catalog 
#(which is really a domain controller "role") listens on TCP port 3268. 
#When you are troubleshooting issues that may be related to a global catalog, 
#connect to port 3268 in LDP.

# Edited by PyNag on Wed May 30 10:18:52 2012
define  command {
	command_name                  okc-check_Exchange_tcp_global_catalog
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 3268
        }

#Port 3269 (TCP)
#Description: Global catalog over SSL. Applications that connect to TCP port 3269 
#of a global catalog server can transmit and receive SSL encrypted data. 
#To configure a global catalog to support SSL, you must install a computer certificate 
#on the global catalog.


# Edited by PyNag on Wed May 30 10:18:52 2012
define  command {
	command_name                  okc-check_Exchange_tcp_global_catalog_ssl
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 3269
        }

#Port 143 (TCP)
#Description: Internet Message Access Protocol version 4, may be used by "standards-based" 
#clients such as Microsoft Outlook Express or Netscape Communicator to access the e-mail server. #IMAP4 runs on top of the Microsoft Internet Information Service (IIS) Admin Service (Inetinfo.exe), #and enables client access to the Exchange 200x information store.

# Edited by PyNag on Wed May 30 10:18:52 2012
define  command {
	command_name                  okc-check_Exchange_tcp_imap
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 143
        }

#Port 993 (TCP)
#Description: IMAP4 over SSL uses TCP port 993. Before an Exchange 200x server supports 
#IMAP4 (or any other protocol) over SSL, you must install a Computer certificate on 
#the Exchange 200x server.

# Edited by PyNag on Wed May 30 10:18:52 2012
define  command {
	command_name                  okc-check_Exchange_tcp_imap_ssl
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 993
        }

#Port 110 (TCP)
#Description: Post Office Protocol version 3, enables "standards-based" clients 
#such as Outlook Express or Netscape Communicator to access the e-mail server. 
#As with IMAP4, POP3 runs on top of the IIS Admin Service, and enables client access 
#to the Exchange 200x information store.

# Edited by PyNag on Wed May 30 10:18:53 2012
define  command {
	command_name                  okc-check_Exchange_tcp_pop
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 110
        }

#Port 995 (TCP)
#Description: POP3 over SSL. To enable POP3 over SSL, you must install a Computer 
#certificate on the Exchange 200x server.

# Edited by PyNag on Wed May 30 10:18:53 2012
define  command {
	command_name                  okc-check_Exchange_tcp_pop_ssl
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 995
        }

#Port 119 (TCP)
#Description: Network News Transport Protocol, sometimes called Usenet protocol, 
#enables "standards-based" client access to public folders in the information store. 
#As with IMAP4 and POP3, NNTP is dependent on the IIS Admin Service.

# Edited by PyNag on Wed May 30 10:18:53 2012
define  command {
	command_name                  okc-check_Exchange_tcp_nntp
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 119
        }

#Port 563 (TCP)
#Description: NNTP over SSL. To enable NNTP over SSL, you must install a Computer 
#certificate on the Exchange 200x Server.

# Edited by PyNag on Wed May 30 10:18:53 2012
define  command {
	command_name                  okc-check_Exchange_tcp_nntp_ssl
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 563
        }

#Port 80 (TCP)
#Description: Hyper-Text Transfer Protocol is the protocol used primarily by 
#Microsoft Outlook Web Access (OWA), but also enables some administrative actions in 
#Exchange System Manager. HTTP is implemented through the World Wide Web Publishing Service 
#(W3Svc), and runs on top of the IIS Admin Service.

# Edited by PyNag on Wed May 30 10:18:54 2012
define  command {
	command_name                  okc-check_Exchange_tcp_http
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 80
        }

#Port 443 (TCP)
#Description: HTTP over SSL. To enable HTTP over SSL, you must install a Computer 
#certificate on the Exchange 200x server.

# Edited by PyNag on Wed May 30 10:18:54 2012
define  command {
	command_name                  okc-check_Exchange_tcp_http_ssl
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 443
        }

#Port 25 (TCP)
#Description: Simple Mail Transfer Protocol, is the foundation for all e-mail 
#transport in Exchange 200x. The SMTP Service (SMTPSvc) runs on top of the IIS Admin Service. 
#Unlike IMAP4, POP3, NNTP, and HTTP, SMTP in Exchange 2000 does not use a separate port 
#for secure communication (SSL), but rather, employs an "in-band security sub-system" 
#called Transport Layer Security (TLS).

# Edited by PyNag on Wed May 30 10:18:54 2012
define  command {
	command_name                  okc-check_Exchange_tcp_smtp
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 25
        }

#Port 465 (TCP)
#Description: SMTP over SSL. TCP port 465 is reserved by common industry practice 
#for secure SMTP communication using the SSL protocol. However, unlike IMAP4, POP3, 
#NNTP, and HTTP, SMTP in Exchange 2000 does not use a separate port for 
#secure communication (SSL), but rather, employs an "in-band security sub-system" 
#called Transport Layer Security (TLS). To enable TLS to work on Exchange 200x, 
#you must install a Computer certificate on the Exchange 2000 server.


# Edited by PyNag on Wed May 30 10:18:54 2012
define  command {
	command_name                  okc-check_Exchange_tcp_smtp_ssl
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 465
        }

#Port 691 (TCP)
#Description: The Microsoft Exchange Routing Engine (also known as RESvc) listens 
#for routing link state information on TCP port 691. Exchange 200x uses routing 
#link state information to route messages and the routing table is constantly updated. 
#The Link State Algorithm (LSA) propagates outing status information between Exchange 200x 
#servers. This algorithm is based on the Open Shortest Path First (OSPF) protocol 
#from networking technology, and transfers link state information between routing groups 
#by using the X-LSA-2 command verb over SMTP and by using a Transmission Control Protocol 
#(TCP) connection to port 691 in a routing group.

# Edited by PyNag on Wed May 30 10:18:54 2012
define  command {
	command_name                  okc-check_Exchange_tcp_RESvc
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 691
        }

#Port 80 (TCP)
#Description: RVP is the foundation for Instant Messaging in Exchange 200x. 
#While RVP communication begins with TCP port 80, the server quickly sets up a 
#new connection to the client on an ephemeral TCP port above 1024. Because this port 
#is not known in advance, issues exist when you enable Instant Messaging through a firewall.

# Edited by PyNag on Wed May 30 10:18:55 2012
define  command {
	command_name                  okc-check_Exchange_tcp_RVP
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 80
        }

#Port (TCP/UDP): 6667 (TCP)
#Description: Internet Relay Chat (IRC) is the chat protocol. IRCX is the 
#extended version offered by Microsoft. While TCP port 6667 is the most common 
#port for IRC, TCP port 7000 is also very frequently used.

# Edited by PyNag on Wed May 30 10:18:55 2012
define  command {
	command_name                  okc-check_Exchange_tcp_IRCX
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 6667
        }

#Port 994 (TCP)
#Description: IRC (or Chat) over SSL. IRC or IRCX over SSL is not supported 
#in Exchange 200x.

# Edited by PyNag on Wed May 30 10:18:55 2012
define  command {
	command_name                  okc-check_Exchange_tcp_IRC_ssl
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 994
        }

#Port 102 (TCP)
#Description: ITU-T Recommendation X.400 is really a series of recommendations 
#for what an electronic message handling system (MHS) should look like. TCP port 102 is 
#defined in IETF RFC-1006, which describes OSI communications over a TCP/IP network. 
#In brief, TCP port 102 is the port that the Exchange message transfer agent (MTA) 
#uses to communicate with other X.400-capable MTAs.

# Edited by PyNag on Wed May 30 10:18:55 2012
define  command {
	command_name                  okc-check_Exchange_tcp_MHS_x400
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 102
        }

#Port 135 (TCP)
#Description: Microsoft Remote Procedure Call is a Microsoft implementation of 
#remote procedure calls (RPCs). TCP port 135 is actually only the RPC Locator Service, 
#which is like the registrar for all RPC-enabled services that run on a particular server. 
#In Exchange 200x, the Routing Group Connector uses RPC instead of SMTP when the target 
#bridgehead server is running Exchange 5.5. Also, some administrative operations require RPC. 
#To configure a firewall to enable RPC traffic, many more ports than just 135 must be enabled.

# Edited by PyNag on Wed May 30 10:18:56 2012
define  command {
	command_name                  okc-check_Exchange_tcp_rpc
        command_line    $USER1$/check_tcp -H $HOSTADDRESS$ -p 135
        }

