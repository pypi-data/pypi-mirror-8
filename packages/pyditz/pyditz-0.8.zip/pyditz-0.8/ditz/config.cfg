### Default PyDitz configuration file.

[ui]

## User interface settings.

# Your default user name.  If not set, it's taken from the DITZUSER, USER
# or USERNAME environment variables, in that order.
name = 

# Your default email address.  If not set, it's taken from the DITZEMAIL or
# EMAIL environment variables, in that order.  If still not set, it's
# formed by concatenating your user name and host name.
email = 

# Your default host name.  Only used for forming a default email address.
# If not set, it's taken from the DITZHOST, HOSTNAME or COMPUTERNAME
# environment variables, in that order.
hostname = 

[alias]

## Command alias settings.

# Each entry here sets up a command alias.  For example, 'sl = shortlog'.
# Only one level of aliasing is supported.

[default]

## Command argument defaults.

# Number of log lines to display.  Zero means all of them.
log = 5

# Number of shortlog lines to display.  Zero means all of them.
shortlog = 20

[config]

## Configuration settings.

# Command to run PyDitz under.  Change this to 'ditz' if you want to
# completely replace the original.  You need to reinstall for this to take
# effect.
command = pyditz

# List of issue directories to search for, in order.  If one of these
# contains a "project.yaml" file, it's recognized as the issue database.
issuedirs = .ditz-issues issues bugs

# Whether to create a ".ditz-config" when setting up, finding or
# reconfiguring an issue database.  For compatibility with original Ditz.
# If it exists, the settings in a .ditz-config file will override the user
# and email settings in this file.
create_ditz_config = yes

[export]

## Export settings.  These are declared by individual exporters.

[highlight]

## Highlighting settings.

# Whether to do highlighting.  Requires Pygments (and colorama on Windows).
enable = yes

# Pygments highlighting style (no effect on Windows).
style = default

[vcs]

## Settings controlling VCS (version control system) support.

# Whether to enable VCS support.
enable = yes

# Supported VCSes.  They're tried in the order listed here.
systems = hg git svn

# Each listed VCS entry must have its own section, with the following
# entries defined:
# 
# repo
#     Directory used to manage the VCS (must be found in the same directory
#     as the issue directory).  This must exist for the VCS to be detected.
#
# cmd
#     Base VCS command.  Should include a flag to keep silent.
#
# add
#     If defined, the VCS command to add a file.  Defaults to 'add'.
#
# remove
#     If defined, the VCS command to remove a file.  Defaults to 'remove'.

[hg]
repo = .hg
cmd = hg -q

[git]
repo = .git
cmd = git -q

[svn]
repo = .svn
cmd = svn -q
