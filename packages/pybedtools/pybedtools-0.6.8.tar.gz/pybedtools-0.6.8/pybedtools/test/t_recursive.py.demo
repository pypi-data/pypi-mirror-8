import pybedtools
import os
import glob
fns = glob.glob('data/*2009.bed')


def get_open_fds():
    '''
    return the number of open file descriptors for current process

    .. warning: will only work on UNIX-like os-es.
    '''
    import subprocess
    import os

    pid = os.getpid()
    procs = subprocess.check_output(
        ["lsof", '-w', '-Ff', "-p", str(pid)])

    nprocs = len(filter(lambda s: s and s[0] == 'f' and s[1:].isdigit(), procs.split('\n')))
    return nprocs

import pybedtools

def LEN(x):
    return len(x)

def recursive_intersect(fns):
    if len(fns) > 0:
        overlap = pybedtools.BedTool(fns[0])
        print len(fns), get_open_fds(), LEN(overlap)
        #for fn in fns[1:]:
        #    overlap = overlap.window(fn, u=True, w=500)
        #
        recursive_intersect(fns[:])

x = pybedtools.BedTool(fns[0])
for i in range(100):
    print get_open_fds(), len(x)
