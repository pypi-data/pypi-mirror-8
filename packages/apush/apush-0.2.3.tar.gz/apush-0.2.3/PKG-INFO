Metadata-Version: 1.0
Name: apush
Version: 0.2.3
Summary: A simple Apple push notification service provider
Home-page: https://github.com/barumrho/apush
Author: Barum Rho
Author-email: barum@barumrho.com
License: (The MIT License)

Copyright (c) 20012 Barum Rho <barum@barumrho.com>

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
'Software'), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

Description: apush
        =====
        
        ### A simple Apple push notification service provider in Python.
        
        Important: `Service` overrides `identifier` attribute of `Notification` object.
        Instead, errors include token.
        
        
        ```python
        from apush import Service, Notification, ERROR_INVALID_TOKEN
        
        token = 'hex-encoded token'.decode('hex')
        service = Service('/path/to/certificate.pem')
        notification = Notification(token, alert='A new notification', badge=1)
        service.send(notification)
        ```
        
        For several notifications, use `queue` and `flush`.
        ```python
        for n in notifications:
            service.queue(n)
        
        service.flush()
        ```
        
        Check for errors after sending notifications.
        ```python
        def remove(token):
            '''Remove token from database.'''
            ...
        
        for (status, identifier, token) in service.errors:
            if status == ERROR_INVALID_TOKEN:
                remove(token)
        ```
        
        Check feedback service for invalid tokens.
        ```python
        for (timestamp, token) in service.feedbacks:
            remove(token)
        ```
        
Keywords: apple push notification
Platform: UNKNOWN
