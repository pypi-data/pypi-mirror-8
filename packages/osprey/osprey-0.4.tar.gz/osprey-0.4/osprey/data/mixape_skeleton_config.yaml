# osprey configuration file.
#---------------------------
# usage:
#  osprey worker config.yaml

estimator:
    # The model/estimator to be fit.

    # pick one of these ways to specify
    pickle: my-model.pkl            # path to a file
    entry_point: mixtape.tica.tICA  # importable python class/instances
    eval: |
        Pipeline([
                ('featurizer', DihedralFeaturizer(types=['phi', 'psi'])),
                ('tica', tICA(n_components=4)),
                ('cluster', MiniBatchKMeans()),
                ('msm', MarkovStateModel(n_timescales=5, verbose=False)),
        ])

    # for eval, a python package containing the estimator definitions
    eval_scope: mixtape


strategy:
    # the search section specifies the space of hyperparameters to search over
    # and the strategy for doing so

    # hyperopt's tree of parzen estimators http://hyperopt.github.io/hyperopt/
    # and random search are curently supported.
    name: random  # or moe, hyperopt_tpe
    # params: {}

search_space:
  # the search space is specified by listing the variables you want to
  # optimize over and their bounds for float and int typed variables,
  # or the possible choices for enumeration-typed variables.
  featurizer__types:
    choices:
      - ['phi', 'psi']
      - ['phi', 'psi', 'chi1']
    type: enum

  cluster__n_clusters:
    min: 10
    max: 100
    type: int       # from 10 to 100 (with inclusive endpoints)

  tica__gamma:
    min: 1e-10
    max: 1e-1
    type: float
    warp: log       # optimize using the log of the parameter

cv: 5  # the order of K-fold cross validation to use

dataset_loader:
  # specification of the dataset on which to train the models.
  name: mdtraj
  params:
    trajectories: ~/local/msmbuilder/Tutorial/XTC/*/*.xtc
    topology: ~/local/msmbuilder/Tutorial/native.pdb
    stride: 1


trials:
  # path to a databse in which the results of each hyperparameter fit
  # are stored any SQL database is suppoted, but we recommend using
  # SQLLite, which is simple and stores the results in a file on disk.
  # the string format for connecting to other database is described here:
  # http://docs.sqlalchemy.org/en/rel_0_9/core/engines.html#database-urls
  uri: sqlite:///osprey-trials.db
  # if you want to save n > 1 projects in the same DB file, you can set
  # `project_name` to distringuish them:
  # project_name: name
