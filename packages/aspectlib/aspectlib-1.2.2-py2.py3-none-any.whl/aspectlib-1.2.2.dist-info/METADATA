Metadata-Version: 2.0
Name: aspectlib
Version: 1.2.2
Summary: Aspect-Oriented Programming toolkit.
Home-page: https://github.com/ionelmc/python-aspectlib
Author: Ionel Cristian Mărieș
Author-email: contact@ionelmc.ro
License: BSD
Keywords: python,aop,aspects,aspect oriented programming,decorators,patch,monkeypatch,weave,debug,log,tests,mock
Platform: UNKNOWN
Classifier: Development Status :: 5 - Production/Stable
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: BSD License
Classifier: Operating System :: Unix
Classifier: Operating System :: POSIX
Classifier: Operating System :: Microsoft :: Windows
Classifier: Programming Language :: Python
Classifier: Topic :: Utilities
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: Implementation :: CPython
Classifier: Programming Language :: Python :: Implementation :: PyPy

================
python-aspectlib
================

+--------------------+--------------------+---------------------+
| | |travis-badge|   | |                  | | |version-badge|   |
| | |appveyor-badge| | | |coverage-badge| | | |downloads-badge| |
+--------------------+--------------------+---------------------+

.. |travis-badge| image:: http://img.shields.io/travis/ionelmc/python-aspectlib.png?style=flat
    :alt: Travis-CI Build Status
    :target: https://travis-ci.org/ionelmc/python-aspectlib
.. |appveyor-badge| image:: https://ci.appveyor.com/api/projects/status/u2f05p7rmd5hsixi
    :alt: AppVeyor Build Status
    :target: https://ci.appveyor.com/project/ionelmc/python-aspectlib
.. |coverage-badge| image:: http://img.shields.io/coveralls/ionelmc/python-aspectlib.png?style=flat
    :alt: Coverage Status
    :target: https://coveralls.io/r/ionelmc/python-aspectlib
.. |version-badge| image:: http://img.shields.io/pypi/v/aspectlib.png?style=flat
    :alt: PYPI Package
    :target: https://pypi.python.org/pypi/aspectlib
.. |downloads-badge| image:: http://img.shields.io/pypi/dm/aspectlib.png?style=flat
    :alt: PYPI Package
    :target: https://pypi.python.org/pypi/aspectlib


``aspectlib`` is an aspect-oriented programming, monkey-patch and decorators library. It is useful when changing
behavior in existing code is desired.

Documentation
=============

Docs are hosted at readthedocs.org: `python-aspectlib docs <http://python-aspectlib.readthedocs.org/en/latest/>`_.

Implementation status
=====================

Weaving functions, methods, instances and classes is completed.

Pending:

* *"Concerns"* (see `docs/todo.rst`)

If ``aspectlib.weave`` doesn't work for your scenario please report a bug !

Requirements
============

:OS: Any
:Runtime: Python 2.6, 2.7, 3.3, 3.4 or PyPy

Python 3.2, 3.1 and 3.0 are *NOT* supported (some objects are too crippled).

Similar projects
================

* `function_trace <https://github.com/RedHatQE/function_trace>`_ - extremely simple

Changelog
=========

Version 1.2.2
-------------

* Add support for weakrefs in the ``__logged__`` wrapper from ``aspectlib.debug.log`` decorator.

Version 1.2.1
-------------

* Don't raise exceptions from ``Replay.__exit__`` if there would be an error (makes original cause hard to debug).

Version 1.2.0
-------------

* Fix weaving methods that were defined in some baseclass (and not on the target class).
* Fix wrong qualname beeing used in the Story/Replay recording. Now used the alias given to the weaver instead of
  whatever is the realname on the current platform.

Version 1.1.1
-------------

* Use ``ASPECTLIB_DEBUG`` for every logger in ``aspectlib``.

Version 1.1.0
-------------

* Add a `bind` option to ``aspectlib.Aspect`` so you can access the cutpoint from the advisor.
* Replaced automatic importing in ``aspectlib.test.Replay`` with extraction of context variables (locals and globals
  from the calling ``aspectlib.test.Story``). Works better than the previous inference of module from AST of the
  result.
* All the methods on the replay are now properties: ``aspectlib.test.Story.diff``,
  ``aspectlib.test.Story.unexpected`` and ``aspectlib.test.Story.missing``.
* Added ``aspectlib.test.Story.actual`` and ``aspectlib.test.Story.expected``.
* Added an ``ASPECTLIB_DEBUG`` environment variable option to switch on debug logging in ``aspectlib``'s internals.

Version 1.0.0
-------------

* Reworked the internals ``aspectlib.test.Story`` to keep call ordering, to allow dependencies and improved the
  serialization (used in the diffs and the missing/unexpected lists).


Version 0.9.0
-------------

* Changed ``aspectlib.test.record``:

    * Renamed `history` option to `calls`.
    * Renamed `call` option to `iscalled`.
    * Added `callback` option.
    * Added `extended` option.

* Changed ``aspectlib.weave``:

    * Allow weaving everything in a module.
    * Allow weaving instances of new-style classes.

* Added ``aspectlib.test.Story`` class for capture-replay and stub/mock testing.

Version 0.8.1
-------------

* Use simpler import for the py3support.

Version 0.8.0
-------------

* Change ``aspectlib.debug.log`` to use ``aspectlib.Aspect`` and work as expected with coroutines or generators.
* Fixed ``aspectlib.debug.log`` to work on Python 3.4.
* Remove the undocumented ``aspectlib.Yield`` advice. It was only usable when decorating generators.

Version 0.7.0
-------------

* Add support for decorating generators and coroutines in ``aspectlib.Aspect``.
* Made aspectlib raise better exceptions.

Version 0.6.1
-------------

* Fix checks inside ``aspectlib.debug.log`` that would inadvertently call ``__bool__``/``__nonzero``.

Version 0.6.0
-------------

* Don't include __getattribute__ in ALL_METHODS - it's too dangerous dangerous dangerous dangerous dangerous dangerous
  ... ;)
* Do a more reliable check for old-style classes in debug.log
* When weaving a class don't weave attributes that are callable but are not actually routines (functions, methods etc)

Version 0.5.0
-------------

* Changed ``aspectlib.debug.log``:

    * Renamed `arguments` to `call_args`.
    * Renamed `arguments_repr` to `call_args_repr`.
    * Added `call` option.
    * Fixed issue with logging from old-style methods (object name was a generic "instance").

* Fixed issues with weaving some types of builtin methods.
* Allow to apply multiple aspects at the same time.
* Validate string targets before weaving. ``aspectlib.weave('mod.invalid name', aspect)`` now gives a clear error
  (``invalid name`` is not a valid identifier)
* Various documentation improvements and examples.

Version 0.4.1
-------------

* Remove junk from 0.4.0's source distribution.

Version 0.4.0
-------------

* Changed ``aspectlib.weave``:

    * Replaced `only_methods`, `skip_methods`, `skip_magicmethods` options with `methods`.
    * Renamed `on_init` option to `lazy`.
    * Added `aliases` option.
    * Replaced `skip_subclasses` option with `subclasses`.

* Fixed weaving methods from a string target.


