# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Pierre Quentel, Bendik RÃ¸nning Opstad
# This file is distributed under the same license as the PyDbLite package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyDbLite 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-15 02:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/benchmarks.rst:2
# b3df6dd3e91440d8907e4979ca15f7cb
msgid "Benchmarks"
msgstr ""

#: ../../source/benchmarks.rst:4
# b0208c2b8ecd46b5958676eb98c5f35b
msgid "PyDbLite has been measured by the time taken by various operations for 3 pure-Python database modules (PyDbLite, buzhug and Gadfly) and compared them with SQLite."
msgstr ""

#: ../../source/benchmarks.rst:6
# 5ad7e65921c941069442695f1dc6ab96
msgid "The tests are those described on the SQLite comparisons pages, which compares performance of SQLite to that of MySQL and PostGreSQL"
msgstr ""

#: ../../source/benchmarks.rst:10
# 909a143e9ba843578889aea5a2e0c9f7
msgid "insert"
msgstr ""

#: ../../source/benchmarks.rst:11
# 301867023d1d4ee49d0f4658a60f0203
msgid "create the base and insert n elements (n= 1000, 25,000 or 100,000) in it"
msgstr ""

#: ../../source/benchmarks.rst:13
# 0795453b48d64e65b2ce4bc3fd2c2411
msgid "The database has 3 fields:"
msgstr ""

#: ../../source/benchmarks.rst:15
# 1d4306c6deef4b31bcffb562fa33d662
msgid "a (integer, from 1 to n)"
msgstr ""

#: ../../source/benchmarks.rst:16
# 13226ce2bdc144f08e5eb6063c477b51
msgid "b (random integer between 1 and 100000)"
msgstr ""

#: ../../source/benchmarks.rst:17
# 7afc012229ed45ae864d44f2c95ce4b3
msgid "c (a string, value = 'fifty nine' if b=59)"
msgstr ""

#: ../../source/benchmarks.rst:19
# 3e8260fdb820422f922f18ced6973e3b
msgid "For PyDbLite, gadfly and SQLite two options are possible : with an index on field a, or without index"
msgstr ""

#: ../../source/benchmarks.rst:21
# 3c1ad19ab4664328b1750dbef08d6da6
msgid "The values of a, b, c are stored in a list recs"
msgstr ""

#: ../../source/benchmarks.rst:24
#: ../../source/benchmarks.rst:80
#: ../../source/benchmarks.rst:106
#: ../../source/benchmarks.rst:134
#: ../../source/benchmarks.rst:155
#: ../../source/benchmarks.rst:175
#: ../../source/benchmarks.rst:198
# 20bce6e428704af08d2cd2e3d9680bd0
# 32f3c6d739a4435687c7b846855e7f31
# 62deb597dcbd418eb83ec43ae554101e
# 880eab5abb264ba3bbceaa4a1deeffde
# a7838de3efec43519f292afbd7867d6d
# 3e53f8a95fa4493abb4e04fd2bbb38f5
# c17398a1385940998694784c26fd51ec
msgid "SQL statements"
msgstr ""

#: ../../source/benchmarks.rst:36
# f9ee4709042d4077b2b1d6767cd63044
msgid "PyDbLite code"
msgstr ""

#: ../../source/benchmarks.rst:48
#: ../../source/benchmarks.rst:90
#: ../../source/benchmarks.rst:116
#: ../../source/benchmarks.rst:143
#: ../../source/benchmarks.rst:164
#: ../../source/benchmarks.rst:185
#: ../../source/benchmarks.rst:208
# f726633c88804b40bd5d8a44711490df
# 1044b728e32d40a5961be0f18c9cec7e
# c03f2dd20c51417c8936be610549a308
# 7fa94f60f3934fdf92cb0e713f8c3e98
# 02552f8a4ffb44689cc74c64c49a5e07
# 03d0daefb7f64981bcd97c4d98c11e25
# 0fe64862b6fd449b92b2e17a82db376a
msgid "buzhug code"
msgstr ""

#: ../../source/benchmarks.rst:58
# 70a821bfaea3455ca9aecae5585a6eae
msgid "gadfly code"
msgstr ""

#: ../../source/benchmarks.rst:76
# e8b34fe6eae646ebbd06e0ff2b78fb5b
msgid "select1"
msgstr ""

#: ../../source/benchmarks.rst:77
# 849dde308e224c1381f8b1b8489ae8b4
msgid "100 selections to count the number of records and the average of field b for values of b between 10*n and 10*n + 1000 for n = 1 to 100"
msgstr ""

#: ../../source/benchmarks.rst:102
# b8ffa424783d43b5a630b03709723963
msgid "select2"
msgstr ""

#: ../../source/benchmarks.rst:103
# af6d74c3fe544627b8deb0a73a1da288
msgid "100 selections to count the number of records and the average of field b for values of c with the string 'one', 'two', ...,'ninety nine' inside. It uses the keyword LIKE for SQL database (I couldn't do the test for Gadfly which doesn't support LIKE) ; for buzhug I use regular expressions. The strings for each number between 0 and 99 are stored in the list num_strings"
msgstr ""

#: ../../source/benchmarks.rst:129
# 36771c27c3b14d2286aea9b3b4137fc5
msgid "delete1"
msgstr ""

#: ../../source/benchmarks.rst:130
# 67a4331b055d4e5bb0ea0edb2a85df8a
msgid "delete all the records where the field c contains the string 'fifty'. There again I couldn't do the test for gadfly"
msgstr ""

#: ../../source/benchmarks.rst:151
# 3a9c27641e234ea982f586372d0854a8
msgid "delete2"
msgstr ""

#: ../../source/benchmarks.rst:152
# 6c1ab26f25a14d06b9b40d7783c5f03c
msgid "delete all the records for which the field a is > 10 and < 20000"
msgstr ""

#: ../../source/benchmarks.rst:171
# d9ef5d82ec81421cbe92d59088de7789
msgid "update1"
msgstr ""

#: ../../source/benchmarks.rst:172
# 53b165f4ff714ae794bb8b2503a4f194
msgid "1000 updates, multiply b by 2 for records where 10*n <= a < 10 * (n + 1) for n = 0 to 999"
msgstr ""

#: ../../source/benchmarks.rst:194
# c794821c521d4aa8a813e41582ae6655
msgid "update2"
msgstr ""

#: ../../source/benchmarks.rst:195
# 9c17ce8f761f46528dac1bec3d414b6c
msgid "1000 updates to set c to a random value where a = 1 to 1000 New values of field c are stored in a list new_c"
msgstr ""

#: ../../source/benchmarks.rst:216
# 278956f2a3784975987456db6e1ac3c9
msgid "The tests were made on a Windows XP machine, with Python 2.5 (except gadfly : using the compile kjbuckets.pyd requires Python 2.2)"
msgstr ""

#: ../../source/benchmarks.rst:218
# 62c4f79781a04486b197ea72f13da9d3
msgid "Versions : PyDbLite 2.5, buzhug 1.6, gadfly 1.0.0, SQLite 3.0 embedded in Python 2.5 Results"
msgstr ""

#: ../../source/benchmarks.rst:221
# f1a22dafc9e64c1cb1e1b2c8ac01aa86
msgid "Here are the results"
msgstr ""

#: ../../source/benchmarks.rst:273
# e9b669468f884b00b0896c6d681a484b
msgid "Conclusions PyDblite is as fast, and even faster than SQLite for small databases. It is faster than gadfly in all cases. buzhug is faster on most operations when size grows"
msgstr ""

