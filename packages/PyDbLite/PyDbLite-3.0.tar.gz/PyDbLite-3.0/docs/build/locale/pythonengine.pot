# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2014, Pierre Quentel, Bendik RÃ¸nning Opstad
# This file is distributed under the same license as the PyDbLite package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PyDbLite 3.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2014-10-15 02:46+0200\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/pythonengine.rst:4
# 0279e10b97fe4c5ca3d606ce26e6fec4
msgid "Pure-Python engine"
msgstr ""

#: ../../source/pythonengine.rst:9
# ca899ab73fc6438c998e34a1de90e4f9
msgid "The pure-Python engine consists of one module, pydblite.py. To use it, import the class :class:`Base <pydblite.pydblite._Base>` from this module:"
msgstr ""

#: ../../source/pythonengine.rst:16
# 08fe3f2db7cc456fae2d8ca04fa7b45c
msgid "Create or open a database"
msgstr ""

#: ../../source/pythonengine.rst:18
# 94610a760173451ebc05266a3c595e53
msgid "Create a database instance, passing it a path in the file system"
msgstr ""

#: ../../source/pythonengine.rst:24
# e4981e4911ba41deb5714be5efa7fefd
msgid "For a new database, define the field names"
msgstr ""

#: ../../source/pythonengine.rst:30
# ba21976f904040dea0dc37f6db326308
msgid "You don't have to define the field types. Any value will be accepted as long as it can be serialized by the cPickle module:"
msgstr ""

#: ../../source/pythonengine.rst:32
# e4549790ee104c1e93e7130ffd9a5e99
msgid "strings"
msgstr ""

#: ../../source/pythonengine.rst:33
# 8bce4788f4354380bbfb57f9c083dbeb
msgid "Unicode strings"
msgstr ""

#: ../../source/pythonengine.rst:34
# a0ab488d31604666a49295a2bd968b59
msgid "integers"
msgstr ""

#: ../../source/pythonengine.rst:35
# 5e2bd9291f334d7daf3d7cccf371332a
msgid "floats"
msgstr ""

#: ../../source/pythonengine.rst:36
# 776d9890463f46948055eff61ceda495
msgid "dates and datetimes (instances of the date and datetime classes in the datetime module)"
msgstr ""

#: ../../source/pythonengine.rst:37
# eda4401b3394469aa390148211205e07
msgid "user-defined classes"
msgstr ""

#: ../../source/pythonengine.rst:40
# 1b16900458ea4cd58fe2ec60a418c38e
msgid ":func:`db.exists() <pydblite.pydblite._Base.exists>` indicates if the base exists."
msgstr ""

#: ../../source/pythonengine.rst:42
# f6eb2205ec8a478f8a0ff2789ee825fa
msgid "if the base exists, open it"
msgstr ""

#: ../../source/pythonengine.rst:49
# 858711606a33475da4f3a9426ad028a4
msgid "You can pass a parameter \"mode\" to the :func:`create() <pydblite.pydblite._Base.create>` method, to specify what you want to do if the base already exists in the file system"
msgstr ""

#: ../../source/pythonengine.rst:51
# 0e7645435cea4a348ed5e7279c831f22
msgid "mode = \"open\" : :python:`db.create('name', 'age', 'size', mode=\"open\")` opens the database and ignores the field definition"
msgstr ""

#: ../../source/pythonengine.rst:52
# 381890dceb974921b66c1ca62f23e9c6
msgid "mode = \"override\" : :python:`db.create('name', 'age', 'size', mode=\"override\")` erases the existing base and creates a new one with the field definition"
msgstr ""

#: ../../source/pythonengine.rst:53
# 61bddc5c89de423e87e74b30706650a2
msgid "if :python:`mode` is not specified and the base already exists, an :python:`IOError` is raised"
msgstr ""

#: ../../source/pythonengine.rst:56
# f5174b7f6d1c46e1b8236adea1544835
msgid "Insert, update, delete a record"
msgstr ""

#: ../../source/pythonengine.rst:59
# 8017be2137eb48a881747594f9bf747a
msgid "insert a new record"
msgstr ""

#: ../../source/pythonengine.rst:62
# 2a737e1835ca4b8da4665f2b8fcd4438
msgid "by keywords"
msgstr ""

#: ../../source/pythonengine.rst:68
# 47dd34d8955d4a5fa9bc24f4ede9b41c
msgid "If some fields are missing, they are initialized with the value None"
msgstr ""

#: ../../source/pythonengine.rst:71
# df1ad02885ed4432a0998d4b76104b7e
msgid "by positional arguments"
msgstr ""

#: ../../source/pythonengine.rst:77
# 68e70816bf77457ea49b3962b907e19b
msgid "The arguments must be provided in the same order as in the :python:`create()` method"
msgstr ""

#: ../../source/pythonengine.rst:80
# ef440f3f6b394b7788be10319e978989
msgid "save the changes on disk"
msgstr ""

#: ../../source/pythonengine.rst:86
# 86905a0430704552bfec2db9a5416da5
msgid "If you don't commit the changes, the insertion, deletion and update operations will not be saved on disk. As long as changes are not commited, use :python:`open()` to restore the values as they are currently on disk (this is equivalent to rollback in transactional databases)"
msgstr ""

#: ../../source/pythonengine.rst:89
# 8915bcf40b2d4c9f8adb3ccc9e204e30
msgid "delete a record"
msgstr ""

#: ../../source/pythonengine.rst:95
# b6b7250335a7457f9139a5eef748dd4b
msgid "or, if you know the record identifier"
msgstr ""

#: ../../source/pythonengine.rst:102
# 9d72bf5685504e4098906ad938545959
msgid "to delete a list of records"
msgstr ""

#: ../../source/pythonengine.rst:108
# e38b8427a407433e8bb94941d7a2f3ba
msgid "where list_of_records can be any iterable (list, tuple, set, etc) yielding records"
msgstr ""

#: ../../source/pythonengine.rst:111
# 5b9ab6add50e43c997ff7ad5623f08c0
msgid "to update a record"
msgstr ""

#: ../../source/pythonengine.rst:118
# 3cf556fb0f7c4289b5177660d593772c
msgid "besides the fields passed to the :python:`create()` method, an internal field called :python:`__id__` is added. It is an integer which is guaranteed to be unique and unchanged for each record in the base, so that it can be used as the record identifier"
msgstr ""

#: ../../source/pythonengine.rst:119
# f1ecdbe2addc4700bee0e7bb172cbdc5
msgid "another internal field called :python:`__version__` is also managed by the database engine. It is an integer which is set to 0 when the record is created, then incremented by 1 each time the record is updated. This is used to detect concurrency control, for instance in a web application where 2 users select the same record and want to update it at the same time"
msgstr ""

#: ../../source/pythonengine.rst:123
# 4984be9451d24195ad868566814dec70
msgid "Selection"
msgstr ""

#: ../../source/pythonengine.rst:125
# 9c23fb6f85194266b1136b9f9b1dd290
msgid "The instance of Base is a Python iterator"
msgstr ""

#: ../../source/pythonengine.rst:128
# 0affda967d7d43c681e51ddd0b0ad867
msgid "to iterate on all the records"
msgstr ""

#: ../../source/pythonengine.rst:136
# 282e0ca6082c472a8192c83e74d37e3c
msgid "Direct access"
msgstr ""

#: ../../source/pythonengine.rst:138
# 9548c466ec63413e93bc8c75cf977ba9
msgid "A record can be accessed by its identifier"
msgstr ""

#: ../../source/pythonengine.rst:144
# 5584b3b6eefa443a8c3df17c7fcd707c
msgid "returns the record such that :python:`record['__id__'] == rec_id`"
msgstr ""

#: ../../source/pythonengine.rst:147
# b06e6fde1a9041fca253c5dd030e3694
msgid "Simple selections"
msgstr ""

#: ../../source/pythonengine.rst:149
# f48c9f16472f4423a3c627987e99c448
msgid ":python:`db(key1=val1, key2=val2)` returns the list of records where the keys take the given values"
msgstr ""

#: ../../source/pythonengine.rst:150
# 3070cffaed344eaca99585a62690056a
msgid ":python:`db(key) >= val` returns an iterator on all records where the value of the field key is greater than or equal to val."
msgstr ""

#: ../../source/pythonengine.rst:152
# f40413eeafc54991925d481411b44da7
msgid "Example"
msgstr ""

#: ../../source/pythonengine.rst:159
# c557e57590114733954e07344a42d9b4
msgid "such \"rich comparison\" operations can be combined with & (AND) and | (OR)"
msgstr ""

#: ../../source/pythonengine.rst:167
# f31bcaf8f5164243a42f96c89613a0cb
msgid "List comprehension"
msgstr ""

#: ../../source/pythonengine.rst:169
# a2ca04b9cf3847e78046e9fc57727d33
msgid "The selection of records can use Python list comprehension syntax"
msgstr ""

#: ../../source/pythonengine.rst:175
# c66ae32763b249fba489bd49ea15b79b
msgid "Returns the records in the base where the age is between 18 and 30, and size is below 2 meters. The record is a dictionary, where the key is the field name and value is the field value"
msgstr ""

#: ../../source/pythonengine.rst:177
# 8beb05abd79d465c9cb04a1520a1e38b
msgid "Python generator expression syntax can also be used"
msgstr ""

#: ../../source/pythonengine.rst:184
# 1b53a65498ff413db400116321ca5b91
msgid "iterates on the records where the name is one of 'homer' or 'marge'"
msgstr ""

#: ../../source/pythonengine.rst:187
# 0c3a94b5ce8a40f4a53bedc0d2c0764f
msgid "Index"
msgstr ""

#: ../../source/pythonengine.rst:189
# 780e87f3f12c4614b6b9c3612da76db1
msgid "To speed up selections, an index can be created on a field using :func:`create_index('field') <pydblite.pydblite._Base.create_index>`"
msgstr ""

#: ../../source/pythonengine.rst:195
# 498af712fa1b48d8802fadff87c41889
msgid "When an index is created, the database instance has an attribute (here :python:`_age` : note the heading underscore, to avoid name conflicts with internal names). This attribute is a dictionary-like object, where keys are the values taken by the field, and values are the records whose field values are egal to the key :"
msgstr ""

#: ../../source/pythonengine.rst:197
# 165976b451de4a22846e91da1825ec11
msgid ":python:`records = db._age[23]` returns the list of records with :python:`age == 23`"
msgstr ""

#: ../../source/pythonengine.rst:199
# d4af0b70587d42d1add7c32cd71cd523
msgid "If no record has this value, lookup by this value returns an empty list"
msgstr ""

#: ../../source/pythonengine.rst:201
# 5065886870804a35957f05262eda7456
msgid "The index supports iteration on the field values, and the :python:`keys()` method returns all existing values for the field"
msgstr ""

#: ../../source/pythonengine.rst:204
# 9f305196ca1e420582e4ca1e0a2dbece
msgid "Other attributes and methods"
msgstr ""

#: ../../source/pythonengine.rst:206
# 9c57eb045c744f39bf43c6c0c55bb19c
msgid ":func:`add_field('new_field'[,default=v]) <pydblite.pydblite._Base.add_field>`: adds a new field to an existing base. :python:`default` is an optional default value ; set to :python:`None` if not specified"
msgstr ""

#: ../../source/pythonengine.rst:207
# 3bd4d71823e54a9aabcff71ef2b2618f
msgid ":func:`drop_field('field') <pydblite.pydblite._Base.drop_field>`: drops an existing field"
msgstr ""

#: ../../source/pythonengine.rst:208
# dc390e9f9aff47c586414fa5b4062b57
msgid ":attr:`db.path <pydblite.pydblite._Base.path>`: the path of the database in the file system"
msgstr ""

#: ../../source/pythonengine.rst:209
# d04fec691fce4b52a77198fba8dcf492
msgid ":attr:`db.name <pydblite.pydblite._Base.name>`: the database name : the basename of the path, stripped of its extension"
msgstr ""

#: ../../source/pythonengine.rst:210
# e41c6b063a9b4e6fa28f20ab1d97dd79
msgid ":attr:`db.fields <pydblite.pydblite._Base.fields>`: the list of the fields (does not include the internal fields :python:`__id__` and :python:`__version__`)"
msgstr ""

#: ../../source/pythonengine.rst:211
# 0adcaa83c12b4f49ace177e72c31658c
msgid ":python:`len(db)` : number of records in the base"
msgstr ""

