#coding: utf-8

import json

from m3_ext.ui.all_components import *
from m3.actions import urls
from m3_ext.ui.icons import Icons
from m3_ext.ui.containers import containers

from report_generator.report_builder.models import SectionTypeOutput
from report_generator.report_builder.proxy import ReportProxy
from report_generator.core.query_components import Where, Param
from report_generator.report_builder.enums import ReportType


#===============================================================================
# UI генератора отчетов для вывода в печатную форму
#===============================================================================
class PrintReportPanel(ExtPanel):

    def __init__(self, params, *args, **kwargs):
        super(PrintReportPanel, self).__init__(*args, **kwargs)
        self.is_edit = False

        self.params = params

        self.initialize()

        self.pnl_maching = self.fields_conformity_panel()

        self.tab_main.items.extend([
            self.pnl_maching,
            self.parameters_panel(),
            self.substitution_values_panel()
        ])

        self.tree_template_sections.collapsible = True
        self.tree_template_sections.collapse_mode = 'mini'

        self.tree_all_queries.collapsible = True
        self.tree_all_queries.collapse_mode = 'mini'

        section_menu = ExtContextMenu()
        section_menu.add_item(text=u'Редактировать',
            handler='onEditSection')
        section_menu.add_item(text=u'Удалить',
            handler='onDeleteSection')

        subs_menu = ExtContextMenu()
        subs_menu.add_item(text=u'Редактировать', handler='onEditSubstitutionValue')

        self.tree_used_sections.handler_contextmenu = section_menu

        query_menu = ExtContextMenu()
        query_menu.add_item(text=u'Удалить',
            handler='onDeleteQuery')
        self.tree_used_queries.handler_contextmenu = query_menu
        self.grd_query.handler_contextmenu = subs_menu

        self.clmn_template_field.sortable = False

        self.fupf_template.file_url = params.get('download_url')

        self.template_globals = 'print-report-edit.js'

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'border'
        self.title = u'Конструктор отчета'
        self.height = 600
        self.width = 900

        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'

        btn_save = ExtButton()
        btn_save.text = u'Сохранить'
        btn_save.handler = 'onSave'

        frm_form = ExtForm()
        frm_form.file_upload = True
        frm_form.label_width = 70
        frm_form.url = urls.get_action('report-builder-save').absolute_url()
        frm_form.height = 90
        frm_form.padding = '5'
        frm_form.header = False
        frm_form.layout = 'form'
        frm_form.region = 'north'
        frm_form.border = True

        hdn_id = ExtHiddenField()
        hdn_id.name = 'id'

        str_name = ExtStringField()
        str_name.label = u'Название'
        str_name.allow_blank = False
        str_name.anchor = '100%'
        str_name.name = 'name'

        fupf_template = ExtFileUploadField()
        fupf_template.label = u'Шаблон'
        fupf_template.allow_blank = False
        fupf_template.possible_file_extensions = 'ods,xlsx,docx,odt'
        fupf_template.anchor = '100%'
        fupf_template.name = 'template'

        report_key_field = ExtStringField()
        report_key_field.label = u'Ключ'
        report_key_field.name = 'report_key'
        report_key_field.anchor = '100%'
        report_key_field.read_only = False

        cnt_tab_panel = ExtContainer()
        cnt_tab_panel.region = 'center'
        cnt_tab_panel.layout = 'fit'

        tab_main = ExtTabPanel()
        tab_main.active_tab = 0
        tab_main.region = 'center'
        tab_main.body_border = False
        tab_main.header = True
        tab_main.border = False

        self.footer_bar = tb_buttons

        tb_buttons.items.extend([btn_save])
        frm_form.items.extend([hdn_id, str_name, fupf_template, report_key_field])
        cnt_tab_panel.items.extend([tab_main])
        self.items.extend([frm_form, cnt_tab_panel])

        self.tb_buttons = tb_buttons
        self.btn_save = btn_save
        self.frm_form = frm_form
        self.hdn_id = hdn_id
        self.str_name = str_name
        self.fupf_template = fupf_template
        self.report_key_field = report_key_field
        self.cnt_tab_panel = cnt_tab_panel
        self.tab_main = tab_main


    def parameters_panel(self, container_class=ExtPanel):
        cont = container_class()
        cont.auto_height = False
        cont.layout = 'border'
        cont.title = u'Параметры формы'
        cont.body_border = False
        cont.border = False

        tree_queries_params = ExtTree()
        tree_queries_params.flex = 0
        tree_queries_params.auto_height = False
        tree_queries_params.layout = 'auto'
        tree_queries_params.enable_drag = True
        tree_queries_params.title = u'Выбранные запросы и их параметры'
        tree_queries_params.region = 'west'
        tree_queries_params.drag_drop = False
        tree_queries_params.root_text = 'Root'
        tree_queries_params.header = True
        tree_queries_params.width = 240

        clmn_param = ExtGridColumn()
        clmn_param.header = u'Наименование параметра'
        clmn_param.data_index = 'name'
        clmn_param.menu_disabled = True

        tree_form_params = ExtTree()
        tree_form_params.layout = 'auto'
        tree_form_params.title = u'Параметры на форме'
        tree_form_params.region = 'center'
        tree_form_params.drag_drop = True
        tree_form_params.root_text = 'Root'
        tree_form_params.header = True
        tree_form_params.enable_drop = False

        tb_buttons_params = ExtToolBar()
        tb_buttons_params.hidden = False
        tb_buttons_params.layout = 'toolbar'

        btn_add_param = ExtButton()
        btn_add_param.text = u'Добавить'
        btn_add_param.icon_cls = 'icon-cog-add'
        btn_add_param.handler = 'onAddParam'

        btn_edit = ExtButton()
        btn_edit.text = u'Редактировать'
        btn_edit.icon_cls = 'icon-cog-edit'
        btn_edit.handler = 'onEditParam'

        btn_remove_param = ExtButton()
        btn_remove_param.text = u'Удалить'
        btn_remove_param.icon_cls = 'icon-cog-delete'
        btn_remove_param.handler = 'onDeleteParam'

        clmn_select_query = ExtGridColumn()
        clmn_select_query.header = u'Наименование'
        clmn_select_query.data_index = 'name'
        clmn_select_query.menu_disabled = True

        tree_form_params.top_bar = tb_buttons_params

        tree_queries_params.columns.extend([clmn_param])
        tb_buttons_params.items.extend([btn_add_param, btn_edit, btn_remove_param])
        tree_form_params.columns.extend([clmn_select_query])
        cont.items.extend([tree_queries_params, tree_form_params])

        self.tree_queries_params = tree_queries_params
        self.clmn_param = clmn_param
        self.tree_form_params = tree_form_params
        self.tb_buttons_params = tb_buttons_params
        self.btn_add_param = btn_add_param
        self.btn_edit = btn_edit
        self.btn_remove_param = btn_remove_param
        self.clmn_select_query = clmn_select_query

        return cont


    def fields_conformity_panel(self, container_class=ExtPanel):
        cont = container_class()
        cont.layout = 'border'
        cont.title = u'Сопоставления секций'
        cont.body_border = False
        cont.border = False

        tree_maching_fields = ExtTree()
        tree_maching_fields.layout = 'auto'
        tree_maching_fields.title = u'Сопоставление запросов и секций в отчете'
        tree_maching_fields.region = 'south'
        tree_maching_fields.root_text = 'Root'
        tree_maching_fields.height = 150
        tree_maching_fields.header = True
        tree_maching_fields.border = False

        tb_unmatching = ExtToolBar()
        tb_unmatching.layout = 'toolbar'

        btn_remove_matching = ExtButton()
        btn_remove_matching.text = u'Убрать сопоставление'
        btn_remove_matching.icon_cls = 'icon-link-delete'
        btn_remove_matching.handler = 'onUnMatchFields'

        clmn_maching_query_field = ExtGridColumn()
        clmn_maching_query_field.header = u'Поле запроса'
        clmn_maching_query_field.data_index = 'name'
        clmn_maching_query_field.menu_disabled = True

        clmn_maching_template_field = ExtGridColumn()
        clmn_maching_template_field.header = u'Поле шаблона'
        clmn_maching_template_field.data_index = 'template_field'
        clmn_maching_template_field.menu_disabled = True

        clmn_query_id = ExtGridColumn()
        clmn_query_id.menu_disabled = True
        clmn_query_id.header = 'column'
        clmn_query_id.data_index = 'query_id'
        clmn_query_id.hidden = True

        tree_all_queries = ExtTree()
        tree_all_queries.layout = 'auto'
        tree_all_queries.enable_drag = True
        tree_all_queries.title = u'Запросы'
        tree_all_queries.url = urls.get_action('report-generator-get-queries').absolute_url()
        tree_all_queries.root_text = 'Root'
        tree_all_queries.header = True
        tree_all_queries.width = 200
        tree_all_queries.region = 'west'

        clmn_all_queries = ExtGridColumn()
        clmn_all_queries.header = u'Название'
        clmn_all_queries.data_index = 'title'
        clmn_all_queries.menu_disabled = True

        tree_template_sections = ExtTree()
        tree_template_sections.layout = 'auto'
        tree_template_sections.enable_drag = True
        tree_template_sections.title = u'Секции шаблона'
        tree_template_sections.region = 'east'
        tree_template_sections.root_text = 'Root'
        tree_template_sections.header = True
        tree_template_sections.width = 200

        clmn_sections = ExtGridColumn()
        clmn_sections.header = u'Название'
        clmn_sections.data_index = 'template_field'
        clmn_sections.menu_disabled = True

        pnl_matching = ExtPanel()
        pnl_matching.layout = 'hbox'
        pnl_matching.region = 'center'
        pnl_matching.header = False
        pnl_matching.border = False

        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'

        btn_add_matching = ExtButton()
        btn_add_matching.text = u'Сопоставить поля'
        btn_add_matching.icon_cls = 'icon-link-add'
        btn_add_matching.handler = 'onMatchFields'
        pnl_matching.layout_config = {'align': 'stretch'}

        tree_used_queries = ExtTree()
        tree_used_queries.flex = 1
        tree_used_queries.layout = 'auto'
        tree_used_queries.title = u'Запросы/словари отчета'
        tree_used_queries.drag_drop = True
        tree_used_queries.root_text = 'Root'
        tree_used_queries.header = True
        tree_used_queries.enable_drop = True

        clmn_query_field = ExtGridColumn()
        clmn_query_field.header = u'Название'
        clmn_query_field.data_index = 'name'
        clmn_query_field.menu_disabled = True

        tree_used_sections = ExtTree()
        tree_used_sections.flex = 1
        tree_used_sections.layout = 'auto'
        tree_used_sections.title = u'Секции отчета'
        tree_used_sections.drag_drop = True
        tree_used_sections.root_text = 'Root'
        tree_used_sections.header = True
        tree_used_sections.enable_drop = True

        clmn_template_field = ExtGridColumn()
        clmn_template_field.sortable = False
        clmn_template_field.header = u'Название'
        clmn_template_field.menu_disabled = True
        clmn_template_field.data_index = 'template_field'
        clmn_template_field.fixed = True

        tree_maching_fields.top_bar = tb_unmatching
        pnl_matching.top_bar = tb_buttons

        tb_unmatching.items.extend([btn_remove_matching])
        tree_maching_fields.columns.extend([clmn_maching_query_field, clmn_maching_template_field, clmn_query_id])
        tree_all_queries.columns.extend([clmn_all_queries])
        tree_template_sections.columns.extend([clmn_sections])
        tb_buttons.items.extend([btn_add_matching])
        tree_used_queries.columns.extend([clmn_query_field])
        tree_used_sections.columns.extend([clmn_template_field])
        pnl_matching.items.extend([tree_used_queries, tree_used_sections])
        cont.items.extend([tree_maching_fields, tree_all_queries, tree_template_sections, pnl_matching])

        self.tree_maching_fields = tree_maching_fields
        self.tb_unmatching = tb_unmatching
        self.btn_remove_matching = btn_remove_matching
        self.clmn_maching_query_field = clmn_maching_query_field
        self.clmn_maching_template_field = clmn_maching_template_field
        self.clmn_query_id = clmn_query_id
        self.tree_all_queries = tree_all_queries
        self.clmn_all_queries = clmn_all_queries
        self.tree_template_sections = tree_template_sections
        self.clmn_sections = clmn_sections
        self.pnl_matching = pnl_matching
        self.tb_buttons = tb_buttons
        self.btn_add_matching = btn_add_matching
        self.tree_used_queries = tree_used_queries
        self.clmn_query_field = clmn_query_field
        self.tree_used_sections = tree_used_sections
        self.clmn_template_field = clmn_template_field

        return cont


    def configure_panel(self, obj):
        """
        Параметры, для открытия окна в режиме редактирования
        """

        assert isinstance(obj, ReportProxy)

        self.is_edit = True

        self.hdn_id.value = obj.id
        self.str_name.value = obj.get_name()
        self.title = obj.get_name()
        # Ключ отчета.
        self.report_key_field.value = obj.get_report_key()

#        self.fupf_template.value = obj.get_template_file().file.name
#        self.fupf_template.memory_file = obj.get_template_file().file.file
        self.template_name = json.dumps(obj.get_template_name())

        # Все секции шаблона
        self.sections_all = obj.get_all_sections()

        # Использующиеся секции
        self.sections_report = obj.get_used_sections()

        # Узлы для данных селекта
        self.select_data = obj.get_select_data()

        # Узлы для данных параметров
        self.all_params = obj.get_all_report_params()

        # Сопоставленные поля
        self.matching_fields = obj.get_matching_fields()

        # Параметры на форме
        self.form_fields, self.model_form_params, self.model_query_params = obj.get_form_fields()

        # Значения для подстановки
        self.subs_values  = obj.get_subst_fields()

    def substitution_values_panel(self, container_class=ExtPanel):
        """Панель подстановки значений"""
        cont = container_class()
        cont.layout = 'border'
        cont.title = u'Подстановка значений'
        cont.body_border = False
        cont.border = False

        tree_query = ExtTree()
        tree_query.layout = 'auto'
        tree_query.enable_drag = True
        tree_query.title = u'Запрос'
        tree_query.region = 'west'
        tree_query.root_text = 'Root'
        tree_query.height = 0
        tree_query.header = True
        tree_query.width = 200

        clmn_substitution_param = ExtGridColumn()
        clmn_substitution_param.header = u'Поле запроса'
        clmn_substitution_param.data_index = 'name'
        clmn_substitution_param.menu_disabled = True

        grd_query = ExtGrid()
        grd_query.drag_drop = False
        grd_query.layout = 'auto'
        grd_query.title = u'Подстановка параметров запроса'
        grd_query.region = 'center'
        grd_query.header = True

        tb_cond = ExtToolBar()
        tb_cond.layout = 'toolbar'

        btn_add = ExtButton()
        btn_add.text = u'Добавить'
        btn_add.icon_cls = 'add_item'
        btn_add.handler = 'addSubstitutionValue'

        btn_button_2 = ExtButton()
        btn_button_2.text = u'Удалить'
        btn_button_2.icon_cls = 'delete_item'
        btn_button_2.handler = 'delSubstitutionValue'

        grid_query_arraystore = ExtDataStore()
        grid_query_arraystore.store_id = 'newArrayStore'
        grid_query_arraystore.id_index = 0

        clmn_field = ExtGridColumn()
        clmn_field.header = u'Запрос'
        clmn_field.menu_disabled = True
        clmn_field.data_index = 'name'
        clmn_field.hidden = True

        clmn_condition = ExtGridColumn()
        clmn_condition.menu_disabled = True
        clmn_condition.tooltip = u'Условие'
        clmn_condition.header = 'column'
        clmn_condition.data_index = 'condition'
        clmn_condition.hidden = True

        clmn_result = ExtGridColumn()
        clmn_result.menu_disabled = True
        clmn_result.tooltip = u'Результат'
        clmn_result.header = 'column'
        clmn_result.data_index = 'result'
        clmn_result.hidden = True

        clmn_subst_value = ExtGridColumn()
        clmn_subst_value.menu_disabled = True
        clmn_subst_value.tooltip = u'Подставляемое значение'
        clmn_subst_value.header = 'column'
        clmn_subst_value.data_index = 'subst_value'
        clmn_subst_value.hidden = True

        clmn_expression = ExtGridColumn()
        clmn_expression.header = u'Выражение'
        clmn_expression.data_index = 'expression'
        clmn_expression.menu_disabled = True

        clmn_query_id = ExtGridColumn()
        clmn_query_id.header = 'column'
        clmn_query_id.menu_disabled = True
        clmn_query_id.data_index = 'query_id'
        clmn_query_id.hidden = True

        grd_query.top_bar = tb_cond
        grd_query.store = grid_query_arraystore

        tree_query.columns.extend([clmn_substitution_param])
        tb_cond.items.extend([btn_add, btn_button_2])
        grd_query.columns.extend([clmn_field, clmn_condition, clmn_result, clmn_subst_value, clmn_expression, clmn_query_id])
        cont.items.extend([tree_query, grd_query])

        self.tree_query = tree_query
        self.clmn_substitution_param = clmn_substitution_param
        self.grd_query = grd_query
        self.tb_cond = tb_cond
        self.btn_add = btn_add
        self.btn_button_2 = btn_button_2
        self.grid_query_arraystore = grid_query_arraystore
        self.clmn_field = clmn_field
        self.clmn_condition = clmn_condition
        self.clmn_result = clmn_result
        self.clmn_subst_value = clmn_subst_value
        self.clmn_expression = clmn_expression
        self.clmn_query_id = clmn_query_id

        return cont


class PrintReportParamsWindow(ExtWindow):

    def __init__(self, types, params, type_number, type_string, *args, **kwargs):
        super(PrintReportParamsWindow, self).__init__(*args, **kwargs)
        self.initialize()

        # Заполнение стора
        self.astore_type.data = types

        self.params = params

        self.type_number = type_number
        self.type_string = type_string

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'fit'
        self.resizable = False
        self.title = u'Редактирование поля на форме'
        self.height = 380
        self.width = 500
        self.modal = True
        self.template_globals = 'report-params.js'

        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'

        btn_save = ExtButton()
        btn_save.text = 'OK'
        btn_save.handler = 'onSave'

        btn_cancel = ExtButton()
        btn_cancel.text = u'Отмена'
        btn_cancel.handler = 'closeWindow'

        frm_main = ExtForm()
        frm_main.layout = 'form'
        frm_main.padding = '5'
        frm_main.header = False
        frm_main.label_width = 170

        id = ExtHiddenField()
        id.name = 'param_id'

        str_name = ExtStringField()
        str_name.label = u'Название'
        str_name.allow_blank = False
        str_name.anchor = '100%'
        str_name.name = 'name'

        chk_required = ExtCheckBox()
        chk_required.checked = True
        chk_required.label = u'Обязательно заполнять'
        chk_required.name = 'allowBlank'

        chk_multi_choice = ExtCheckBox()
        chk_multi_choice.checked = True
        chk_multi_choice.label = u'Множественный выбор'
        chk_multi_choice.name = 'multiChoice'

        cmb_type = ExtComboBox()
        cmb_type.display_field = 'name'
        cmb_type.label = u'Тип'
        cmb_type.name = 'type'
        cmb_type.editable = False
        cmb_type.anchor = '100%'
        cmb_type.value_field = 'id'
        cmb_type.mode = 'local'
        cmb_type.trigger_action = 'all'
        cmb_type.allow_blank = False

        astore_type = ExtDataStore()
        astore_type.store_id = 'newArrayStore'
        astore_type.id_index = 0

        cmb_type_value = ExtComboBox()
        cmb_type_value.display_field = 'name'
        cmb_type_value.label = u'Значение типа'
        cmb_type_value.name = 'typeValue'
        cmb_type_value.editable = False
        cmb_type_value.anchor = '100%'
        cmb_type_value.value_field = 'id'
        cmb_type_value.mode = 'local'
        cmb_type_value.trigger_action = 'all'
        cmb_type_value.hidden = True

        astore_type_value = ExtDataStore()
        astore_type_value.store_id = 'newArrayStore'
        astore_type_value.id_index = 0

        str_default_type = ExtStringField()
        str_default_type.label = u'Значение по умолчанию'
        str_default_type.name = 'defaultType'
        str_default_type.hidden = True
        str_default_type.anchor = '100%'

        self.footer_bar = tb_buttons
        cmb_type.store = astore_type
        cmb_type_value.store = astore_type_value

        tb_buttons.items.extend([btn_save, btn_cancel])
        frm_main.items.extend([id, str_name, chk_required, chk_multi_choice, cmb_type, cmb_type_value, str_default_type])
        self.items.extend([frm_main])

        self.tb_buttons = tb_buttons
        self.btn_save = btn_save
        self.btn_cancel = btn_cancel
        self.frm_main = frm_main
        self.id = id
        self.str_name = str_name
        self.chk_required = chk_required
        self.chk_multi_choice = chk_multi_choice
        self.cmb_type = cmb_type
        self.astore_type = astore_type
        self.cmb_type_value = cmb_type_value
        self.astore_type_value = astore_type_value
        self.str_default_type = str_default_type


class MatchingWindow(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(MatchingWindow, self).__init__(*args, **kwargs)
        self.initialize()

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'border'
        self.title = u'Сопоставление'
        self.height = 450
        self.width = 500
        self.modal = True
        self.template_globals = 'matching.js'

        tb_main_buttons = ExtToolBar()
        tb_main_buttons.layout = 'toolbar'

        btn_select = ExtButton()
        btn_select.text = u'Выбрать'
        btn_select.handler = 'onSelect'

        btn_cancel = ExtButton()
        btn_cancel.text = u'Отмена'
        btn_cancel.handler = 'function(){win.close();}'

        grd_matching = ExtGrid()
        grd_matching.layout = 'auto'
        grd_matching.title = u'Сопоставление полей'
        grd_matching.region = 'south'
        grd_matching.height = 170
        grd_matching.header = True

        tb_unmatching = ExtToolBar()
        tb_unmatching.layout = 'toolbar'

        btn_unmutching = ExtButton()
        btn_unmutching.text = u'Убрать сопоставление'
        btn_unmutching.icon_cls = 'icon-link-delete'
        btn_unmutching.handler = 'unMatchingFields'

        astore_matching = ExtDataStore()
        astore_matching.store_id = 'newArrayStore'
        astore_matching.id_index = 0

        clmn_query_field_id = ExtGridColumn()
        clmn_query_field_id.header = u'Идентификатор параметра'
        clmn_query_field_id.menu_disabled = True
        clmn_query_field_id.data_index = 'query_id'
        clmn_query_field_id.hidden = True

        clmn_query_field = ExtGridColumn()
        clmn_query_field.header = u'Название поля в запросе'
        clmn_query_field.data_index = 'name'
        clmn_query_field.menu_disabled = True

        clmn_template_field = ExtGridColumn()
        clmn_template_field.header = u'Название параметра в секции шаблона'
        clmn_template_field.data_index = 'template_field'
        clmn_template_field.menu_disabled = True

        pnl_center = ExtPanel()
        pnl_center.layout = 'hbox'
        pnl_center.title = 'New panel'
        pnl_center.region = 'center'
        pnl_center.header = False

        tb_matching_buttons = ExtToolBar()
        tb_matching_buttons.layout = 'toolbar'

        btn_mutching = ExtButton()
        btn_mutching.text = u'Сопоставить'
        btn_mutching.icon_cls = 'icon-link-add'
        btn_mutching.handler = 'onMatchingFields'
        pnl_center.layout_config = {'align': 'stretch'}

        tree_query = ExtTree()
        tree_query.flex = 1
        tree_query.layout = 'auto'
        tree_query.title = u'Поля запроса'
        tree_query.root_text = 'Root'
        tree_query.header = True

        clmn_query = ExtGridColumn()
        clmn_query.header = u'Название'
        clmn_query.data_index = 'name'
        clmn_query.menu_disabled = True

        tree_section = ExtTree()
        tree_section.flex = 1
        tree_section.layout = 'auto'
        tree_section.title = u'Поля секции'
        tree_section.root_text = 'Root'
        tree_section.header = True

        clmn_section = ExtGridColumn()
        clmn_section.header = u'Название'
        clmn_section.data_index = 'template_field'
        clmn_section.menu_disabled = True

        self.footer_bar = tb_main_buttons
        grd_matching.top_bar = tb_unmatching
        grd_matching.store = astore_matching
        pnl_center.top_bar = tb_matching_buttons

        tb_main_buttons.items.extend([btn_select, btn_cancel])
        tb_unmatching.items.extend([btn_unmutching])
        grd_matching.columns.extend([clmn_query_field_id, clmn_query_field, clmn_template_field])
        tb_matching_buttons.items.extend([btn_mutching])
        tree_query.columns.extend([clmn_query])
        tree_section.columns.extend([clmn_section])
        pnl_center.items.extend([tree_query, tree_section])
        self.items.extend([grd_matching, pnl_center])

        self.tb_main_buttons = tb_main_buttons
        self.btn_select = btn_select
        self.btn_cancel = btn_cancel
        self.grd_matching = grd_matching
        self.tb_unmatching = tb_unmatching
        self.btn_unmutching = btn_unmutching
        self.astore_matching = astore_matching
        self.clmn_query_field_id = clmn_query_field_id
        self.clmn_query_field = clmn_query_field
        self.clmn_template_field = clmn_template_field
        self.pnl_center = pnl_center
        self.tb_matching_buttons = tb_matching_buttons
        self.btn_mutching = btn_mutching
        self.tree_query = tree_query
        self.clmn_query = clmn_query
        self.tree_section = tree_section
        self.clmn_section = clmn_section


class TypeOutputWindow(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(TypeOutputWindow, self).__init__(*args, **kwargs)
        self.initialize()

        self.astore_type_output.data = [(v, v) for v in SectionTypeOutput.VALUES]
        #self.cmb_type_output.value = SectionTypeOutput.FIXED
        self.cmb_type_output.value = SectionTypeOutput.GORIZONTAL

        self.str_priority_output.mask_re = '[0-9]'

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'fit'
        self.resizable = False
        self.title = u'Выбор типа вывода секции'
        self.height = 160
        self.padding = '5'
        self.width = 350
        self.modal = True
        self.anchor = '100%'
        self.template_globals = 'type-output.js'

        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'

        btn_select = ExtButton()
        btn_select.text = u'Выбрать'
        btn_select.handler = 'onSave'

        btn_cancel = ExtButton()
        btn_cancel.text = u'Отмена'
        btn_cancel.handler = 'function(){win.close();}'

        frm_main = ExtForm()
        frm_main.layout = 'form'
        frm_main.header = False
        frm_main.border = False

        str_section_name = ExtStringField()
        str_section_name.label = u'Название'
        str_section_name.name = 'sectionID'
        str_section_name.anchor = '100%'
        str_section_name.read_only = True

        cmb_type_output = ExtComboBox()
        cmb_type_output.display_field = 'name'
        cmb_type_output.label = u'Тип вывода'
        cmb_type_output.name = 'typeOutput'
        cmb_type_output.editable = False
        cmb_type_output.anchor = '100%'
        cmb_type_output.value_field = 'id'
        cmb_type_output.mode = 'local'
        cmb_type_output.trigger_action = 'all'

        astore_type_output = ExtDataStore()
        astore_type_output.store_id = 'newArrayStore'
        astore_type_output.id_index = 0

        str_priority_output = ExtStringField()
        str_priority_output.label = u'Приоритет вывода'
        str_priority_output.name = 'priorityOutput'
        str_priority_output.anchor = '100%'
        str_priority_output.allow_blank = False

        self.footer_bar = tb_buttons
        cmb_type_output.store = astore_type_output

        tb_buttons.items.extend([btn_select, btn_cancel])
        frm_main.items.extend([str_section_name, cmb_type_output, str_priority_output])
        self.items.extend([frm_main])

        self.tb_buttons = tb_buttons
        self.btn_select = btn_select
        self.btn_cancel = btn_cancel
        self.frm_main = frm_main
        self.str_section_name = str_section_name
        self.cmb_type_output = cmb_type_output
        self.astore_type_output = astore_type_output
        self.str_priority_output = str_priority_output


class SubstitutionWindow(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(SubstitutionWindow, self).__init__(*args, **kwargs)
        self.initialize()
        self.astore_conditions.data = [[k,v] for k,v in Where.conditions.items()]

        self.cmb_cond.value = Where.EQ
        self.cmb_cond.editable = False

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'form'
        self.title = u'Подстановка значений'
        self.max_height = 150
        self.height = 150
        self.width = 750
        self.template_globals = 'report-subst-value-window.js'

        tb_button = ExtToolBar()
        tb_button.layout = 'toolbar'

        btn_select = ExtButton()
        btn_select.text = u'Выбрать'
        btn_select.handler = 'selectCondition'

        btn_cancel = ExtButton()
        btn_cancel.text = u'Отмена'
        btn_cancel.handler = 'function(){ win.close() }'

        cnt_subst_value = ExtContainer()
        cnt_subst_value.layout = 'hbox'

        cnt_query = ExtContainer()
        cnt_query.flex = 1
        cnt_query.layout = 'form'
        cnt_query.width = 180
        cnt_query.label_align = 'top'
        cnt_query.style = {'padding': '5px'}

        str_item = ExtStringField()
        str_item.label = u'Поле запроса'
        str_item.allow_blank = True
        str_item.disabled = False
        str_item.read_only = True

        cnt_cond = ExtContainer()
        cnt_cond.layout = 'form'
        cnt_cond.label_align = 'top'
        cnt_cond.style = {'padding': '5px'}

        cmb_cond = ExtComboBox()
        cmb_cond.display_field = 'name'
        cmb_cond.label = u'Условие'
        cmb_cond.editable = True
        cmb_cond.value_field = 'id'
        cmb_cond.mode = 'local'
        cmb_cond.trigger_action = 'all'

        astore_conditions = ExtDataStore()
        astore_conditions.store_id = 'newArrayStore'
        astore_conditions.id_index = 0

        cnt_result = ExtContainer()
        cnt_result.layout = 'form'
        cnt_result.label_align = 'top'
        cnt_result.style = {'padding': '5px'}

        str_result = ExtStringField()
        str_result.label = u'Результат'

        cnt_value = ExtContainer()
        cnt_value.layout = 'form'
        cnt_value.label_align = 'top'
        cnt_value.style = {'padding': '5px'}

        str_subst = ExtStringField()
        str_subst.label = u'Значение для подстановки'

        self.footer_bar = tb_button
        cmb_cond.store = astore_conditions

        tb_button.items.extend([btn_select, btn_cancel])
        cnt_query.items.extend([str_item])
        cnt_cond.items.extend([cmb_cond])
        cnt_result.items.extend([str_result])
        cnt_value.items.extend([str_subst])
        cnt_subst_value.items.extend([cnt_query, cnt_cond, cnt_result, cnt_value])
        self.items.extend([cnt_subst_value])

        self.tb_button = tb_button
        self.btn_select = btn_select
        self.btn_cancel = btn_cancel
        self.cnt_subst_value = cnt_subst_value
        self.cnt_query = cnt_query
        self.str_item = str_item
        self.cnt_cond = cnt_cond
        self.cmb_cond = cmb_cond
        self.astore_conditions = astore_conditions
        self.cnt_result = cnt_result
        self.str_result = str_result
        self.cnt_value = cnt_value
        self.str_subst = str_subst


class ReportForm(ExtWindow):

    def __init__(self, *args, **kwargs):
        super(ReportForm, self).__init__(*args, **kwargs)
        self.initialize()

        self.frm_info.collapse_mode = 'mini'
        self.frm_info.split = True

    def set_format_combobox_store(self, enum_cls):
        """
        Подставляет значения в стор комбобокса формата возвращаемого документа
        на основе пришедшего класса перечисления

        :param enum_cls: BaseEnumerate
        :return: None
        """

        self.cmb_format.value = enum_cls.default()
        self.cmb_format.set_store(ExtDataStore(enum_cls.type_info.items()))

    def initialize(self):
        '''AUTOGENERATED'''
        self.layout = 'border'
        self.height = 300
        self.width = 620
        self.maximizable = True
        self.template_globals = 'rb-report-form.js'
        self.minimizable = True
        self.hidden = False
        self.modal = True

        tb_buttons = ExtToolBar()
        tb_buttons.layout = 'toolbar'

        btn_generate = ExtButton()
        btn_generate.text = u'Сформировать'
        btn_generate.handler = 'submitForm'

        btn_close = ExtButton()
        btn_close.text = u'Отмена'
        btn_close.handler = 'function(){ win.close();}'

        frm_info = ExtForm()
        frm_info.collapsible = True
        frm_info.layout = 'form'
        frm_info.title = u'Информация о отчете'
        frm_info.region = 'west'
        frm_info.base_cls = 'x-panel'
        frm_info.padding = '5'
        frm_info.header = True
        frm_info.width = 200
        frm_info.label_align = 'top'

        pnl_panel_1 = ExtPanel()
        pnl_panel_1.layout = 'fit'
        pnl_panel_1.region = 'center'
        pnl_panel_1.header = False

        tab_tappanel_1 = ExtTabPanel()
        tab_tappanel_1.active_tab = 0
        tab_tappanel_1.header = False
        tab_tappanel_1.region = 'south'
        tab_tappanel_1.deferred_render = False

        frm_params = ExtForm()
        frm_params.layout = 'form'
        frm_params.title = u'Параметры запроса'
        frm_params.region = 'center'
        frm_params.base_cls = 'x-panel'
        frm_params.padding = '5'
        frm_params.header = True
        frm_params.label_align = 'left'

        hdn_report_id = ExtHiddenField()
        hdn_report_id.name = 'report_id'

        frm_options = ExtForm()
        frm_options.label_width = 150
        frm_options.title = u'Дополнительные опции'
        frm_options.padding = '5px'
        frm_options.header = True
        frm_options.layout = 'form'

        cmb_format = ExtComboBox()
        cmb_format.display_field = 'name'
        cmb_format.label = u'Возвращаемый формат'
        cmb_format.name = 'result_format'
        cmb_format.auto_width = False
        cmb_format.editable = True
        cmb_format.value_field = 'id'
        cmb_format.mode = 'local'
        cmb_format.trigger_action = 'all'
        cmb_format.anchor = '100%'

        self.footer_bar = tb_buttons

        tb_buttons.items.extend([btn_generate, btn_close])
        frm_params.items.extend([hdn_report_id])
        frm_options.items.extend([cmb_format])
        tab_tappanel_1.items.extend([frm_params, frm_options])
        pnl_panel_1.items.extend([tab_tappanel_1])
        self.items.extend([frm_info, pnl_panel_1])

        self.tb_buttons = tb_buttons
        self.btn_generate = btn_generate
        self.btn_close = btn_close
        self.frm_info = frm_info
        self.pnl_panel_1 = pnl_panel_1
        self.tab_tappanel_1 = tab_tappanel_1
        self.frm_params = frm_params
        self.hdn_report_id = hdn_report_id
        self.frm_options = frm_options
        self.cmb_format = cmb_format

    @classmethod
    def build_win(cls, report_proxy, form_fields, submit_url):
        """
        Строим окно формирования отчета
        """

        win = ReportForm()
        win.submit_data_url = submit_url

        win.title = report_proxy.get_name()
        win.hdn_report_id.value = report_proxy.id
        win.frm_params.layout_config = {'align': 'stretch'}
        win.report_key = report_proxy.get_report_key()

        win.set_format_combobox_store(ReportType.get_enum(report_proxy.get_document_type()))

        for form_field in form_fields:
            field = cls._get_field(form_field)
            if not field:
                continue

            field.anchor = '100%'
            field.label = form_field['name']
            # Нужно как-то достать имя параметра. Для этого смотрим все параметры поля
            # Берём имя первого параметра(по идее у всех параметров должно быть одинаковое имя)
            field.name = form_field['params'][0]['name']#form_field['id']
            field.enable_key_events = True

            cont_outer = containers.ExtContainer(layout='hbox')
            cont_inner = containers.ExtContainer(layout='form', flex=1)

            cont_outer.items.append(cont_inner)
            cont_inner.items.append(field)

            field_type = int(form_field['type'])
            if field_type in (Param.STRING, Param.NUMBER, Param.DATE):#, Param.COMBO):
                cont_outer.items.append(buttons.ExtButton(
                    handler='function(){ addValue("%s");}' % field.client_id,
                    icon_cls=Icons.ADD, client_id='btn-'+field.client_id,))

                if field_type in (Param.STRING, Param.NUMBER):
                    field.value = form_field['defaultType']

            win.frm_params.items.append(cont_outer)

        return win

    @classmethod
    def _get_field(cls, param):

        field_type = int(param['type'])

        if field_type == Param.STRING:
            field = ExtStringField()
        elif field_type == Param.NUMBER:
            field = ExtNumberField()
        elif field_type == Param.DATE:
            field = ExtDateField(hide_today_btn=True)
        elif field_type == Param.BOOLEAN:
            field = ExtCheckBox()
#        elif field_type == Param.COMBO:
#            field = ExtComboBox(display_field='text',
#                    value_field='id', trigger_action=ExtComboBox.ALL)
#            data = {}
#            field.store = ExtDataStore(data)
        elif field_type == Param.DICTIONARY:
            field = ExtDictSelectField(hide_edit_trigger=True)

            if not param['typeValue']:
                return

            field.pack = param['typeValue']
        else:
            raise Exception('type "%s" is not define in class TypeField' % param['type'])

        return field
