## 
##
## Installation 
##
set(CPACK_PACKAGE_NAME                  "Yayi")
set(CPACK_PACKAGE_DESCRIPTION_SUMMARY   "Yayi: a generic mathematical morphology research and development framework")
set(CPACK_PACKAGE_VENDOR                "Raffi Enficiaud")
set(CPACK_PACKAGE_DESCRIPTION_FILE      "${YAYI_root_dir}/LICENSE_1_0.txt")
set(CPACK_RESOURCE_FILE_LICENSE         "${YAYI_root_dir}/LICENSE_1_0.txt")
set(CPACK_PACKAGE_VERSION               ${YAYI_VERSION})
set(CPACK_PACKAGE_VERSION_MAJOR         ${YAYI_MAJOR})
set(CPACK_PACKAGE_VERSION_MINOR         ${YAYI_MINOR})
set(CPACK_PACKAGE_VERSION_PATCH         ${YAYI_SUBMINOR})
set(CPACK_PACKAGE_INSTALL_DIRECTORY     "Yayi ${CPACK_PACKAGE_VERSION}")
set(CPACK_PACKAGE_CONTACT               "raffi.enficiaud@free.fr")

<<<<<<< HEAD
set(CPACK_COMPONENTS_ALL core python)
set(CPACK_COMPONENT_APPLICATIONS_DISPLAY_NAME   "Applications")
set(CPACK_COMPONENT_PYTHON_DISPLAY_NAME         "Python exports")
set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME      "Libraries")
=======
set(CPACK_COMPONENTS_ALL libraries headers python)
set(CPACK_COMPONENT_PYTHON_DISPLAY_NAME         "Python package")
set(CPACK_COMPONENT_LIBRARIES_DISPLAY_NAME      "Precompiled C++ libraries")
>>>>>>> 9fdfc925c301f1d4f5ba35cb2812fc7a716e3d56
set(CPACK_COMPONENT_HEADERS_DISPLAY_NAME        "C++ Headers")

set(CPACK_COMPONENT_LIBRARIES_DESCRIPTION       "Static / dynamic libraries used to build programs with Yayi")
set(CPACK_COMPONENT_HEADERS_DESCRIPTION         "C/C++ header files of Yayi")
set(CPACK_COMPONENT_PYTHON_DESCRIPTION          "Python shared libraries wrapping the functionalities of Yayi")

set(CPACK_COMPONENT_HEADERS_DEPENDS             libraries)
set(CPACK_COMPONENT_PYTHON_DEPENDS              libraries)

set(CPACK_COMPONENT_LIBRARIES_GROUP                 "Development")
set(CPACK_COMPONENT_HEADERS_GROUP                   "Development")
set(CPACK_COMPONENT_GROUP_DEVELOPMENT_DESCRIPTION   "All the tools/files you need for developing C/C++ programs with Yayi")

set(CPACK_ALL_INSTALL_TYPES Full Developer Python)
set(CPACK_COMPONENT_LIBRARIES_INSTALL_TYPES         Python Developer Full)
set(CPACK_COMPONENT_HEADERS_INSTALL_TYPES           Developer Full)
set(CPACK_COMPONENT_PYTHON_INSTALL_TYPES            Python Full)


if(WIN32 AND NOT UNIX)
  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
  #set(CPACK_PACKAGE_ICON                "")
  #set(CPACK_NSIS_INSTALLED_ICON_NAME    "")
  set(CPACK_NSIS_DISPLAY_NAME           "${CPACK_PACKAGE_INSTALL_DIRECTORY}")
  set(CPACK_NSIS_HELP_LINK              "http:////raffi.enficiaud.free.fr")
  set(CPACK_NSIS_URL_INFO_ABOUT         "http:////raffi.enficiaud.free.fr")
  set(CPACK_NSIS_CONTACT                "raffi.enficiaud@free.fr")
  set(CPACK_NSIS_MODIFY_PATH            ON)
else()
  set(CPACK_STRIP_FILES                 TRUE)
  set(CPACK_SOURCE_STRIP_FILES          TRUE)
endif()


#message(STATUS "debian_dependencies are ${debian_dependencies}")

# debian package generation
if(UNIX AND NOT APPLE)

  set(CPACK_GENERATOR DEB)
  set(CPACK_DEBIAN_PACKAGE_DEPENDS)
  
  list(LENGTH debian_dependencies debian_dependencies_lenght)
  if(${debian_dependencies_lenght} GREATER 0)
    list(GET debian_dependencies 0 CPACK_DEBIAN_PACKAGE_DEPENDS)
    list(REMOVE_AT debian_dependencies 0)
  endif()
  
  foreach(var LISTS debian_dependencies)
    set(CPACK_DEBIAN_PACKAGE_DEPENDS "${CPACK_DEBIAN_PACKAGE_DEPENDS}, ${var}")
  endforeach()
  
  #set(CPACK_DEBIAN_PACKAGE_DEPENDS "libc6 (>= 2.3.1-6), libgcc1 (>= 1:3.4.2-12), python2.6, libboost-program-options1.40.0 (>= 1.40.0)")
    
endif()
include(CPack)
