# Example of an ETL Chains using GDAL/OGR Python wrappers as input/output

[etl]
chains = input_gml_file|convert_to_geojson_feature|output_std,
         input_gml_file_to_array|convert_to_geojson_collection|tolowercase_filter|output_file

# Any OGR input, like shapefiles etc
[input_gml_file]
class = inputs.ogrinput.OgrInput
data_source = input/cities.gml
source_format = GML
source_options = {'GDAL_CACHEMAX': '64', 'CPL_DEBUG': 'OFF'}
output_format = ogr_feature
# data_source = PG: host=localhost dbname='bag' user='postgres' password='postgres'
# source_format = PostgreSQL
# sql = select * from adres

# GML into array of OGR Feature objects
[input_gml_file_to_array]
class = inputs.ogrinput.OgrInput
data_source = input/cities.gml
source_format = GML
output_format = ogr_feature_array

[convert_to_geojson_feature]
class = filters.formatconverter.FormatConverter
input_format = ogr_feature
output_format = geojson_feature

[convert_to_geojson_collection]
class = filters.formatconverter.FormatConverter
input_format = ogr_feature_array
output_format = geojson_collection

[tolowercase_filter]
class = tolowerfilter.ToLowerFilter

[output_std]
class = outputs.standardoutput.StandardOutput

[output_file]
class = outputs.fileoutput.FileOutput
file_path = output/cities.geojson

