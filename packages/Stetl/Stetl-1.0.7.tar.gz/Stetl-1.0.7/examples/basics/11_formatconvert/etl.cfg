# Trivial use of convert filter: convert XML DOM (etree_doc) to string and back.

[etl]
chains = input_xml_file|convert_xml_to_string|convert_string_to_xml|output_xml_file,
         input_complex_xml_file|convert_to_json|output_json_file,
         input_gml_sf_file|convert_to_geojson|output_geojson_file

# XML to String and back
[input_xml_file]
class = inputs.fileinput.XmlFileInput
file_path = input/cities.xml

[convert_xml_to_string]
class = filters.formatconverter.FormatConverter
input_format = etree_doc
output_format = string

[convert_string_to_xml]
class = filters.formatconverter.FormatConverter
input_format = string
output_format = etree_doc

[output_xml_file]
class = outputs.fileoutput.FileOutput
file_path = output/cities.xml

# XML to JSON
[input_complex_xml_file]
class = inputs.fileinput.XmlFileInput
file_path = input/building-dutch-bag.xml

[convert_to_json]
class = filters.formatconverter.FormatConverter
input_format = etree_doc
output_format = struct

[output_json_file]
class = outputs.fileoutput.FileOutput
file_path = output/building-dutch.json

# GML to GeoJSON
[input_gml_sf_file]
class = inputs.fileinput.XmlFileInput
file_path = input/cities.gml

# The GML must be a simple features collection
[convert_to_geojson]
class = filters.formatconverter.FormatConverter
input_format = etree_doc
output_format = geojson_collection
converter_args = {
    'root_tag': 'FeatureCollection',
    'feature_tag': 'featureMember',
    'feature_id_attr': 'fid'
    }

[output_geojson_file]
class = outputs.fileoutput.FileOutput
file_path = output/cities-gjson.json

