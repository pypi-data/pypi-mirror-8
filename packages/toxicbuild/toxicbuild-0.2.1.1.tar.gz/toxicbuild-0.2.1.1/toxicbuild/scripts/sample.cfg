# -*- coding: utf-8 -*-
# ex: set syntax=python:

# This is a sample buildmaster config file. It must be installed as
# 'master.cfg' in your buildmaster's base directory.

# Including here the pythonpath directory which is located at toxicbuild
# basedir in the sys.path, so we can put our scripts there and import
# it here
import sys
sys.path.append('../pythonpath')

# Basic info about the project you will maintain here.
PROJECT_NAME = 'toxicbuild'
# source url for your git repository. By now, toxicbuild only works with git
TOXICBUILD_SOURCE = 'https://git.gitorious.org/toxicbuild/toxicbuild.git'
# branches that will have schedulers configured
BRANCHES = ['master']
POLLINTERVAL = 300


# This is the dictionary that the buildmaster pays attention to. We also use
# a shorter alias to save typing.
c = BuildmasterConfig = {}

# To avoid no builder errors. Without multiMaster buildbot complains about
# starting without builders configured. Our builders will be configured
# on runtime, remember? This is the purpose of toxicbuild, after all. :)
c['multiMaster'] = True

####### BUILDSLAVES

# The 'slaves' list defines the set of recognized buildslaves. Each element is
# a BuildSlave object, specifying a unique slave name and password.  The same
# slave name and password must be configured on the slave.

from buildbot.buildslave import BuildSlave

slaves = [BuildSlave("easyslave", "dummypass")]
slavenames = [s.slavename for s in slaves]

c['slaves'] = slaves

# 'slavePortnum' defines the TCP port to listen on for connections from slaves.
# This must match the value configured into the buildslaves (with their
# --master option)
c['slavePortnum'] = 9989


####### CHANGESOURCES

# the 'change_source' setting tells the buildmaster how it should find out
# about source code changes.  Here we import GitPoller from toxicbuild.changes.
# To use toxicbuild we need to use some poller from toxicbuild.changes.

from toxicbuild.changes.gitpoller import GitPoller

toxicbuild_source = GitPoller(
    TOXICBUILD_SOURCE,
    workdir='%s-workdir' % PROJECT_NAME,
    project=PROJECT_NAME, pollinterval=POLLINTERVAL,
    branches=BRANCHES)
c['change_source'] = [toxicbuild_source]

####### SCHEDULERS

# Configure the Schedulers, which decide how to react to incoming changes.  In this
# case, just kick off a 'runtests' build

from buildbot.changes import filter
from buildbot.schedulers.forcesched import ForceScheduler
from toxicbuild.schedulers.basic import ToxicSingleBranchScheduler

schedulers = []

for branch in BRANCHES:
    branch_scheduler = ToxicSingleBranchScheduler(
        name="%s-scheduler" % branch, change_filter=filter.ChangeFilter(
            branch=branch, project=PROJECT_NAME),
        treeStableTimer=None,
        builderNames=[])
    schedulers.append(branch_scheduler)

force_scheduler = ForceScheduler(
    name="Force",
    builderNames=[])

schedulers.append(force_scheduler)
c['schedulers'] = schedulers

####### STATUS TARGETS

# 'status' is a list of Status Targets. The results of each build will be
# pushed to these targets. buildbot/status/*.py has a variety to choose from,
# including web pages, email senders, and IRC bots.

c['status'] = []

from buildbot.status import html
from buildbot.status.web import authz, auth

authz_cfg=authz.Authz(
    # change any of these to True to enable; see the manual for more
    # options
    auth=auth.BasicAuth([("toxicbuild","toxicbuild")]),
    gracefulShutdown = False,
    forceBuild = 'auth', # use this to test your slave once it is set up
    forceAllBuilds = False,
    pingBuilder = False,
    stopBuild = False,
    stopAllBuilds = False,
    cancelPendingBuild = False,
)
c['status'].append(html.WebStatus(http_port=8010, authz=authz_cfg))

####### PROJECT IDENTITY

# the 'title' string will appear at the top of this buildbot
# installation's html.WebStatus home page (linked to the
# 'titleURL') and is embedded in the title of the waterfall HTML page.

c['title'] = "ToxicBuild"
c['titleURL'] = "https://launchpad.net/pyflakes"

# the 'buildbotURL' string should point to the location where the buildbot's
# internal web server (usually the html.WebStatus page) is visible. This
# typically uses the port number set in the Waterfall 'status' entry, but
# with an externally-visible host name which the buildbot cannot figure out
# without some help.

c['buildbotURL'] = "http://localhost:8010/"

####### DB URL

c['db'] = {
    # This specifies what database buildbot uses to store its state.  You can leave
    # this at its default for all but the largest installations.
    'db_url' : "sqlite:///state.sqlite",
    'toxicbuild_db_url' : "sqlite:///toxicbuild.sqlite",
}
