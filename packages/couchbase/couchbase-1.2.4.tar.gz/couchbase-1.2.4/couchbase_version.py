#!/usr/bin/env python

import subprocess
import datetime
import sys
import os.path
import warnings

class CantInvokeGit(Exception): pass
class VersionNotFound(Exception): pass

verfile = os.path.join(
    os.path.dirname(__file__),
    os.path.join("couchbase", "_version.py"))

def get_version():
    """
    Returns the version from the generated version file without actually
    loading it (and thus trying to load the extension module).
    """
    if not os.path.exists(verfile):
        raise VersionNotFound(verfile + " does not exist")
    fp = open(verfile, "r")
    vline = None
    for x in fp.readlines():
        x = x.rstrip()
        if not x:
            continue
        if not x.startswith("__version__"):
            continue

        vline = x.split('=')[1]
        break
    if not vline:
        raise VersionNotFound("version file present but has no contents")

    return vline.strip().rstrip().replace("'", '')

def gen_version():
    """
    Generate a version based on git tag info. This will write the
    couchbase/_version.py file. If not inside a git tree it will raise a
    CantInvokeGit exception - which is normal (and squashed by setup.py) if
    we are running from a tarball
    """
    if not os.path.exists(os.path.join(os.path.dirname(__file__), ".git")):
        raise CantInvokeGit("Not a git build")

    try:
        po = subprocess.Popen(("git", "describe", "--tags", "--long", "--always"),
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE)
    except OSError as e:
        raise CantInvokeGit(e)

    stdout, stderr = po.communicate()
    if po.returncode != 0:
        raise CantInvokeGit("Couldn't invoke git describe", stderr)

    try:
        # Python 3
        stdout = str(stdout.rstrip(), 'utf-8')
    except TypeError:
        stdout = str(stdout.rstrip())

    info = stdout.split('-')
    sha1 = info[-1]
    try:
        ncommits = int(info[-2])
        basevers = '-'.join(info[:-2])
        # Make the version string itself
        if not ncommits:
            vstr = basevers
        else:
            vstr = stdout

    except IndexError:
        warnings.warn("Malformed tag '{0}'".format(stdout))
        vstr = "0.0.0-UNKNOWN-" + stdout

    fp = open(verfile, "w")
    fp.write('''
# This file automatically generated by
#   {path}
# at
#   {now}
__version__ = '{vstr}'
'''.format(path=__file__,
           now=datetime.datetime.now().isoformat(' '),
           vstr=vstr))

    fp.close()

if __name__ == "__main__":
    cmd = sys.argv[1]
    if cmd == "show":
        print(get_version())
    elif cmd == "make":
        gen_version()
        print(get_version())
    else:
        raise Exception("Command must be 'show' or 'make'")
