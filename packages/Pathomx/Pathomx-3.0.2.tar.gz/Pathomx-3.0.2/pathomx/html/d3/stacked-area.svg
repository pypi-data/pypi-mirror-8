@extends("d3/base.svg")
@require(htmlbase, figure)

@def styles():
<style><![CDATA[

body{font-family: Arial, sans-serif;font-size:10px;}
.axis path,.axis line {fill: none;stroke:#b6b6b6;shape-rendering: crispEdges;}
/*.tick line{fill:none;stroke:none;}*/
.tick text{fill:#000;}
g.journal.active{cursor:pointer;}
text.label{font-size:12px;font-weight:bold;cursor:pointer;}
text.value{font-size:12px;font-weight:bold;fill:#000;}

text { 
fill:#000;
}



]]></style>
@end

        
@def script():
<script>

// Zeitgeist
function stacked_area(id, data) {
idxy = getElementSize(id)
var width = idxy[0],
    height = idxy[1];
    
var margin = {top: 50, right: 200, bottom: 50, left: 50};
    //width = width - margin.left - margin.right,
    //height = height - margin.top - margin.bottom;
    
var width_d = width - margin.left - margin.right,
    height_d = height - margin.top - margin.bottom;

var names = d3.keys(data[0]['y'])

var parseDate = d3.time.format("%y").parse,
    formatPercent = d3.format(".0%"),
    formatYear = d3.format("0000");

var s_range = [
        0,
        d3.max(data, function(d) { var values = Object.keys(d.y).map(function(key){ return d.y[key]; }); return d3.sum(values); } ),
        ]


var x = d3.scale.linear()
    .range([0, width_d])
    .domain(d3.extent(data, function(d) { return d.x; }));

var y = d3.scale.linear()
    .range([height_d, 0])
    .domain(s_range);

var color = d3.scale.category20().domain(names);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom")
    .tickFormat(formatYear);

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left");
//    .tickFormat(formatPercent);

var area = d3.svg.area()
    .x(function(d) { return x(d.x); })
    .y0(function(d) { return y(d.y0); })
    .y1(function(d) { return y(d.y0 + d.y); });

var stack = d3.layout.stack()
    .values(function(d) { return d.values; });


var svg = d3.select(id)
    .attr("width", width)
    .attr("height", height)
    .attr('viewBox','0 0 ' + width + ' ' + height)
    .attr('preserveAspectRatio','xMidYMid')
    
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  var stackdata = stack(color.domain().map(function(name) {
    return {
      name: name,
      values: data.map(function(d) {
        return {x: d['x'], y: d['y'][name]}
      })
    };
  }));

  var datapoint = svg.selectAll(".datapoint")
      .data(stackdata)
    .enter().append("g")
      .attr("class", "datapoint");

  datapoint.append("path")
      .attr("class", "area")
      .attr("d", function(d) { return area(d.values); })
      .style("fill", function(d) { return color(d.name); });

  datapoint.append("text")
      .datum(function(d) { return {name: d.name, value: d.values[d.values.length - 1]}; })
      .attr("transform", function(d) { return "translate(" + x(d.value.x) + "," + y(d.value.y0 + d.value.y / 2) + ")"; })
      .attr("x", +6)
      .attr("dy", ".35em")
      .text(function(d) { return d.name; });

  svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height_d + ")")
      .call(xAxis);

  svg.append("g")
      .attr("class", "y axis")
      .call(yAxis);


}
</script>
@end


@def generate():
    @#...
    <script>
        id = 'svg';
        data = [
            @for k,v in figure['data'].items():
                {
                'x':@k!s,
                'y':{
                @for n,i in v:
                    "@n!s": @i!s,
                @endfor
                    },
                },
            @endfor
            ];
            
        function _pathomx_render_trigger(){
            stacked_area(id, data); 
        }
    </script>


@end
