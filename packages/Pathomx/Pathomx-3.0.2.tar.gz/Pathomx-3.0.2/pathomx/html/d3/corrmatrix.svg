@extends("d3/base.svg")
@require(htmlbase, figure)

@def styles():
<style><![CDATA[

svg {
  font-size: 14px;
}

.axis {
  shape-rendering: crispEdges;
}

.axis line {
  stroke: #ddd;
  stroke-width: .5px;
}

.axis path {
  display: none;
}

rect.extent {
  fill: #000;
  fill-opacity: .125;
  stroke: #fff;
}

rect.frame {
  fill: #fff;
  fill-opacity: .7;
  stroke: #aaa;
}

circle {
  fill: #ccc;
  fill-opacity: .8;
}

.legend circle {
  fill-opacity: 1;
}

.legend text {
  font-size: 18px;
  font-style: oblique;
}

.cell text {
  pointer-events: none;
}

.N {
  fill: #800;
}

.H {
  fill: #080;
}

.virginica {
  fill: #008;
}


]]></style>
@end

        
@def script():
<script type="text/javascript"><![CDATA[

function corrmatrix(id, data){

    idxy = getElementSize(id)
    var width_c = idxy[0],
        height_c = idxy[1];
    
    
    var margin = {top: 50, right: 50, bottom: 50, left: 50};
    var width = width_c - margin.left - margin.right,
        height = height_c - margin.top - margin.bottom;


    var size = 140,
          padding = 10,
          n = 4;
          
  var groups = d3.unique(data.map(function(d) { return d.group; })),
  
        entities = d3.keys( data[0] );
    entities.splice(0,1);
    
  //width=200*entities.length;
  //height=200*entities.length;          
  
  // Position scales.
  var x = {}, y = {};
  entities.forEach(function(entity) {

    // Coerce values to numbers.
    data.forEach(function(d) { d[entity] = +d[entity]; });

    var value = function(d) { return d[entity]; },
        domain = [d3.min(data, value), d3.max(data, value)],
        range = [padding / 2, size - padding / 2];
    
    x[entity] = d3.scale.linear().domain(domain).range(range);
    y[entity] = d3.scale.linear().domain(domain).range(range.reverse());
  });
  // Axes.
  var axis = d3.svg.axis()
      .ticks(5)
      .tickSize(size * n);

  // Brush.
  var brush = d3.svg.brush()
      .on("brushstart", brushstart)
      .on("brush", brush)
      .on("brushend", brushend);
      
  var color = d3.scale.category10();
 

  // Root panel.
    var svg = d3.select(id)//.insert("svg",':first-child')
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
            .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

  // Legend.
  var legend = svg.selectAll("g.legend")
      .data(groups)
    .enter().append("svg:g")
        .style("fill", function(d) { return color(d); })
      .attr("transform", function(d, i) { return "translate(" + (width-100) + "," + (i * 20) + ")"; });

  legend.append("svg:circle")
      .attr("class", String)
      .attr("r", 3);

  legend.append("svg:text")
      .attr("x", 12)
      .attr("dy", ".31em")
      .text(function(d) { return d; });

  // X-axis.
  svg.selectAll("g.x.axis")
      .data(entities)
    .enter().append("svg:g")
      .attr("class", "x axis")
      .attr("transform", function(d, i) { return "translate(" + i * size + ",0)"; })
      .each(function(d) { d3.select(this).call(axis.scale(x[d]).orient("bottom")); });

  // Y-axis.
  svg.selectAll("g.y.axis")
      .data(entities)
    .enter().append("svg:g")
      .attr("class", "y axis")
      .attr("transform", function(d, i) { return "translate(0," + i * size + ")"; })
      .each(function(d) { d3.select(this).call(axis.scale(y[d]).orient("right")); });

  // Cell and plot.
  var cell = svg.selectAll("g.cell")
      .data(cross(entities, entities))
    .enter().append("svg:g")
      .attr("class", "cell")
      .attr("transform", function(d) { return "translate(" + d.i * size + "," + d.j * size + ")"; })
      .each(plot);

  // Titles for the diagonal.
  cell.filter(function(d) { return d.i == d.j; }).append("svg:text")
      .attr("x", padding)
      .attr("y", padding)
      .attr("dy", ".71em")
      .text(function(d) { return d.x; });

  function plot(p) {
    var cell = d3.select(this);

    // Plot frame.
    cell.append("svg:rect")
        .attr("class", "frame")
        .attr("x", padding / 2)
        .attr("y", padding / 2)
        .attr("width", size - padding)
        .attr("height", size - padding);

    // Plot dots.
    cell.selectAll("circle")
        .data(data)
      .enter().append("svg:circle")
        .attr("cx", function(d) { return x[p.x](d[p.x]); })
        .attr("cy", function(d) { return y[p.y](d[p.y]); })
        .attr("r", 3)
        .style("fill", function(d) { return color(d.group); });

    // Plot brush.
    cell.call(brush.x(x[p.x]).y(y[p.y]));
  }

  // Clear the previously-active brush, if any.
  function brushstart(p) {
    if (brush.data !== p) {
      cell.call(brush.clear());
      brush.x(x[p.x]).y(y[p.y]).data = p;
    }
  }
  
  // Highlight the selected circles.
  function brush(p) {
    var e = brush.extent();
    svg.selectAll(".cell circle").style("fill", function(d) {
      return e[0][0] <= d[p.x] && d[p.x] <= e[1][0]
          && e[0][1] <= d[p.y] && d[p.y] <= e[1][1]
          ? color(d.group) : null;
    });
  }

  // If the brush is empty, select all circles.
  function brushend() {
    if (brush.empty()) svg.selectAll(".cell circle").style("fill", function(d) {
      return color(d.group);
    });
  }
  
  function cross(a, b) {
    var c = [], n = a.length, m = b.length, i, j;
    for (i = -1; ++i < n;) for (j = -1; ++j < m;) c.push({x: a[i], i: i, y: b[j], j: j});
    return c;
  }

}


  ]]></script>
@end


@def generate():
    @#...
    <script>
        id = 'svg';          
        var data = [
        @for g,row in figure['data']:
            {
                'group':'@g!s',
                @for k,v in row.items():
                    '@k!s':'@v!s',
                @endfor
            },
        @endfor
        ];

        function _pathomx_render_trigger(){
            corrmatrix(id, data);
        }        
</script>

@end
