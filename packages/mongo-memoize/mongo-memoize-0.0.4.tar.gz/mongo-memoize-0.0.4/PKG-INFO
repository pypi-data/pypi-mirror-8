Metadata-Version: 1.1
Name: mongo-memoize
Version: 0.0.4
Summary: A Python decorator library for caching function results in MongoDB
Home-page: http://github.com/ikuyamada/mongo-memoize/
Author: Ikuya Yamada
Author-email: ikuya@ikuya.net
License: Copyright 2014 Ikuya Yamada

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.

Description: mongo-memoize
        =============
        
        .. image:: https://badge.fury.io/py/mongo-memoize.png
            :target: http://badge.fury.io/py/mongo-memoize
        
        .. image:: https://travis-ci.org/ikuyamada/mongo-memoize.png?branch=master
            :target: https://travis-ci.org/ikuyamada/mongo-memoize
        
        A Python decorator library for instantly caching function results in MongoDB.
        
        Basic Usage
        -----------
        
        .. code-block:: python
        
            from mongo_memoize import memoize
        
            @memoize()
            def func():
                ...
        
        Customization
        -------------
        
        You can specify custom *serializer* and *key_generator*. *serializer* is used to serialize function results in order to convert them into formats that can be stored in MongoDB. *key_generator* generates a cache key from the function arguments. *PickleSerializer* and *PickleMD5KeyGenerator* are used by default.
        
        .. code-block:: python
        
            from mongo_memoize import memoize, NoopSerializer, PickleMD5KeyGenerator
        
            @memoize(serializer=NoopSerializer(), key_generator=PickleMD5KeyGenerator())
            def func():
                ...
        
        Using Capped Collection
        -----------------------
        
        *Capped collection* is a MongoDB feature which allows to limit the maximum size of the collection. By setting `capped=True`, a capped collection is created automatically.
        
        .. code-block:: python
        
            from mongo_memoize import memoize
        
            @memoize(capped=True, capped_size=100000000)
            def func():
                ...
        
        Documentation
        -------------
        
        http://mongo-memoize.readthedocs.org/
        
Platform: UNKNOWN
Classifier: Development Status :: 3 - Alpha
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Programming Language :: Python
Classifier: Programming Language :: Python :: 2.6
Classifier: Programming Language :: Python :: 2.7
