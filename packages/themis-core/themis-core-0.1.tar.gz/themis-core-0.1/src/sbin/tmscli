#!/usr/bin/env python
import getopt, sys, os
import json, yaml
from traceback import format_exc
from os.path import expanduser
from themis import *

# TODO: List available options for policy
# TODO: Create automatic pool on policy creation, should delete when a pool policy is deleted
# TODO: Should not delete a pool if exists a policy associate with
# TODO: get operations should accept only one key too, E.G.: tmsprov -g --metadata metadata:lab01.domain.tld manual_block
# TODO: List of metadata keys/values and features keys/values
# TODO: lock destination any with bypass

COMMON_HELP = """Cli interface for configuring themis
tmscli {args} {params} {param-name} [attr value [...]] [opts]
  
  -h/--help [policy|group|pool|features|metadata]          display usage 
  -a                                                       add operations
  -d                                                       delete operations
  -m                                                       modify operations
  -g                                                       get operations
  
  -f                  force execution, do not prompt
  {-d|-f} --flushdb   flush the redis default dabatase
  {-a} --resync       tries to resync the main config without restarting themismilter

  --json              json format without indentation - use for get operations
  --debug             debug useful information - use for all operations

  {-a} --remote {redis_server}            configure a remote redis server
  {-g} --search {wildcard_search}         search using wildcard parameters
  {-d} --del-lookup {wildcard_search}     del using wildcard parameters

  --policy {policy_name} {Source} {group_name|any} {Destination} {group_name|any} [attr01 value1 ...]      change policy params
  --group {group_name} {object01 object02 ...}                                                             change group members
  --pool {pool_name} {server01 server02 ...}                                                               configure a pool with servers
  --actionheaders {policy_name} {match_header} {regexp} {new_header} {new_value}                           add a new header if the regexp is validated in policy
  --features {global|feature_name} [feature] [value]                                                       configure custom or global features
  --metadata {metadata_namespace} {metadata_key} {metadata_value}                                          configure metadata
"""

POLICY_HELP = """Group command help
tmscli {args} --policy {policy_name} [attribute value [...]]
  
  --help policy                                                                                               display this help
  -a --policy {policy_name} {Source} {group_name|any} {Destination} {group_name|any} [attr01 value1 ...]      add a new group with defined members
  -d --policy {policy_name}                                                                                   delete an entire group by name
  -m --policy {policy_name} [attr01 value01 [attr02 value02] ...]                                             change/include or delete a group member
  -g --policy {policy_name|all}                                                                               get all groups or a particular one

  Permited policy attributes
  --------------------------
  %s

  Attribute values
  ----------------
  Type: %s
  JailBy: %s
  JailAction: %s

""" % ( '\n  '.join(Policy.POLICY_PARAMS), ', '.join(Policy.POLICY_TYPES), 
  ', '.join(Policy.JAILBY_VALUES), ', '.join(Policy.JAILACTION_VALUES) )

GROUP_HELP = """Policy command help
tmscli {args} --group {group_name} [group_members] [opts]
  
  --help group                                                    display this help
  -a --group {group_name} {group_members}                         add a new group with defined members
  -d --group {group_name}                                         delete an entire group by name
  -m --group {group_name} {group_members} [--remove]              change/include or delete a group member
  -g --group {group_name|all} [group_name02 [group_name03] ...]   get all groups or a particular one

  Group member syntax: @domain.tld account@domain.tld a.b.c.d/cidr
"""

POOL_HELP = """Pool cli help
tmscli {args} --pool {pool_name} [server_members] [opts]
  
  --help pool                                                     display this help
  -a --pool {pool_name} {server_members}                          add a new pool with defined server members
  -d --pool {pool_name}                                           delete an entire pool by name
  -m --pool {pool_name} {group_members} [--remove]                change/include or delete a pool member
  -g --pool {pool_name|all} [pool_name02 [pool_name03] ...]       get all pools or a particular one
"""

ACTIONHEADERS_HELP = """Actionheaders cli help
tmscli {args} --actionheaders {policy_name} [match_header regexp new_header new_header_value] [opts]
  
  --help actionheaders                                                                                                            display this help
  -a --actionheaders {policy_name} [match_header regexp new_header new_header_value [new_header02 new_header_value02] ...]        add a new matching header
  -d --actionheaders {policy_name} [--clear]                                                                                      delete a specific header or clear all headers
  -m --actionheaders {policy_name} [match_header regexp new_header new_header_value [new_header02 new_header_value02] ...]        change a header value

  --clear                                                                                                                         clear all action headers on policy
"""
FEATURES_HELP = """Features cli help
tmscli {args} --features {feature_namespace} [feature_name] [feature_value]
  
  --help features                                                                        display this help
  -a --features {feature_namespace|global}                                               add a new namespace configured with default features
  -d --features {feature_namespace|global}                                               delete an entire feature_namespace
  -m --features {feature_namespace|global} {feature_name} {feature_value}                change a feature value from a feature namespace
  -g --features {feature_namespace|global}                                               get all features of a feature namespace
  -g --features list                                                                     list all features keys and types 
"""

METADATA_HELP = """Metadata cli help
tmscli {args} --metadata {object_name} [metadata_key] [metadata_value]
  
  --help metadata                                                           display this help
  -a --metadata {object_name}                                               add a new metadata object
  -m --metadata {object_name} {metadata_key} {metadata_value}               change a metadata key from an object
  -g --metadata {object_name|all} [object_name02 [object_name03] ...]       get an object or several ones
  -g --metadata list                                                        list all metadata keys and types 
"""

REQUIRED_POLICY_PARAMS = ['Source', 'Destination']

class Prov(Policy):
  def __init__(self, rds):
    super(Prov, self).__init__(rds)
    self.data = None
    self.prettify = True

  def add_policy(self, dict_data):
    # Configure default values
    if not len(REQUIRED_POLICY_PARAMS) == len(set(REQUIRED_POLICY_PARAMS) & set(dict_data)):
      raise ValueError('Missing required values %s' % ', '.join(REQUIRED_POLICY_PARAMS))
    for default_key, value in DEFAULT_POLICY_PARAMS.items():
      if default_key not in dict_data:
        dict_data[default_key] = value

    jailspec = []  
    try:
      for spec in dict_data['JailSpec'].split(';'):
        if not spec:
          continue
        jailspec.append(tuple(spec.split(':')))
      dict_data['JailSpec'] = jailspec
    except Exception, e:
      raise ValueError('JailSpec in wrong format: %s' %e)

    dict_data['JailSpec'] = jailspec

    self._convert_strings_to_bool(dict_data)
    self.setpolicy(PolicyData(**dict_data))
    return 'SUCCESS'

  def modify_policy(self, dict_data):
    self._convert_strings_to_bool(dict_data)
    self.modifypolicy(dict_data)
    return 'SUCCESS'

  def delete_policy(self, policy_name):
    self.delete(policy_name)
    return 'SUCCESS'

  def get_policy(self, params):
    policies = {}
    if params[0] == 'all':
      policies = self.get_all_policies()
      for policy_name in policies:
        pdata = policies[policy_name]
        policies[pdata.policy_name] = pdata.as_dict
    else:
      for policy_name in params:
        pdata = self.getpolicy(policy_name)
        policies[policy_name] = pdata.as_dict
    self.data = policies
    return self.json

  def add_group(self, group_name, group_members):
    group_members = group_members[0].split()
    self.setgroup(group_name, group_members)
    return 'SUCCESS'

  def modify_group(self, group_name, group_members, add=True):
    if add:
      self.editgroup(group_name, group_members)
    else:
      self.delgroup_member(group_name, group_members)
    return 'SUCCESS'

  def delete_group(self, group_names):
    # TODO: Check to see if a group belongs to a policy, if it does, must not delete the registry
    deleted = []
    for group_name in group_names:
      try:
        self.delgroup(group_name)
      except GroupError:
        continue
      deleted.append(group_name)
    return 'SUCCESS - Group(s) deleted:', ', '.join(deleted)

  def get_group(self, params):
    if params[0] == 'all':
      groups = self.get_all_group_members()
    else:
      groups = {}
      for group_name in params:
        groups[group_name] = self.getgroup(group_name)
    self.data = groups
    return self.json

  def listpools(self):
    self.data = self.list_pools()
    return self.json

  def get_pool(self, params):
    pool = {}
    for pool_name in params:
      currentpool = self.getpool(pool_name)
      pool[pool_name] = currentpool[pool_name]
    self.data = pool
    return self.json

  # Override
  def get_features(self, namespace):
    self.data = super(Prov, self).get_features(namespace)
    if not self.data:
      return 'Could not find any features. Namespace: %s' % namespace
    return self.json

  def get_metadata(self, target):
    self.data = super(Prov, self).get_metadata(target)
    if not self.data:
      return 'Could not find any metadata account. Namespace: %s' % target
    return self.json

  def search_keys(self, target_object_name):
    self.data = super(Prov, self).search_keys(target_object_name)
    return self.json

  def _convert_strings_to_bool(self, dict_data):
    for key, value in dict_data.items():
      if value in ['TRUE', 'FALSE']:
        dict_data[key] = 'TRUE' == value or False

  @property
  def json(self):
    if self.prettify:
      return json.dumps(self.data, indent=2)
    else:
      return json.dumps(self.data)

def usage(error=None, usage_type='common'):
  if usage_type == 'common':
    print COMMON_HELP
  elif usage_type == 'policy':
    print POLICY_HELP
  elif usage_type == 'group':
    print GROUP_HELP
  elif usage_type == 'actionheaders':
    print ACTIONHEADERS_HELP
  elif usage_type == 'features':
    print FEATURES_HELP
  elif usage_type == 'metadata':
    print METADATA_HELP
  elif usage_type == 'pool':
    print POOL_HELP
  if not error:
    sys.exit(0)
  print 'ERROR -', error
  sys.exit(2)

def list_to_dict(lst, n=2, err=None):
  """group([0,3,4,10,2,3], 2) => [(0,3), (4,10), (2,3)]
  
  Group a list into consecutive n-tuples. Incomplete tuples are
  discarded e.g.
  
  >>> group(range(10), 3)
  [(0, 1, 2), (3, 4, 5), (6, 7, 8)]
  """
  if not len(lst) % 2 == 0:
    if not err:
      raise ValueError('Wrong parameters detected, expect: %s' % ', '.join(Policy.POLICY_PARAMS))
    else:
      raise ValueError('Wrong parameters detected, expect: %s' % err)
  return dict(zip(*[lst[i::n] for i in range(n)]))

if __name__ == '__main__':
  response, debug, exErr, rds = ['SUCCESS', False, '', None]
  if '--debug' in sys.argv:
    sys.argv.remove('--debug')
    debug = True

  # Initial config
  home_config = expanduser("~") + '/.tmscli.yaml'
  config_file = os.getenv('THEMIS_CFG')
  if not config_file:
    config_file = '/etc/themis/config.yaml'

  if not os.path.isfile(config_file):
    config_file = None

  try:
    with open(config_file) as f:
      config, _, _ = yaml.load_all(f)    
    rds = MarshalRedis(config['redis_server'], password=config['redis_password'])
  except Exception:
    if debug:
      print "Could not find THEMIS_CFG environment or /etc/themis/config.yaml file. Trying to use local config file instead: %s..." % (home_config)

    try:
      config = yaml.load(open(home_config))
      rds = MarshalRedis(config['redis_server'], password=config['redis_password'])
    except Exception, e:
      if debug:
        print 'Unable to open local config file: %s...' % e

  try:
    opts, args = getopt.getopt(sys.argv[1:], 'a:d:m:f:g:h', ['help', 'file', 'resync', 'flushdb', 'policy', 'group', 'pool', 
      'actionheaders', 'features', 'metadata', 'remote', 'del-lookup', 'search'])
    if not opts:
      usage()
    action = None
    callhelp = False
    for o, a in opts:
      #print o, a, args
      if o == '-a':
        action = 'add'
      elif o == '-m':
        action = 'modify'
      elif o == '-g':
        action = 'get'
      elif o == '-d':
        action = 'delete'
      elif o == '-h' or o == '--help':
        callhelp = True

      if callhelp:
        if args:
          usage(usage_type=args[0])
        usage()

      # Add a redis remote server
      if a == '--remote' and action == 'add':
        remote_server = 'localhost'
        if args:
          remote_server = args[0]

        config = dict(
          redis_server = remote_server,
          redis_password = ''
        )
        with open(home_config, 'w') as f:
          f.write(yaml.dump(config))
        print 'SUCCESS - Remote server "%s" configured properly' % remote_server
        sys.exit(0)
      
      if not rds:
        print 'Unable to find any proper config'
        sys.exit(2)

      prov = Prov(rds)
      if a == '--resync' and o == '-a':
        prov.redis.hset('config:themis:resync', 'config_file', config_file)
        print response, '- Resync set'
        sys.exit(0)
      elif a == '--flushdb' and o == '-f':
        prov.redis.flushdb()
        print response, '- flush executed successfuly'
        sys.exit(0)
      elif a == '--flushdb' and action == 'delete':
        question = raw_input('Are you sure you want to drop all data from redis? Press [Y/N]\n')
        if question == 'Y':
          prov.redis.flushdb()
          print response, '- flush executed successfuly'
        sys.exit(0)

      if not args:
        usage()

      if '--json' in args:
        args.remove('--json')
        prov.prettify = False

      if 'any' in args and action in ['modify', 'delete']:
        raise ValueError('Could not change system group "any"')

      target_object_name = args[0]
      args.remove(target_object_name)

      if a == '--policy':
        if action in ['add', 'modify']:
          # Check for policy name and prevent wrong parameters
          if target_object_name in prov.POLICY_PARAMS:
            print 'Missing policy name'
            sys.exit(2)

          if action == 'modify':
            args = list_to_dict(args)
            args['policy_name'] = target_object_name
            print prov.modify_policy(args)
            sys.exit(0)

          # Check for required keys
          for reqkey in REQUIRED_POLICY_PARAMS:
            if reqkey not in args:
              print 'Required key not found:', reqkey, 'Required Keys:', ', '.join(REQUIRED_POLICY_PARAMS)
              sys.exit(2)

          args = list_to_dict(args)
          args['policy_name'] = target_object_name
          print prov.add_policy(args)
        elif action == 'get':
          args.append(target_object_name)
          print prov.get_policy(args)

        elif action == 'delete':
          print prov.delete_policy(target_object_name)
        else:
          usage(usage_type='policy')
        sys.exit(0)

      elif a == '--group':
        if action == 'add':
          prov.add_group(target_object_name, args)
          print response
        elif action == 'get':
          args.append(target_object_name)
          print prov.get_group(args)
        elif action == 'modify':
          add = True
          if '--remove' in args:
            args.remove('--remove')
            add = False
          print prov.modify_group(target_object_name, args, add=add)
        elif action == 'delete':
          args.append(target_object_name)
          print prov.delete_group(args)
        else:
          usage(usage_type='group')
      elif a == '--pool':
        if action == 'add':
          args = args[0].split()
          prov.addpool(target_object_name, args)
        elif action == 'modify':
          if '--remove' in args:
            args.remove('--remove')
            args = args[0].split()
            output = prov.remove_server_from_pool(target_object_name, args)
            response += ' - %s server(s) removed' % output
          else:
            args = args[0].split()
            prov.editpool(target_object_name, args)
        elif action == 'delete':
          prov.remove_pool(target_object_name)
        elif action == 'get':
          if target_object_name == 'all':
            response = prov.listpools()
          else:
            args.append(target_object_name)
            response = prov.get_pool(args)
        else:
          usage(usage_type='pool')
        print response
        sys.exit(0)
      elif a == '--actionheaders':
        if action in ['add', 'modify']:
          sourcehdr, rgxp = args[:2]
          actionheaders = list_to_dict(args[2:], err='policy_name, regexp, new_header01, new_value, new_header02, new_value, ...').items()
        if action == 'add':
          prov.add_actionheaders(target_object_name, sourcehdr, rgxp, actionheaders)
        elif action == 'modify':
          prov.modify_actionheaders(target_object_name, sourcehdr, rgxp, actionheaders)
        elif action == 'delete':
          sourcehdr = args[0]
          if sourcehdr == '--clear':
            prov.del_actionheaders(target_object_name, None, clear=True)
          else:
            prov.del_actionheaders(target_object_name, sourcehdr)
        else:
          usage(usage_type='actionheaders')
        print response
      elif a == '--features':
        if action == 'get':
          response = prov.get_features(target_object_name)
        elif action == 'add':
          prov.config_features(target_object_name, config_file)
        elif action == 'modify':
          feature, value = args
          prov.edit_features(target_object_name, feature, value)
        elif action == 'delete':
          prov.del_features(target_object_name)
        else:
          usage(usage_type='features')
        print response
      elif a == '--metadata':
        if action == 'get':
          response = prov.get_metadata(target_object_name)
        elif action == 'add':
          prov.add_default_metadata(target_object_name, config_file)
        elif action == 'modify':
          metadata_key, metadata_value = args
          prov.edit_metadata(target_object_name, metadata_key, metadata_value)
        else:
          usage(usage_type='metadata')
        print response
      elif a == '--del-lookup':
        if action == 'delete':
          # It will use scan to delete by wildcard
          print prov.lookup_delete(target_object_name, debug)
      elif a == '--search':
        if action == 'get':
          print prov.search_keys(target_object_name)

  except getopt.GetoptError, e:
    usage(e)
  except TypeError, e:
    exErr = e
  except ValueError, e:
    exErr = e
  except Exception, e:
    exErr = e
  finally:
    if exErr:
      print exErr
      stacktrace = format_exc()
      if debug and stacktrace:
        print stacktrace
      sys.exit(2)