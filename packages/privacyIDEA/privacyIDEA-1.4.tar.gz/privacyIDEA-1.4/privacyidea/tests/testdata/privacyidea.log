2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196154685184} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:12 ERROR {140196567545600} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:12 ERROR {140196567545600} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:12 ERROR {140196559152896} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:12 ERROR {140196559152896} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196550760192} [privacyidea.lib.tokenclass][getTokenInfo #766] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:18 ERROR {140196542367488} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196542367488} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196533974784} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196533974784} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196188256000} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196188256000} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196179863296} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:18 ERROR {140196179863296} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196171470592} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196171470592} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196163077888} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196163077888} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196154685184} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196154685184} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196567545600} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196567545600} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196559152896} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196559152896} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196550760192} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196550760192} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196542367488} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196542367488} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196533974784} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196533974784} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196188256000} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:19 ERROR {140196188256000} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196179863296} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196179863296} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196171470592} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196171470592} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196163077888} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196163077888} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196154685184} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196154685184} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196567545600} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:20 ERROR {140196567545600} [privacyidea.lib.auth][is_client_in_basic_auth #58] Can not be determined: AddrFormatError('invalid IPNetwork ',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'realm', client None
2014/10/06 - 09:01:25 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'realm', client None
2014/10/06 - 09:01:27 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:27 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #875] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #875] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #876] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 845, in userassign
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1672, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #876] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 845, in userassign
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1672, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #881] token assignment failed! SelfserviceException(description=u'The token is already assigned to another user.', id=807)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #881] token assignment failed! SelfserviceException(description=u'The token is already assigned to another user.', id=807)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #882] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 868, in userassign
    raise SelfserviceException(_("The token is already assigned "
SelfserviceException: ERR807: The token is already assigned to another user.

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userassign #882] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 868, in userassign
    raise SelfserviceException(_("The token is already assigned "
SelfserviceException: ERR807: The token is already assigned to another user.

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userunassign #925] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userunassign #925] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userunassign #926] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 905, in userunassign
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1722, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userunassign #926] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 905, in userunassign
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1722, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdelete #971] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdelete #971] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdelete #972] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 955, in userdelete
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1731, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdelete #972] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 955, in userdelete
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1731, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:28 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdisable #1014] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdisable #1014] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdisable #1015] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 999, in userdisable
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1704, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userdisable #1015] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 999, in userdisable
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1704, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userenable #1059] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userenable #1059] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userenable #1060] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1043, in userenable
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1713, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you to'
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][userenable #1060] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1043, in userenable
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1713, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you to'
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][usergetSerialByOtp #818] policy failed: PolicyException(description='The policy settings do not allow you to request a serial by OTP!', id=410)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][usergetSerialByOtp #818] policy failed: PolicyException(description='The policy settings do not allow you to request a serial by OTP!', id=410)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][usergetSerialByOtp #819] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 797, in usergetSerialByOtp
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1695, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you to'
PolicyException: ERR410: The policy settings do not allow you to request a serial by OTP!

2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.controllers.selfservice][usergetSerialByOtp #819] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 797, in usergetSerialByOtp
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1695, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you to'
PolicyException: ERR410: The policy settings do not allow you to request a serial by OTP!

2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:29 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][searchQuery #362] exception TypeError("int() argument must be a string or a number, not 'NoneType'",)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][searchQuery #362] exception TypeError("int() argument must be a string or a number, not 'NoneType'",)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][searchQuery #363] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/lib/auditmodules/sqlaudit.py", line 342, in searchQuery
    limit = int(rp_dict.get('rp', 15))
TypeError: int() argument must be a string or a number, not 'NoneType'

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][searchQuery #363] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/lib/auditmodules/sqlaudit.py", line 342, in searchQuery
    limit = int(rp_dict.get('rp', 15))
TypeError: int() argument must be a string or a number, not 'NoneType'

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][log #205] exception InterfaceError('(InterfaceError) Error binding parameter 3 - probably unsupported type.',)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][log #205] exception InterfaceError('(InterfaceError) Error binding parameter 3 - probably unsupported type.',)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][log #206] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/lib/auditmodules/sqlaudit.py", line 197, in log
    self.session.commit()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 768, in commit
    self.transaction.commit()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 370, in commit
    self._prepare_impl()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 350, in _prepare_impl
    self.session.flush()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 1907, in flush
    self._flush(objects)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 2025, in _flush
    transaction.rollback(_capture_exception=True)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/util/langhelpers.py", line 57, in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 1989, in _flush
    flush_context.execute()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/unitofwork.py", line 371, in execute
    rec.execute(self)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/unitofwork.py", line 524, in execute
    uow
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/persistence.py", line 64, in save_obj
    mapper, table, insert)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/persistence.py", line 600, in _emit_insert_statements
    execute(statement, params)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 727, in execute
    return meth(self, multiparams, params)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/sql/elements.py", line 322, in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 824, in _execute_clauseelement
    compiled_sql, distilled_params
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 954, in _execute_context
    context)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 1116, in _handle_dbapi_exception
    exc_info
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/util/compat.py", line 189, in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 947, in _execute_context
    context)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/default.py", line 435, in do_execute
    cursor.execute(statement, parameters)
InterfaceError: (InterfaceError) Error binding parameter 3 - probably unsupported type. u'INSERT INTO pidea_audit (date, signature, action, success, serial, token_type, user, realm, administrator, action_detail, info, privacyidea_server, client, loglevel, clearance_level) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)' ('2014-10-06 09:01:30.282562', '', u'system/delPolicy', {u'privacyidea.Policy.self01.scope': True, u'privacyidea.Policy.self01.user': True, u'privacyidea.Policy.self01.active': True, u'privacyidea.Policy.self01.action': True, u'privacyidea.Policy.self01.time': True, u'privacyidea.Policy.self01.realm': True, u'privacyidea.Policy.self01.client': True}, '', '', '', '', u'superadmin', '', u'self01', 'puckel', None, 'INFO', 0)

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.lib.auditmodules.sqlaudit][log #206] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/lib/auditmodules/sqlaudit.py", line 197, in log
    self.session.commit()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 768, in commit
    self.transaction.commit()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 370, in commit
    self._prepare_impl()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 350, in _prepare_impl
    self.session.flush()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 1907, in flush
    self._flush(objects)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 2025, in _flush
    transaction.rollback(_capture_exception=True)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/util/langhelpers.py", line 57, in __exit__
    compat.reraise(exc_type, exc_value, exc_tb)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/session.py", line 1989, in _flush
    flush_context.execute()
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/unitofwork.py", line 371, in execute
    rec.execute(self)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/unitofwork.py", line 524, in execute
    uow
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/persistence.py", line 64, in save_obj
    mapper, table, insert)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/orm/persistence.py", line 600, in _emit_insert_statements
    execute(statement, params)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 727, in execute
    return meth(self, multiparams, params)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/sql/elements.py", line 322, in _execute_on_connection
    return connection._execute_clauseelement(self, multiparams, params)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 824, in _execute_clauseelement
    compiled_sql, distilled_params
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 954, in _execute_context
    context)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 1116, in _handle_dbapi_exception
    exc_info
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/util/compat.py", line 189, in raise_from_cause
    reraise(type(exception), exception, tb=exc_tb)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/base.py", line 947, in _execute_context
    context)
  File "/home/cornelius/src/virtual/local/lib/python2.7/site-packages/sqlalchemy/engine/default.py", line 435, in do_execute
    cursor.execute(statement, parameters)
InterfaceError: (InterfaceError) Error binding parameter 3 - probably unsupported type. u'INSERT INTO pidea_audit (date, signature, action, success, serial, token_type, user, realm, administrator, action_detail, info, privacyidea_server, client, loglevel, clearance_level) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)' ('2014-10-06 09:01:30.282562', '', u'system/delPolicy', {u'privacyidea.Policy.self01.scope': True, u'privacyidea.Policy.self01.user': True, u'privacyidea.Policy.self01.active': True, u'privacyidea.Policy.self01.action': True, u'privacyidea.Policy.self01.time': True, u'privacyidea.Policy.self01.realm': True, u'privacyidea.Policy.self01.client': True}, '', '', '', '', u'superadmin', '', u'self01', 'puckel', None, 'INFO', 0)

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userhistory #539] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userhistory #539] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userhistory #540] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 512, in userhistory
    'userhistory', param, self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1768, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userhistory #540] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 512, in userhistory
    'userhistory', param, self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1768, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1352] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1352] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1353] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1289, in userinit
    options={'token_num': user_token_count})
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1788, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1353] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1289, in userinit
    options={'token_num': user_token_count})
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1788, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #641] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #641] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #642] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 622, in userresync
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1632, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #642] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 622, in userresync
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1632, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][__after__ #279] failed with error: SelfserviceException(description='When running in selftest, you need to specify a selftest_user!', id=807)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][__after__ #279] failed with error: SelfserviceException(description='When running in selftest, you need to specify a selftest_user!', id=807)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][__after__ #280] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 251, in __after__
    raise SelfserviceException("When running in selftest,"
SelfserviceException: ERR807: When running in selftest, you need to specify a selftest_user!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][__after__ #280] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 251, in __after__
    raise SelfserviceException("When running in selftest,"
SelfserviceException: ERR807: When running in selftest, you need to specify a selftest_user!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #591] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #591] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #592] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 574, in userreset
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1623, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #592] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 574, in userreset
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1623, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #598] error resetting token with serial None: ParameterError(description="Missing parameter: 'serial'", id=905)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #598] error resetting token with serial None: ParameterError(description="Missing parameter: 'serial'", id=905)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #599] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 576, in userreset
    serial = getParam(param, "serial", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'serial'

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.controllers.selfservice][userreset #599] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 576, in userreset
    serial = getParam(param, "serial", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'serial'

2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:30 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #641] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #641] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #642] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 622, in userresync
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1632, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #642] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 622, in userresync
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1632, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #648] error resyncing token with serial N/A:ParameterError(description="Missing parameter: 'serial'", id=905)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #648] error resyncing token with serial N/A:ParameterError(description="Missing parameter: 'serial'", id=905)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #649] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 624, in userresync
    serial = getParam(param, "serial", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'serial'

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #649] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 624, in userresync
    serial = getParam(param, "serial", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'serial'

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #648] error resyncing token with serial XXXX:TokenAdminError(description='no token found!', id=1102)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #648] error resyncing token with serial XXXX:TokenAdminError(description='no token found!', id=1102)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #649] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 628, in userresync
    if (True == isTokenOwner(serial, self.authUser)):
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/token.py", line 694, in isTokenOwner
    raise TokenAdminError("no token found!", id=1102)
TokenAdminError: ERR1102: no token found!

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][userresync #649] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 628, in userresync
    if (True == isTokenOwner(serial, self.authUser)):
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/token.py", line 694, in isTokenOwner
    raise TokenAdminError("no token found!", id=1102)
TokenAdminError: ERR1102: no token found!

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #688] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #688] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #689] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 670, in usersetmpin
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1641, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #689] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 670, in usersetmpin
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1641, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #694] Error setting the mOTP PIN ParameterError(description="Missing parameter: 'pin'", id=905)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #694] Error setting the mOTP PIN ParameterError(description="Missing parameter: 'pin'", id=905)
2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #695] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 672, in usersetmpin
    pin = getParam(param, "pin", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'pin'

2014/10/06 - 09:01:32 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetmpin #695] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 672, in usersetmpin
    pin = getParam(param, "pin", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'pin'

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #750] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #750] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #751] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 716, in usersetpin
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1614, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #751] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 716, in usersetpin
    self.authUser)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1614, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #756] Error setting OTP PIN: ParameterError(description="Missing parameter: 'userpin'", id=905)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #756] Error setting OTP PIN: ParameterError(description="Missing parameter: 'userpin'", id=905)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #757] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 718, in usersetpin
    userPin = getParam(param, "userpin", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'userpin'

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][usersetpin #757] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 718, in usersetpin
    userPin = getParam(param, "userpin", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'userpin'

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'myDefRealm', client None
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'myDefRealm', client None
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1186] calling method .token_call of user root failed! ParameterError(description="Missing parameter: 'type'", id=905)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1186] calling method .token_call of user root failed! ParameterError(description="Missing parameter: 'type'", id=905)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1187] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1093, in token_call
    typ = getParam(param, "type", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'type'

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1187] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1093, in token_call
    typ = getParam(param, "type", required)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/util.py", line 105, in getParam
    raise ParameterError("Missing parameter: %r" % which, id=905)
ParameterError: ERR905: Missing parameter: 'type'

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1143] user User(login=u'root', realm=u'myDefRealm', conf='' ::resolverUid:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': '0'}, resolverConf:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': (u'/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd', u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes', u'myDefRes')}) not authorized to call token_call
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1143] user User(login=u'root', realm=u'myDefRealm', conf='' ::resolverUid:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': '0'}, resolverConf:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': (u'/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd', u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes', u'myDefRes')}) not authorized to call token_call
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1179] policy failed: PolicyException(description=u"user User(login=u'root', realm=u'myDefRealm', conf='' ::resolverUid:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': '0'}, resolverConf:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': (u'/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd', u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes', u'myDefRes')}) not authorized to call token_call", id=410)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1179] policy failed: PolicyException(description=u"user User(login=u'root', realm=u'myDefRealm', conf='' ::resolverUid:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': '0'}, resolverConf:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': (u'/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd', u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes', u'myDefRes')}) not authorized to call token_call", id=410)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1180] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1145, in token_call
    % (self.authUser, method))
PolicyException: ERR410: user User(login=u'root', realm=u'myDefRealm', conf='' ::resolverUid:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': '0'}, resolverConf:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': (u'/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd', u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes', u'myDefRes')}) not authorized to call token_call

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][token_call #1180] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1145, in token_call
    % (self.authUser, method))
PolicyException: ERR410: user User(login=u'root', realm=u'myDefRealm', conf='' ::resolverUid:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': '0'}, resolverConf:{u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes': (u'/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd', u'privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes', u'myDefRes')}) not authorized to call token_call

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][userwebprovision #1524] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][userwebprovision #1524] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][userwebprovision #1525] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1395, in userwebprovision
    options={'token_num': user_token_count})
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1746, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.controllers.selfservice][userwebprovision #1525] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1395, in userwebprovision
    options={'token_num': user_token_count})
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1746, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow you '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:33 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:34 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1352] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:34 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1352] policy failed: PolicyException(description='The policy settings do not allow you to issue this request!', id=410)
2014/10/06 - 09:01:34 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1353] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1289, in userinit
    options={'token_num': user_token_count})
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1788, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:34 ERROR {140122318927680} [privacyidea.controllers.selfservice][userinit #1353] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/selfservice.py", line 1289, in userinit
    options={'token_num': user_token_count})
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1788, in checkPolicyPre
    raise PolicyException(_('The policy settings do not allow '
PolicyException: ERR410: The policy settings do not allow you to issue this request!

2014/10/06 - 09:01:34 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:34 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'cornelius', realm u'sqlrealm', client None
2014/10/06 - 09:01:35 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'cornelius', realm u'sqlrealm', client None
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][delResolver #670] error deleting resolver: Exception('"Resolver u\'reso1\'  still in use by the realms: [u\'realm1\']" !',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][delResolver #670] error deleting resolver: Exception('"Resolver u\'reso1\'  still in use by the realms: [u\'realm1\']" !',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][delResolver #671] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 660, in delResolver
    raise Exception('%r !' % err)
Exception: "Resolver u'reso1'  still in use by the realms: [u'realm1']" !

2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][delResolver #671] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 660, in delResolver
    raise Exception('%r !' % err)
Exception: "Resolver u'reso1'  still in use by the realms: [u'realm1']" !

2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1055] error saving policy: Exception(u'The name of the policy must not be empty',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1055] error saving policy: Exception(u'The name of the policy must not be empty',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1056] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1010, in setPolicy
    raise Exception(_("The name of the policy must not be empty"))
Exception: The name of the policy must not be empty

2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1056] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1010, in setPolicy
    raise Exception(_("The name of the policy must not be empty"))
Exception: The name of the policy must not be empty

2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1045] failed: policy with empty name or action {'active': None, 'client': None, 'realm': u'None', 'name': u'asdasd', 'time': None, 'action': u'', 'scope': u'None', 'user': None}
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1045] failed: policy with empty name or action {'active': None, 'client': None, 'realm': u'None', 'name': u'asdasd', 'time': None, 'action': u'', 'scope': u'None', 'user': None}
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1055] error saving policy: Exception('setPolicy failed: name and action required!',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1055] error saving policy: Exception('setPolicy failed: name and action required!',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1056] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1050, in setPolicy
    raise Exception('setPolicy failed: name and action required!')
Exception: setPolicy failed: name and action required!

2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1056] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1050, in setPolicy
    raise Exception('setPolicy failed: name and action required!')
Exception: setPolicy failed: name and action required!

2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][getResolver #717] error getting resolver: Exception('[getResolver] missing resolver name',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][getResolver #717] error getting resolver: Exception('[getResolver] missing resolver name',)
2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][getResolver #718] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 706, in getResolver
    raise Exception("[getResolver] missing resolver name")
Exception: [getResolver] missing resolver name

2014/10/06 - 09:01:38 ERROR {140122318927680} [privacyidea.controllers.system][getResolver #718] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 706, in getResolver
    raise Exception("[getResolver] missing resolver name")
Exception: [getResolver] missing resolver name

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][__before__ #135] u'importPolicy': policy exception PolicyException(description='Policy check failed. You are not allowed to write system config.', id=410)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][__before__ #135] u'importPolicy': policy exception PolicyException(description='Policy check failed. You are not allowed to write system config.', id=410)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][__before__ #136] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 129, in __before__
    self.Policy.checkPolicyPre('system', action)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1847, in checkPolicyPre
    "to %s system config.") % actions[method])
PolicyException: ERR410: Policy check failed. You are not allowed to write system config.

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][__before__ #136] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 129, in __before__
    self.Policy.checkPolicyPre('system', action)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/log.py", line 95, in wrapper
    f_result = func(*args, **kwds)
  File "/home/cornelius/src/privacyidea/privacyidea/lib/policy.py", line 1847, in checkPolicyPre
    "to %s system config.") % actions[method])
PolicyException: ERR410: Policy check failed. You are not allowed to write system config.

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #336] error saving config: ParameterError(description='Required parameters: value', id=905)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #336] error saving config: ParameterError(description='Required parameters: value', id=905)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #337] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 304, in setConfig
    raise ParameterError("Required parameters: value")
ParameterError: ERR905: Required parameters: value

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #337] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 304, in setConfig
    raise ParameterError("Required parameters: value")
ParameterError: ERR905: Required parameters: value

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #336] error saving config: ParameterError(description='Required parameters: value', id=905)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #336] error saving config: ParameterError(description='Required parameters: value', id=905)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #337] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 304, in setConfig
    raise ParameterError("Required parameters: value")
ParameterError: ERR905: Required parameters: value

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setConfig #337] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 304, in setConfig
    raise ParameterError("Required parameters: value")
ParameterError: ERR905: Required parameters: value

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][policies_flexi #1141] error in policy flexi: KeyError(None,)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][policies_flexi #1141] error in policy flexi: KeyError(None,)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][policies_flexi #1142] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1123, in policies_flexi
    reverse=reverse)
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1122, in <lambda>
    key=lambda policy: policy['cell'][sNames[sortname]],
KeyError: None

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][policies_flexi #1142] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1123, in policies_flexi
    reverse=reverse)
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1122, in <lambda>
    key=lambda policy: policy['cell'][sNames[sortname]],
KeyError: None

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1055] error saving policy: Exception(u'The name of the policy may only contain the characters a-zA-Z0-9_',)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1055] error saving policy: Exception(u'The name of the policy may only contain the characters a-zA-Z0-9_',)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1056] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1007, in setPolicy
    raise Exception(_("The name of the policy may only contain "
Exception: The name of the policy may only contain the characters a-zA-Z0-9_

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setPolicy #1056] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 1007, in setPolicy
    raise Exception(_("The name of the policy may only contain "
Exception: The name of the policy may only contain the characters a-zA-Z0-9_

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setDefault #258] commit failed: ParameterError(description='Usage: setDefault: parameters are        DefaultMaxFailCount        DefaultSyncWindow        DefaultCountWindow        DefaultOtpLen        DefaultResetFailCount        ', id=77)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setDefault #258] commit failed: ParameterError(description='Usage: setDefault: parameters are        DefaultMaxFailCount        DefaultSyncWindow        DefaultCountWindow        DefaultOtpLen        DefaultResetFailCount        ', id=77)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setDefault #259] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 252, in setDefault
    raise ParameterError("Usage: %s" % description, id=77)
ParameterError: ERR77: Usage: setDefault: parameters are        DefaultMaxFailCount        DefaultSyncWindow        DefaultCountWindow        DefaultOtpLen        DefaultResetFailCount        

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setDefault #259] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 252, in setDefault
    raise ParameterError("Usage: %s" % description, id=77)
ParameterError: ERR77: Usage: setDefault: parameters are        DefaultMaxFailCount        DefaultSyncWindow        DefaultCountWindow        DefaultOtpLen        DefaultResetFailCount        

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.lib.resolver][getResolverObject #451] unknown resolver class  
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.lib.resolver][getResolverObject #451] unknown resolver class  
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setRealm #886] "Failed to set realm with {u'resolvers': u'asdasd', u'realm': u'errorr'} " Exception("Error in resolver u'asdasd' please check the logfile!",)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setRealm #886] "Failed to set realm with {u'resolvers': u'asdasd', u'realm': u'errorr'} " Exception("Error in resolver u'asdasd' please check the logfile!",)
2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setRealm #887] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 873, in setRealm
    " logfile!" % resolver)
Exception: Error in resolver u'asdasd' please check the logfile!

2014/10/06 - 09:01:39 ERROR {140122318927680} [privacyidea.controllers.system][setRealm #887] Traceback (most recent call last):
  File "/home/cornelius/src/privacyidea/privacyidea/controllers/system.py", line 873, in setRealm
    " logfile!" % resolver)
Exception: Error in resolver u'asdasd' please check the logfile!

2014/10/06 - 09:01:41 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:41 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:01:41 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:41 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:01:41 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:01:41 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:11 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:11 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:11 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:11 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:11 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:11 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:12 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][checkPolicyPre #1554] got a policy: {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:13 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:28 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:28 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:28 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:28 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:02:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:02:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:14 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:14 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:14 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:14 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:14 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:14 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:44 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:46 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_autousercheck #599] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": [
         {
            "username": "passthru_user2", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "11", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "passthru_user1", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "10", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "user2", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "2202", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "remoteuser", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "12", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "user1", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "2201", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "7654321", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "300", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "k\u00f6lbel", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "1", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "root", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "root-def-passwd", 
            "mobile": "", 
            "userid": "0", 
            "phone": "", 
            "givenname": "root-def-passwd", 
            "email": ""
         }, 
         {
            "username": "horst", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "3", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "localuser", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "2", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "def", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "User", 
            "description": "def User,,,,", 
            "mobile": "", 
            "userid": "3001", 
            "phone": "", 
            "givenname": "def", 
            "email": ""
         }, 
         {
            "username": "samluser", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "Schenk", 
            "description": "Heinz Schenk, 404, +4917011111, 0897777, h.schenk@witzig.com", 
            "mobile": " +4917011111", 
            "userid": "3003", 
            "phone": " 0897777", 
            "givenname": "Heinz", 
            "email": " h.schenk@witzig.com"
         }, 
         {
            "username": "postgres", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "3002", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }
      ]
   }, 
   "id": 1
}

2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_autousercheck #599] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": [
         {
            "username": "passthru_user2", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "11", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "passthru_user1", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "10", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "user2", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "2202", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "remoteuser", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "12", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "user1", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "2201", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "7654321", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "300", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "k\u00f6lbel", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "1", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "root", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "root-def-passwd", 
            "mobile": "", 
            "userid": "0", 
            "phone": "", 
            "givenname": "root-def-passwd", 
            "email": ""
         }, 
         {
            "username": "horst", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "3", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "localuser", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "2", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }, 
         {
            "username": "def", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "User", 
            "description": "def User,,,,", 
            "mobile": "", 
            "userid": "3001", 
            "phone": "", 
            "givenname": "def", 
            "email": ""
         }, 
         {
            "username": "samluser", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "Schenk", 
            "description": "Heinz Schenk, 404, +4917011111, 0897777, h.schenk@witzig.com", 
            "mobile": " +4917011111", 
            "userid": "3003", 
            "phone": " 0897777", 
            "givenname": "Heinz", 
            "email": " h.schenk@witzig.com"
         }, 
         {
            "username": "postgres", 
            "useridresolver": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
            "surname": "", 
            "description": "", 
            "mobile": "", 
            "userid": "3002", 
            "phone": "", 
            "givenname": "", 
            "email": ""
         }
      ]
   }, 
   "id": 1
}

2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:47 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][checkFalse2 #455] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][checkFalse2 #455] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:48 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:49 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:49 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:49 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:49 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:49 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:49 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:50 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:52 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:53 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:53 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:53 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:53 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_checkTOtp #1180] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_checkTOtp #1180] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:54 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_checkTOtp #1198] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_checkTOtp #1198] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:55 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:56 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:56 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:56 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:56 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_failCount #1415] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": 1
   }, 
   "id": 1
}

2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_failCount #1415] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": 1
   }, 
   "id": 1
}

2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:58 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_resync2 #805] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": {
         "resultset": {
            "tokens": 1, 
            "pages": 1, 
            "pagesize": 1, 
            "page": 1
         }, 
         "data": [
            {
               "privacyIDEA.TokenId": 15, 
               "privacyIDEA.TokenType": "HMAC", 
               "privacyIDEA.MaxFail": 10, 
               "privacyIDEA.Isactive": true, 
               "User.username": "root", 
               "privacyIDEA.Userid": "0", 
               "privacyIDEA.FailCount": 0, 
               "privacyIDEA.IdResClass": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
               "privacyIDEA.TokenSerialnumber": "T3", 
               "privacyIDEA.TokenDesc": "TestToken3", 
               "privacyIDEA.Count": 40, 
               "privacyIDEA.IdResolver": "/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd", 
               "User.description": "root-def-passwd", 
               "User.userid": "0", 
               "privacyIDEA.CountWindow": 10, 
               "privacyIDEA.SyncWindow": 1000, 
               "privacyIDEA.OtpLen": 6, 
               "privacyIDEA.RealmNames": [
                  "mydefrealm"
               ], 
               "privacyIDEA.TokenInfo": "{\n\"count_auth\": 1, \n\"hashlib\": \"sha1\"\n}"
            }
         ]
      }
   }, 
   "id": 1
}

2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_resync2 #805] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": {
         "resultset": {
            "tokens": 1, 
            "pages": 1, 
            "pagesize": 1, 
            "page": 1
         }, 
         "data": [
            {
               "privacyIDEA.TokenId": 15, 
               "privacyIDEA.TokenType": "HMAC", 
               "privacyIDEA.MaxFail": 10, 
               "privacyIDEA.Isactive": true, 
               "User.username": "root", 
               "privacyIDEA.Userid": "0", 
               "privacyIDEA.FailCount": 0, 
               "privacyIDEA.IdResClass": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
               "privacyIDEA.TokenSerialnumber": "T3", 
               "privacyIDEA.TokenDesc": "TestToken3", 
               "privacyIDEA.Count": 40, 
               "privacyIDEA.IdResolver": "/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd", 
               "User.description": "root-def-passwd", 
               "User.userid": "0", 
               "privacyIDEA.CountWindow": 10, 
               "privacyIDEA.SyncWindow": 1000, 
               "privacyIDEA.OtpLen": 6, 
               "privacyIDEA.RealmNames": [
                  "mydefrealm"
               ], 
               "privacyIDEA.TokenInfo": "{\n\"count_auth\": 1, \n\"hashlib\": \"sha1\"\n}"
            }
         ]
      }
   }, 
   "id": 1
}

2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:03:59 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'samluser', realm u'mydefrealm', client None
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'samluser', realm u'mydefrealm', client None
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_totp_autosync #1309] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_totp_autosync #1309] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:00 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user u'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_totp_autosync #1314] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_totp_autosync #1314] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": true
   }, 
   "id": 0
}

2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_totp_resync #1240] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": {
         "resultset": {
            "tokens": 1, 
            "pages": 1, 
            "pagesize": 1, 
            "page": 1
         }, 
         "data": [
            {
               "privacyIDEA.TokenId": 15, 
               "privacyIDEA.TokenType": "TOTP", 
               "privacyIDEA.MaxFail": 10, 
               "privacyIDEA.Isactive": true, 
               "User.username": "root", 
               "privacyIDEA.Userid": "0", 
               "privacyIDEA.FailCount": 1, 
               "privacyIDEA.IdResClass": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
               "privacyIDEA.TokenSerialnumber": "TOTP", 
               "privacyIDEA.TokenDesc": "time based HMAC TestToken1", 
               "privacyIDEA.Count": 0, 
               "privacyIDEA.IdResolver": "/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd", 
               "User.description": "root-def-passwd", 
               "User.userid": "0", 
               "privacyIDEA.CountWindow": 10, 
               "privacyIDEA.SyncWindow": 200, 
               "privacyIDEA.OtpLen": 8, 
               "privacyIDEA.RealmNames": [
                  "mydefrealm"
               ], 
               "privacyIDEA.TokenInfo": "{\n\"timeShift\": \"0\", \n\"timeWindow\": \"300\", \n\"hashlib\": \"SHA1\", \n\"count_auth\": 1, \n\"timeStep\": \"30\"\n}"
            }
         ]
      }
   }, 
   "id": 1
}

2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.tests.functional.test_validate][test_totp_resync #1240] response Response: 200 OK
Cache-Control: no-cache
Content-Type: application/json; charset=utf-8
Pragma: no-cache
X-Frame-Options: SAMEORIGIN
{
   "version": "privacyIDEA 1.3.2dev3", 
   "jsonrpc": "2.0", 
   "result": {
      "status": true, 
      "value": {
         "resultset": {
            "tokens": 1, 
            "pages": 1, 
            "pagesize": 1, 
            "page": 1
         }, 
         "data": [
            {
               "privacyIDEA.TokenId": 15, 
               "privacyIDEA.TokenType": "TOTP", 
               "privacyIDEA.MaxFail": 10, 
               "privacyIDEA.Isactive": true, 
               "User.username": "root", 
               "privacyIDEA.Userid": "0", 
               "privacyIDEA.FailCount": 1, 
               "privacyIDEA.IdResClass": "privacyidea.lib.resolvers.PasswdIdResolver.IdResolver.myDefRes", 
               "privacyIDEA.TokenSerialnumber": "TOTP", 
               "privacyIDEA.TokenDesc": "time based HMAC TestToken1", 
               "privacyIDEA.Count": 0, 
               "privacyIDEA.IdResolver": "/home/cornelius/src/privacyidea/privacyidea/tests/testdata/def-passwd", 
               "User.description": "root-def-passwd", 
               "User.userid": "0", 
               "privacyIDEA.CountWindow": 10, 
               "privacyIDEA.SyncWindow": 200, 
               "privacyIDEA.OtpLen": 8, 
               "privacyIDEA.RealmNames": [
                  "mydefrealm"
               ], 
               "privacyIDEA.TokenInfo": "{\n\"timeShift\": \"0\", \n\"timeWindow\": \"300\", \n\"hashlib\": \"SHA1\", \n\"count_auth\": 1, \n\"timeStep\": \"30\"\n}"
            }
         ]
      }
   }, 
   "id": 1
}

2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:01 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:02 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:02 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:02 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:02 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:02 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:02 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2453] {}
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:04 ERROR {140122318927680} [privacyidea.lib.policy][check_auth_serial #2457] No policy scope=authorize, action=serial for user 'root', realm u'mydefrealm', client None
2014/10/06 - 09:04:05 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:05 ERROR {140122318927680} [privacyidea.model][wrapper #103] Error during logging of function createToken! __str__ returned non-string (type NoneType)
2014/10/06 - 09:04:05 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
2014/10/06 - 09:04:05 ERROR {140122318927680} [privacyidea.lib.tokenclass][getTokenInfo #768] getTokenInfo ValueError('No JSON object could be decoded',)
