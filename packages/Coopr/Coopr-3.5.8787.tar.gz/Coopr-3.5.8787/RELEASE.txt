We are pleased to announce the release of Coopr 3.5 (3.5.8787). Coopr is a collection of Python software packages that supports a diverse set of optimization capabilities for formulating and analyzing optimization models.

The following are highlights of this release:

- Modeling
   * Can now model bilevel programs
   * Can now model mathematical programs with equillibrium constraints
   * Added explicit support for model transformations

- Solvers
   * Updates for CBC, Cplex and Gurobi solvers
   * Added support for NEOS solvers (using Kestrel interface)
   * Added preliminary support for persistent solvers

- Other
   * Added the 'coopr.environ' package, which initializes Coopr plugins
   * Renamed 'coopr.plugins' to 'coopr.solvers'
   * Cleanup and code reviews of core coopr.pyomo components
   * The 'coopr' command contains better documentation of installed capabilities
   * The 'coopr_install' script is now recommended for installation on Linux and OS X 
   * MS Windows installers for Coopr 3.5 are coming soon ...

See https://software.sandia.gov/trac/coopr/wiki/Documentation for installation options and documentation for getting started with Coopr.  

Enjoy!

 - Coopr Developer Team
 - coopr-developers@googlecode.com
 - https://software.sandia.gov/trac/coopr/wiki/Documentation/Developers


-----------
About Coopr
-----------

Coopr is a collection of Python software packages that supports a diverse set of optimization capabilities for formulating and analyzing optimization models.

A key driver for Coopr development is Pyomo, an open source tool for modeling optimization applications in Python. Pyomo can be used to define symbolic problems, create concrete problem instances, and solve these instances with standard solvers. Thus, Pyomo provides a capability that is commonly associated with algebraic modeling languages.  Further, Coopr supports analysis and scripting within a full-featured programming language.

Coopr has also proven an effective framework for developing high-level optimization and analysis tools. For example, the PySP package provides generic solvers for stochastic programming.  PySP leverages the fact that Pyomo's modeling objects are embedded within a full-featured high-level programming language, which allows for transparent parallelization of subproblems using Python parallel communication libraries.

Coopr development is hosted by Sandia National Laboratories and COIN-OR:

 * https://projects.coin-or.org/Coopr
 * https://software.sandia.gov/coopr 

See http://groups.google.com/group/coopr-forum/ for online discussions of Coopr.
